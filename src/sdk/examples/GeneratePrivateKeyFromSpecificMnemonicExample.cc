// SPDX-License-Identifier: Apache-2.0
#include "MnemonicBIP39.h"
#include "PrivateKey.h"

#include <dotenv.h>
#include <iostream>
#include <string>

using namespace Hiero;

int main(int argc, char** argv)
{
  dotenv::init();

  const std::vector<std::string>& words = { "soccer", "loan", "bomb", "yard", "accuse", "doctor",
                                            "man",    "mean", "lawn", "wing", "swift",  "bread" };

  // Generate and print a 12-word BIP39 mnemonic
  MnemonicBIP39 mnemonicBip39 = MnemonicBIP39::initializeBIP39Mnemonic(words);
  std::cout << "12-word MnemonicBIP39 used for generation: " << std::endl;
  for (const std::string& word : words)
  {
    std::cout << word << " ";
  }
  std::cout << std::endl;

  // Generate and print a ED25519PrivateKey and ECDSAsecp256k1PrivateKey from the mnemonic with no passphrase
  std::unique_ptr<PrivateKey> ed25519PrivateKey = mnemonicBip39.toStandardEd25519PrivateKey();

  // Sample string of a key generated with the same mnemonic
  std::string_view javaOutputDerKey =
    "302E020100300506032B657004220420BA36ED3F60E3DA30B5DB6215461FAFFC2FCD066F385FD2261F74AB4E174E4591";

  // See if keys generated by mnemonic are the same with a generation of another SDK
  std::cout << "[C++]  Generated ED25519PrivateKey from mnemonic: " << ed25519PrivateKey->toStringDer() << std::endl;
  std::cout << "[Java] Generated ED25519PrivateKey from mnemonic: " << javaOutputDerKey << std::endl;

  return 0;
}

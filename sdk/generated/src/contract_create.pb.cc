// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_create.proto

#include "contract_create.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ContractCreateTransactionBody::ContractCreateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.constructorparameters_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.proxyaccountid_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.shardid_)*/nullptr
  , /*decltype(_impl_.realmid_)*/nullptr
  , /*decltype(_impl_.newrealmadminkey_)*/nullptr
  , /*decltype(_impl_.auto_renew_account_id_)*/nullptr
  , /*decltype(_impl_.gas_)*/int64_t{0}
  , /*decltype(_impl_.initialbalance_)*/int64_t{0}
  , /*decltype(_impl_.max_automatic_token_associations_)*/0
  , /*decltype(_impl_.decline_reward_)*/false
  , /*decltype(_impl_.initcodeSource_)*/{}
  , /*decltype(_impl_.staked_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ContractCreateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractCreateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractCreateTransactionBodyDefaultTypeInternal() {}
  union {
    ContractCreateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractCreateTransactionBodyDefaultTypeInternal _ContractCreateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_contract_5fcreate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_contract_5fcreate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_contract_5fcreate_2eproto = nullptr;

const uint32_t TableStruct_contract_5fcreate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.initialbalance_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.proxyaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.constructorparameters_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.shardid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.realmid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.newrealmadminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.max_automatic_token_associations_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.auto_renew_account_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.decline_reward_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.initcodeSource_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCreateTransactionBody, _impl_.staked_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ContractCreateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ContractCreateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_contract_5fcreate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025contract_create.proto\022\005proto\032\021basic_ty"
  "pes.proto\032\016duration.proto\"\337\004\n\035ContractCr"
  "eateTransactionBody\022\037\n\006fileID\030\001 \001(\0132\r.pr"
  "oto.FileIDH\000\022\022\n\010initcode\030\020 \001(\014H\000\022\034\n\010admi"
  "nKey\030\003 \001(\0132\n.proto.Key\022\013\n\003gas\030\004 \001(\003\022\026\n\016i"
  "nitialBalance\030\005 \001(\003\022,\n\016proxyAccountID\030\006 "
  "\001(\0132\020.proto.AccountIDB\002\030\001\022(\n\017autoRenewPe"
  "riod\030\010 \001(\0132\017.proto.Duration\022\035\n\025construct"
  "orParameters\030\t \001(\014\022\037\n\007shardID\030\n \001(\0132\016.pr"
  "oto.ShardID\022\037\n\007realmID\030\013 \001(\0132\016.proto.Rea"
  "lmID\022$\n\020newRealmAdminKey\030\014 \001(\0132\n.proto.K"
  "ey\022\014\n\004memo\030\r \001(\t\022(\n max_automatic_token_"
  "associations\030\016 \001(\005\022/\n\025auto_renew_account"
  "_id\030\017 \001(\0132\020.proto.AccountID\022-\n\021staked_ac"
  "count_id\030\021 \001(\0132\020.proto.AccountIDH\001\022\030\n\016st"
  "aked_node_id\030\022 \001(\003H\001\022\026\n\016decline_reward\030\023"
  " \001(\010B\020\n\016initcodeSourceB\013\n\tstaked_idB&\n\"c"
  "om.hederahashgraph.api.proto.javaP\001b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_contract_5fcreate_2eproto_deps[2] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
};
static ::_pbi::once_flag descriptor_table_contract_5fcreate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_contract_5fcreate_2eproto = {
    false, false, 723, descriptor_table_protodef_contract_5fcreate_2eproto,
    "contract_create.proto",
    &descriptor_table_contract_5fcreate_2eproto_once, descriptor_table_contract_5fcreate_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_contract_5fcreate_2eproto::offsets,
    file_level_metadata_contract_5fcreate_2eproto, file_level_enum_descriptors_contract_5fcreate_2eproto,
    file_level_service_descriptors_contract_5fcreate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_contract_5fcreate_2eproto_getter() {
  return &descriptor_table_contract_5fcreate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_contract_5fcreate_2eproto(&descriptor_table_contract_5fcreate_2eproto);
namespace proto {

// ===================================================================

class ContractCreateTransactionBody::_Internal {
 public:
  static const ::proto::FileID& fileid(const ContractCreateTransactionBody* msg);
  static const ::proto::Key& adminkey(const ContractCreateTransactionBody* msg);
  static const ::proto::AccountID& proxyaccountid(const ContractCreateTransactionBody* msg);
  static const ::proto::Duration& autorenewperiod(const ContractCreateTransactionBody* msg);
  static const ::proto::ShardID& shardid(const ContractCreateTransactionBody* msg);
  static const ::proto::RealmID& realmid(const ContractCreateTransactionBody* msg);
  static const ::proto::Key& newrealmadminkey(const ContractCreateTransactionBody* msg);
  static const ::proto::AccountID& auto_renew_account_id(const ContractCreateTransactionBody* msg);
  static const ::proto::AccountID& staked_account_id(const ContractCreateTransactionBody* msg);
};

const ::proto::FileID&
ContractCreateTransactionBody::_Internal::fileid(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.initcodeSource_.fileid_;
}
const ::proto::Key&
ContractCreateTransactionBody::_Internal::adminkey(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::AccountID&
ContractCreateTransactionBody::_Internal::proxyaccountid(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.proxyaccountid_;
}
const ::proto::Duration&
ContractCreateTransactionBody::_Internal::autorenewperiod(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::ShardID&
ContractCreateTransactionBody::_Internal::shardid(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.shardid_;
}
const ::proto::RealmID&
ContractCreateTransactionBody::_Internal::realmid(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.realmid_;
}
const ::proto::Key&
ContractCreateTransactionBody::_Internal::newrealmadminkey(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.newrealmadminkey_;
}
const ::proto::AccountID&
ContractCreateTransactionBody::_Internal::auto_renew_account_id(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.auto_renew_account_id_;
}
const ::proto::AccountID&
ContractCreateTransactionBody::_Internal::staked_account_id(const ContractCreateTransactionBody* msg) {
  return *msg->_impl_.staked_id_.staked_account_id_;
}
void ContractCreateTransactionBody::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_initcodeSource();
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    set_has_fileid();
    _impl_.initcodeSource_.fileid_ = fileid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.fileID)
}
void ContractCreateTransactionBody::clear_fileid() {
  if (_internal_has_fileid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.initcodeSource_.fileid_;
    }
    clear_has_initcodeSource();
  }
}
void ContractCreateTransactionBody::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void ContractCreateTransactionBody::clear_proxyaccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
}
void ContractCreateTransactionBody::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void ContractCreateTransactionBody::clear_shardid() {
  if (GetArenaForAllocation() == nullptr && _impl_.shardid_ != nullptr) {
    delete _impl_.shardid_;
  }
  _impl_.shardid_ = nullptr;
}
void ContractCreateTransactionBody::clear_realmid() {
  if (GetArenaForAllocation() == nullptr && _impl_.realmid_ != nullptr) {
    delete _impl_.realmid_;
  }
  _impl_.realmid_ = nullptr;
}
void ContractCreateTransactionBody::clear_newrealmadminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrealmadminkey_ != nullptr) {
    delete _impl_.newrealmadminkey_;
  }
  _impl_.newrealmadminkey_ = nullptr;
}
void ContractCreateTransactionBody::clear_auto_renew_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_account_id_ != nullptr) {
    delete _impl_.auto_renew_account_id_;
  }
  _impl_.auto_renew_account_id_ = nullptr;
}
void ContractCreateTransactionBody::set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_staked_id();
  if (staked_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staked_account_id));
    if (message_arena != submessage_arena) {
      staked_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staked_account_id, submessage_arena);
    }
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.staked_account_id)
}
void ContractCreateTransactionBody::clear_staked_account_id() {
  if (_internal_has_staked_account_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.staked_id_.staked_account_id_;
    }
    clear_has_staked_id();
  }
}
ContractCreateTransactionBody::ContractCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractCreateTransactionBody)
}
ContractCreateTransactionBody::ContractCreateTransactionBody(const ContractCreateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractCreateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.constructorparameters_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.shardid_){nullptr}
    , decltype(_impl_.realmid_){nullptr}
    , decltype(_impl_.newrealmadminkey_){nullptr}
    , decltype(_impl_.auto_renew_account_id_){nullptr}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.initialbalance_){}
    , decltype(_impl_.max_automatic_token_associations_){}
    , decltype(_impl_.decline_reward_){}
    , decltype(_impl_.initcodeSource_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.constructorparameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constructorparameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_constructorparameters().empty()) {
    _this->_impl_.constructorparameters_.Set(from._internal_constructorparameters(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_impl_.proxyaccountid_ = new ::proto::AccountID(*from._impl_.proxyaccountid_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_shardid()) {
    _this->_impl_.shardid_ = new ::proto::ShardID(*from._impl_.shardid_);
  }
  if (from._internal_has_realmid()) {
    _this->_impl_.realmid_ = new ::proto::RealmID(*from._impl_.realmid_);
  }
  if (from._internal_has_newrealmadminkey()) {
    _this->_impl_.newrealmadminkey_ = new ::proto::Key(*from._impl_.newrealmadminkey_);
  }
  if (from._internal_has_auto_renew_account_id()) {
    _this->_impl_.auto_renew_account_id_ = new ::proto::AccountID(*from._impl_.auto_renew_account_id_);
  }
  ::memcpy(&_impl_.gas_, &from._impl_.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.decline_reward_) -
    reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.decline_reward_));
  clear_has_initcodeSource();
  switch (from.initcodeSource_case()) {
    case kFileID: {
      _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
          from._internal_fileid());
      break;
    }
    case kInitcode: {
      _this->_internal_set_initcode(from._internal_initcode());
      break;
    }
    case INITCODESOURCE_NOT_SET: {
      break;
    }
  }
  clear_has_staked_id();
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContractCreateTransactionBody)
}

inline void ContractCreateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.constructorparameters_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.shardid_){nullptr}
    , decltype(_impl_.realmid_){nullptr}
    , decltype(_impl_.newrealmadminkey_){nullptr}
    , decltype(_impl_.auto_renew_account_id_){nullptr}
    , decltype(_impl_.gas_){int64_t{0}}
    , decltype(_impl_.initialbalance_){int64_t{0}}
    , decltype(_impl_.max_automatic_token_associations_){0}
    , decltype(_impl_.decline_reward_){false}
    , decltype(_impl_.initcodeSource_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.constructorparameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constructorparameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_initcodeSource();
  clear_has_staked_id();
}

ContractCreateTransactionBody::~ContractCreateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.ContractCreateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractCreateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.constructorparameters_.Destroy();
  _impl_.memo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.proxyaccountid_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.shardid_;
  if (this != internal_default_instance()) delete _impl_.realmid_;
  if (this != internal_default_instance()) delete _impl_.newrealmadminkey_;
  if (this != internal_default_instance()) delete _impl_.auto_renew_account_id_;
  if (has_initcodeSource()) {
    clear_initcodeSource();
  }
  if (has_staked_id()) {
    clear_staked_id();
  }
}

void ContractCreateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractCreateTransactionBody::clear_initcodeSource() {
// @@protoc_insertion_point(one_of_clear_start:proto.ContractCreateTransactionBody)
  switch (initcodeSource_case()) {
    case kFileID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.initcodeSource_.fileid_;
      }
      break;
    }
    case kInitcode: {
      _impl_.initcodeSource_.initcode_.Destroy();
      break;
    }
    case INITCODESOURCE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INITCODESOURCE_NOT_SET;
}

void ContractCreateTransactionBody::clear_staked_id() {
// @@protoc_insertion_point(one_of_clear_start:proto.ContractCreateTransactionBody)
  switch (staked_id_case()) {
    case kStakedAccountId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.staked_id_.staked_account_id_;
      }
      break;
    }
    case kStakedNodeId: {
      // No need to clear
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = STAKED_ID_NOT_SET;
}


void ContractCreateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.constructorparameters_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shardid_ != nullptr) {
    delete _impl_.shardid_;
  }
  _impl_.shardid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.realmid_ != nullptr) {
    delete _impl_.realmid_;
  }
  _impl_.realmid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newrealmadminkey_ != nullptr) {
    delete _impl_.newrealmadminkey_;
  }
  _impl_.newrealmadminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_account_id_ != nullptr) {
    delete _impl_.auto_renew_account_id_;
  }
  _impl_.auto_renew_account_id_ = nullptr;
  ::memset(&_impl_.gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.decline_reward_) -
      reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.decline_reward_));
  clear_initcodeSource();
  clear_staked_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCreateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.FileID fileID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 initialBalance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.initialbalance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID proxyAccountID = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxyaccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes constructorParameters = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_constructorparameters();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ShardID shardID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_shardid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RealmID realmID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_realmid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key newRealmAdminKey = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_newrealmadminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ContractCreateTransactionBody.memo"));
        } else
          goto handle_unusual;
        continue;
      // int32 max_automatic_token_associations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.max_automatic_token_associations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID auto_renew_account_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_renew_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes initcode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_initcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID staked_account_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_staked_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staked_node_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_set_staked_node_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool decline_reward = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.decline_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractCreateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.FileID fileID = 1;
  if (_internal_has_fileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fileid(this),
        _Internal::fileid(this).GetCachedSize(), target, stream);
  }

  // .proto.Key adminKey = 3;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // int64 gas = 4;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_gas(), target);
  }

  // int64 initialBalance = 5;
  if (this->_internal_initialbalance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_initialbalance(), target);
  }

  // .proto.AccountID proxyAccountID = 6 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::proxyaccountid(this),
        _Internal::proxyaccountid(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration autoRenewPeriod = 8;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // bytes constructorParameters = 9;
  if (!this->_internal_constructorparameters().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_constructorparameters(), target);
  }

  // .proto.ShardID shardID = 10;
  if (this->_internal_has_shardid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::shardid(this),
        _Internal::shardid(this).GetCachedSize(), target, stream);
  }

  // .proto.RealmID realmID = 11;
  if (this->_internal_has_realmid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::realmid(this),
        _Internal::realmid(this).GetCachedSize(), target, stream);
  }

  // .proto.Key newRealmAdminKey = 12;
  if (this->_internal_has_newrealmadminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::newrealmadminkey(this),
        _Internal::newrealmadminkey(this).GetCachedSize(), target, stream);
  }

  // string memo = 13;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ContractCreateTransactionBody.memo");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_memo(), target);
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_automatic_token_associations(), target);
  }

  // .proto.AccountID auto_renew_account_id = 15;
  if (this->_internal_has_auto_renew_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::auto_renew_account_id(this),
        _Internal::auto_renew_account_id(this).GetCachedSize(), target, stream);
  }

  // bytes initcode = 16;
  if (_internal_has_initcode()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_initcode(), target);
  }

  // .proto.AccountID staked_account_id = 17;
  if (_internal_has_staked_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::staked_account_id(this),
        _Internal::staked_account_id(this).GetCachedSize(), target, stream);
  }

  // int64 staked_node_id = 18;
  if (_internal_has_staked_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_staked_node_id(), target);
  }

  // bool decline_reward = 19;
  if (this->_internal_decline_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_decline_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractCreateTransactionBody)
  return target;
}

size_t ContractCreateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractCreateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes constructorParameters = 9;
  if (!this->_internal_constructorparameters().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_constructorparameters());
  }

  // string memo = 13;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .proto.Key adminKey = 3;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.AccountID proxyAccountID = 6 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxyaccountid_);
  }

  // .proto.Duration autoRenewPeriod = 8;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.ShardID shardID = 10;
  if (this->_internal_has_shardid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shardid_);
  }

  // .proto.RealmID realmID = 11;
  if (this->_internal_has_realmid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.realmid_);
  }

  // .proto.Key newRealmAdminKey = 12;
  if (this->_internal_has_newrealmadminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newrealmadminkey_);
  }

  // .proto.AccountID auto_renew_account_id = 15;
  if (this->_internal_has_auto_renew_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auto_renew_account_id_);
  }

  // int64 gas = 4;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas());
  }

  // int64 initialBalance = 5;
  if (this->_internal_initialbalance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_initialbalance());
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_automatic_token_associations());
  }

  // bool decline_reward = 19;
  if (this->_internal_decline_reward() != 0) {
    total_size += 2 + 1;
  }

  switch (initcodeSource_case()) {
    // .proto.FileID fileID = 1;
    case kFileID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.initcodeSource_.fileid_);
      break;
    }
    // bytes initcode = 16;
    case kInitcode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_initcode());
      break;
    }
    case INITCODESOURCE_NOT_SET: {
      break;
    }
  }
  switch (staked_id_case()) {
    // .proto.AccountID staked_account_id = 17;
    case kStakedAccountId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.staked_id_.staked_account_id_);
      break;
    }
    // int64 staked_node_id = 18;
    case kStakedNodeId: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractCreateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractCreateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractCreateTransactionBody::GetClassData() const { return &_class_data_; }


void ContractCreateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractCreateTransactionBody*>(&to_msg);
  auto& from = static_cast<const ContractCreateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractCreateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_constructorparameters().empty()) {
    _this->_internal_set_constructorparameters(from._internal_constructorparameters());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_internal_mutable_proxyaccountid()->::proto::AccountID::MergeFrom(
        from._internal_proxyaccountid());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_shardid()) {
    _this->_internal_mutable_shardid()->::proto::ShardID::MergeFrom(
        from._internal_shardid());
  }
  if (from._internal_has_realmid()) {
    _this->_internal_mutable_realmid()->::proto::RealmID::MergeFrom(
        from._internal_realmid());
  }
  if (from._internal_has_newrealmadminkey()) {
    _this->_internal_mutable_newrealmadminkey()->::proto::Key::MergeFrom(
        from._internal_newrealmadminkey());
  }
  if (from._internal_has_auto_renew_account_id()) {
    _this->_internal_mutable_auto_renew_account_id()->::proto::AccountID::MergeFrom(
        from._internal_auto_renew_account_id());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_initialbalance() != 0) {
    _this->_internal_set_initialbalance(from._internal_initialbalance());
  }
  if (from._internal_max_automatic_token_associations() != 0) {
    _this->_internal_set_max_automatic_token_associations(from._internal_max_automatic_token_associations());
  }
  if (from._internal_decline_reward() != 0) {
    _this->_internal_set_decline_reward(from._internal_decline_reward());
  }
  switch (from.initcodeSource_case()) {
    case kFileID: {
      _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
          from._internal_fileid());
      break;
    }
    case kInitcode: {
      _this->_internal_set_initcode(from._internal_initcode());
      break;
    }
    case INITCODESOURCE_NOT_SET: {
      break;
    }
  }
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractCreateTransactionBody::CopyFrom(const ContractCreateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractCreateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCreateTransactionBody::IsInitialized() const {
  return true;
}

void ContractCreateTransactionBody::InternalSwap(ContractCreateTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.constructorparameters_, lhs_arena,
      &other->_impl_.constructorparameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCreateTransactionBody, _impl_.decline_reward_)
      + sizeof(ContractCreateTransactionBody::_impl_.decline_reward_)
      - PROTOBUF_FIELD_OFFSET(ContractCreateTransactionBody, _impl_.adminkey_)>(
          reinterpret_cast<char*>(&_impl_.adminkey_),
          reinterpret_cast<char*>(&other->_impl_.adminkey_));
  swap(_impl_.initcodeSource_, other->_impl_.initcodeSource_);
  swap(_impl_.staked_id_, other->_impl_.staked_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCreateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fcreate_2eproto_getter, &descriptor_table_contract_5fcreate_2eproto_once,
      file_level_metadata_contract_5fcreate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ContractCreateTransactionBody*
Arena::CreateMaybeMessage< ::proto::ContractCreateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractCreateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freeze.proto

#include "freeze.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR FreezeTransactionBody::FreezeTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.update_file_)*/nullptr
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.starthour_)*/0
  , /*decltype(_impl_.startmin_)*/0
  , /*decltype(_impl_.endhour_)*/0
  , /*decltype(_impl_.endmin_)*/0
  , /*decltype(_impl_.freeze_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FreezeTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FreezeTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FreezeTransactionBodyDefaultTypeInternal() {}
  union {
    FreezeTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FreezeTransactionBodyDefaultTypeInternal _FreezeTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_freeze_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_freeze_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_freeze_2eproto = nullptr;

const uint32_t TableStruct_freeze_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.starthour_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.startmin_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.endhour_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.endmin_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.update_file_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.file_hash_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::FreezeTransactionBody, _impl_.freeze_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::FreezeTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_FreezeTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_freeze_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014freeze.proto\022\005proto\032\016duration.proto\032\017t"
  "imestamp.proto\032\021basic_types.proto\032\021freez"
  "e_type.proto\"\362\001\n\025FreezeTransactionBody\022\025"
  "\n\tstartHour\030\001 \001(\005B\002\030\001\022\024\n\010startMin\030\002 \001(\005B"
  "\002\030\001\022\023\n\007endHour\030\003 \001(\005B\002\030\001\022\022\n\006endMin\030\004 \001(\005"
  "B\002\030\001\022\"\n\013update_file\030\005 \001(\0132\r.proto.FileID"
  "\022\021\n\tfile_hash\030\006 \001(\014\022$\n\nstart_time\030\007 \001(\0132"
  "\020.proto.Timestamp\022&\n\013freeze_type\030\010 \001(\0162\021"
  ".proto.FreezeTypeB&\n\"com.hederahashgraph"
  ".api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_freeze_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_freeze_5ftype_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_freeze_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_freeze_2eproto = {
    false, false, 385, descriptor_table_protodef_freeze_2eproto,
    "freeze.proto",
    &descriptor_table_freeze_2eproto_once, descriptor_table_freeze_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_freeze_2eproto::offsets,
    file_level_metadata_freeze_2eproto, file_level_enum_descriptors_freeze_2eproto,
    file_level_service_descriptors_freeze_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_freeze_2eproto_getter() {
  return &descriptor_table_freeze_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_freeze_2eproto(&descriptor_table_freeze_2eproto);
namespace proto {

// ===================================================================

class FreezeTransactionBody::_Internal {
 public:
  static const ::proto::FileID& update_file(const FreezeTransactionBody* msg);
  static const ::proto::Timestamp& start_time(const FreezeTransactionBody* msg);
};

const ::proto::FileID&
FreezeTransactionBody::_Internal::update_file(const FreezeTransactionBody* msg) {
  return *msg->_impl_.update_file_;
}
const ::proto::Timestamp&
FreezeTransactionBody::_Internal::start_time(const FreezeTransactionBody* msg) {
  return *msg->_impl_.start_time_;
}
void FreezeTransactionBody::clear_update_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.update_file_ != nullptr) {
    delete _impl_.update_file_;
  }
  _impl_.update_file_ = nullptr;
}
void FreezeTransactionBody::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
FreezeTransactionBody::FreezeTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FreezeTransactionBody)
}
FreezeTransactionBody::FreezeTransactionBody(const FreezeTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FreezeTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_hash_){}
    , decltype(_impl_.update_file_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.starthour_){}
    , decltype(_impl_.startmin_){}
    , decltype(_impl_.endhour_){}
    , decltype(_impl_.endmin_){}
    , decltype(_impl_.freeze_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_hash().empty()) {
    _this->_impl_.file_hash_.Set(from._internal_file_hash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_update_file()) {
    _this->_impl_.update_file_ = new ::proto::FileID(*from._impl_.update_file_);
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::proto::Timestamp(*from._impl_.start_time_);
  }
  ::memcpy(&_impl_.starthour_, &from._impl_.starthour_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.freeze_type_) -
    reinterpret_cast<char*>(&_impl_.starthour_)) + sizeof(_impl_.freeze_type_));
  // @@protoc_insertion_point(copy_constructor:proto.FreezeTransactionBody)
}

inline void FreezeTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_hash_){}
    , decltype(_impl_.update_file_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.starthour_){0}
    , decltype(_impl_.startmin_){0}
    , decltype(_impl_.endhour_){0}
    , decltype(_impl_.endmin_){0}
    , decltype(_impl_.freeze_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FreezeTransactionBody::~FreezeTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.FreezeTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FreezeTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.update_file_;
  if (this != internal_default_instance()) delete _impl_.start_time_;
}

void FreezeTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FreezeTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FreezeTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.update_file_ != nullptr) {
    delete _impl_.update_file_;
  }
  _impl_.update_file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  ::memset(&_impl_.starthour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.freeze_type_) -
      reinterpret_cast<char*>(&_impl_.starthour_)) + sizeof(_impl_.freeze_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreezeTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 startHour = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.starthour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 startMin = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.startmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 endHour = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.endhour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 endMin = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.endmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileID update_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes file_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_file_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FreezeType freeze_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_freeze_type(static_cast<::proto::FreezeType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FreezeTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FreezeTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startHour = 1 [deprecated = true];
  if (this->_internal_starthour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_starthour(), target);
  }

  // int32 startMin = 2 [deprecated = true];
  if (this->_internal_startmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_startmin(), target);
  }

  // int32 endHour = 3 [deprecated = true];
  if (this->_internal_endhour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_endhour(), target);
  }

  // int32 endMin = 4 [deprecated = true];
  if (this->_internal_endmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_endmin(), target);
  }

  // .proto.FileID update_file = 5;
  if (this->_internal_has_update_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::update_file(this),
        _Internal::update_file(this).GetCachedSize(), target, stream);
  }

  // bytes file_hash = 6;
  if (!this->_internal_file_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_file_hash(), target);
  }

  // .proto.Timestamp start_time = 7;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .proto.FreezeType freeze_type = 8;
  if (this->_internal_freeze_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_freeze_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FreezeTransactionBody)
  return target;
}

size_t FreezeTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FreezeTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_hash = 6;
  if (!this->_internal_file_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_hash());
  }

  // .proto.FileID update_file = 5;
  if (this->_internal_has_update_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_file_);
  }

  // .proto.Timestamp start_time = 7;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // int32 startHour = 1 [deprecated = true];
  if (this->_internal_starthour() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starthour());
  }

  // int32 startMin = 2 [deprecated = true];
  if (this->_internal_startmin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_startmin());
  }

  // int32 endHour = 3 [deprecated = true];
  if (this->_internal_endhour() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_endhour());
  }

  // int32 endMin = 4 [deprecated = true];
  if (this->_internal_endmin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_endmin());
  }

  // .proto.FreezeType freeze_type = 8;
  if (this->_internal_freeze_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_freeze_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreezeTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FreezeTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreezeTransactionBody::GetClassData() const { return &_class_data_; }


void FreezeTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FreezeTransactionBody*>(&to_msg);
  auto& from = static_cast<const FreezeTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FreezeTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_hash().empty()) {
    _this->_internal_set_file_hash(from._internal_file_hash());
  }
  if (from._internal_has_update_file()) {
    _this->_internal_mutable_update_file()->::proto::FileID::MergeFrom(
        from._internal_update_file());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::proto::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_starthour() != 0) {
    _this->_internal_set_starthour(from._internal_starthour());
  }
  if (from._internal_startmin() != 0) {
    _this->_internal_set_startmin(from._internal_startmin());
  }
  if (from._internal_endhour() != 0) {
    _this->_internal_set_endhour(from._internal_endhour());
  }
  if (from._internal_endmin() != 0) {
    _this->_internal_set_endmin(from._internal_endmin());
  }
  if (from._internal_freeze_type() != 0) {
    _this->_internal_set_freeze_type(from._internal_freeze_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreezeTransactionBody::CopyFrom(const FreezeTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FreezeTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreezeTransactionBody::IsInitialized() const {
  return true;
}

void FreezeTransactionBody::InternalSwap(FreezeTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_hash_, lhs_arena,
      &other->_impl_.file_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreezeTransactionBody, _impl_.freeze_type_)
      + sizeof(FreezeTransactionBody::_impl_.freeze_type_)
      - PROTOBUF_FIELD_OFFSET(FreezeTransactionBody, _impl_.update_file_)>(
          reinterpret_cast<char*>(&_impl_.update_file_),
          reinterpret_cast<char*>(&other->_impl_.update_file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreezeTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_freeze_2eproto_getter, &descriptor_table_freeze_2eproto_once,
      file_level_metadata_freeze_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::FreezeTransactionBody*
Arena::CreateMaybeMessage< ::proto::FreezeTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FreezeTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

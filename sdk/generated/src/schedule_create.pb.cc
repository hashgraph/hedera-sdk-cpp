// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule_create.proto

#include "schedule_create.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ScheduleCreateTransactionBody::ScheduleCreateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scheduledtransactionbody_)*/nullptr
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.payeraccountid_)*/nullptr
  , /*decltype(_impl_.expiration_time_)*/nullptr
  , /*decltype(_impl_.wait_for_expiry_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleCreateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleCreateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleCreateTransactionBodyDefaultTypeInternal() {}
  union {
    ScheduleCreateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleCreateTransactionBodyDefaultTypeInternal _ScheduleCreateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_schedule_5fcreate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_schedule_5fcreate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_schedule_5fcreate_2eproto = nullptr;

const uint32_t TableStruct_schedule_5fcreate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _impl_.scheduledtransactionbody_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _impl_.payeraccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _impl_.expiration_time_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleCreateTransactionBody, _impl_.wait_for_expiry_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ScheduleCreateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ScheduleCreateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_schedule_5fcreate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025schedule_create.proto\022\005proto\032\021basic_ty"
  "pes.proto\032\017timestamp.proto\032\"schedulable_"
  "transaction_body.proto\"\376\001\n\035ScheduleCreat"
  "eTransactionBody\022C\n\030scheduledTransaction"
  "Body\030\001 \001(\0132!.proto.SchedulableTransactio"
  "nBody\022\014\n\004memo\030\002 \001(\t\022\034\n\010adminKey\030\003 \001(\0132\n."
  "proto.Key\022(\n\016payerAccountID\030\004 \001(\0132\020.prot"
  "o.AccountID\022)\n\017expiration_time\030\005 \001(\0132\020.p"
  "roto.Timestamp\022\027\n\017wait_for_expiry\030\r \001(\010B"
  "&\n\"com.hederahashgraph.api.proto.javaP\001b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_schedule_5fcreate_2eproto_deps[3] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_schedulable_5ftransaction_5fbody_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_schedule_5fcreate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_schedule_5fcreate_2eproto = {
    false, false, 407, descriptor_table_protodef_schedule_5fcreate_2eproto,
    "schedule_create.proto",
    &descriptor_table_schedule_5fcreate_2eproto_once, descriptor_table_schedule_5fcreate_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_schedule_5fcreate_2eproto::offsets,
    file_level_metadata_schedule_5fcreate_2eproto, file_level_enum_descriptors_schedule_5fcreate_2eproto,
    file_level_service_descriptors_schedule_5fcreate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_schedule_5fcreate_2eproto_getter() {
  return &descriptor_table_schedule_5fcreate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_schedule_5fcreate_2eproto(&descriptor_table_schedule_5fcreate_2eproto);
namespace proto {

// ===================================================================

class ScheduleCreateTransactionBody::_Internal {
 public:
  static const ::proto::SchedulableTransactionBody& scheduledtransactionbody(const ScheduleCreateTransactionBody* msg);
  static const ::proto::Key& adminkey(const ScheduleCreateTransactionBody* msg);
  static const ::proto::AccountID& payeraccountid(const ScheduleCreateTransactionBody* msg);
  static const ::proto::Timestamp& expiration_time(const ScheduleCreateTransactionBody* msg);
};

const ::proto::SchedulableTransactionBody&
ScheduleCreateTransactionBody::_Internal::scheduledtransactionbody(const ScheduleCreateTransactionBody* msg) {
  return *msg->_impl_.scheduledtransactionbody_;
}
const ::proto::Key&
ScheduleCreateTransactionBody::_Internal::adminkey(const ScheduleCreateTransactionBody* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::AccountID&
ScheduleCreateTransactionBody::_Internal::payeraccountid(const ScheduleCreateTransactionBody* msg) {
  return *msg->_impl_.payeraccountid_;
}
const ::proto::Timestamp&
ScheduleCreateTransactionBody::_Internal::expiration_time(const ScheduleCreateTransactionBody* msg) {
  return *msg->_impl_.expiration_time_;
}
void ScheduleCreateTransactionBody::clear_scheduledtransactionbody() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionbody_ != nullptr) {
    delete _impl_.scheduledtransactionbody_;
  }
  _impl_.scheduledtransactionbody_ = nullptr;
}
void ScheduleCreateTransactionBody::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void ScheduleCreateTransactionBody::clear_payeraccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.payeraccountid_ != nullptr) {
    delete _impl_.payeraccountid_;
  }
  _impl_.payeraccountid_ = nullptr;
}
void ScheduleCreateTransactionBody::clear_expiration_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
}
ScheduleCreateTransactionBody::ScheduleCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ScheduleCreateTransactionBody)
}
ScheduleCreateTransactionBody::ScheduleCreateTransactionBody(const ScheduleCreateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleCreateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.scheduledtransactionbody_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.payeraccountid_){nullptr}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.wait_for_expiry_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_scheduledtransactionbody()) {
    _this->_impl_.scheduledtransactionbody_ = new ::proto::SchedulableTransactionBody(*from._impl_.scheduledtransactionbody_);
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_payeraccountid()) {
    _this->_impl_.payeraccountid_ = new ::proto::AccountID(*from._impl_.payeraccountid_);
  }
  if (from._internal_has_expiration_time()) {
    _this->_impl_.expiration_time_ = new ::proto::Timestamp(*from._impl_.expiration_time_);
  }
  _this->_impl_.wait_for_expiry_ = from._impl_.wait_for_expiry_;
  // @@protoc_insertion_point(copy_constructor:proto.ScheduleCreateTransactionBody)
}

inline void ScheduleCreateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.scheduledtransactionbody_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.payeraccountid_){nullptr}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.wait_for_expiry_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduleCreateTransactionBody::~ScheduleCreateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.ScheduleCreateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleCreateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.scheduledtransactionbody_;
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.payeraccountid_;
  if (this != internal_default_instance()) delete _impl_.expiration_time_;
}

void ScheduleCreateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleCreateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScheduleCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionbody_ != nullptr) {
    delete _impl_.scheduledtransactionbody_;
  }
  _impl_.scheduledtransactionbody_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payeraccountid_ != nullptr) {
    delete _impl_.payeraccountid_;
  }
  _impl_.payeraccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
  _impl_.wait_for_expiry_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleCreateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.SchedulableTransactionBody scheduledTransactionBody = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduledtransactionbody(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ScheduleCreateTransactionBody.memo"));
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID payerAccountID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payeraccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expiration_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wait_for_expiry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.wait_for_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleCreateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScheduleCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SchedulableTransactionBody scheduledTransactionBody = 1;
  if (this->_internal_has_scheduledtransactionbody()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scheduledtransactionbody(this),
        _Internal::scheduledtransactionbody(this).GetCachedSize(), target, stream);
  }

  // string memo = 2;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ScheduleCreateTransactionBody.memo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_memo(), target);
  }

  // .proto.Key adminKey = 3;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID payerAccountID = 4;
  if (this->_internal_has_payeraccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::payeraccountid(this),
        _Internal::payeraccountid(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp expiration_time = 5;
  if (this->_internal_has_expiration_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::expiration_time(this),
        _Internal::expiration_time(this).GetCachedSize(), target, stream);
  }

  // bool wait_for_expiry = 13;
  if (this->_internal_wait_for_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_wait_for_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScheduleCreateTransactionBody)
  return target;
}

size_t ScheduleCreateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScheduleCreateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 2;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .proto.SchedulableTransactionBody scheduledTransactionBody = 1;
  if (this->_internal_has_scheduledtransactionbody()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduledtransactionbody_);
  }

  // .proto.Key adminKey = 3;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.AccountID payerAccountID = 4;
  if (this->_internal_has_payeraccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payeraccountid_);
  }

  // .proto.Timestamp expiration_time = 5;
  if (this->_internal_has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_time_);
  }

  // bool wait_for_expiry = 13;
  if (this->_internal_wait_for_expiry() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleCreateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleCreateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleCreateTransactionBody::GetClassData() const { return &_class_data_; }


void ScheduleCreateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleCreateTransactionBody*>(&to_msg);
  auto& from = static_cast<const ScheduleCreateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ScheduleCreateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_scheduledtransactionbody()) {
    _this->_internal_mutable_scheduledtransactionbody()->::proto::SchedulableTransactionBody::MergeFrom(
        from._internal_scheduledtransactionbody());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_payeraccountid()) {
    _this->_internal_mutable_payeraccountid()->::proto::AccountID::MergeFrom(
        from._internal_payeraccountid());
  }
  if (from._internal_has_expiration_time()) {
    _this->_internal_mutable_expiration_time()->::proto::Timestamp::MergeFrom(
        from._internal_expiration_time());
  }
  if (from._internal_wait_for_expiry() != 0) {
    _this->_internal_set_wait_for_expiry(from._internal_wait_for_expiry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleCreateTransactionBody::CopyFrom(const ScheduleCreateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScheduleCreateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleCreateTransactionBody::IsInitialized() const {
  return true;
}

void ScheduleCreateTransactionBody::InternalSwap(ScheduleCreateTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleCreateTransactionBody, _impl_.wait_for_expiry_)
      + sizeof(ScheduleCreateTransactionBody::_impl_.wait_for_expiry_)
      - PROTOBUF_FIELD_OFFSET(ScheduleCreateTransactionBody, _impl_.scheduledtransactionbody_)>(
          reinterpret_cast<char*>(&_impl_.scheduledtransactionbody_),
          reinterpret_cast<char*>(&other->_impl_.scheduledtransactionbody_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleCreateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schedule_5fcreate_2eproto_getter, &descriptor_table_schedule_5fcreate_2eproto_once,
      file_level_metadata_schedule_5fcreate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ScheduleCreateTransactionBody*
Arena::CreateMaybeMessage< ::proto::ScheduleCreateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ScheduleCreateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

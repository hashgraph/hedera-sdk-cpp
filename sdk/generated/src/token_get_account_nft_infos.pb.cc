// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_get_account_nft_infos.proto

#include "token_get_account_nft_infos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR TokenGetAccountNftInfosQuery::TokenGetAccountNftInfosQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.start_)*/int64_t{0}
  , /*decltype(_impl_.end_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenGetAccountNftInfosQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenGetAccountNftInfosQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenGetAccountNftInfosQueryDefaultTypeInternal() {}
  union {
    TokenGetAccountNftInfosQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenGetAccountNftInfosQueryDefaultTypeInternal _TokenGetAccountNftInfosQuery_default_instance_;
PROTOBUF_CONSTEXPR TokenGetAccountNftInfosResponse::TokenGetAccountNftInfosResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nfts_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenGetAccountNftInfosResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenGetAccountNftInfosResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenGetAccountNftInfosResponseDefaultTypeInternal() {}
  union {
    TokenGetAccountNftInfosResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenGetAccountNftInfosResponseDefaultTypeInternal _TokenGetAccountNftInfosResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_token_5fget_5faccount_5fnft_5finfos_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_token_5fget_5faccount_5fnft_5finfos_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_token_5fget_5faccount_5fnft_5finfos_2eproto = nullptr;

const uint32_t TableStruct_token_5fget_5faccount_5fnft_5finfos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosQuery, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosQuery, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosQuery, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetAccountNftInfosResponse, _impl_.nfts_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::TokenGetAccountNftInfosQuery)},
  { 10, -1, -1, sizeof(::proto::TokenGetAccountNftInfosResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_TokenGetAccountNftInfosQuery_default_instance_._instance,
  &::proto::_TokenGetAccountNftInfosResponse_default_instance_._instance,
};

const char descriptor_table_protodef_token_5fget_5faccount_5fnft_5finfos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!token_get_account_nft_infos.proto\022\005pro"
  "to\032\021basic_types.proto\032\030token_get_nft_inf"
  "o.proto\032\022query_header.proto\032\025response_he"
  "ader.proto\"\203\001\n\034TokenGetAccountNftInfosQu"
  "ery\022\"\n\006header\030\001 \001(\0132\022.proto.QueryHeader\022"
  "#\n\taccountID\030\002 \001(\0132\020.proto.AccountID\022\r\n\005"
  "start\030\003 \001(\003\022\013\n\003end\030\004 \001(\003\"k\n\037TokenGetAcco"
  "untNftInfosResponse\022%\n\006header\030\001 \001(\0132\025.pr"
  "oto.ResponseHeader\022!\n\004nfts\030\002 \003(\0132\023.proto"
  ".TokenNftInfoB&\n\"com.hederahashgraph.api"
  ".proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_token_5fget_5fnft_5finfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto = {
    false, false, 421, descriptor_table_protodef_token_5fget_5faccount_5fnft_5finfos_2eproto,
    "token_get_account_nft_infos.proto",
    &descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_once, descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_deps, 4, 2,
    schemas, file_default_instances, TableStruct_token_5fget_5faccount_5fnft_5finfos_2eproto::offsets,
    file_level_metadata_token_5fget_5faccount_5fnft_5finfos_2eproto, file_level_enum_descriptors_token_5fget_5faccount_5fnft_5finfos_2eproto,
    file_level_service_descriptors_token_5fget_5faccount_5fnft_5finfos_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_getter() {
  return &descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_token_5fget_5faccount_5fnft_5finfos_2eproto(&descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto);
namespace proto {

// ===================================================================

class TokenGetAccountNftInfosQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const TokenGetAccountNftInfosQuery* msg);
  static const ::proto::AccountID& accountid(const TokenGetAccountNftInfosQuery* msg);
};

const ::proto::QueryHeader&
TokenGetAccountNftInfosQuery::_Internal::header(const TokenGetAccountNftInfosQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AccountID&
TokenGetAccountNftInfosQuery::_Internal::accountid(const TokenGetAccountNftInfosQuery* msg) {
  return *msg->_impl_.accountid_;
}
void TokenGetAccountNftInfosQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void TokenGetAccountNftInfosQuery::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
TokenGetAccountNftInfosQuery::TokenGetAccountNftInfosQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenGetAccountNftInfosQuery)
}
TokenGetAccountNftInfosQuery::TokenGetAccountNftInfosQuery(const TokenGetAccountNftInfosQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenGetAccountNftInfosQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:proto.TokenGetAccountNftInfosQuery)
}

inline void TokenGetAccountNftInfosQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.start_){int64_t{0}}
    , decltype(_impl_.end_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenGetAccountNftInfosQuery::~TokenGetAccountNftInfosQuery() {
  // @@protoc_insertion_point(destructor:proto.TokenGetAccountNftInfosQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenGetAccountNftInfosQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.accountid_;
}

void TokenGetAccountNftInfosQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenGetAccountNftInfosQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenGetAccountNftInfosQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenGetAccountNftInfosQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenGetAccountNftInfosQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenGetAccountNftInfosQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // int64 start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_start(), target);
  }

  // int64 end = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenGetAccountNftInfosQuery)
  return target;
}

size_t TokenGetAccountNftInfosQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenGetAccountNftInfosQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // int64 start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 end = 4;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenGetAccountNftInfosQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenGetAccountNftInfosQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenGetAccountNftInfosQuery::GetClassData() const { return &_class_data_; }


void TokenGetAccountNftInfosQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenGetAccountNftInfosQuery*>(&to_msg);
  auto& from = static_cast<const TokenGetAccountNftInfosQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenGetAccountNftInfosQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenGetAccountNftInfosQuery::CopyFrom(const TokenGetAccountNftInfosQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenGetAccountNftInfosQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenGetAccountNftInfosQuery::IsInitialized() const {
  return true;
}

void TokenGetAccountNftInfosQuery::InternalSwap(TokenGetAccountNftInfosQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenGetAccountNftInfosQuery, _impl_.end_)
      + sizeof(TokenGetAccountNftInfosQuery::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(TokenGetAccountNftInfosQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenGetAccountNftInfosQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_getter, &descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_once,
      file_level_metadata_token_5fget_5faccount_5fnft_5finfos_2eproto[0]);
}

// ===================================================================

class TokenGetAccountNftInfosResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const TokenGetAccountNftInfosResponse* msg);
};

const ::proto::ResponseHeader&
TokenGetAccountNftInfosResponse::_Internal::header(const TokenGetAccountNftInfosResponse* msg) {
  return *msg->_impl_.header_;
}
void TokenGetAccountNftInfosResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void TokenGetAccountNftInfosResponse::clear_nfts() {
  _impl_.nfts_.Clear();
}
TokenGetAccountNftInfosResponse::TokenGetAccountNftInfosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenGetAccountNftInfosResponse)
}
TokenGetAccountNftInfosResponse::TokenGetAccountNftInfosResponse(const TokenGetAccountNftInfosResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenGetAccountNftInfosResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nfts_){from._impl_.nfts_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TokenGetAccountNftInfosResponse)
}

inline void TokenGetAccountNftInfosResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nfts_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenGetAccountNftInfosResponse::~TokenGetAccountNftInfosResponse() {
  // @@protoc_insertion_point(destructor:proto.TokenGetAccountNftInfosResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenGetAccountNftInfosResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nfts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void TokenGetAccountNftInfosResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenGetAccountNftInfosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenGetAccountNftInfosResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nfts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenGetAccountNftInfosResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenNftInfo nfts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nfts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenGetAccountNftInfosResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenGetAccountNftInfosResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.TokenNftInfo nfts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nfts_size()); i < n; i++) {
    const auto& repfield = this->_internal_nfts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenGetAccountNftInfosResponse)
  return target;
}

size_t TokenGetAccountNftInfosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenGetAccountNftInfosResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TokenNftInfo nfts = 2;
  total_size += 1UL * this->_internal_nfts_size();
  for (const auto& msg : this->_impl_.nfts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenGetAccountNftInfosResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenGetAccountNftInfosResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenGetAccountNftInfosResponse::GetClassData() const { return &_class_data_; }


void TokenGetAccountNftInfosResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenGetAccountNftInfosResponse*>(&to_msg);
  auto& from = static_cast<const TokenGetAccountNftInfosResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenGetAccountNftInfosResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nfts_.MergeFrom(from._impl_.nfts_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenGetAccountNftInfosResponse::CopyFrom(const TokenGetAccountNftInfosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenGetAccountNftInfosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenGetAccountNftInfosResponse::IsInitialized() const {
  return true;
}

void TokenGetAccountNftInfosResponse::InternalSwap(TokenGetAccountNftInfosResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nfts_.InternalSwap(&other->_impl_.nfts_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenGetAccountNftInfosResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_getter, &descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto_once,
      file_level_metadata_token_5fget_5faccount_5fnft_5finfos_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TokenGetAccountNftInfosQuery*
Arena::CreateMaybeMessage< ::proto::TokenGetAccountNftInfosQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenGetAccountNftInfosQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TokenGetAccountNftInfosResponse*
Arena::CreateMaybeMessage< ::proto::TokenGetAccountNftInfosResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenGetAccountNftInfosResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_create.proto

#include "crypto_create.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoCreateTransactionBody::CryptoCreateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.proxyaccountid_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.shardid_)*/nullptr
  , /*decltype(_impl_.realmid_)*/nullptr
  , /*decltype(_impl_.newrealmadminkey_)*/nullptr
  , /*decltype(_impl_.initialbalance_)*/uint64_t{0u}
  , /*decltype(_impl_.sendrecordthreshold_)*/uint64_t{0u}
  , /*decltype(_impl_.receiverecordthreshold_)*/uint64_t{0u}
  , /*decltype(_impl_.receiversigrequired_)*/false
  , /*decltype(_impl_.decline_reward_)*/false
  , /*decltype(_impl_.max_automatic_token_associations_)*/0
  , /*decltype(_impl_.staked_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CryptoCreateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoCreateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoCreateTransactionBodyDefaultTypeInternal() {}
  union {
    CryptoCreateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoCreateTransactionBodyDefaultTypeInternal _CryptoCreateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fcreate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fcreate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fcreate_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fcreate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.initialbalance_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.proxyaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.sendrecordthreshold_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.receiverecordthreshold_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.receiversigrequired_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.shardid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.realmid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.newrealmadminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.max_automatic_token_associations_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.decline_reward_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoCreateTransactionBody, _impl_.staked_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoCreateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoCreateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fcreate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023crypto_create.proto\022\005proto\032\021basic_type"
  "s.proto\032\016duration.proto\"\245\004\n\033CryptoCreate"
  "TransactionBody\022\027\n\003key\030\001 \001(\0132\n.proto.Key"
  "\022\026\n\016initialBalance\030\002 \001(\004\022,\n\016proxyAccount"
  "ID\030\003 \001(\0132\020.proto.AccountIDB\002\030\001\022\037\n\023sendRe"
  "cordThreshold\030\006 \001(\004B\002\030\001\022\"\n\026receiveRecord"
  "Threshold\030\007 \001(\004B\002\030\001\022\033\n\023receiverSigRequir"
  "ed\030\010 \001(\010\022(\n\017autoRenewPeriod\030\t \001(\0132\017.prot"
  "o.Duration\022\037\n\007shardID\030\n \001(\0132\016.proto.Shar"
  "dID\022\037\n\007realmID\030\013 \001(\0132\016.proto.RealmID\022$\n\020"
  "newRealmAdminKey\030\014 \001(\0132\n.proto.Key\022\014\n\004me"
  "mo\030\r \001(\t\022(\n max_automatic_token_associat"
  "ions\030\016 \001(\005\022-\n\021staked_account_id\030\017 \001(\0132\020."
  "proto.AccountIDH\000\022\030\n\016staked_node_id\030\020 \001("
  "\003H\000\022\026\n\016decline_reward\030\021 \001(\010\022\r\n\005alias\030\022 \001"
  "(\014B\013\n\tstaked_idB&\n\"com.hederahashgraph.a"
  "pi.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fcreate_2eproto_deps[2] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fcreate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fcreate_2eproto = {
    false, false, 663, descriptor_table_protodef_crypto_5fcreate_2eproto,
    "crypto_create.proto",
    &descriptor_table_crypto_5fcreate_2eproto_once, descriptor_table_crypto_5fcreate_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_crypto_5fcreate_2eproto::offsets,
    file_level_metadata_crypto_5fcreate_2eproto, file_level_enum_descriptors_crypto_5fcreate_2eproto,
    file_level_service_descriptors_crypto_5fcreate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fcreate_2eproto_getter() {
  return &descriptor_table_crypto_5fcreate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fcreate_2eproto(&descriptor_table_crypto_5fcreate_2eproto);
namespace proto {

// ===================================================================

class CryptoCreateTransactionBody::_Internal {
 public:
  static const ::proto::Key& key(const CryptoCreateTransactionBody* msg);
  static const ::proto::AccountID& proxyaccountid(const CryptoCreateTransactionBody* msg);
  static const ::proto::Duration& autorenewperiod(const CryptoCreateTransactionBody* msg);
  static const ::proto::ShardID& shardid(const CryptoCreateTransactionBody* msg);
  static const ::proto::RealmID& realmid(const CryptoCreateTransactionBody* msg);
  static const ::proto::Key& newrealmadminkey(const CryptoCreateTransactionBody* msg);
  static const ::proto::AccountID& staked_account_id(const CryptoCreateTransactionBody* msg);
};

const ::proto::Key&
CryptoCreateTransactionBody::_Internal::key(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.key_;
}
const ::proto::AccountID&
CryptoCreateTransactionBody::_Internal::proxyaccountid(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.proxyaccountid_;
}
const ::proto::Duration&
CryptoCreateTransactionBody::_Internal::autorenewperiod(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::ShardID&
CryptoCreateTransactionBody::_Internal::shardid(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.shardid_;
}
const ::proto::RealmID&
CryptoCreateTransactionBody::_Internal::realmid(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.realmid_;
}
const ::proto::Key&
CryptoCreateTransactionBody::_Internal::newrealmadminkey(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.newrealmadminkey_;
}
const ::proto::AccountID&
CryptoCreateTransactionBody::_Internal::staked_account_id(const CryptoCreateTransactionBody* msg) {
  return *msg->_impl_.staked_id_.staked_account_id_;
}
void CryptoCreateTransactionBody::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
void CryptoCreateTransactionBody::clear_proxyaccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
}
void CryptoCreateTransactionBody::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void CryptoCreateTransactionBody::clear_shardid() {
  if (GetArenaForAllocation() == nullptr && _impl_.shardid_ != nullptr) {
    delete _impl_.shardid_;
  }
  _impl_.shardid_ = nullptr;
}
void CryptoCreateTransactionBody::clear_realmid() {
  if (GetArenaForAllocation() == nullptr && _impl_.realmid_ != nullptr) {
    delete _impl_.realmid_;
  }
  _impl_.realmid_ = nullptr;
}
void CryptoCreateTransactionBody::clear_newrealmadminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrealmadminkey_ != nullptr) {
    delete _impl_.newrealmadminkey_;
  }
  _impl_.newrealmadminkey_ = nullptr;
}
void CryptoCreateTransactionBody::set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_staked_id();
  if (staked_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staked_account_id));
    if (message_arena != submessage_arena) {
      staked_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staked_account_id, submessage_arena);
    }
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.staked_account_id)
}
void CryptoCreateTransactionBody::clear_staked_account_id() {
  if (_internal_has_staked_account_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.staked_id_.staked_account_id_;
    }
    clear_has_staked_id();
  }
}
CryptoCreateTransactionBody::CryptoCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoCreateTransactionBody)
}
CryptoCreateTransactionBody::CryptoCreateTransactionBody(const CryptoCreateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoCreateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.shardid_){nullptr}
    , decltype(_impl_.realmid_){nullptr}
    , decltype(_impl_.newrealmadminkey_){nullptr}
    , decltype(_impl_.initialbalance_){}
    , decltype(_impl_.sendrecordthreshold_){}
    , decltype(_impl_.receiverecordthreshold_){}
    , decltype(_impl_.receiversigrequired_){}
    , decltype(_impl_.decline_reward_){}
    , decltype(_impl_.max_automatic_token_associations_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::Key(*from._impl_.key_);
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_impl_.proxyaccountid_ = new ::proto::AccountID(*from._impl_.proxyaccountid_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_shardid()) {
    _this->_impl_.shardid_ = new ::proto::ShardID(*from._impl_.shardid_);
  }
  if (from._internal_has_realmid()) {
    _this->_impl_.realmid_ = new ::proto::RealmID(*from._impl_.realmid_);
  }
  if (from._internal_has_newrealmadminkey()) {
    _this->_impl_.newrealmadminkey_ = new ::proto::Key(*from._impl_.newrealmadminkey_);
  }
  ::memcpy(&_impl_.initialbalance_, &from._impl_.initialbalance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_automatic_token_associations_) -
    reinterpret_cast<char*>(&_impl_.initialbalance_)) + sizeof(_impl_.max_automatic_token_associations_));
  clear_has_staked_id();
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoCreateTransactionBody)
}

inline void CryptoCreateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.shardid_){nullptr}
    , decltype(_impl_.realmid_){nullptr}
    , decltype(_impl_.newrealmadminkey_){nullptr}
    , decltype(_impl_.initialbalance_){uint64_t{0u}}
    , decltype(_impl_.sendrecordthreshold_){uint64_t{0u}}
    , decltype(_impl_.receiverecordthreshold_){uint64_t{0u}}
    , decltype(_impl_.receiversigrequired_){false}
    , decltype(_impl_.decline_reward_){false}
    , decltype(_impl_.max_automatic_token_associations_){0}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_staked_id();
}

CryptoCreateTransactionBody::~CryptoCreateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.CryptoCreateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoCreateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memo_.Destroy();
  _impl_.alias_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.proxyaccountid_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.shardid_;
  if (this != internal_default_instance()) delete _impl_.realmid_;
  if (this != internal_default_instance()) delete _impl_.newrealmadminkey_;
  if (has_staked_id()) {
    clear_staked_id();
  }
}

void CryptoCreateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoCreateTransactionBody::clear_staked_id() {
// @@protoc_insertion_point(one_of_clear_start:proto.CryptoCreateTransactionBody)
  switch (staked_id_case()) {
    case kStakedAccountId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.staked_id_.staked_account_id_;
      }
      break;
    }
    case kStakedNodeId: {
      // No need to clear
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STAKED_ID_NOT_SET;
}


void CryptoCreateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memo_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shardid_ != nullptr) {
    delete _impl_.shardid_;
  }
  _impl_.shardid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.realmid_ != nullptr) {
    delete _impl_.realmid_;
  }
  _impl_.realmid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newrealmadminkey_ != nullptr) {
    delete _impl_.newrealmadminkey_;
  }
  _impl_.newrealmadminkey_ = nullptr;
  ::memset(&_impl_.initialbalance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_automatic_token_associations_) -
      reinterpret_cast<char*>(&_impl_.initialbalance_)) + sizeof(_impl_.max_automatic_token_associations_));
  clear_staked_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoCreateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Key key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 initialBalance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.initialbalance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID proxyAccountID = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxyaccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sendRecordThreshold = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sendrecordthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 receiveRecordThreshold = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.receiverecordthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool receiverSigRequired = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.receiversigrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ShardID shardID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_shardid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RealmID realmID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_realmid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key newRealmAdminKey = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_newrealmadminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.CryptoCreateTransactionBody.memo"));
        } else
          goto handle_unusual;
        continue;
      // int32 max_automatic_token_associations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.max_automatic_token_associations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID staked_account_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_staked_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staked_node_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _internal_set_staked_node_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool decline_reward = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.decline_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes alias = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoCreateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Key key = 1;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // uint64 initialBalance = 2;
  if (this->_internal_initialbalance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_initialbalance(), target);
  }

  // .proto.AccountID proxyAccountID = 3 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proxyaccountid(this),
        _Internal::proxyaccountid(this).GetCachedSize(), target, stream);
  }

  // uint64 sendRecordThreshold = 6 [deprecated = true];
  if (this->_internal_sendrecordthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sendrecordthreshold(), target);
  }

  // uint64 receiveRecordThreshold = 7 [deprecated = true];
  if (this->_internal_receiverecordthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_receiverecordthreshold(), target);
  }

  // bool receiverSigRequired = 8;
  if (this->_internal_receiversigrequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_receiversigrequired(), target);
  }

  // .proto.Duration autoRenewPeriod = 9;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // .proto.ShardID shardID = 10;
  if (this->_internal_has_shardid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::shardid(this),
        _Internal::shardid(this).GetCachedSize(), target, stream);
  }

  // .proto.RealmID realmID = 11;
  if (this->_internal_has_realmid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::realmid(this),
        _Internal::realmid(this).GetCachedSize(), target, stream);
  }

  // .proto.Key newRealmAdminKey = 12;
  if (this->_internal_has_newrealmadminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::newrealmadminkey(this),
        _Internal::newrealmadminkey(this).GetCachedSize(), target, stream);
  }

  // string memo = 13;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.CryptoCreateTransactionBody.memo");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_memo(), target);
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_automatic_token_associations(), target);
  }

  // .proto.AccountID staked_account_id = 15;
  if (_internal_has_staked_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::staked_account_id(this),
        _Internal::staked_account_id(this).GetCachedSize(), target, stream);
  }

  // int64 staked_node_id = 16;
  if (_internal_has_staked_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_staked_node_id(), target);
  }

  // bool decline_reward = 17;
  if (this->_internal_decline_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_decline_reward(), target);
  }

  // bytes alias = 18;
  if (!this->_internal_alias().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoCreateTransactionBody)
  return target;
}

size_t CryptoCreateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoCreateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 13;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes alias = 18;
  if (!this->_internal_alias().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alias());
  }

  // .proto.Key key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // .proto.AccountID proxyAccountID = 3 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxyaccountid_);
  }

  // .proto.Duration autoRenewPeriod = 9;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.ShardID shardID = 10;
  if (this->_internal_has_shardid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shardid_);
  }

  // .proto.RealmID realmID = 11;
  if (this->_internal_has_realmid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.realmid_);
  }

  // .proto.Key newRealmAdminKey = 12;
  if (this->_internal_has_newrealmadminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newrealmadminkey_);
  }

  // uint64 initialBalance = 2;
  if (this->_internal_initialbalance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_initialbalance());
  }

  // uint64 sendRecordThreshold = 6 [deprecated = true];
  if (this->_internal_sendrecordthreshold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sendrecordthreshold());
  }

  // uint64 receiveRecordThreshold = 7 [deprecated = true];
  if (this->_internal_receiverecordthreshold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_receiverecordthreshold());
  }

  // bool receiverSigRequired = 8;
  if (this->_internal_receiversigrequired() != 0) {
    total_size += 1 + 1;
  }

  // bool decline_reward = 17;
  if (this->_internal_decline_reward() != 0) {
    total_size += 2 + 1;
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_automatic_token_associations());
  }

  switch (staked_id_case()) {
    // .proto.AccountID staked_account_id = 15;
    case kStakedAccountId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.staked_id_.staked_account_id_);
      break;
    }
    // int64 staked_node_id = 16;
    case kStakedNodeId: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoCreateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoCreateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoCreateTransactionBody::GetClassData() const { return &_class_data_; }


void CryptoCreateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoCreateTransactionBody*>(&to_msg);
  auto& from = static_cast<const CryptoCreateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoCreateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::Key::MergeFrom(
        from._internal_key());
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_internal_mutable_proxyaccountid()->::proto::AccountID::MergeFrom(
        from._internal_proxyaccountid());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_shardid()) {
    _this->_internal_mutable_shardid()->::proto::ShardID::MergeFrom(
        from._internal_shardid());
  }
  if (from._internal_has_realmid()) {
    _this->_internal_mutable_realmid()->::proto::RealmID::MergeFrom(
        from._internal_realmid());
  }
  if (from._internal_has_newrealmadminkey()) {
    _this->_internal_mutable_newrealmadminkey()->::proto::Key::MergeFrom(
        from._internal_newrealmadminkey());
  }
  if (from._internal_initialbalance() != 0) {
    _this->_internal_set_initialbalance(from._internal_initialbalance());
  }
  if (from._internal_sendrecordthreshold() != 0) {
    _this->_internal_set_sendrecordthreshold(from._internal_sendrecordthreshold());
  }
  if (from._internal_receiverecordthreshold() != 0) {
    _this->_internal_set_receiverecordthreshold(from._internal_receiverecordthreshold());
  }
  if (from._internal_receiversigrequired() != 0) {
    _this->_internal_set_receiversigrequired(from._internal_receiversigrequired());
  }
  if (from._internal_decline_reward() != 0) {
    _this->_internal_set_decline_reward(from._internal_decline_reward());
  }
  if (from._internal_max_automatic_token_associations() != 0) {
    _this->_internal_set_max_automatic_token_associations(from._internal_max_automatic_token_associations());
  }
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoCreateTransactionBody::CopyFrom(const CryptoCreateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoCreateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoCreateTransactionBody::IsInitialized() const {
  return true;
}

void CryptoCreateTransactionBody::InternalSwap(CryptoCreateTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoCreateTransactionBody, _impl_.max_automatic_token_associations_)
      + sizeof(CryptoCreateTransactionBody::_impl_.max_automatic_token_associations_)
      - PROTOBUF_FIELD_OFFSET(CryptoCreateTransactionBody, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
  swap(_impl_.staked_id_, other->_impl_.staked_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoCreateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fcreate_2eproto_getter, &descriptor_table_crypto_5fcreate_2eproto_once,
      file_level_metadata_crypto_5fcreate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoCreateTransactionBody*
Arena::CreateMaybeMessage< ::proto::CryptoCreateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoCreateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

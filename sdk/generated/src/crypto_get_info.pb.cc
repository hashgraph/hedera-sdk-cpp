// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_get_info.proto

#include "crypto_get_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoGetInfoQuery::CryptoGetInfoQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoGetInfoQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetInfoQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetInfoQueryDefaultTypeInternal() {}
  union {
    CryptoGetInfoQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetInfoQueryDefaultTypeInternal _CryptoGetInfoQuery_default_instance_;
PROTOBUF_CONSTEXPR CryptoGetInfoResponse_AccountInfo::CryptoGetInfoResponse_AccountInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.livehashes_)*/{}
  , /*decltype(_impl_.tokenrelationships_)*/{}
  , /*decltype(_impl_.contractaccountid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.proxyaccountid_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.staking_info_)*/nullptr
  , /*decltype(_impl_.proxyreceived_)*/int64_t{0}
  , /*decltype(_impl_.balance_)*/uint64_t{0u}
  , /*decltype(_impl_.generatesendrecordthreshold_)*/uint64_t{0u}
  , /*decltype(_impl_.generatereceiverecordthreshold_)*/uint64_t{0u}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.receiversigrequired_)*/false
  , /*decltype(_impl_.max_automatic_token_associations_)*/0
  , /*decltype(_impl_.ownednfts_)*/int64_t{0}
  , /*decltype(_impl_.ethereum_nonce_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoGetInfoResponse_AccountInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetInfoResponse_AccountInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetInfoResponse_AccountInfoDefaultTypeInternal() {}
  union {
    CryptoGetInfoResponse_AccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetInfoResponse_AccountInfoDefaultTypeInternal _CryptoGetInfoResponse_AccountInfo_default_instance_;
PROTOBUF_CONSTEXPR CryptoGetInfoResponse::CryptoGetInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.accountinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoGetInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetInfoResponseDefaultTypeInternal() {}
  union {
    CryptoGetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetInfoResponseDefaultTypeInternal _CryptoGetInfoResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fget_5finfo_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fget_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fget_5finfo_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fget_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoQuery, _impl_.accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.contractaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.proxyaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.proxyreceived_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.generatesendrecordthreshold_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.generatereceiverecordthreshold_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.receiversigrequired_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.expirationtime_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.livehashes_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.tokenrelationships_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.ownednfts_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.max_automatic_token_associations_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.ledger_id_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.ethereum_nonce_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse_AccountInfo, _impl_.staking_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetInfoResponse, _impl_.accountinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoGetInfoQuery)},
  { 8, -1, -1, sizeof(::proto::CryptoGetInfoResponse_AccountInfo)},
  { 35, -1, -1, sizeof(::proto::CryptoGetInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoGetInfoQuery_default_instance_._instance,
  &::proto::_CryptoGetInfoResponse_AccountInfo_default_instance_._instance,
  &::proto::_CryptoGetInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fget_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025crypto_get_info.proto\022\005proto\032\017timestam"
  "p.proto\032\016duration.proto\032\021basic_types.pro"
  "to\032\022query_header.proto\032\025response_header."
  "proto\032\032crypto_add_live_hash.proto\032\036googl"
  "e/protobuf/wrappers.proto\"]\n\022CryptoGetIn"
  "foQuery\022\"\n\006header\030\001 \001(\0132\022.proto.QueryHea"
  "der\022#\n\taccountID\030\002 \001(\0132\020.proto.AccountID"
  "\"\241\006\n\025CryptoGetInfoResponse\022%\n\006header\030\001 \001"
  "(\0132\025.proto.ResponseHeader\022=\n\013accountInfo"
  "\030\002 \001(\0132(.proto.CryptoGetInfoResponse.Acc"
  "ountInfo\032\241\005\n\013AccountInfo\022#\n\taccountID\030\001 "
  "\001(\0132\020.proto.AccountID\022\031\n\021contractAccount"
  "ID\030\002 \001(\t\022\017\n\007deleted\030\003 \001(\010\022,\n\016proxyAccoun"
  "tID\030\004 \001(\0132\020.proto.AccountIDB\002\030\001\022\025\n\rproxy"
  "Received\030\006 \001(\003\022\027\n\003key\030\007 \001(\0132\n.proto.Key\022"
  "\017\n\007balance\030\010 \001(\004\022\'\n\033generateSendRecordTh"
  "reshold\030\t \001(\004B\002\030\001\022*\n\036generateReceiveReco"
  "rdThreshold\030\n \001(\004B\002\030\001\022\033\n\023receiverSigRequ"
  "ired\030\013 \001(\010\022(\n\016expirationTime\030\014 \001(\0132\020.pro"
  "to.Timestamp\022(\n\017autoRenewPeriod\030\r \001(\0132\017."
  "proto.Duration\022#\n\nliveHashes\030\016 \003(\0132\017.pro"
  "to.LiveHash\0228\n\022tokenRelationships\030\017 \003(\0132"
  "\030.proto.TokenRelationshipB\002\030\001\022\014\n\004memo\030\020 "
  "\001(\t\022\021\n\townedNfts\030\021 \001(\003\022(\n max_automatic_"
  "token_associations\030\022 \001(\005\022\r\n\005alias\030\023 \001(\014\022"
  "\021\n\tledger_id\030\024 \001(\014\022\026\n\016ethereum_nonce\030\025 \001"
  "(\003\022(\n\014staking_info\030\026 \001(\0132\022.proto.Staking"
  "InfoB&\n\"com.hederahashgraph.api.proto.ja"
  "vaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fget_5finfo_2eproto_deps[7] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_crypto_5fadd_5flive_5fhash_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fget_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fget_5finfo_2eproto = {
    false, false, 1132, descriptor_table_protodef_crypto_5fget_5finfo_2eproto,
    "crypto_get_info.proto",
    &descriptor_table_crypto_5fget_5finfo_2eproto_once, descriptor_table_crypto_5fget_5finfo_2eproto_deps, 7, 3,
    schemas, file_default_instances, TableStruct_crypto_5fget_5finfo_2eproto::offsets,
    file_level_metadata_crypto_5fget_5finfo_2eproto, file_level_enum_descriptors_crypto_5fget_5finfo_2eproto,
    file_level_service_descriptors_crypto_5fget_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fget_5finfo_2eproto_getter() {
  return &descriptor_table_crypto_5fget_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fget_5finfo_2eproto(&descriptor_table_crypto_5fget_5finfo_2eproto);
namespace proto {

// ===================================================================

class CryptoGetInfoQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const CryptoGetInfoQuery* msg);
  static const ::proto::AccountID& accountid(const CryptoGetInfoQuery* msg);
};

const ::proto::QueryHeader&
CryptoGetInfoQuery::_Internal::header(const CryptoGetInfoQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AccountID&
CryptoGetInfoQuery::_Internal::accountid(const CryptoGetInfoQuery* msg) {
  return *msg->_impl_.accountid_;
}
void CryptoGetInfoQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void CryptoGetInfoQuery::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
CryptoGetInfoQuery::CryptoGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetInfoQuery)
}
CryptoGetInfoQuery::CryptoGetInfoQuery(const CryptoGetInfoQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetInfoQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetInfoQuery)
}

inline void CryptoGetInfoQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoGetInfoQuery::~CryptoGetInfoQuery() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetInfoQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetInfoQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.accountid_;
}

void CryptoGetInfoQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetInfoQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetInfoQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetInfoQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetInfoQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetInfoQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetInfoQuery)
  return target;
}

size_t CryptoGetInfoQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetInfoQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetInfoQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetInfoQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetInfoQuery::GetClassData() const { return &_class_data_; }


void CryptoGetInfoQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetInfoQuery*>(&to_msg);
  auto& from = static_cast<const CryptoGetInfoQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetInfoQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetInfoQuery::CopyFrom(const CryptoGetInfoQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetInfoQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetInfoQuery::IsInitialized() const {
  return true;
}

void CryptoGetInfoQuery::InternalSwap(CryptoGetInfoQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoGetInfoQuery, _impl_.accountid_)
      + sizeof(CryptoGetInfoQuery::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CryptoGetInfoQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetInfoQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5finfo_2eproto_getter, &descriptor_table_crypto_5fget_5finfo_2eproto_once,
      file_level_metadata_crypto_5fget_5finfo_2eproto[0]);
}

// ===================================================================

class CryptoGetInfoResponse_AccountInfo::_Internal {
 public:
  static const ::proto::AccountID& accountid(const CryptoGetInfoResponse_AccountInfo* msg);
  static const ::proto::AccountID& proxyaccountid(const CryptoGetInfoResponse_AccountInfo* msg);
  static const ::proto::Key& key(const CryptoGetInfoResponse_AccountInfo* msg);
  static const ::proto::Timestamp& expirationtime(const CryptoGetInfoResponse_AccountInfo* msg);
  static const ::proto::Duration& autorenewperiod(const CryptoGetInfoResponse_AccountInfo* msg);
  static const ::proto::StakingInfo& staking_info(const CryptoGetInfoResponse_AccountInfo* msg);
};

const ::proto::AccountID&
CryptoGetInfoResponse_AccountInfo::_Internal::accountid(const CryptoGetInfoResponse_AccountInfo* msg) {
  return *msg->_impl_.accountid_;
}
const ::proto::AccountID&
CryptoGetInfoResponse_AccountInfo::_Internal::proxyaccountid(const CryptoGetInfoResponse_AccountInfo* msg) {
  return *msg->_impl_.proxyaccountid_;
}
const ::proto::Key&
CryptoGetInfoResponse_AccountInfo::_Internal::key(const CryptoGetInfoResponse_AccountInfo* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Timestamp&
CryptoGetInfoResponse_AccountInfo::_Internal::expirationtime(const CryptoGetInfoResponse_AccountInfo* msg) {
  return *msg->_impl_.expirationtime_;
}
const ::proto::Duration&
CryptoGetInfoResponse_AccountInfo::_Internal::autorenewperiod(const CryptoGetInfoResponse_AccountInfo* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::StakingInfo&
CryptoGetInfoResponse_AccountInfo::_Internal::staking_info(const CryptoGetInfoResponse_AccountInfo* msg) {
  return *msg->_impl_.staking_info_;
}
void CryptoGetInfoResponse_AccountInfo::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
void CryptoGetInfoResponse_AccountInfo::clear_proxyaccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
}
void CryptoGetInfoResponse_AccountInfo::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
void CryptoGetInfoResponse_AccountInfo::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
void CryptoGetInfoResponse_AccountInfo::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void CryptoGetInfoResponse_AccountInfo::clear_livehashes() {
  _impl_.livehashes_.Clear();
}
void CryptoGetInfoResponse_AccountInfo::clear_tokenrelationships() {
  _impl_.tokenrelationships_.Clear();
}
void CryptoGetInfoResponse_AccountInfo::clear_staking_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.staking_info_ != nullptr) {
    delete _impl_.staking_info_;
  }
  _impl_.staking_info_ = nullptr;
}
CryptoGetInfoResponse_AccountInfo::CryptoGetInfoResponse_AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetInfoResponse.AccountInfo)
}
CryptoGetInfoResponse_AccountInfo::CryptoGetInfoResponse_AccountInfo(const CryptoGetInfoResponse_AccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetInfoResponse_AccountInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.livehashes_){from._impl_.livehashes_}
    , decltype(_impl_.tokenrelationships_){from._impl_.tokenrelationships_}
    , decltype(_impl_.contractaccountid_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.staking_info_){nullptr}
    , decltype(_impl_.proxyreceived_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.generatesendrecordthreshold_){}
    , decltype(_impl_.generatereceiverecordthreshold_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.receiversigrequired_){}
    , decltype(_impl_.max_automatic_token_associations_){}
    , decltype(_impl_.ownednfts_){}
    , decltype(_impl_.ethereum_nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contractaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contractaccountid().empty()) {
    _this->_impl_.contractaccountid_.Set(from._internal_contractaccountid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_id().empty()) {
    _this->_impl_.ledger_id_.Set(from._internal_ledger_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_impl_.proxyaccountid_ = new ::proto::AccountID(*from._impl_.proxyaccountid_);
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::Key(*from._impl_.key_);
  }
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::Timestamp(*from._impl_.expirationtime_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_staking_info()) {
    _this->_impl_.staking_info_ = new ::proto::StakingInfo(*from._impl_.staking_info_);
  }
  ::memcpy(&_impl_.proxyreceived_, &from._impl_.proxyreceived_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ethereum_nonce_) -
    reinterpret_cast<char*>(&_impl_.proxyreceived_)) + sizeof(_impl_.ethereum_nonce_));
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetInfoResponse.AccountInfo)
}

inline void CryptoGetInfoResponse_AccountInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.livehashes_){arena}
    , decltype(_impl_.tokenrelationships_){arena}
    , decltype(_impl_.contractaccountid_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.staking_info_){nullptr}
    , decltype(_impl_.proxyreceived_){int64_t{0}}
    , decltype(_impl_.balance_){uint64_t{0u}}
    , decltype(_impl_.generatesendrecordthreshold_){uint64_t{0u}}
    , decltype(_impl_.generatereceiverecordthreshold_){uint64_t{0u}}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.receiversigrequired_){false}
    , decltype(_impl_.max_automatic_token_associations_){0}
    , decltype(_impl_.ownednfts_){int64_t{0}}
    , decltype(_impl_.ethereum_nonce_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contractaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CryptoGetInfoResponse_AccountInfo::~CryptoGetInfoResponse_AccountInfo() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetInfoResponse.AccountInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetInfoResponse_AccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.livehashes_.~RepeatedPtrField();
  _impl_.tokenrelationships_.~RepeatedPtrField();
  _impl_.contractaccountid_.Destroy();
  _impl_.memo_.Destroy();
  _impl_.alias_.Destroy();
  _impl_.ledger_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.accountid_;
  if (this != internal_default_instance()) delete _impl_.proxyaccountid_;
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.staking_info_;
}

void CryptoGetInfoResponse_AccountInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetInfoResponse_AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetInfoResponse.AccountInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.livehashes_.Clear();
  _impl_.tokenrelationships_.Clear();
  _impl_.contractaccountid_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.ledger_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.staking_info_ != nullptr) {
    delete _impl_.staking_info_;
  }
  _impl_.staking_info_ = nullptr;
  ::memset(&_impl_.proxyreceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ethereum_nonce_) -
      reinterpret_cast<char*>(&_impl_.proxyreceived_)) + sizeof(_impl_.ethereum_nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetInfoResponse_AccountInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID accountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contractAccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contractaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.CryptoGetInfoResponse.AccountInfo.contractAccountID"));
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID proxyAccountID = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxyaccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 proxyReceived = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.proxyreceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 balance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 generateSendRecordThreshold = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.generatesendrecordthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 generateReceiveRecordThreshold = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.generatereceiverecordthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool receiverSigRequired = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.receiversigrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expirationTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.LiveHash liveHashes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_livehashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenRelationship tokenRelationships = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokenrelationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string memo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.CryptoGetInfoResponse.AccountInfo.memo"));
        } else
          goto handle_unusual;
        continue;
      // int64 ownedNfts = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.ownednfts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_automatic_token_associations = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.max_automatic_token_associations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes alias = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ledger_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_ledger_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ethereum_nonce = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.ethereum_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.StakingInfo staking_info = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetInfoResponse_AccountInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetInfoResponse.AccountInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID accountID = 1;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // string contractAccountID = 2;
  if (!this->_internal_contractaccountid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractaccountid().data(), static_cast<int>(this->_internal_contractaccountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.CryptoGetInfoResponse.AccountInfo.contractAccountID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contractaccountid(), target);
  }

  // bool deleted = 3;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_deleted(), target);
  }

  // .proto.AccountID proxyAccountID = 4 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proxyaccountid(this),
        _Internal::proxyaccountid(this).GetCachedSize(), target, stream);
  }

  // int64 proxyReceived = 6;
  if (this->_internal_proxyreceived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_proxyreceived(), target);
  }

  // .proto.Key key = 7;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // uint64 balance = 8;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_balance(), target);
  }

  // uint64 generateSendRecordThreshold = 9 [deprecated = true];
  if (this->_internal_generatesendrecordthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_generatesendrecordthreshold(), target);
  }

  // uint64 generateReceiveRecordThreshold = 10 [deprecated = true];
  if (this->_internal_generatereceiverecordthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_generatereceiverecordthreshold(), target);
  }

  // bool receiverSigRequired = 11;
  if (this->_internal_receiversigrequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_receiversigrequired(), target);
  }

  // .proto.Timestamp expirationTime = 12;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration autoRenewPeriod = 13;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.LiveHash liveHashes = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_livehashes_size()); i < n; i++) {
    const auto& repfield = this->_internal_livehashes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.TokenRelationship tokenRelationships = 15 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokenrelationships_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokenrelationships(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string memo = 16;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.CryptoGetInfoResponse.AccountInfo.memo");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_memo(), target);
  }

  // int64 ownedNfts = 17;
  if (this->_internal_ownednfts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_ownednfts(), target);
  }

  // int32 max_automatic_token_associations = 18;
  if (this->_internal_max_automatic_token_associations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_max_automatic_token_associations(), target);
  }

  // bytes alias = 19;
  if (!this->_internal_alias().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_alias(), target);
  }

  // bytes ledger_id = 20;
  if (!this->_internal_ledger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_ledger_id(), target);
  }

  // int64 ethereum_nonce = 21;
  if (this->_internal_ethereum_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_ethereum_nonce(), target);
  }

  // .proto.StakingInfo staking_info = 22;
  if (this->_internal_has_staking_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::staking_info(this),
        _Internal::staking_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetInfoResponse.AccountInfo)
  return target;
}

size_t CryptoGetInfoResponse_AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetInfoResponse.AccountInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.LiveHash liveHashes = 14;
  total_size += 1UL * this->_internal_livehashes_size();
  for (const auto& msg : this->_impl_.livehashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.TokenRelationship tokenRelationships = 15 [deprecated = true];
  total_size += 1UL * this->_internal_tokenrelationships_size();
  for (const auto& msg : this->_impl_.tokenrelationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contractAccountID = 2;
  if (!this->_internal_contractaccountid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractaccountid());
  }

  // string memo = 16;
  if (!this->_internal_memo().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes alias = 19;
  if (!this->_internal_alias().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alias());
  }

  // bytes ledger_id = 20;
  if (!this->_internal_ledger_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_id());
  }

  // .proto.AccountID accountID = 1;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // .proto.AccountID proxyAccountID = 4 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxyaccountid_);
  }

  // .proto.Key key = 7;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // .proto.Timestamp expirationTime = 12;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // .proto.Duration autoRenewPeriod = 13;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.StakingInfo staking_info = 22;
  if (this->_internal_has_staking_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.staking_info_);
  }

  // int64 proxyReceived = 6;
  if (this->_internal_proxyreceived() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_proxyreceived());
  }

  // uint64 balance = 8;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
  }

  // uint64 generateSendRecordThreshold = 9 [deprecated = true];
  if (this->_internal_generatesendrecordthreshold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_generatesendrecordthreshold());
  }

  // uint64 generateReceiveRecordThreshold = 10 [deprecated = true];
  if (this->_internal_generatereceiverecordthreshold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_generatereceiverecordthreshold());
  }

  // bool deleted = 3;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  // bool receiverSigRequired = 11;
  if (this->_internal_receiversigrequired() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_automatic_token_associations = 18;
  if (this->_internal_max_automatic_token_associations() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_max_automatic_token_associations());
  }

  // int64 ownedNfts = 17;
  if (this->_internal_ownednfts() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ownednfts());
  }

  // int64 ethereum_nonce = 21;
  if (this->_internal_ethereum_nonce() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ethereum_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetInfoResponse_AccountInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetInfoResponse_AccountInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetInfoResponse_AccountInfo::GetClassData() const { return &_class_data_; }


void CryptoGetInfoResponse_AccountInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetInfoResponse_AccountInfo*>(&to_msg);
  auto& from = static_cast<const CryptoGetInfoResponse_AccountInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetInfoResponse.AccountInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.livehashes_.MergeFrom(from._impl_.livehashes_);
  _this->_impl_.tokenrelationships_.MergeFrom(from._impl_.tokenrelationships_);
  if (!from._internal_contractaccountid().empty()) {
    _this->_internal_set_contractaccountid(from._internal_contractaccountid());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_ledger_id().empty()) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_internal_mutable_proxyaccountid()->::proto::AccountID::MergeFrom(
        from._internal_proxyaccountid());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::Key::MergeFrom(
        from._internal_key());
  }
  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::Timestamp::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_staking_info()) {
    _this->_internal_mutable_staking_info()->::proto::StakingInfo::MergeFrom(
        from._internal_staking_info());
  }
  if (from._internal_proxyreceived() != 0) {
    _this->_internal_set_proxyreceived(from._internal_proxyreceived());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_generatesendrecordthreshold() != 0) {
    _this->_internal_set_generatesendrecordthreshold(from._internal_generatesendrecordthreshold());
  }
  if (from._internal_generatereceiverecordthreshold() != 0) {
    _this->_internal_set_generatereceiverecordthreshold(from._internal_generatereceiverecordthreshold());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  if (from._internal_receiversigrequired() != 0) {
    _this->_internal_set_receiversigrequired(from._internal_receiversigrequired());
  }
  if (from._internal_max_automatic_token_associations() != 0) {
    _this->_internal_set_max_automatic_token_associations(from._internal_max_automatic_token_associations());
  }
  if (from._internal_ownednfts() != 0) {
    _this->_internal_set_ownednfts(from._internal_ownednfts());
  }
  if (from._internal_ethereum_nonce() != 0) {
    _this->_internal_set_ethereum_nonce(from._internal_ethereum_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetInfoResponse_AccountInfo::CopyFrom(const CryptoGetInfoResponse_AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetInfoResponse.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetInfoResponse_AccountInfo::IsInitialized() const {
  return true;
}

void CryptoGetInfoResponse_AccountInfo::InternalSwap(CryptoGetInfoResponse_AccountInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.livehashes_.InternalSwap(&other->_impl_.livehashes_);
  _impl_.tokenrelationships_.InternalSwap(&other->_impl_.tokenrelationships_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contractaccountid_, lhs_arena,
      &other->_impl_.contractaccountid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_id_, lhs_arena,
      &other->_impl_.ledger_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoGetInfoResponse_AccountInfo, _impl_.ethereum_nonce_)
      + sizeof(CryptoGetInfoResponse_AccountInfo::_impl_.ethereum_nonce_)
      - PROTOBUF_FIELD_OFFSET(CryptoGetInfoResponse_AccountInfo, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetInfoResponse_AccountInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5finfo_2eproto_getter, &descriptor_table_crypto_5fget_5finfo_2eproto_once,
      file_level_metadata_crypto_5fget_5finfo_2eproto[1]);
}

// ===================================================================

class CryptoGetInfoResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const CryptoGetInfoResponse* msg);
  static const ::proto::CryptoGetInfoResponse_AccountInfo& accountinfo(const CryptoGetInfoResponse* msg);
};

const ::proto::ResponseHeader&
CryptoGetInfoResponse::_Internal::header(const CryptoGetInfoResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::CryptoGetInfoResponse_AccountInfo&
CryptoGetInfoResponse::_Internal::accountinfo(const CryptoGetInfoResponse* msg) {
  return *msg->_impl_.accountinfo_;
}
void CryptoGetInfoResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
CryptoGetInfoResponse::CryptoGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetInfoResponse)
}
CryptoGetInfoResponse::CryptoGetInfoResponse(const CryptoGetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_accountinfo()) {
    _this->_impl_.accountinfo_ = new ::proto::CryptoGetInfoResponse_AccountInfo(*from._impl_.accountinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetInfoResponse)
}

inline void CryptoGetInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoGetInfoResponse::~CryptoGetInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.accountinfo_;
}

void CryptoGetInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountinfo_ != nullptr) {
    delete _impl_.accountinfo_;
  }
  _impl_.accountinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetInfoResponse.AccountInfo accountInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetInfoResponse.AccountInfo accountInfo = 2;
  if (this->_internal_has_accountinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountinfo(this),
        _Internal::accountinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetInfoResponse)
  return target;
}

size_t CryptoGetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.CryptoGetInfoResponse.AccountInfo accountInfo = 2;
  if (this->_internal_has_accountinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetInfoResponse::GetClassData() const { return &_class_data_; }


void CryptoGetInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetInfoResponse*>(&to_msg);
  auto& from = static_cast<const CryptoGetInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_accountinfo()) {
    _this->_internal_mutable_accountinfo()->::proto::CryptoGetInfoResponse_AccountInfo::MergeFrom(
        from._internal_accountinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetInfoResponse::CopyFrom(const CryptoGetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetInfoResponse::IsInitialized() const {
  return true;
}

void CryptoGetInfoResponse::InternalSwap(CryptoGetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoGetInfoResponse, _impl_.accountinfo_)
      + sizeof(CryptoGetInfoResponse::_impl_.accountinfo_)
      - PROTOBUF_FIELD_OFFSET(CryptoGetInfoResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5finfo_2eproto_getter, &descriptor_table_crypto_5fget_5finfo_2eproto_once,
      file_level_metadata_crypto_5fget_5finfo_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoGetInfoQuery*
Arena::CreateMaybeMessage< ::proto::CryptoGetInfoQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetInfoQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CryptoGetInfoResponse_AccountInfo*
Arena::CreateMaybeMessage< ::proto::CryptoGetInfoResponse_AccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetInfoResponse_AccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CryptoGetInfoResponse*
Arena::CreateMaybeMessage< ::proto::CryptoGetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

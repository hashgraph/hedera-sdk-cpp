// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#include "query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_query_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_query_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_query_2eproto = nullptr;

const uint32_t TableStruct_query_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Query, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Query, _impl_.query_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::Query)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_Query_default_instance_._instance,
};

const char descriptor_table_protodef_query_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013query.proto\022\005proto\032\020get_by_key.proto\032\030"
  "get_by_solidity_id.proto\032\031contract_call_"
  "local.proto\032\027contract_get_info.proto\032\033co"
  "ntract_get_bytecode.proto\032\032contract_get_"
  "records.proto\032 crypto_get_account_balanc"
  "e.proto\032 crypto_get_account_records.prot"
  "o\032\025crypto_get_info.proto\032\032crypto_get_liv"
  "e_hash.proto\032\030crypto_get_stakers.proto\032\027"
  "file_get_contents.proto\032\023file_get_info.p"
  "roto\032\035transaction_get_receipt.proto\032\034tra"
  "nsaction_get_record.proto\032!transaction_g"
  "et_fast_record.proto\032\036consensus_get_topi"
  "c_info.proto\032\036network_get_version_info.p"
  "roto\032 network_get_execution_time.proto\032\024"
  "token_get_info.proto\032\027schedule_get_info."
  "proto\032!token_get_account_nft_infos.proto"
  "\032\030token_get_nft_info.proto\032\031token_get_nf"
  "t_infos.proto\032\031get_account_details.proto"
  "\"\210\014\n\005Query\022(\n\010getByKey\030\001 \001(\0132\024.proto.Get"
  "ByKeyQueryH\000\0226\n\017getBySolidityID\030\002 \001(\0132\033."
  "proto.GetBySolidityIDQueryH\000\022:\n\021contract"
  "CallLocal\030\003 \001(\0132\035.proto.ContractCallLoca"
  "lQueryH\000\0226\n\017contractGetInfo\030\004 \001(\0132\033.prot"
  "o.ContractGetInfoQueryH\000\022>\n\023contractGetB"
  "ytecode\030\005 \001(\0132\037.proto.ContractGetBytecod"
  "eQueryH\000\022<\n\022ContractGetRecords\030\006 \001(\0132\036.p"
  "roto.ContractGetRecordsQueryH\000\022F\n\027crypto"
  "getAccountBalance\030\007 \001(\0132#.proto.CryptoGe"
  "tAccountBalanceQueryH\000\022F\n\027cryptoGetAccou"
  "ntRecords\030\010 \001(\0132#.proto.CryptoGetAccount"
  "RecordsQueryH\000\0222\n\rcryptoGetInfo\030\t \001(\0132\031."
  "proto.CryptoGetInfoQueryH\000\022:\n\021cryptoGetL"
  "iveHash\030\n \001(\0132\035.proto.CryptoGetLiveHashQ"
  "ueryH\000\022=\n\025cryptoGetProxyStakers\030\013 \001(\0132\034."
  "proto.CryptoGetStakersQueryH\000\0226\n\017fileGet"
  "Contents\030\014 \001(\0132\033.proto.FileGetContentsQu"
  "eryH\000\022.\n\013fileGetInfo\030\r \001(\0132\027.proto.FileG"
  "etInfoQueryH\000\022B\n\025transactionGetReceipt\030\016"
  " \001(\0132!.proto.TransactionGetReceiptQueryH"
  "\000\022@\n\024transactionGetRecord\030\017 \001(\0132 .proto."
  "TransactionGetRecordQueryH\000\022H\n\030transacti"
  "onGetFastRecord\030\020 \001(\0132$.proto.Transactio"
  "nGetFastRecordQueryH\000\022B\n\025consensusGetTop"
  "icInfo\0302 \001(\0132!.proto.ConsensusGetTopicIn"
  "foQueryH\000\022B\n\025networkGetVersionInfo\0303 \001(\013"
  "2!.proto.NetworkGetVersionInfoQueryH\000\0220\n"
  "\014tokenGetInfo\0304 \001(\0132\030.proto.TokenGetInfo"
  "QueryH\000\0226\n\017scheduleGetInfo\0305 \001(\0132\033.proto"
  ".ScheduleGetInfoQueryH\000\022F\n\027tokenGetAccou"
  "ntNftInfos\0306 \001(\0132#.proto.TokenGetAccount"
  "NftInfosQueryH\000\0226\n\017tokenGetNftInfo\0307 \001(\013"
  "2\033.proto.TokenGetNftInfoQueryH\000\0228\n\020token"
  "GetNftInfos\0308 \001(\0132\034.proto.TokenGetNftInf"
  "osQueryH\000\022F\n\027networkGetExecutionTime\0309 \001"
  "(\0132#.proto.NetworkGetExecutionTimeQueryH"
  "\000\0227\n\016accountDetails\030: \001(\0132\035.proto.GetAcc"
  "ountDetailsQueryH\000B\007\n\005queryB&\n\"com.heder"
  "ahashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_query_2eproto_deps[25] = {
  &::descriptor_table_consensus_5fget_5ftopic_5finfo_2eproto,
  &::descriptor_table_contract_5fcall_5flocal_2eproto,
  &::descriptor_table_contract_5fget_5fbytecode_2eproto,
  &::descriptor_table_contract_5fget_5finfo_2eproto,
  &::descriptor_table_contract_5fget_5frecords_2eproto,
  &::descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto,
  &::descriptor_table_crypto_5fget_5faccount_5frecords_2eproto,
  &::descriptor_table_crypto_5fget_5finfo_2eproto,
  &::descriptor_table_crypto_5fget_5flive_5fhash_2eproto,
  &::descriptor_table_crypto_5fget_5fstakers_2eproto,
  &::descriptor_table_file_5fget_5fcontents_2eproto,
  &::descriptor_table_file_5fget_5finfo_2eproto,
  &::descriptor_table_get_5faccount_5fdetails_2eproto,
  &::descriptor_table_get_5fby_5fkey_2eproto,
  &::descriptor_table_get_5fby_5fsolidity_5fid_2eproto,
  &::descriptor_table_network_5fget_5fexecution_5ftime_2eproto,
  &::descriptor_table_network_5fget_5fversion_5finfo_2eproto,
  &::descriptor_table_schedule_5fget_5finfo_2eproto,
  &::descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto,
  &::descriptor_table_token_5fget_5finfo_2eproto,
  &::descriptor_table_token_5fget_5fnft_5finfo_2eproto,
  &::descriptor_table_token_5fget_5fnft_5finfos_2eproto,
  &::descriptor_table_transaction_5fget_5ffast_5frecord_2eproto,
  &::descriptor_table_transaction_5fget_5freceipt_2eproto,
  &::descriptor_table_transaction_5fget_5frecord_2eproto,
};
static ::_pbi::once_flag descriptor_table_query_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_query_2eproto = {
    false, false, 2315, descriptor_table_protodef_query_2eproto,
    "query.proto",
    &descriptor_table_query_2eproto_once, descriptor_table_query_2eproto_deps, 25, 1,
    schemas, file_default_instances, TableStruct_query_2eproto::offsets,
    file_level_metadata_query_2eproto, file_level_enum_descriptors_query_2eproto,
    file_level_service_descriptors_query_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_query_2eproto_getter() {
  return &descriptor_table_query_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_query_2eproto(&descriptor_table_query_2eproto);
namespace proto {

// ===================================================================

class Query::_Internal {
 public:
  static const ::proto::GetByKeyQuery& getbykey(const Query* msg);
  static const ::proto::GetBySolidityIDQuery& getbysolidityid(const Query* msg);
  static const ::proto::ContractCallLocalQuery& contractcalllocal(const Query* msg);
  static const ::proto::ContractGetInfoQuery& contractgetinfo(const Query* msg);
  static const ::proto::ContractGetBytecodeQuery& contractgetbytecode(const Query* msg);
  static const ::proto::ContractGetRecordsQuery& contractgetrecords(const Query* msg);
  static const ::proto::CryptoGetAccountBalanceQuery& cryptogetaccountbalance(const Query* msg);
  static const ::proto::CryptoGetAccountRecordsQuery& cryptogetaccountrecords(const Query* msg);
  static const ::proto::CryptoGetInfoQuery& cryptogetinfo(const Query* msg);
  static const ::proto::CryptoGetLiveHashQuery& cryptogetlivehash(const Query* msg);
  static const ::proto::CryptoGetStakersQuery& cryptogetproxystakers(const Query* msg);
  static const ::proto::FileGetContentsQuery& filegetcontents(const Query* msg);
  static const ::proto::FileGetInfoQuery& filegetinfo(const Query* msg);
  static const ::proto::TransactionGetReceiptQuery& transactiongetreceipt(const Query* msg);
  static const ::proto::TransactionGetRecordQuery& transactiongetrecord(const Query* msg);
  static const ::proto::TransactionGetFastRecordQuery& transactiongetfastrecord(const Query* msg);
  static const ::proto::ConsensusGetTopicInfoQuery& consensusgettopicinfo(const Query* msg);
  static const ::proto::NetworkGetVersionInfoQuery& networkgetversioninfo(const Query* msg);
  static const ::proto::TokenGetInfoQuery& tokengetinfo(const Query* msg);
  static const ::proto::ScheduleGetInfoQuery& schedulegetinfo(const Query* msg);
  static const ::proto::TokenGetAccountNftInfosQuery& tokengetaccountnftinfos(const Query* msg);
  static const ::proto::TokenGetNftInfoQuery& tokengetnftinfo(const Query* msg);
  static const ::proto::TokenGetNftInfosQuery& tokengetnftinfos(const Query* msg);
  static const ::proto::NetworkGetExecutionTimeQuery& networkgetexecutiontime(const Query* msg);
  static const ::proto::GetAccountDetailsQuery& accountdetails(const Query* msg);
};

const ::proto::GetByKeyQuery&
Query::_Internal::getbykey(const Query* msg) {
  return *msg->_impl_.query_.getbykey_;
}
const ::proto::GetBySolidityIDQuery&
Query::_Internal::getbysolidityid(const Query* msg) {
  return *msg->_impl_.query_.getbysolidityid_;
}
const ::proto::ContractCallLocalQuery&
Query::_Internal::contractcalllocal(const Query* msg) {
  return *msg->_impl_.query_.contractcalllocal_;
}
const ::proto::ContractGetInfoQuery&
Query::_Internal::contractgetinfo(const Query* msg) {
  return *msg->_impl_.query_.contractgetinfo_;
}
const ::proto::ContractGetBytecodeQuery&
Query::_Internal::contractgetbytecode(const Query* msg) {
  return *msg->_impl_.query_.contractgetbytecode_;
}
const ::proto::ContractGetRecordsQuery&
Query::_Internal::contractgetrecords(const Query* msg) {
  return *msg->_impl_.query_.contractgetrecords_;
}
const ::proto::CryptoGetAccountBalanceQuery&
Query::_Internal::cryptogetaccountbalance(const Query* msg) {
  return *msg->_impl_.query_.cryptogetaccountbalance_;
}
const ::proto::CryptoGetAccountRecordsQuery&
Query::_Internal::cryptogetaccountrecords(const Query* msg) {
  return *msg->_impl_.query_.cryptogetaccountrecords_;
}
const ::proto::CryptoGetInfoQuery&
Query::_Internal::cryptogetinfo(const Query* msg) {
  return *msg->_impl_.query_.cryptogetinfo_;
}
const ::proto::CryptoGetLiveHashQuery&
Query::_Internal::cryptogetlivehash(const Query* msg) {
  return *msg->_impl_.query_.cryptogetlivehash_;
}
const ::proto::CryptoGetStakersQuery&
Query::_Internal::cryptogetproxystakers(const Query* msg) {
  return *msg->_impl_.query_.cryptogetproxystakers_;
}
const ::proto::FileGetContentsQuery&
Query::_Internal::filegetcontents(const Query* msg) {
  return *msg->_impl_.query_.filegetcontents_;
}
const ::proto::FileGetInfoQuery&
Query::_Internal::filegetinfo(const Query* msg) {
  return *msg->_impl_.query_.filegetinfo_;
}
const ::proto::TransactionGetReceiptQuery&
Query::_Internal::transactiongetreceipt(const Query* msg) {
  return *msg->_impl_.query_.transactiongetreceipt_;
}
const ::proto::TransactionGetRecordQuery&
Query::_Internal::transactiongetrecord(const Query* msg) {
  return *msg->_impl_.query_.transactiongetrecord_;
}
const ::proto::TransactionGetFastRecordQuery&
Query::_Internal::transactiongetfastrecord(const Query* msg) {
  return *msg->_impl_.query_.transactiongetfastrecord_;
}
const ::proto::ConsensusGetTopicInfoQuery&
Query::_Internal::consensusgettopicinfo(const Query* msg) {
  return *msg->_impl_.query_.consensusgettopicinfo_;
}
const ::proto::NetworkGetVersionInfoQuery&
Query::_Internal::networkgetversioninfo(const Query* msg) {
  return *msg->_impl_.query_.networkgetversioninfo_;
}
const ::proto::TokenGetInfoQuery&
Query::_Internal::tokengetinfo(const Query* msg) {
  return *msg->_impl_.query_.tokengetinfo_;
}
const ::proto::ScheduleGetInfoQuery&
Query::_Internal::schedulegetinfo(const Query* msg) {
  return *msg->_impl_.query_.schedulegetinfo_;
}
const ::proto::TokenGetAccountNftInfosQuery&
Query::_Internal::tokengetaccountnftinfos(const Query* msg) {
  return *msg->_impl_.query_.tokengetaccountnftinfos_;
}
const ::proto::TokenGetNftInfoQuery&
Query::_Internal::tokengetnftinfo(const Query* msg) {
  return *msg->_impl_.query_.tokengetnftinfo_;
}
const ::proto::TokenGetNftInfosQuery&
Query::_Internal::tokengetnftinfos(const Query* msg) {
  return *msg->_impl_.query_.tokengetnftinfos_;
}
const ::proto::NetworkGetExecutionTimeQuery&
Query::_Internal::networkgetexecutiontime(const Query* msg) {
  return *msg->_impl_.query_.networkgetexecutiontime_;
}
const ::proto::GetAccountDetailsQuery&
Query::_Internal::accountdetails(const Query* msg) {
  return *msg->_impl_.query_.accountdetails_;
}
void Query::set_allocated_getbykey(::proto::GetByKeyQuery* getbykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (getbykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbykey));
    if (message_arena != submessage_arena) {
      getbykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbykey, submessage_arena);
    }
    set_has_getbykey();
    _impl_.query_.getbykey_ = getbykey;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.getByKey)
}
void Query::clear_getbykey() {
  if (_internal_has_getbykey()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.getbykey_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_getbysolidityid(::proto::GetBySolidityIDQuery* getbysolidityid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (getbysolidityid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbysolidityid));
    if (message_arena != submessage_arena) {
      getbysolidityid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbysolidityid, submessage_arena);
    }
    set_has_getbysolidityid();
    _impl_.query_.getbysolidityid_ = getbysolidityid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.getBySolidityID)
}
void Query::clear_getbysolidityid() {
  if (_internal_has_getbysolidityid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.getbysolidityid_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_contractcalllocal(::proto::ContractCallLocalQuery* contractcalllocal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (contractcalllocal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractcalllocal));
    if (message_arena != submessage_arena) {
      contractcalllocal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractcalllocal, submessage_arena);
    }
    set_has_contractcalllocal();
    _impl_.query_.contractcalllocal_ = contractcalllocal;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.contractCallLocal)
}
void Query::clear_contractcalllocal() {
  if (_internal_has_contractcalllocal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.contractcalllocal_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_contractgetinfo(::proto::ContractGetInfoQuery* contractgetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (contractgetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractgetinfo));
    if (message_arena != submessage_arena) {
      contractgetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractgetinfo, submessage_arena);
    }
    set_has_contractgetinfo();
    _impl_.query_.contractgetinfo_ = contractgetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.contractGetInfo)
}
void Query::clear_contractgetinfo() {
  if (_internal_has_contractgetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.contractgetinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_contractgetbytecode(::proto::ContractGetBytecodeQuery* contractgetbytecode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (contractgetbytecode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractgetbytecode));
    if (message_arena != submessage_arena) {
      contractgetbytecode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractgetbytecode, submessage_arena);
    }
    set_has_contractgetbytecode();
    _impl_.query_.contractgetbytecode_ = contractgetbytecode;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.contractGetBytecode)
}
void Query::clear_contractgetbytecode() {
  if (_internal_has_contractgetbytecode()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.contractgetbytecode_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_contractgetrecords(::proto::ContractGetRecordsQuery* contractgetrecords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (contractgetrecords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractgetrecords));
    if (message_arena != submessage_arena) {
      contractgetrecords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractgetrecords, submessage_arena);
    }
    set_has_contractgetrecords();
    _impl_.query_.contractgetrecords_ = contractgetrecords;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.ContractGetRecords)
}
void Query::clear_contractgetrecords() {
  if (_internal_has_contractgetrecords()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.contractgetrecords_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_cryptogetaccountbalance(::proto::CryptoGetAccountBalanceQuery* cryptogetaccountbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (cryptogetaccountbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetaccountbalance));
    if (message_arena != submessage_arena) {
      cryptogetaccountbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetaccountbalance, submessage_arena);
    }
    set_has_cryptogetaccountbalance();
    _impl_.query_.cryptogetaccountbalance_ = cryptogetaccountbalance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.cryptogetAccountBalance)
}
void Query::clear_cryptogetaccountbalance() {
  if (_internal_has_cryptogetaccountbalance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.cryptogetaccountbalance_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_cryptogetaccountrecords(::proto::CryptoGetAccountRecordsQuery* cryptogetaccountrecords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (cryptogetaccountrecords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetaccountrecords));
    if (message_arena != submessage_arena) {
      cryptogetaccountrecords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetaccountrecords, submessage_arena);
    }
    set_has_cryptogetaccountrecords();
    _impl_.query_.cryptogetaccountrecords_ = cryptogetaccountrecords;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.cryptoGetAccountRecords)
}
void Query::clear_cryptogetaccountrecords() {
  if (_internal_has_cryptogetaccountrecords()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.cryptogetaccountrecords_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_cryptogetinfo(::proto::CryptoGetInfoQuery* cryptogetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (cryptogetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetinfo));
    if (message_arena != submessage_arena) {
      cryptogetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetinfo, submessage_arena);
    }
    set_has_cryptogetinfo();
    _impl_.query_.cryptogetinfo_ = cryptogetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.cryptoGetInfo)
}
void Query::clear_cryptogetinfo() {
  if (_internal_has_cryptogetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.cryptogetinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_cryptogetlivehash(::proto::CryptoGetLiveHashQuery* cryptogetlivehash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (cryptogetlivehash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetlivehash));
    if (message_arena != submessage_arena) {
      cryptogetlivehash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetlivehash, submessage_arena);
    }
    set_has_cryptogetlivehash();
    _impl_.query_.cryptogetlivehash_ = cryptogetlivehash;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.cryptoGetLiveHash)
}
void Query::clear_cryptogetlivehash() {
  if (_internal_has_cryptogetlivehash()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.cryptogetlivehash_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_cryptogetproxystakers(::proto::CryptoGetStakersQuery* cryptogetproxystakers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (cryptogetproxystakers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetproxystakers));
    if (message_arena != submessage_arena) {
      cryptogetproxystakers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetproxystakers, submessage_arena);
    }
    set_has_cryptogetproxystakers();
    _impl_.query_.cryptogetproxystakers_ = cryptogetproxystakers;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.cryptoGetProxyStakers)
}
void Query::clear_cryptogetproxystakers() {
  if (_internal_has_cryptogetproxystakers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.cryptogetproxystakers_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_filegetcontents(::proto::FileGetContentsQuery* filegetcontents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (filegetcontents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filegetcontents));
    if (message_arena != submessage_arena) {
      filegetcontents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filegetcontents, submessage_arena);
    }
    set_has_filegetcontents();
    _impl_.query_.filegetcontents_ = filegetcontents;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.fileGetContents)
}
void Query::clear_filegetcontents() {
  if (_internal_has_filegetcontents()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.filegetcontents_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_filegetinfo(::proto::FileGetInfoQuery* filegetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (filegetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filegetinfo));
    if (message_arena != submessage_arena) {
      filegetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filegetinfo, submessage_arena);
    }
    set_has_filegetinfo();
    _impl_.query_.filegetinfo_ = filegetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.fileGetInfo)
}
void Query::clear_filegetinfo() {
  if (_internal_has_filegetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.filegetinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_transactiongetreceipt(::proto::TransactionGetReceiptQuery* transactiongetreceipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (transactiongetreceipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactiongetreceipt));
    if (message_arena != submessage_arena) {
      transactiongetreceipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactiongetreceipt, submessage_arena);
    }
    set_has_transactiongetreceipt();
    _impl_.query_.transactiongetreceipt_ = transactiongetreceipt;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.transactionGetReceipt)
}
void Query::clear_transactiongetreceipt() {
  if (_internal_has_transactiongetreceipt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.transactiongetreceipt_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_transactiongetrecord(::proto::TransactionGetRecordQuery* transactiongetrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (transactiongetrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactiongetrecord));
    if (message_arena != submessage_arena) {
      transactiongetrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactiongetrecord, submessage_arena);
    }
    set_has_transactiongetrecord();
    _impl_.query_.transactiongetrecord_ = transactiongetrecord;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.transactionGetRecord)
}
void Query::clear_transactiongetrecord() {
  if (_internal_has_transactiongetrecord()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.transactiongetrecord_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_transactiongetfastrecord(::proto::TransactionGetFastRecordQuery* transactiongetfastrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (transactiongetfastrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactiongetfastrecord));
    if (message_arena != submessage_arena) {
      transactiongetfastrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactiongetfastrecord, submessage_arena);
    }
    set_has_transactiongetfastrecord();
    _impl_.query_.transactiongetfastrecord_ = transactiongetfastrecord;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.transactionGetFastRecord)
}
void Query::clear_transactiongetfastrecord() {
  if (_internal_has_transactiongetfastrecord()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.transactiongetfastrecord_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_consensusgettopicinfo(::proto::ConsensusGetTopicInfoQuery* consensusgettopicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (consensusgettopicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensusgettopicinfo));
    if (message_arena != submessage_arena) {
      consensusgettopicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensusgettopicinfo, submessage_arena);
    }
    set_has_consensusgettopicinfo();
    _impl_.query_.consensusgettopicinfo_ = consensusgettopicinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.consensusGetTopicInfo)
}
void Query::clear_consensusgettopicinfo() {
  if (_internal_has_consensusgettopicinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.consensusgettopicinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_networkgetversioninfo(::proto::NetworkGetVersionInfoQuery* networkgetversioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (networkgetversioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkgetversioninfo));
    if (message_arena != submessage_arena) {
      networkgetversioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkgetversioninfo, submessage_arena);
    }
    set_has_networkgetversioninfo();
    _impl_.query_.networkgetversioninfo_ = networkgetversioninfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.networkGetVersionInfo)
}
void Query::clear_networkgetversioninfo() {
  if (_internal_has_networkgetversioninfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.networkgetversioninfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_tokengetinfo(::proto::TokenGetInfoQuery* tokengetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (tokengetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetinfo));
    if (message_arena != submessage_arena) {
      tokengetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetinfo, submessage_arena);
    }
    set_has_tokengetinfo();
    _impl_.query_.tokengetinfo_ = tokengetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.tokenGetInfo)
}
void Query::clear_tokengetinfo() {
  if (_internal_has_tokengetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.tokengetinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_schedulegetinfo(::proto::ScheduleGetInfoQuery* schedulegetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (schedulegetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schedulegetinfo));
    if (message_arena != submessage_arena) {
      schedulegetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedulegetinfo, submessage_arena);
    }
    set_has_schedulegetinfo();
    _impl_.query_.schedulegetinfo_ = schedulegetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.scheduleGetInfo)
}
void Query::clear_schedulegetinfo() {
  if (_internal_has_schedulegetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.schedulegetinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_tokengetaccountnftinfos(::proto::TokenGetAccountNftInfosQuery* tokengetaccountnftinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (tokengetaccountnftinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetaccountnftinfos));
    if (message_arena != submessage_arena) {
      tokengetaccountnftinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetaccountnftinfos, submessage_arena);
    }
    set_has_tokengetaccountnftinfos();
    _impl_.query_.tokengetaccountnftinfos_ = tokengetaccountnftinfos;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.tokenGetAccountNftInfos)
}
void Query::clear_tokengetaccountnftinfos() {
  if (_internal_has_tokengetaccountnftinfos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.tokengetaccountnftinfos_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_tokengetnftinfo(::proto::TokenGetNftInfoQuery* tokengetnftinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (tokengetnftinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetnftinfo));
    if (message_arena != submessage_arena) {
      tokengetnftinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetnftinfo, submessage_arena);
    }
    set_has_tokengetnftinfo();
    _impl_.query_.tokengetnftinfo_ = tokengetnftinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.tokenGetNftInfo)
}
void Query::clear_tokengetnftinfo() {
  if (_internal_has_tokengetnftinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.tokengetnftinfo_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_tokengetnftinfos(::proto::TokenGetNftInfosQuery* tokengetnftinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (tokengetnftinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetnftinfos));
    if (message_arena != submessage_arena) {
      tokengetnftinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetnftinfos, submessage_arena);
    }
    set_has_tokengetnftinfos();
    _impl_.query_.tokengetnftinfos_ = tokengetnftinfos;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.tokenGetNftInfos)
}
void Query::clear_tokengetnftinfos() {
  if (_internal_has_tokengetnftinfos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.tokengetnftinfos_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_networkgetexecutiontime(::proto::NetworkGetExecutionTimeQuery* networkgetexecutiontime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (networkgetexecutiontime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkgetexecutiontime));
    if (message_arena != submessage_arena) {
      networkgetexecutiontime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkgetexecutiontime, submessage_arena);
    }
    set_has_networkgetexecutiontime();
    _impl_.query_.networkgetexecutiontime_ = networkgetexecutiontime;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.networkGetExecutionTime)
}
void Query::clear_networkgetexecutiontime() {
  if (_internal_has_networkgetexecutiontime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.networkgetexecutiontime_;
    }
    clear_has_query();
  }
}
void Query::set_allocated_accountdetails(::proto::GetAccountDetailsQuery* accountdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (accountdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountdetails));
    if (message_arena != submessage_arena) {
      accountdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountdetails, submessage_arena);
    }
    set_has_accountdetails();
    _impl_.query_.accountdetails_ = accountdetails;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Query.accountDetails)
}
void Query::clear_accountdetails() {
  if (_internal_has_accountdetails()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.accountdetails_;
    }
    clear_has_query();
  }
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_query();
  switch (from.query_case()) {
    case kGetByKey: {
      _this->_internal_mutable_getbykey()->::proto::GetByKeyQuery::MergeFrom(
          from._internal_getbykey());
      break;
    }
    case kGetBySolidityID: {
      _this->_internal_mutable_getbysolidityid()->::proto::GetBySolidityIDQuery::MergeFrom(
          from._internal_getbysolidityid());
      break;
    }
    case kContractCallLocal: {
      _this->_internal_mutable_contractcalllocal()->::proto::ContractCallLocalQuery::MergeFrom(
          from._internal_contractcalllocal());
      break;
    }
    case kContractGetInfo: {
      _this->_internal_mutable_contractgetinfo()->::proto::ContractGetInfoQuery::MergeFrom(
          from._internal_contractgetinfo());
      break;
    }
    case kContractGetBytecode: {
      _this->_internal_mutable_contractgetbytecode()->::proto::ContractGetBytecodeQuery::MergeFrom(
          from._internal_contractgetbytecode());
      break;
    }
    case kContractGetRecords: {
      _this->_internal_mutable_contractgetrecords()->::proto::ContractGetRecordsQuery::MergeFrom(
          from._internal_contractgetrecords());
      break;
    }
    case kCryptogetAccountBalance: {
      _this->_internal_mutable_cryptogetaccountbalance()->::proto::CryptoGetAccountBalanceQuery::MergeFrom(
          from._internal_cryptogetaccountbalance());
      break;
    }
    case kCryptoGetAccountRecords: {
      _this->_internal_mutable_cryptogetaccountrecords()->::proto::CryptoGetAccountRecordsQuery::MergeFrom(
          from._internal_cryptogetaccountrecords());
      break;
    }
    case kCryptoGetInfo: {
      _this->_internal_mutable_cryptogetinfo()->::proto::CryptoGetInfoQuery::MergeFrom(
          from._internal_cryptogetinfo());
      break;
    }
    case kCryptoGetLiveHash: {
      _this->_internal_mutable_cryptogetlivehash()->::proto::CryptoGetLiveHashQuery::MergeFrom(
          from._internal_cryptogetlivehash());
      break;
    }
    case kCryptoGetProxyStakers: {
      _this->_internal_mutable_cryptogetproxystakers()->::proto::CryptoGetStakersQuery::MergeFrom(
          from._internal_cryptogetproxystakers());
      break;
    }
    case kFileGetContents: {
      _this->_internal_mutable_filegetcontents()->::proto::FileGetContentsQuery::MergeFrom(
          from._internal_filegetcontents());
      break;
    }
    case kFileGetInfo: {
      _this->_internal_mutable_filegetinfo()->::proto::FileGetInfoQuery::MergeFrom(
          from._internal_filegetinfo());
      break;
    }
    case kTransactionGetReceipt: {
      _this->_internal_mutable_transactiongetreceipt()->::proto::TransactionGetReceiptQuery::MergeFrom(
          from._internal_transactiongetreceipt());
      break;
    }
    case kTransactionGetRecord: {
      _this->_internal_mutable_transactiongetrecord()->::proto::TransactionGetRecordQuery::MergeFrom(
          from._internal_transactiongetrecord());
      break;
    }
    case kTransactionGetFastRecord: {
      _this->_internal_mutable_transactiongetfastrecord()->::proto::TransactionGetFastRecordQuery::MergeFrom(
          from._internal_transactiongetfastrecord());
      break;
    }
    case kConsensusGetTopicInfo: {
      _this->_internal_mutable_consensusgettopicinfo()->::proto::ConsensusGetTopicInfoQuery::MergeFrom(
          from._internal_consensusgettopicinfo());
      break;
    }
    case kNetworkGetVersionInfo: {
      _this->_internal_mutable_networkgetversioninfo()->::proto::NetworkGetVersionInfoQuery::MergeFrom(
          from._internal_networkgetversioninfo());
      break;
    }
    case kTokenGetInfo: {
      _this->_internal_mutable_tokengetinfo()->::proto::TokenGetInfoQuery::MergeFrom(
          from._internal_tokengetinfo());
      break;
    }
    case kScheduleGetInfo: {
      _this->_internal_mutable_schedulegetinfo()->::proto::ScheduleGetInfoQuery::MergeFrom(
          from._internal_schedulegetinfo());
      break;
    }
    case kTokenGetAccountNftInfos: {
      _this->_internal_mutable_tokengetaccountnftinfos()->::proto::TokenGetAccountNftInfosQuery::MergeFrom(
          from._internal_tokengetaccountnftinfos());
      break;
    }
    case kTokenGetNftInfo: {
      _this->_internal_mutable_tokengetnftinfo()->::proto::TokenGetNftInfoQuery::MergeFrom(
          from._internal_tokengetnftinfo());
      break;
    }
    case kTokenGetNftInfos: {
      _this->_internal_mutable_tokengetnftinfos()->::proto::TokenGetNftInfosQuery::MergeFrom(
          from._internal_tokengetnftinfos());
      break;
    }
    case kNetworkGetExecutionTime: {
      _this->_internal_mutable_networkgetexecutiontime()->::proto::NetworkGetExecutionTimeQuery::MergeFrom(
          from._internal_networkgetexecutiontime());
      break;
    }
    case kAccountDetails: {
      _this->_internal_mutable_accountdetails()->::proto::GetAccountDetailsQuery::MergeFrom(
          from._internal_accountdetails());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Query)
}

inline void Query::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_query();
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:proto.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_query()) {
    clear_query();
  }
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:proto.Query)
  switch (query_case()) {
    case kGetByKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.getbykey_;
      }
      break;
    }
    case kGetBySolidityID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.getbysolidityid_;
      }
      break;
    }
    case kContractCallLocal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.contractcalllocal_;
      }
      break;
    }
    case kContractGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.contractgetinfo_;
      }
      break;
    }
    case kContractGetBytecode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.contractgetbytecode_;
      }
      break;
    }
    case kContractGetRecords: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.contractgetrecords_;
      }
      break;
    }
    case kCryptogetAccountBalance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.cryptogetaccountbalance_;
      }
      break;
    }
    case kCryptoGetAccountRecords: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.cryptogetaccountrecords_;
      }
      break;
    }
    case kCryptoGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.cryptogetinfo_;
      }
      break;
    }
    case kCryptoGetLiveHash: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.cryptogetlivehash_;
      }
      break;
    }
    case kCryptoGetProxyStakers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.cryptogetproxystakers_;
      }
      break;
    }
    case kFileGetContents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.filegetcontents_;
      }
      break;
    }
    case kFileGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.filegetinfo_;
      }
      break;
    }
    case kTransactionGetReceipt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.transactiongetreceipt_;
      }
      break;
    }
    case kTransactionGetRecord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.transactiongetrecord_;
      }
      break;
    }
    case kTransactionGetFastRecord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.transactiongetfastrecord_;
      }
      break;
    }
    case kConsensusGetTopicInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.consensusgettopicinfo_;
      }
      break;
    }
    case kNetworkGetVersionInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.networkgetversioninfo_;
      }
      break;
    }
    case kTokenGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.tokengetinfo_;
      }
      break;
    }
    case kScheduleGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.schedulegetinfo_;
      }
      break;
    }
    case kTokenGetAccountNftInfos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.tokengetaccountnftinfos_;
      }
      break;
    }
    case kTokenGetNftInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.tokengetnftinfo_;
      }
      break;
    }
    case kTokenGetNftInfos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.tokengetnftinfos_;
      }
      break;
    }
    case kNetworkGetExecutionTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.networkgetexecutiontime_;
      }
      break;
    }
    case kAccountDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.accountdetails_;
      }
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = QUERY_NOT_SET;
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Query)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_query();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.GetByKeyQuery getByKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbykey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.GetBySolidityIDQuery getBySolidityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbysolidityid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractCallLocalQuery contractCallLocal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractcalllocal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetInfoQuery contractGetInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractgetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetBytecodeQuery contractGetBytecode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractgetbytecode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetRecordsQuery ContractGetRecords = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractgetrecords(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetaccountbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetaccountrecords(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetInfoQuery cryptoGetInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetlivehash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetproxystakers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileGetContentsQuery fileGetContents = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filegetcontents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileGetInfoQuery fileGetInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_filegetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionGetReceiptQuery transactionGetReceipt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactiongetreceipt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionGetRecordQuery transactionGetRecord = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactiongetrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactiongetfastrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensusgettopicinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_networkgetversioninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetInfoQuery tokenGetInfo = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleGetInfoQuery scheduleGetInfo = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedulegetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetaccountnftinfos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetnftinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetNftInfosQuery tokenGetNftInfos = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetnftinfos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_networkgetexecutiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.GetAccountDetailsQuery accountDetails = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Query)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GetByKeyQuery getByKey = 1;
  if (_internal_has_getbykey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::getbykey(this),
        _Internal::getbykey(this).GetCachedSize(), target, stream);
  }

  // .proto.GetBySolidityIDQuery getBySolidityID = 2;
  if (_internal_has_getbysolidityid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::getbysolidityid(this),
        _Internal::getbysolidityid(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractCallLocalQuery contractCallLocal = 3;
  if (_internal_has_contractcalllocal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contractcalllocal(this),
        _Internal::contractcalllocal(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetInfoQuery contractGetInfo = 4;
  if (_internal_has_contractgetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contractgetinfo(this),
        _Internal::contractgetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetBytecodeQuery contractGetBytecode = 5;
  if (_internal_has_contractgetbytecode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::contractgetbytecode(this),
        _Internal::contractgetbytecode(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetRecordsQuery ContractGetRecords = 6;
  if (_internal_has_contractgetrecords()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::contractgetrecords(this),
        _Internal::contractgetrecords(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;
  if (_internal_has_cryptogetaccountbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cryptogetaccountbalance(this),
        _Internal::cryptogetaccountbalance(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;
  if (_internal_has_cryptogetaccountrecords()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::cryptogetaccountrecords(this),
        _Internal::cryptogetaccountrecords(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetInfoQuery cryptoGetInfo = 9;
  if (_internal_has_cryptogetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cryptogetinfo(this),
        _Internal::cryptogetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10;
  if (_internal_has_cryptogetlivehash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cryptogetlivehash(this),
        _Internal::cryptogetlivehash(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11;
  if (_internal_has_cryptogetproxystakers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cryptogetproxystakers(this),
        _Internal::cryptogetproxystakers(this).GetCachedSize(), target, stream);
  }

  // .proto.FileGetContentsQuery fileGetContents = 12;
  if (_internal_has_filegetcontents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::filegetcontents(this),
        _Internal::filegetcontents(this).GetCachedSize(), target, stream);
  }

  // .proto.FileGetInfoQuery fileGetInfo = 13;
  if (_internal_has_filegetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::filegetinfo(this),
        _Internal::filegetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionGetReceiptQuery transactionGetReceipt = 14;
  if (_internal_has_transactiongetreceipt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::transactiongetreceipt(this),
        _Internal::transactiongetreceipt(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionGetRecordQuery transactionGetRecord = 15;
  if (_internal_has_transactiongetrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::transactiongetrecord(this),
        _Internal::transactiongetrecord(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;
  if (_internal_has_transactiongetfastrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::transactiongetfastrecord(this),
        _Internal::transactiongetfastrecord(this).GetCachedSize(), target, stream);
  }

  // .proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;
  if (_internal_has_consensusgettopicinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::consensusgettopicinfo(this),
        _Internal::consensusgettopicinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;
  if (_internal_has_networkgetversioninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::networkgetversioninfo(this),
        _Internal::networkgetversioninfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetInfoQuery tokenGetInfo = 52;
  if (_internal_has_tokengetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::tokengetinfo(this),
        _Internal::tokengetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.ScheduleGetInfoQuery scheduleGetInfo = 53;
  if (_internal_has_schedulegetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::schedulegetinfo(this),
        _Internal::schedulegetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54;
  if (_internal_has_tokengetaccountnftinfos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::tokengetaccountnftinfos(this),
        _Internal::tokengetaccountnftinfos(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;
  if (_internal_has_tokengetnftinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::tokengetnftinfo(this),
        _Internal::tokengetnftinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetNftInfosQuery tokenGetNftInfos = 56;
  if (_internal_has_tokengetnftinfos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::tokengetnftinfos(this),
        _Internal::tokengetnftinfos(this).GetCachedSize(), target, stream);
  }

  // .proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57;
  if (_internal_has_networkgetexecutiontime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::networkgetexecutiontime(this),
        _Internal::networkgetexecutiontime(this).GetCachedSize(), target, stream);
  }

  // .proto.GetAccountDetailsQuery accountDetails = 58;
  if (_internal_has_accountdetails()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::accountdetails(this),
        _Internal::accountdetails(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Query)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (query_case()) {
    // .proto.GetByKeyQuery getByKey = 1;
    case kGetByKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.getbykey_);
      break;
    }
    // .proto.GetBySolidityIDQuery getBySolidityID = 2;
    case kGetBySolidityID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.getbysolidityid_);
      break;
    }
    // .proto.ContractCallLocalQuery contractCallLocal = 3;
    case kContractCallLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.contractcalllocal_);
      break;
    }
    // .proto.ContractGetInfoQuery contractGetInfo = 4;
    case kContractGetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.contractgetinfo_);
      break;
    }
    // .proto.ContractGetBytecodeQuery contractGetBytecode = 5;
    case kContractGetBytecode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.contractgetbytecode_);
      break;
    }
    // .proto.ContractGetRecordsQuery ContractGetRecords = 6;
    case kContractGetRecords: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.contractgetrecords_);
      break;
    }
    // .proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;
    case kCryptogetAccountBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.cryptogetaccountbalance_);
      break;
    }
    // .proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;
    case kCryptoGetAccountRecords: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.cryptogetaccountrecords_);
      break;
    }
    // .proto.CryptoGetInfoQuery cryptoGetInfo = 9;
    case kCryptoGetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.cryptogetinfo_);
      break;
    }
    // .proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10;
    case kCryptoGetLiveHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.cryptogetlivehash_);
      break;
    }
    // .proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11;
    case kCryptoGetProxyStakers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.cryptogetproxystakers_);
      break;
    }
    // .proto.FileGetContentsQuery fileGetContents = 12;
    case kFileGetContents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.filegetcontents_);
      break;
    }
    // .proto.FileGetInfoQuery fileGetInfo = 13;
    case kFileGetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.filegetinfo_);
      break;
    }
    // .proto.TransactionGetReceiptQuery transactionGetReceipt = 14;
    case kTransactionGetReceipt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.transactiongetreceipt_);
      break;
    }
    // .proto.TransactionGetRecordQuery transactionGetRecord = 15;
    case kTransactionGetRecord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.transactiongetrecord_);
      break;
    }
    // .proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;
    case kTransactionGetFastRecord: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.transactiongetfastrecord_);
      break;
    }
    // .proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;
    case kConsensusGetTopicInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.consensusgettopicinfo_);
      break;
    }
    // .proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;
    case kNetworkGetVersionInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.networkgetversioninfo_);
      break;
    }
    // .proto.TokenGetInfoQuery tokenGetInfo = 52;
    case kTokenGetInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.tokengetinfo_);
      break;
    }
    // .proto.ScheduleGetInfoQuery scheduleGetInfo = 53;
    case kScheduleGetInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.schedulegetinfo_);
      break;
    }
    // .proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54;
    case kTokenGetAccountNftInfos: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.tokengetaccountnftinfos_);
      break;
    }
    // .proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;
    case kTokenGetNftInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.tokengetnftinfo_);
      break;
    }
    // .proto.TokenGetNftInfosQuery tokenGetNftInfos = 56;
    case kTokenGetNftInfos: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.tokengetnftinfos_);
      break;
    }
    // .proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57;
    case kNetworkGetExecutionTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.networkgetexecutiontime_);
      break;
    }
    // .proto.GetAccountDetailsQuery accountDetails = 58;
    case kAccountDetails: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.accountdetails_);
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Query)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.query_case()) {
    case kGetByKey: {
      _this->_internal_mutable_getbykey()->::proto::GetByKeyQuery::MergeFrom(
          from._internal_getbykey());
      break;
    }
    case kGetBySolidityID: {
      _this->_internal_mutable_getbysolidityid()->::proto::GetBySolidityIDQuery::MergeFrom(
          from._internal_getbysolidityid());
      break;
    }
    case kContractCallLocal: {
      _this->_internal_mutable_contractcalllocal()->::proto::ContractCallLocalQuery::MergeFrom(
          from._internal_contractcalllocal());
      break;
    }
    case kContractGetInfo: {
      _this->_internal_mutable_contractgetinfo()->::proto::ContractGetInfoQuery::MergeFrom(
          from._internal_contractgetinfo());
      break;
    }
    case kContractGetBytecode: {
      _this->_internal_mutable_contractgetbytecode()->::proto::ContractGetBytecodeQuery::MergeFrom(
          from._internal_contractgetbytecode());
      break;
    }
    case kContractGetRecords: {
      _this->_internal_mutable_contractgetrecords()->::proto::ContractGetRecordsQuery::MergeFrom(
          from._internal_contractgetrecords());
      break;
    }
    case kCryptogetAccountBalance: {
      _this->_internal_mutable_cryptogetaccountbalance()->::proto::CryptoGetAccountBalanceQuery::MergeFrom(
          from._internal_cryptogetaccountbalance());
      break;
    }
    case kCryptoGetAccountRecords: {
      _this->_internal_mutable_cryptogetaccountrecords()->::proto::CryptoGetAccountRecordsQuery::MergeFrom(
          from._internal_cryptogetaccountrecords());
      break;
    }
    case kCryptoGetInfo: {
      _this->_internal_mutable_cryptogetinfo()->::proto::CryptoGetInfoQuery::MergeFrom(
          from._internal_cryptogetinfo());
      break;
    }
    case kCryptoGetLiveHash: {
      _this->_internal_mutable_cryptogetlivehash()->::proto::CryptoGetLiveHashQuery::MergeFrom(
          from._internal_cryptogetlivehash());
      break;
    }
    case kCryptoGetProxyStakers: {
      _this->_internal_mutable_cryptogetproxystakers()->::proto::CryptoGetStakersQuery::MergeFrom(
          from._internal_cryptogetproxystakers());
      break;
    }
    case kFileGetContents: {
      _this->_internal_mutable_filegetcontents()->::proto::FileGetContentsQuery::MergeFrom(
          from._internal_filegetcontents());
      break;
    }
    case kFileGetInfo: {
      _this->_internal_mutable_filegetinfo()->::proto::FileGetInfoQuery::MergeFrom(
          from._internal_filegetinfo());
      break;
    }
    case kTransactionGetReceipt: {
      _this->_internal_mutable_transactiongetreceipt()->::proto::TransactionGetReceiptQuery::MergeFrom(
          from._internal_transactiongetreceipt());
      break;
    }
    case kTransactionGetRecord: {
      _this->_internal_mutable_transactiongetrecord()->::proto::TransactionGetRecordQuery::MergeFrom(
          from._internal_transactiongetrecord());
      break;
    }
    case kTransactionGetFastRecord: {
      _this->_internal_mutable_transactiongetfastrecord()->::proto::TransactionGetFastRecordQuery::MergeFrom(
          from._internal_transactiongetfastrecord());
      break;
    }
    case kConsensusGetTopicInfo: {
      _this->_internal_mutable_consensusgettopicinfo()->::proto::ConsensusGetTopicInfoQuery::MergeFrom(
          from._internal_consensusgettopicinfo());
      break;
    }
    case kNetworkGetVersionInfo: {
      _this->_internal_mutable_networkgetversioninfo()->::proto::NetworkGetVersionInfoQuery::MergeFrom(
          from._internal_networkgetversioninfo());
      break;
    }
    case kTokenGetInfo: {
      _this->_internal_mutable_tokengetinfo()->::proto::TokenGetInfoQuery::MergeFrom(
          from._internal_tokengetinfo());
      break;
    }
    case kScheduleGetInfo: {
      _this->_internal_mutable_schedulegetinfo()->::proto::ScheduleGetInfoQuery::MergeFrom(
          from._internal_schedulegetinfo());
      break;
    }
    case kTokenGetAccountNftInfos: {
      _this->_internal_mutable_tokengetaccountnftinfos()->::proto::TokenGetAccountNftInfosQuery::MergeFrom(
          from._internal_tokengetaccountnftinfos());
      break;
    }
    case kTokenGetNftInfo: {
      _this->_internal_mutable_tokengetnftinfo()->::proto::TokenGetNftInfoQuery::MergeFrom(
          from._internal_tokengetnftinfo());
      break;
    }
    case kTokenGetNftInfos: {
      _this->_internal_mutable_tokengetnftinfos()->::proto::TokenGetNftInfosQuery::MergeFrom(
          from._internal_tokengetnftinfos());
      break;
    }
    case kNetworkGetExecutionTime: {
      _this->_internal_mutable_networkgetexecutiontime()->::proto::NetworkGetExecutionTimeQuery::MergeFrom(
          from._internal_networkgetexecutiontime());
      break;
    }
    case kAccountDetails: {
      _this->_internal_mutable_accountdetails()->::proto::GetAccountDetailsQuery::MergeFrom(
          from._internal_accountdetails());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.query_, other->_impl_.query_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_query_2eproto_getter, &descriptor_table_query_2eproto_once,
      file_level_metadata_query_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Query*
Arena::CreateMaybeMessage< ::proto::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Query >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_update.proto

#include "token_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR TokenUpdateTransactionBody::TokenUpdateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/nullptr
  , /*decltype(_impl_.treasury_)*/nullptr
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.kyckey_)*/nullptr
  , /*decltype(_impl_.freezekey_)*/nullptr
  , /*decltype(_impl_.wipekey_)*/nullptr
  , /*decltype(_impl_.supplykey_)*/nullptr
  , /*decltype(_impl_.autorenewaccount_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.expiry_)*/nullptr
  , /*decltype(_impl_.memo_)*/nullptr
  , /*decltype(_impl_.fee_schedule_key_)*/nullptr
  , /*decltype(_impl_.pause_key_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenUpdateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenUpdateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenUpdateTransactionBodyDefaultTypeInternal() {}
  union {
    TokenUpdateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenUpdateTransactionBodyDefaultTypeInternal _TokenUpdateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_token_5fupdate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_token_5fupdate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_token_5fupdate_2eproto = nullptr;

const uint32_t TableStruct_token_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.treasury_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.kyckey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.freezekey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.wipekey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.supplykey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.autorenewaccount_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.expiry_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.fee_schedule_key_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenUpdateTransactionBody, _impl_.pause_key_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::TokenUpdateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_TokenUpdateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_token_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022token_update.proto\022\005proto\032\021basic_types"
  ".proto\032\016duration.proto\032\017timestamp.proto\032"
  "\036google/protobuf/wrappers.proto\"\373\003\n\032Toke"
  "nUpdateTransactionBody\022\035\n\005token\030\001 \001(\0132\016."
  "proto.TokenID\022\016\n\006symbol\030\002 \001(\t\022\014\n\004name\030\003 "
  "\001(\t\022\"\n\010treasury\030\004 \001(\0132\020.proto.AccountID\022"
  "\034\n\010adminKey\030\005 \001(\0132\n.proto.Key\022\032\n\006kycKey\030"
  "\006 \001(\0132\n.proto.Key\022\035\n\tfreezeKey\030\007 \001(\0132\n.p"
  "roto.Key\022\033\n\007wipeKey\030\010 \001(\0132\n.proto.Key\022\035\n"
  "\tsupplyKey\030\t \001(\0132\n.proto.Key\022*\n\020autoRene"
  "wAccount\030\n \001(\0132\020.proto.AccountID\022(\n\017auto"
  "RenewPeriod\030\013 \001(\0132\017.proto.Duration\022 \n\006ex"
  "piry\030\014 \001(\0132\020.proto.Timestamp\022*\n\004memo\030\r \001"
  "(\0132\034.google.protobuf.StringValue\022$\n\020fee_"
  "schedule_key\030\016 \001(\0132\n.proto.Key\022\035\n\tpause_"
  "key\030\017 \001(\0132\n.proto.KeyB&\n\"com.hederahashg"
  "raph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_token_5fupdate_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_token_5fupdate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_token_5fupdate_2eproto = {
    false, false, 669, descriptor_table_protodef_token_5fupdate_2eproto,
    "token_update.proto",
    &descriptor_table_token_5fupdate_2eproto_once, descriptor_table_token_5fupdate_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_token_5fupdate_2eproto::offsets,
    file_level_metadata_token_5fupdate_2eproto, file_level_enum_descriptors_token_5fupdate_2eproto,
    file_level_service_descriptors_token_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_token_5fupdate_2eproto_getter() {
  return &descriptor_table_token_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_token_5fupdate_2eproto(&descriptor_table_token_5fupdate_2eproto);
namespace proto {

// ===================================================================

class TokenUpdateTransactionBody::_Internal {
 public:
  static const ::proto::TokenID& token(const TokenUpdateTransactionBody* msg);
  static const ::proto::AccountID& treasury(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& adminkey(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& kyckey(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& freezekey(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& wipekey(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& supplykey(const TokenUpdateTransactionBody* msg);
  static const ::proto::AccountID& autorenewaccount(const TokenUpdateTransactionBody* msg);
  static const ::proto::Duration& autorenewperiod(const TokenUpdateTransactionBody* msg);
  static const ::proto::Timestamp& expiry(const TokenUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& memo(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& fee_schedule_key(const TokenUpdateTransactionBody* msg);
  static const ::proto::Key& pause_key(const TokenUpdateTransactionBody* msg);
};

const ::proto::TokenID&
TokenUpdateTransactionBody::_Internal::token(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.token_;
}
const ::proto::AccountID&
TokenUpdateTransactionBody::_Internal::treasury(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.treasury_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::adminkey(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::kyckey(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.kyckey_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::freezekey(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.freezekey_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::wipekey(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.wipekey_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::supplykey(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.supplykey_;
}
const ::proto::AccountID&
TokenUpdateTransactionBody::_Internal::autorenewaccount(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.autorenewaccount_;
}
const ::proto::Duration&
TokenUpdateTransactionBody::_Internal::autorenewperiod(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::Timestamp&
TokenUpdateTransactionBody::_Internal::expiry(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.expiry_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
TokenUpdateTransactionBody::_Internal::memo(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.memo_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::fee_schedule_key(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.fee_schedule_key_;
}
const ::proto::Key&
TokenUpdateTransactionBody::_Internal::pause_key(const TokenUpdateTransactionBody* msg) {
  return *msg->_impl_.pause_key_;
}
void TokenUpdateTransactionBody::clear_token() {
  if (GetArenaForAllocation() == nullptr && _impl_.token_ != nullptr) {
    delete _impl_.token_;
  }
  _impl_.token_ = nullptr;
}
void TokenUpdateTransactionBody::clear_treasury() {
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_ != nullptr) {
    delete _impl_.treasury_;
  }
  _impl_.treasury_ = nullptr;
}
void TokenUpdateTransactionBody::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void TokenUpdateTransactionBody::clear_kyckey() {
  if (GetArenaForAllocation() == nullptr && _impl_.kyckey_ != nullptr) {
    delete _impl_.kyckey_;
  }
  _impl_.kyckey_ = nullptr;
}
void TokenUpdateTransactionBody::clear_freezekey() {
  if (GetArenaForAllocation() == nullptr && _impl_.freezekey_ != nullptr) {
    delete _impl_.freezekey_;
  }
  _impl_.freezekey_ = nullptr;
}
void TokenUpdateTransactionBody::clear_wipekey() {
  if (GetArenaForAllocation() == nullptr && _impl_.wipekey_ != nullptr) {
    delete _impl_.wipekey_;
  }
  _impl_.wipekey_ = nullptr;
}
void TokenUpdateTransactionBody::clear_supplykey() {
  if (GetArenaForAllocation() == nullptr && _impl_.supplykey_ != nullptr) {
    delete _impl_.supplykey_;
  }
  _impl_.supplykey_ = nullptr;
}
void TokenUpdateTransactionBody::clear_autorenewaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewaccount_ != nullptr) {
    delete _impl_.autorenewaccount_;
  }
  _impl_.autorenewaccount_ = nullptr;
}
void TokenUpdateTransactionBody::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void TokenUpdateTransactionBody::clear_expiry() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_ != nullptr) {
    delete _impl_.expiry_;
  }
  _impl_.expiry_ = nullptr;
}
void TokenUpdateTransactionBody::clear_memo() {
  if (GetArenaForAllocation() == nullptr && _impl_.memo_ != nullptr) {
    delete _impl_.memo_;
  }
  _impl_.memo_ = nullptr;
}
void TokenUpdateTransactionBody::clear_fee_schedule_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.fee_schedule_key_ != nullptr) {
    delete _impl_.fee_schedule_key_;
  }
  _impl_.fee_schedule_key_ = nullptr;
}
void TokenUpdateTransactionBody::clear_pause_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.pause_key_ != nullptr) {
    delete _impl_.pause_key_;
  }
  _impl_.pause_key_ = nullptr;
}
TokenUpdateTransactionBody::TokenUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenUpdateTransactionBody)
}
TokenUpdateTransactionBody::TokenUpdateTransactionBody(const TokenUpdateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenUpdateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.token_){nullptr}
    , decltype(_impl_.treasury_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.kyckey_){nullptr}
    , decltype(_impl_.freezekey_){nullptr}
    , decltype(_impl_.wipekey_){nullptr}
    , decltype(_impl_.supplykey_){nullptr}
    , decltype(_impl_.autorenewaccount_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.expiry_){nullptr}
    , decltype(_impl_.memo_){nullptr}
    , decltype(_impl_.fee_schedule_key_){nullptr}
    , decltype(_impl_.pause_key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_token()) {
    _this->_impl_.token_ = new ::proto::TokenID(*from._impl_.token_);
  }
  if (from._internal_has_treasury()) {
    _this->_impl_.treasury_ = new ::proto::AccountID(*from._impl_.treasury_);
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_kyckey()) {
    _this->_impl_.kyckey_ = new ::proto::Key(*from._impl_.kyckey_);
  }
  if (from._internal_has_freezekey()) {
    _this->_impl_.freezekey_ = new ::proto::Key(*from._impl_.freezekey_);
  }
  if (from._internal_has_wipekey()) {
    _this->_impl_.wipekey_ = new ::proto::Key(*from._impl_.wipekey_);
  }
  if (from._internal_has_supplykey()) {
    _this->_impl_.supplykey_ = new ::proto::Key(*from._impl_.supplykey_);
  }
  if (from._internal_has_autorenewaccount()) {
    _this->_impl_.autorenewaccount_ = new ::proto::AccountID(*from._impl_.autorenewaccount_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_expiry()) {
    _this->_impl_.expiry_ = new ::proto::Timestamp(*from._impl_.expiry_);
  }
  if (from._internal_has_memo()) {
    _this->_impl_.memo_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from._impl_.memo_);
  }
  if (from._internal_has_fee_schedule_key()) {
    _this->_impl_.fee_schedule_key_ = new ::proto::Key(*from._impl_.fee_schedule_key_);
  }
  if (from._internal_has_pause_key()) {
    _this->_impl_.pause_key_ = new ::proto::Key(*from._impl_.pause_key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TokenUpdateTransactionBody)
}

inline void TokenUpdateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.token_){nullptr}
    , decltype(_impl_.treasury_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.kyckey_){nullptr}
    , decltype(_impl_.freezekey_){nullptr}
    , decltype(_impl_.wipekey_){nullptr}
    , decltype(_impl_.supplykey_){nullptr}
    , decltype(_impl_.autorenewaccount_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.expiry_){nullptr}
    , decltype(_impl_.memo_){nullptr}
    , decltype(_impl_.fee_schedule_key_){nullptr}
    , decltype(_impl_.pause_key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenUpdateTransactionBody::~TokenUpdateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.TokenUpdateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenUpdateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.token_;
  if (this != internal_default_instance()) delete _impl_.treasury_;
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.kyckey_;
  if (this != internal_default_instance()) delete _impl_.freezekey_;
  if (this != internal_default_instance()) delete _impl_.wipekey_;
  if (this != internal_default_instance()) delete _impl_.supplykey_;
  if (this != internal_default_instance()) delete _impl_.autorenewaccount_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.expiry_;
  if (this != internal_default_instance()) delete _impl_.memo_;
  if (this != internal_default_instance()) delete _impl_.fee_schedule_key_;
  if (this != internal_default_instance()) delete _impl_.pause_key_;
}

void TokenUpdateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenUpdateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.token_ != nullptr) {
    delete _impl_.token_;
  }
  _impl_.token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_ != nullptr) {
    delete _impl_.treasury_;
  }
  _impl_.treasury_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kyckey_ != nullptr) {
    delete _impl_.kyckey_;
  }
  _impl_.kyckey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.freezekey_ != nullptr) {
    delete _impl_.freezekey_;
  }
  _impl_.freezekey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wipekey_ != nullptr) {
    delete _impl_.wipekey_;
  }
  _impl_.wipekey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.supplykey_ != nullptr) {
    delete _impl_.supplykey_;
  }
  _impl_.supplykey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewaccount_ != nullptr) {
    delete _impl_.autorenewaccount_;
  }
  _impl_.autorenewaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_ != nullptr) {
    delete _impl_.expiry_;
  }
  _impl_.expiry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.memo_ != nullptr) {
    delete _impl_.memo_;
  }
  _impl_.memo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fee_schedule_key_ != nullptr) {
    delete _impl_.fee_schedule_key_;
  }
  _impl_.fee_schedule_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pause_key_ != nullptr) {
    delete _impl_.pause_key_;
  }
  _impl_.pause_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenUpdateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TokenUpdateTransactionBody.symbol"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TokenUpdateTransactionBody.name"));
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID treasury = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasury(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key kycKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kyckey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key freezeKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_freezekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key wipeKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wipekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key supplyKey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_supplykey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID autoRenewAccount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expiry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue memo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key fee_schedule_key = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_schedule_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key pause_key = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenUpdateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID token = 1;
  if (this->_internal_has_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TokenUpdateTransactionBody.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TokenUpdateTransactionBody.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .proto.AccountID treasury = 4;
  if (this->_internal_has_treasury()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::treasury(this),
        _Internal::treasury(this).GetCachedSize(), target, stream);
  }

  // .proto.Key adminKey = 5;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key kycKey = 6;
  if (this->_internal_has_kyckey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::kyckey(this),
        _Internal::kyckey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key freezeKey = 7;
  if (this->_internal_has_freezekey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::freezekey(this),
        _Internal::freezekey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key wipeKey = 8;
  if (this->_internal_has_wipekey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::wipekey(this),
        _Internal::wipekey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key supplyKey = 9;
  if (this->_internal_has_supplykey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::supplykey(this),
        _Internal::supplykey(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID autoRenewAccount = 10;
  if (this->_internal_has_autorenewaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::autorenewaccount(this),
        _Internal::autorenewaccount(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration autoRenewPeriod = 11;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp expiry = 12;
  if (this->_internal_has_expiry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::expiry(this),
        _Internal::expiry(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue memo = 13;
  if (this->_internal_has_memo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::memo(this),
        _Internal::memo(this).GetCachedSize(), target, stream);
  }

  // .proto.Key fee_schedule_key = 14;
  if (this->_internal_has_fee_schedule_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::fee_schedule_key(this),
        _Internal::fee_schedule_key(this).GetCachedSize(), target, stream);
  }

  // .proto.Key pause_key = 15;
  if (this->_internal_has_pause_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::pause_key(this),
        _Internal::pause_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenUpdateTransactionBody)
  return target;
}

size_t TokenUpdateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenUpdateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .proto.TokenID token = 1;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_);
  }

  // .proto.AccountID treasury = 4;
  if (this->_internal_has_treasury()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.treasury_);
  }

  // .proto.Key adminKey = 5;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.Key kycKey = 6;
  if (this->_internal_has_kyckey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kyckey_);
  }

  // .proto.Key freezeKey = 7;
  if (this->_internal_has_freezekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.freezekey_);
  }

  // .proto.Key wipeKey = 8;
  if (this->_internal_has_wipekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wipekey_);
  }

  // .proto.Key supplyKey = 9;
  if (this->_internal_has_supplykey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.supplykey_);
  }

  // .proto.AccountID autoRenewAccount = 10;
  if (this->_internal_has_autorenewaccount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewaccount_);
  }

  // .proto.Duration autoRenewPeriod = 11;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.Timestamp expiry = 12;
  if (this->_internal_has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiry_);
  }

  // .google.protobuf.StringValue memo = 13;
  if (this->_internal_has_memo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.memo_);
  }

  // .proto.Key fee_schedule_key = 14;
  if (this->_internal_has_fee_schedule_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_schedule_key_);
  }

  // .proto.Key pause_key = 15;
  if (this->_internal_has_pause_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pause_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenUpdateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenUpdateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenUpdateTransactionBody::GetClassData() const { return &_class_data_; }


void TokenUpdateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenUpdateTransactionBody*>(&to_msg);
  auto& from = static_cast<const TokenUpdateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenUpdateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_token()) {
    _this->_internal_mutable_token()->::proto::TokenID::MergeFrom(
        from._internal_token());
  }
  if (from._internal_has_treasury()) {
    _this->_internal_mutable_treasury()->::proto::AccountID::MergeFrom(
        from._internal_treasury());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_kyckey()) {
    _this->_internal_mutable_kyckey()->::proto::Key::MergeFrom(
        from._internal_kyckey());
  }
  if (from._internal_has_freezekey()) {
    _this->_internal_mutable_freezekey()->::proto::Key::MergeFrom(
        from._internal_freezekey());
  }
  if (from._internal_has_wipekey()) {
    _this->_internal_mutable_wipekey()->::proto::Key::MergeFrom(
        from._internal_wipekey());
  }
  if (from._internal_has_supplykey()) {
    _this->_internal_mutable_supplykey()->::proto::Key::MergeFrom(
        from._internal_supplykey());
  }
  if (from._internal_has_autorenewaccount()) {
    _this->_internal_mutable_autorenewaccount()->::proto::AccountID::MergeFrom(
        from._internal_autorenewaccount());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_expiry()) {
    _this->_internal_mutable_expiry()->::proto::Timestamp::MergeFrom(
        from._internal_expiry());
  }
  if (from._internal_has_memo()) {
    _this->_internal_mutable_memo()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
        from._internal_memo());
  }
  if (from._internal_has_fee_schedule_key()) {
    _this->_internal_mutable_fee_schedule_key()->::proto::Key::MergeFrom(
        from._internal_fee_schedule_key());
  }
  if (from._internal_has_pause_key()) {
    _this->_internal_mutable_pause_key()->::proto::Key::MergeFrom(
        from._internal_pause_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenUpdateTransactionBody::CopyFrom(const TokenUpdateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenUpdateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenUpdateTransactionBody::IsInitialized() const {
  return true;
}

void TokenUpdateTransactionBody::InternalSwap(TokenUpdateTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenUpdateTransactionBody, _impl_.pause_key_)
      + sizeof(TokenUpdateTransactionBody::_impl_.pause_key_)
      - PROTOBUF_FIELD_OFFSET(TokenUpdateTransactionBody, _impl_.token_)>(
          reinterpret_cast<char*>(&_impl_.token_),
          reinterpret_cast<char*>(&other->_impl_.token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenUpdateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fupdate_2eproto_getter, &descriptor_table_token_5fupdate_2eproto_once,
      file_level_metadata_token_5fupdate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TokenUpdateTransactionBody*
Arena::CreateMaybeMessage< ::proto::TokenUpdateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenUpdateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

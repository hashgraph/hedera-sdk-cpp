// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_fees.proto

#include "custom_fees.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR FractionalFee::FractionalFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fractional_amount_)*/nullptr
  , /*decltype(_impl_.minimum_amount_)*/int64_t{0}
  , /*decltype(_impl_.maximum_amount_)*/int64_t{0}
  , /*decltype(_impl_.net_of_transfers_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FractionalFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FractionalFeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FractionalFeeDefaultTypeInternal() {}
  union {
    FractionalFee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FractionalFeeDefaultTypeInternal _FractionalFee_default_instance_;
PROTOBUF_CONSTEXPR FixedFee::FixedFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denominating_token_id_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FixedFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FixedFeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FixedFeeDefaultTypeInternal() {}
  union {
    FixedFee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FixedFeeDefaultTypeInternal _FixedFee_default_instance_;
PROTOBUF_CONSTEXPR RoyaltyFee::RoyaltyFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_value_fraction_)*/nullptr
  , /*decltype(_impl_.fallback_fee_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoyaltyFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoyaltyFeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoyaltyFeeDefaultTypeInternal() {}
  union {
    RoyaltyFee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoyaltyFeeDefaultTypeInternal _RoyaltyFee_default_instance_;
PROTOBUF_CONSTEXPR CustomFee::CustomFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fee_collector_account_id_)*/nullptr
  , /*decltype(_impl_.fee_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CustomFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomFeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomFeeDefaultTypeInternal() {}
  union {
    CustomFee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomFeeDefaultTypeInternal _CustomFee_default_instance_;
PROTOBUF_CONSTEXPR AssessedCustomFee::AssessedCustomFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.effective_payer_account_id_)*/{}
  , /*decltype(_impl_.token_id_)*/nullptr
  , /*decltype(_impl_.fee_collector_account_id_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssessedCustomFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssessedCustomFeeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssessedCustomFeeDefaultTypeInternal() {}
  union {
    AssessedCustomFee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssessedCustomFeeDefaultTypeInternal _AssessedCustomFee_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_custom_5ffees_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_custom_5ffees_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_custom_5ffees_2eproto = nullptr;

const uint32_t TableStruct_custom_5ffees_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FractionalFee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FractionalFee, _impl_.fractional_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::FractionalFee, _impl_.minimum_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::FractionalFee, _impl_.maximum_amount_),
  PROTOBUF_FIELD_OFFSET(::proto::FractionalFee, _impl_.net_of_transfers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FixedFee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FixedFee, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::proto::FixedFee, _impl_.denominating_token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RoyaltyFee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RoyaltyFee, _impl_.exchange_value_fraction_),
  PROTOBUF_FIELD_OFFSET(::proto::RoyaltyFee, _impl_.fallback_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CustomFee, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::CustomFee, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::CustomFee, _impl_.fee_collector_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::CustomFee, _impl_.fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AssessedCustomFee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AssessedCustomFee, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::proto::AssessedCustomFee, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::proto::AssessedCustomFee, _impl_.fee_collector_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::AssessedCustomFee, _impl_.effective_payer_account_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::FractionalFee)},
  { 10, -1, -1, sizeof(::proto::FixedFee)},
  { 18, -1, -1, sizeof(::proto::RoyaltyFee)},
  { 26, -1, -1, sizeof(::proto::CustomFee)},
  { 37, -1, -1, sizeof(::proto::AssessedCustomFee)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_FractionalFee_default_instance_._instance,
  &::proto::_FixedFee_default_instance_._instance,
  &::proto::_RoyaltyFee_default_instance_._instance,
  &::proto::_CustomFee_default_instance_._instance,
  &::proto::_AssessedCustomFee_default_instance_._instance,
};

const char descriptor_table_protodef_custom_5ffees_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021custom_fees.proto\022\005proto\032\021basic_types."
  "proto\"\205\001\n\rFractionalFee\022*\n\021fractional_am"
  "ount\030\001 \001(\0132\017.proto.Fraction\022\026\n\016minimum_a"
  "mount\030\002 \001(\003\022\026\n\016maximum_amount\030\003 \001(\003\022\030\n\020n"
  "et_of_transfers\030\004 \001(\010\"I\n\010FixedFee\022\016\n\006amo"
  "unt\030\001 \001(\003\022-\n\025denominating_token_id\030\002 \001(\013"
  "2\016.proto.TokenID\"e\n\nRoyaltyFee\0220\n\027exchan"
  "ge_value_fraction\030\001 \001(\0132\017.proto.Fraction"
  "\022%\n\014fallback_fee\030\002 \001(\0132\017.proto.FixedFee\""
  "\306\001\n\tCustomFee\022$\n\tfixed_fee\030\001 \001(\0132\017.proto"
  ".FixedFeeH\000\022.\n\016fractional_fee\030\002 \001(\0132\024.pr"
  "oto.FractionalFeeH\000\022(\n\013royalty_fee\030\004 \001(\013"
  "2\021.proto.RoyaltyFeeH\000\0222\n\030fee_collector_a"
  "ccount_id\030\003 \001(\0132\020.proto.AccountIDB\005\n\003fee"
  "\"\257\001\n\021AssessedCustomFee\022\016\n\006amount\030\001 \001(\003\022 "
  "\n\010token_id\030\002 \001(\0132\016.proto.TokenID\0222\n\030fee_"
  "collector_account_id\030\003 \001(\0132\020.proto.Accou"
  "ntID\0224\n\032effective_payer_account_id\030\004 \003(\013"
  "2\020.proto.AccountIDB&\n\"com.hederahashgrap"
  "h.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_custom_5ffees_2eproto_deps[1] = {
  &::descriptor_table_basic_5ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_custom_5ffees_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_custom_5ffees_2eproto = {
    false, false, 786, descriptor_table_protodef_custom_5ffees_2eproto,
    "custom_fees.proto",
    &descriptor_table_custom_5ffees_2eproto_once, descriptor_table_custom_5ffees_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_custom_5ffees_2eproto::offsets,
    file_level_metadata_custom_5ffees_2eproto, file_level_enum_descriptors_custom_5ffees_2eproto,
    file_level_service_descriptors_custom_5ffees_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_custom_5ffees_2eproto_getter() {
  return &descriptor_table_custom_5ffees_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_custom_5ffees_2eproto(&descriptor_table_custom_5ffees_2eproto);
namespace proto {

// ===================================================================

class FractionalFee::_Internal {
 public:
  static const ::proto::Fraction& fractional_amount(const FractionalFee* msg);
};

const ::proto::Fraction&
FractionalFee::_Internal::fractional_amount(const FractionalFee* msg) {
  return *msg->_impl_.fractional_amount_;
}
void FractionalFee::clear_fractional_amount() {
  if (GetArenaForAllocation() == nullptr && _impl_.fractional_amount_ != nullptr) {
    delete _impl_.fractional_amount_;
  }
  _impl_.fractional_amount_ = nullptr;
}
FractionalFee::FractionalFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FractionalFee)
}
FractionalFee::FractionalFee(const FractionalFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FractionalFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fractional_amount_){nullptr}
    , decltype(_impl_.minimum_amount_){}
    , decltype(_impl_.maximum_amount_){}
    , decltype(_impl_.net_of_transfers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fractional_amount()) {
    _this->_impl_.fractional_amount_ = new ::proto::Fraction(*from._impl_.fractional_amount_);
  }
  ::memcpy(&_impl_.minimum_amount_, &from._impl_.minimum_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.net_of_transfers_) -
    reinterpret_cast<char*>(&_impl_.minimum_amount_)) + sizeof(_impl_.net_of_transfers_));
  // @@protoc_insertion_point(copy_constructor:proto.FractionalFee)
}

inline void FractionalFee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fractional_amount_){nullptr}
    , decltype(_impl_.minimum_amount_){int64_t{0}}
    , decltype(_impl_.maximum_amount_){int64_t{0}}
    , decltype(_impl_.net_of_transfers_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FractionalFee::~FractionalFee() {
  // @@protoc_insertion_point(destructor:proto.FractionalFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FractionalFee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fractional_amount_;
}

void FractionalFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FractionalFee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FractionalFee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fractional_amount_ != nullptr) {
    delete _impl_.fractional_amount_;
  }
  _impl_.fractional_amount_ = nullptr;
  ::memset(&_impl_.minimum_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.net_of_transfers_) -
      reinterpret_cast<char*>(&_impl_.minimum_amount_)) + sizeof(_impl_.net_of_transfers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FractionalFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Fraction fractional_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractional_amount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 minimum_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minimum_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 maximum_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maximum_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool net_of_transfers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.net_of_transfers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FractionalFee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FractionalFee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Fraction fractional_amount = 1;
  if (this->_internal_has_fractional_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fractional_amount(this),
        _Internal::fractional_amount(this).GetCachedSize(), target, stream);
  }

  // int64 minimum_amount = 2;
  if (this->_internal_minimum_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_minimum_amount(), target);
  }

  // int64 maximum_amount = 3;
  if (this->_internal_maximum_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_maximum_amount(), target);
  }

  // bool net_of_transfers = 4;
  if (this->_internal_net_of_transfers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_net_of_transfers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FractionalFee)
  return target;
}

size_t FractionalFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FractionalFee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Fraction fractional_amount = 1;
  if (this->_internal_has_fractional_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fractional_amount_);
  }

  // int64 minimum_amount = 2;
  if (this->_internal_minimum_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_minimum_amount());
  }

  // int64 maximum_amount = 3;
  if (this->_internal_maximum_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maximum_amount());
  }

  // bool net_of_transfers = 4;
  if (this->_internal_net_of_transfers() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FractionalFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FractionalFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FractionalFee::GetClassData() const { return &_class_data_; }


void FractionalFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FractionalFee*>(&to_msg);
  auto& from = static_cast<const FractionalFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FractionalFee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fractional_amount()) {
    _this->_internal_mutable_fractional_amount()->::proto::Fraction::MergeFrom(
        from._internal_fractional_amount());
  }
  if (from._internal_minimum_amount() != 0) {
    _this->_internal_set_minimum_amount(from._internal_minimum_amount());
  }
  if (from._internal_maximum_amount() != 0) {
    _this->_internal_set_maximum_amount(from._internal_maximum_amount());
  }
  if (from._internal_net_of_transfers() != 0) {
    _this->_internal_set_net_of_transfers(from._internal_net_of_transfers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FractionalFee::CopyFrom(const FractionalFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FractionalFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FractionalFee::IsInitialized() const {
  return true;
}

void FractionalFee::InternalSwap(FractionalFee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FractionalFee, _impl_.net_of_transfers_)
      + sizeof(FractionalFee::_impl_.net_of_transfers_)
      - PROTOBUF_FIELD_OFFSET(FractionalFee, _impl_.fractional_amount_)>(
          reinterpret_cast<char*>(&_impl_.fractional_amount_),
          reinterpret_cast<char*>(&other->_impl_.fractional_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FractionalFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_5ffees_2eproto_getter, &descriptor_table_custom_5ffees_2eproto_once,
      file_level_metadata_custom_5ffees_2eproto[0]);
}

// ===================================================================

class FixedFee::_Internal {
 public:
  static const ::proto::TokenID& denominating_token_id(const FixedFee* msg);
};

const ::proto::TokenID&
FixedFee::_Internal::denominating_token_id(const FixedFee* msg) {
  return *msg->_impl_.denominating_token_id_;
}
void FixedFee::clear_denominating_token_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.denominating_token_id_ != nullptr) {
    delete _impl_.denominating_token_id_;
  }
  _impl_.denominating_token_id_ = nullptr;
}
FixedFee::FixedFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FixedFee)
}
FixedFee::FixedFee(const FixedFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FixedFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denominating_token_id_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_denominating_token_id()) {
    _this->_impl_.denominating_token_id_ = new ::proto::TokenID(*from._impl_.denominating_token_id_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.FixedFee)
}

inline void FixedFee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.denominating_token_id_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FixedFee::~FixedFee() {
  // @@protoc_insertion_point(destructor:proto.FixedFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FixedFee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.denominating_token_id_;
}

void FixedFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FixedFee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FixedFee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.denominating_token_id_ != nullptr) {
    delete _impl_.denominating_token_id_;
  }
  _impl_.denominating_token_id_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenID denominating_token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_denominating_token_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FixedFee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FixedFee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // .proto.TokenID denominating_token_id = 2;
  if (this->_internal_has_denominating_token_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::denominating_token_id(this),
        _Internal::denominating_token_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FixedFee)
  return target;
}

size_t FixedFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FixedFee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TokenID denominating_token_id = 2;
  if (this->_internal_has_denominating_token_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.denominating_token_id_);
  }

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FixedFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FixedFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FixedFee::GetClassData() const { return &_class_data_; }


void FixedFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FixedFee*>(&to_msg);
  auto& from = static_cast<const FixedFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FixedFee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_denominating_token_id()) {
    _this->_internal_mutable_denominating_token_id()->::proto::TokenID::MergeFrom(
        from._internal_denominating_token_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FixedFee::CopyFrom(const FixedFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FixedFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFee::IsInitialized() const {
  return true;
}

void FixedFee::InternalSwap(FixedFee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedFee, _impl_.amount_)
      + sizeof(FixedFee::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(FixedFee, _impl_.denominating_token_id_)>(
          reinterpret_cast<char*>(&_impl_.denominating_token_id_),
          reinterpret_cast<char*>(&other->_impl_.denominating_token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_5ffees_2eproto_getter, &descriptor_table_custom_5ffees_2eproto_once,
      file_level_metadata_custom_5ffees_2eproto[1]);
}

// ===================================================================

class RoyaltyFee::_Internal {
 public:
  static const ::proto::Fraction& exchange_value_fraction(const RoyaltyFee* msg);
  static const ::proto::FixedFee& fallback_fee(const RoyaltyFee* msg);
};

const ::proto::Fraction&
RoyaltyFee::_Internal::exchange_value_fraction(const RoyaltyFee* msg) {
  return *msg->_impl_.exchange_value_fraction_;
}
const ::proto::FixedFee&
RoyaltyFee::_Internal::fallback_fee(const RoyaltyFee* msg) {
  return *msg->_impl_.fallback_fee_;
}
void RoyaltyFee::clear_exchange_value_fraction() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_value_fraction_ != nullptr) {
    delete _impl_.exchange_value_fraction_;
  }
  _impl_.exchange_value_fraction_ = nullptr;
}
RoyaltyFee::RoyaltyFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RoyaltyFee)
}
RoyaltyFee::RoyaltyFee(const RoyaltyFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoyaltyFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_value_fraction_){nullptr}
    , decltype(_impl_.fallback_fee_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_exchange_value_fraction()) {
    _this->_impl_.exchange_value_fraction_ = new ::proto::Fraction(*from._impl_.exchange_value_fraction_);
  }
  if (from._internal_has_fallback_fee()) {
    _this->_impl_.fallback_fee_ = new ::proto::FixedFee(*from._impl_.fallback_fee_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RoyaltyFee)
}

inline void RoyaltyFee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_value_fraction_){nullptr}
    , decltype(_impl_.fallback_fee_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoyaltyFee::~RoyaltyFee() {
  // @@protoc_insertion_point(destructor:proto.RoyaltyFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoyaltyFee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.exchange_value_fraction_;
  if (this != internal_default_instance()) delete _impl_.fallback_fee_;
}

void RoyaltyFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoyaltyFee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RoyaltyFee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.exchange_value_fraction_ != nullptr) {
    delete _impl_.exchange_value_fraction_;
  }
  _impl_.exchange_value_fraction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fallback_fee_ != nullptr) {
    delete _impl_.fallback_fee_;
  }
  _impl_.fallback_fee_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoyaltyFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Fraction exchange_value_fraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_value_fraction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FixedFee fallback_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoyaltyFee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RoyaltyFee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Fraction exchange_value_fraction = 1;
  if (this->_internal_has_exchange_value_fraction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::exchange_value_fraction(this),
        _Internal::exchange_value_fraction(this).GetCachedSize(), target, stream);
  }

  // .proto.FixedFee fallback_fee = 2;
  if (this->_internal_has_fallback_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fallback_fee(this),
        _Internal::fallback_fee(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RoyaltyFee)
  return target;
}

size_t RoyaltyFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RoyaltyFee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Fraction exchange_value_fraction = 1;
  if (this->_internal_has_exchange_value_fraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_value_fraction_);
  }

  // .proto.FixedFee fallback_fee = 2;
  if (this->_internal_has_fallback_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fallback_fee_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoyaltyFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoyaltyFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoyaltyFee::GetClassData() const { return &_class_data_; }


void RoyaltyFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoyaltyFee*>(&to_msg);
  auto& from = static_cast<const RoyaltyFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RoyaltyFee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_exchange_value_fraction()) {
    _this->_internal_mutable_exchange_value_fraction()->::proto::Fraction::MergeFrom(
        from._internal_exchange_value_fraction());
  }
  if (from._internal_has_fallback_fee()) {
    _this->_internal_mutable_fallback_fee()->::proto::FixedFee::MergeFrom(
        from._internal_fallback_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoyaltyFee::CopyFrom(const RoyaltyFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RoyaltyFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoyaltyFee::IsInitialized() const {
  return true;
}

void RoyaltyFee::InternalSwap(RoyaltyFee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoyaltyFee, _impl_.fallback_fee_)
      + sizeof(RoyaltyFee::_impl_.fallback_fee_)
      - PROTOBUF_FIELD_OFFSET(RoyaltyFee, _impl_.exchange_value_fraction_)>(
          reinterpret_cast<char*>(&_impl_.exchange_value_fraction_),
          reinterpret_cast<char*>(&other->_impl_.exchange_value_fraction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoyaltyFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_5ffees_2eproto_getter, &descriptor_table_custom_5ffees_2eproto_once,
      file_level_metadata_custom_5ffees_2eproto[2]);
}

// ===================================================================

class CustomFee::_Internal {
 public:
  static const ::proto::FixedFee& fixed_fee(const CustomFee* msg);
  static const ::proto::FractionalFee& fractional_fee(const CustomFee* msg);
  static const ::proto::RoyaltyFee& royalty_fee(const CustomFee* msg);
  static const ::proto::AccountID& fee_collector_account_id(const CustomFee* msg);
};

const ::proto::FixedFee&
CustomFee::_Internal::fixed_fee(const CustomFee* msg) {
  return *msg->_impl_.fee_.fixed_fee_;
}
const ::proto::FractionalFee&
CustomFee::_Internal::fractional_fee(const CustomFee* msg) {
  return *msg->_impl_.fee_.fractional_fee_;
}
const ::proto::RoyaltyFee&
CustomFee::_Internal::royalty_fee(const CustomFee* msg) {
  return *msg->_impl_.fee_.royalty_fee_;
}
const ::proto::AccountID&
CustomFee::_Internal::fee_collector_account_id(const CustomFee* msg) {
  return *msg->_impl_.fee_collector_account_id_;
}
void CustomFee::set_allocated_fixed_fee(::proto::FixedFee* fixed_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_fee();
  if (fixed_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed_fee);
    if (message_arena != submessage_arena) {
      fixed_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_fee, submessage_arena);
    }
    set_has_fixed_fee();
    _impl_.fee_.fixed_fee_ = fixed_fee;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CustomFee.fixed_fee)
}
void CustomFee::set_allocated_fractional_fee(::proto::FractionalFee* fractional_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_fee();
  if (fractional_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fractional_fee);
    if (message_arena != submessage_arena) {
      fractional_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractional_fee, submessage_arena);
    }
    set_has_fractional_fee();
    _impl_.fee_.fractional_fee_ = fractional_fee;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CustomFee.fractional_fee)
}
void CustomFee::set_allocated_royalty_fee(::proto::RoyaltyFee* royalty_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_fee();
  if (royalty_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(royalty_fee);
    if (message_arena != submessage_arena) {
      royalty_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, royalty_fee, submessage_arena);
    }
    set_has_royalty_fee();
    _impl_.fee_.royalty_fee_ = royalty_fee;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CustomFee.royalty_fee)
}
void CustomFee::clear_fee_collector_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.fee_collector_account_id_ != nullptr) {
    delete _impl_.fee_collector_account_id_;
  }
  _impl_.fee_collector_account_id_ = nullptr;
}
CustomFee::CustomFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CustomFee)
}
CustomFee::CustomFee(const CustomFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fee_collector_account_id_){nullptr}
    , decltype(_impl_.fee_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fee_collector_account_id()) {
    _this->_impl_.fee_collector_account_id_ = new ::proto::AccountID(*from._impl_.fee_collector_account_id_);
  }
  clear_has_fee();
  switch (from.fee_case()) {
    case kFixedFee: {
      _this->_internal_mutable_fixed_fee()->::proto::FixedFee::MergeFrom(
          from._internal_fixed_fee());
      break;
    }
    case kFractionalFee: {
      _this->_internal_mutable_fractional_fee()->::proto::FractionalFee::MergeFrom(
          from._internal_fractional_fee());
      break;
    }
    case kRoyaltyFee: {
      _this->_internal_mutable_royalty_fee()->::proto::RoyaltyFee::MergeFrom(
          from._internal_royalty_fee());
      break;
    }
    case FEE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.CustomFee)
}

inline void CustomFee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fee_collector_account_id_){nullptr}
    , decltype(_impl_.fee_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_fee();
}

CustomFee::~CustomFee() {
  // @@protoc_insertion_point(destructor:proto.CustomFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomFee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fee_collector_account_id_;
  if (has_fee()) {
    clear_fee();
  }
}

void CustomFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomFee::clear_fee() {
// @@protoc_insertion_point(one_of_clear_start:proto.CustomFee)
  switch (fee_case()) {
    case kFixedFee: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.fee_.fixed_fee_;
      }
      break;
    }
    case kFractionalFee: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.fee_.fractional_fee_;
      }
      break;
    }
    case kRoyaltyFee: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.fee_.royalty_fee_;
      }
      break;
    }
    case FEE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FEE_NOT_SET;
}


void CustomFee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomFee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fee_collector_account_id_ != nullptr) {
    delete _impl_.fee_collector_account_id_;
  }
  _impl_.fee_collector_account_id_ = nullptr;
  clear_fee();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.FixedFee fixed_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FractionalFee fractional_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractional_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID fee_collector_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_collector_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RoyaltyFee royalty_fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_royalty_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomFee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomFee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.FixedFee fixed_fee = 1;
  if (_internal_has_fixed_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fixed_fee(this),
        _Internal::fixed_fee(this).GetCachedSize(), target, stream);
  }

  // .proto.FractionalFee fractional_fee = 2;
  if (_internal_has_fractional_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fractional_fee(this),
        _Internal::fractional_fee(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID fee_collector_account_id = 3;
  if (this->_internal_has_fee_collector_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fee_collector_account_id(this),
        _Internal::fee_collector_account_id(this).GetCachedSize(), target, stream);
  }

  // .proto.RoyaltyFee royalty_fee = 4;
  if (_internal_has_royalty_fee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::royalty_fee(this),
        _Internal::royalty_fee(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomFee)
  return target;
}

size_t CustomFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomFee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.AccountID fee_collector_account_id = 3;
  if (this->_internal_has_fee_collector_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_collector_account_id_);
  }

  switch (fee_case()) {
    // .proto.FixedFee fixed_fee = 1;
    case kFixedFee: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fee_.fixed_fee_);
      break;
    }
    // .proto.FractionalFee fractional_fee = 2;
    case kFractionalFee: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fee_.fractional_fee_);
      break;
    }
    // .proto.RoyaltyFee royalty_fee = 4;
    case kRoyaltyFee: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fee_.royalty_fee_);
      break;
    }
    case FEE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFee::GetClassData() const { return &_class_data_; }


void CustomFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomFee*>(&to_msg);
  auto& from = static_cast<const CustomFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomFee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fee_collector_account_id()) {
    _this->_internal_mutable_fee_collector_account_id()->::proto::AccountID::MergeFrom(
        from._internal_fee_collector_account_id());
  }
  switch (from.fee_case()) {
    case kFixedFee: {
      _this->_internal_mutable_fixed_fee()->::proto::FixedFee::MergeFrom(
          from._internal_fixed_fee());
      break;
    }
    case kFractionalFee: {
      _this->_internal_mutable_fractional_fee()->::proto::FractionalFee::MergeFrom(
          from._internal_fractional_fee());
      break;
    }
    case kRoyaltyFee: {
      _this->_internal_mutable_royalty_fee()->::proto::RoyaltyFee::MergeFrom(
          from._internal_royalty_fee());
      break;
    }
    case FEE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFee::CopyFrom(const CustomFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFee::IsInitialized() const {
  return true;
}

void CustomFee::InternalSwap(CustomFee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fee_collector_account_id_, other->_impl_.fee_collector_account_id_);
  swap(_impl_.fee_, other->_impl_.fee_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_5ffees_2eproto_getter, &descriptor_table_custom_5ffees_2eproto_once,
      file_level_metadata_custom_5ffees_2eproto[3]);
}

// ===================================================================

class AssessedCustomFee::_Internal {
 public:
  static const ::proto::TokenID& token_id(const AssessedCustomFee* msg);
  static const ::proto::AccountID& fee_collector_account_id(const AssessedCustomFee* msg);
};

const ::proto::TokenID&
AssessedCustomFee::_Internal::token_id(const AssessedCustomFee* msg) {
  return *msg->_impl_.token_id_;
}
const ::proto::AccountID&
AssessedCustomFee::_Internal::fee_collector_account_id(const AssessedCustomFee* msg) {
  return *msg->_impl_.fee_collector_account_id_;
}
void AssessedCustomFee::clear_token_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
}
void AssessedCustomFee::clear_fee_collector_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.fee_collector_account_id_ != nullptr) {
    delete _impl_.fee_collector_account_id_;
  }
  _impl_.fee_collector_account_id_ = nullptr;
}
void AssessedCustomFee::clear_effective_payer_account_id() {
  _impl_.effective_payer_account_id_.Clear();
}
AssessedCustomFee::AssessedCustomFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AssessedCustomFee)
}
AssessedCustomFee::AssessedCustomFee(const AssessedCustomFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssessedCustomFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.effective_payer_account_id_){from._impl_.effective_payer_account_id_}
    , decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.fee_collector_account_id_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token_id()) {
    _this->_impl_.token_id_ = new ::proto::TokenID(*from._impl_.token_id_);
  }
  if (from._internal_has_fee_collector_account_id()) {
    _this->_impl_.fee_collector_account_id_ = new ::proto::AccountID(*from._impl_.fee_collector_account_id_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.AssessedCustomFee)
}

inline void AssessedCustomFee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.effective_payer_account_id_){arena}
    , decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.fee_collector_account_id_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssessedCustomFee::~AssessedCustomFee() {
  // @@protoc_insertion_point(destructor:proto.AssessedCustomFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssessedCustomFee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effective_payer_account_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.token_id_;
  if (this != internal_default_instance()) delete _impl_.fee_collector_account_id_;
}

void AssessedCustomFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssessedCustomFee::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AssessedCustomFee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effective_payer_account_id_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fee_collector_account_id_ != nullptr) {
    delete _impl_.fee_collector_account_id_;
  }
  _impl_.fee_collector_account_id_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssessedCustomFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenID token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID fee_collector_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_collector_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.AccountID effective_payer_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effective_payer_account_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssessedCustomFee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AssessedCustomFee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // .proto.TokenID token_id = 2;
  if (this->_internal_has_token_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::token_id(this),
        _Internal::token_id(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID fee_collector_account_id = 3;
  if (this->_internal_has_fee_collector_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fee_collector_account_id(this),
        _Internal::fee_collector_account_id(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.AccountID effective_payer_account_id = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_effective_payer_account_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_effective_payer_account_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AssessedCustomFee)
  return target;
}

size_t AssessedCustomFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AssessedCustomFee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.AccountID effective_payer_account_id = 4;
  total_size += 1UL * this->_internal_effective_payer_account_id_size();
  for (const auto& msg : this->_impl_.effective_payer_account_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.TokenID token_id = 2;
  if (this->_internal_has_token_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_id_);
  }

  // .proto.AccountID fee_collector_account_id = 3;
  if (this->_internal_has_fee_collector_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_collector_account_id_);
  }

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssessedCustomFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssessedCustomFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssessedCustomFee::GetClassData() const { return &_class_data_; }


void AssessedCustomFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssessedCustomFee*>(&to_msg);
  auto& from = static_cast<const AssessedCustomFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AssessedCustomFee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effective_payer_account_id_.MergeFrom(from._impl_.effective_payer_account_id_);
  if (from._internal_has_token_id()) {
    _this->_internal_mutable_token_id()->::proto::TokenID::MergeFrom(
        from._internal_token_id());
  }
  if (from._internal_has_fee_collector_account_id()) {
    _this->_internal_mutable_fee_collector_account_id()->::proto::AccountID::MergeFrom(
        from._internal_fee_collector_account_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssessedCustomFee::CopyFrom(const AssessedCustomFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AssessedCustomFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssessedCustomFee::IsInitialized() const {
  return true;
}

void AssessedCustomFee::InternalSwap(AssessedCustomFee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.effective_payer_account_id_.InternalSwap(&other->_impl_.effective_payer_account_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssessedCustomFee, _impl_.amount_)
      + sizeof(AssessedCustomFee::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(AssessedCustomFee, _impl_.token_id_)>(
          reinterpret_cast<char*>(&_impl_.token_id_),
          reinterpret_cast<char*>(&other->_impl_.token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssessedCustomFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_5ffees_2eproto_getter, &descriptor_table_custom_5ffees_2eproto_once,
      file_level_metadata_custom_5ffees_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::FractionalFee*
Arena::CreateMaybeMessage< ::proto::FractionalFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FractionalFee >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FixedFee*
Arena::CreateMaybeMessage< ::proto::FixedFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FixedFee >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RoyaltyFee*
Arena::CreateMaybeMessage< ::proto::RoyaltyFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RoyaltyFee >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CustomFee*
Arena::CreateMaybeMessage< ::proto::CustomFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CustomFee >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AssessedCustomFee*
Arena::CreateMaybeMessage< ::proto::AssessedCustomFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AssessedCustomFee >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_receipt.proto

#include "transaction_receipt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR TransactionReceipt::TransactionReceipt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serialnumbers_)*/{}
  , /*decltype(_impl_._serialnumbers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.topicrunninghash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.fileid_)*/nullptr
  , /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_.exchangerate_)*/nullptr
  , /*decltype(_impl_.topicid_)*/nullptr
  , /*decltype(_impl_.tokenid_)*/nullptr
  , /*decltype(_impl_.scheduleid_)*/nullptr
  , /*decltype(_impl_.scheduledtransactionid_)*/nullptr
  , /*decltype(_impl_.topicsequencenumber_)*/uint64_t{0u}
  , /*decltype(_impl_.topicrunninghashversion_)*/uint64_t{0u}
  , /*decltype(_impl_.newtotalsupply_)*/uint64_t{0u}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionReceiptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionReceiptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionReceiptDefaultTypeInternal() {}
  union {
    TransactionReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionReceiptDefaultTypeInternal _TransactionReceipt_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_transaction_5freceipt_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transaction_5freceipt_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transaction_5freceipt_2eproto = nullptr;

const uint32_t TableStruct_transaction_5freceipt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.fileid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.contractid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.exchangerate_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.topicid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.topicsequencenumber_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.topicrunninghash_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.topicrunninghashversion_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.tokenid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.newtotalsupply_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.scheduleid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.scheduledtransactionid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionReceipt, _impl_.serialnumbers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::TransactionReceipt)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_TransactionReceipt_default_instance_._instance,
};

const char descriptor_table_protodef_transaction_5freceipt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transaction_receipt.proto\022\005proto\032\021basi"
  "c_types.proto\032\023response_code.proto\032\023exch"
  "ange_rate.proto\"\374\003\n\022TransactionReceipt\022\'"
  "\n\006status\030\001 \001(\0162\027.proto.ResponseCodeEnum\022"
  "#\n\taccountID\030\002 \001(\0132\020.proto.AccountID\022\035\n\006"
  "fileID\030\003 \001(\0132\r.proto.FileID\022%\n\ncontractI"
  "D\030\004 \001(\0132\021.proto.ContractID\022,\n\014exchangeRa"
  "te\030\005 \001(\0132\026.proto.ExchangeRateSet\022\037\n\007topi"
  "cID\030\006 \001(\0132\016.proto.TopicID\022\033\n\023topicSequen"
  "ceNumber\030\007 \001(\004\022\030\n\020topicRunningHash\030\010 \001(\014"
  "\022\037\n\027topicRunningHashVersion\030\t \001(\004\022\037\n\007tok"
  "enID\030\n \001(\0132\016.proto.TokenID\022\026\n\016newTotalSu"
  "pply\030\013 \001(\004\022%\n\nscheduleID\030\014 \001(\0132\021.proto.S"
  "cheduleID\0224\n\026scheduledTransactionID\030\r \001("
  "\0132\024.proto.TransactionID\022\025\n\rserialNumbers"
  "\030\016 \003(\003B&\n\"com.hederahashgraph.api.proto."
  "javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transaction_5freceipt_2eproto_deps[3] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_exchange_5frate_2eproto,
  &::descriptor_table_response_5fcode_2eproto,
};
static ::_pbi::once_flag descriptor_table_transaction_5freceipt_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transaction_5freceipt_2eproto = {
    false, false, 654, descriptor_table_protodef_transaction_5freceipt_2eproto,
    "transaction_receipt.proto",
    &descriptor_table_transaction_5freceipt_2eproto_once, descriptor_table_transaction_5freceipt_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_transaction_5freceipt_2eproto::offsets,
    file_level_metadata_transaction_5freceipt_2eproto, file_level_enum_descriptors_transaction_5freceipt_2eproto,
    file_level_service_descriptors_transaction_5freceipt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transaction_5freceipt_2eproto_getter() {
  return &descriptor_table_transaction_5freceipt_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transaction_5freceipt_2eproto(&descriptor_table_transaction_5freceipt_2eproto);
namespace proto {

// ===================================================================

class TransactionReceipt::_Internal {
 public:
  static const ::proto::AccountID& accountid(const TransactionReceipt* msg);
  static const ::proto::FileID& fileid(const TransactionReceipt* msg);
  static const ::proto::ContractID& contractid(const TransactionReceipt* msg);
  static const ::proto::ExchangeRateSet& exchangerate(const TransactionReceipt* msg);
  static const ::proto::TopicID& topicid(const TransactionReceipt* msg);
  static const ::proto::TokenID& tokenid(const TransactionReceipt* msg);
  static const ::proto::ScheduleID& scheduleid(const TransactionReceipt* msg);
  static const ::proto::TransactionID& scheduledtransactionid(const TransactionReceipt* msg);
};

const ::proto::AccountID&
TransactionReceipt::_Internal::accountid(const TransactionReceipt* msg) {
  return *msg->_impl_.accountid_;
}
const ::proto::FileID&
TransactionReceipt::_Internal::fileid(const TransactionReceipt* msg) {
  return *msg->_impl_.fileid_;
}
const ::proto::ContractID&
TransactionReceipt::_Internal::contractid(const TransactionReceipt* msg) {
  return *msg->_impl_.contractid_;
}
const ::proto::ExchangeRateSet&
TransactionReceipt::_Internal::exchangerate(const TransactionReceipt* msg) {
  return *msg->_impl_.exchangerate_;
}
const ::proto::TopicID&
TransactionReceipt::_Internal::topicid(const TransactionReceipt* msg) {
  return *msg->_impl_.topicid_;
}
const ::proto::TokenID&
TransactionReceipt::_Internal::tokenid(const TransactionReceipt* msg) {
  return *msg->_impl_.tokenid_;
}
const ::proto::ScheduleID&
TransactionReceipt::_Internal::scheduleid(const TransactionReceipt* msg) {
  return *msg->_impl_.scheduleid_;
}
const ::proto::TransactionID&
TransactionReceipt::_Internal::scheduledtransactionid(const TransactionReceipt* msg) {
  return *msg->_impl_.scheduledtransactionid_;
}
void TransactionReceipt::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
void TransactionReceipt::clear_fileid() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
}
void TransactionReceipt::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
void TransactionReceipt::clear_exchangerate() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchangerate_ != nullptr) {
    delete _impl_.exchangerate_;
  }
  _impl_.exchangerate_ = nullptr;
}
void TransactionReceipt::clear_topicid() {
  if (GetArenaForAllocation() == nullptr && _impl_.topicid_ != nullptr) {
    delete _impl_.topicid_;
  }
  _impl_.topicid_ = nullptr;
}
void TransactionReceipt::clear_tokenid() {
  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
}
void TransactionReceipt::clear_scheduleid() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleid_ != nullptr) {
    delete _impl_.scheduleid_;
  }
  _impl_.scheduleid_ = nullptr;
}
void TransactionReceipt::clear_scheduledtransactionid() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionid_ != nullptr) {
    delete _impl_.scheduledtransactionid_;
  }
  _impl_.scheduledtransactionid_ = nullptr;
}
TransactionReceipt::TransactionReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TransactionReceipt)
}
TransactionReceipt::TransactionReceipt(const TransactionReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionReceipt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serialnumbers_){from._impl_.serialnumbers_}
    , /*decltype(_impl_._serialnumbers_cached_byte_size_)*/{0}
    , decltype(_impl_.topicrunninghash_){}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.fileid_){nullptr}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.exchangerate_){nullptr}
    , decltype(_impl_.topicid_){nullptr}
    , decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.scheduleid_){nullptr}
    , decltype(_impl_.scheduledtransactionid_){nullptr}
    , decltype(_impl_.topicsequencenumber_){}
    , decltype(_impl_.topicrunninghashversion_){}
    , decltype(_impl_.newtotalsupply_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topicrunninghash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topicrunninghash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topicrunninghash().empty()) {
    _this->_impl_.topicrunninghash_.Set(from._internal_topicrunninghash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  if (from._internal_has_fileid()) {
    _this->_impl_.fileid_ = new ::proto::FileID(*from._impl_.fileid_);
  }
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  if (from._internal_has_exchangerate()) {
    _this->_impl_.exchangerate_ = new ::proto::ExchangeRateSet(*from._impl_.exchangerate_);
  }
  if (from._internal_has_topicid()) {
    _this->_impl_.topicid_ = new ::proto::TopicID(*from._impl_.topicid_);
  }
  if (from._internal_has_tokenid()) {
    _this->_impl_.tokenid_ = new ::proto::TokenID(*from._impl_.tokenid_);
  }
  if (from._internal_has_scheduleid()) {
    _this->_impl_.scheduleid_ = new ::proto::ScheduleID(*from._impl_.scheduleid_);
  }
  if (from._internal_has_scheduledtransactionid()) {
    _this->_impl_.scheduledtransactionid_ = new ::proto::TransactionID(*from._impl_.scheduledtransactionid_);
  }
  ::memcpy(&_impl_.topicsequencenumber_, &from._impl_.topicsequencenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.topicsequencenumber_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:proto.TransactionReceipt)
}

inline void TransactionReceipt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serialnumbers_){arena}
    , /*decltype(_impl_._serialnumbers_cached_byte_size_)*/{0}
    , decltype(_impl_.topicrunninghash_){}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.fileid_){nullptr}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.exchangerate_){nullptr}
    , decltype(_impl_.topicid_){nullptr}
    , decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.scheduleid_){nullptr}
    , decltype(_impl_.scheduledtransactionid_){nullptr}
    , decltype(_impl_.topicsequencenumber_){uint64_t{0u}}
    , decltype(_impl_.topicrunninghashversion_){uint64_t{0u}}
    , decltype(_impl_.newtotalsupply_){uint64_t{0u}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topicrunninghash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topicrunninghash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionReceipt::~TransactionReceipt() {
  // @@protoc_insertion_point(destructor:proto.TransactionReceipt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serialnumbers_.~RepeatedField();
  _impl_.topicrunninghash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.accountid_;
  if (this != internal_default_instance()) delete _impl_.fileid_;
  if (this != internal_default_instance()) delete _impl_.contractid_;
  if (this != internal_default_instance()) delete _impl_.exchangerate_;
  if (this != internal_default_instance()) delete _impl_.topicid_;
  if (this != internal_default_instance()) delete _impl_.tokenid_;
  if (this != internal_default_instance()) delete _impl_.scheduleid_;
  if (this != internal_default_instance()) delete _impl_.scheduledtransactionid_;
}

void TransactionReceipt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TransactionReceipt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serialnumbers_.Clear();
  _impl_.topicrunninghash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchangerate_ != nullptr) {
    delete _impl_.exchangerate_;
  }
  _impl_.exchangerate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.topicid_ != nullptr) {
    delete _impl_.topicid_;
  }
  _impl_.topicid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleid_ != nullptr) {
    delete _impl_.scheduleid_;
  }
  _impl_.scheduleid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionid_ != nullptr) {
    delete _impl_.scheduledtransactionid_;
  }
  _impl_.scheduledtransactionid_ = nullptr;
  ::memset(&_impl_.topicsequencenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.topicsequencenumber_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionReceipt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseCodeEnum status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::proto::ResponseCodeEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileID fileID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractID contractID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ExchangeRateSet exchangeRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchangerate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TopicID topicID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_topicid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 topicSequenceNumber = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.topicsequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes topicRunningHash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_topicrunninghash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 topicRunningHashVersion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.topicrunninghashversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenID tokenID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 newTotalSupply = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.newtotalsupply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleID scheduleID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduleid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionID scheduledTransactionID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduledtransactionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 serialNumbers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_serialnumbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_serialnumbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionReceipt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransactionReceipt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseCodeEnum status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // .proto.FileID fileID = 3;
  if (this->_internal_has_fileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fileid(this),
        _Internal::fileid(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractID contractID = 4;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  // .proto.ExchangeRateSet exchangeRate = 5;
  if (this->_internal_has_exchangerate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exchangerate(this),
        _Internal::exchangerate(this).GetCachedSize(), target, stream);
  }

  // .proto.TopicID topicID = 6;
  if (this->_internal_has_topicid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::topicid(this),
        _Internal::topicid(this).GetCachedSize(), target, stream);
  }

  // uint64 topicSequenceNumber = 7;
  if (this->_internal_topicsequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_topicsequencenumber(), target);
  }

  // bytes topicRunningHash = 8;
  if (!this->_internal_topicrunninghash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_topicrunninghash(), target);
  }

  // uint64 topicRunningHashVersion = 9;
  if (this->_internal_topicrunninghashversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_topicrunninghashversion(), target);
  }

  // .proto.TokenID tokenID = 10;
  if (this->_internal_has_tokenid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tokenid(this),
        _Internal::tokenid(this).GetCachedSize(), target, stream);
  }

  // uint64 newTotalSupply = 11;
  if (this->_internal_newtotalsupply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_newtotalsupply(), target);
  }

  // .proto.ScheduleID scheduleID = 12;
  if (this->_internal_has_scheduleid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::scheduleid(this),
        _Internal::scheduleid(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionID scheduledTransactionID = 13;
  if (this->_internal_has_scheduledtransactionid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::scheduledtransactionid(this),
        _Internal::scheduledtransactionid(this).GetCachedSize(), target, stream);
  }

  // repeated int64 serialNumbers = 14;
  {
    int byte_size = _impl_._serialnumbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          14, _internal_serialnumbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransactionReceipt)
  return target;
}

size_t TransactionReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TransactionReceipt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 serialNumbers = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.serialnumbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._serialnumbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes topicRunningHash = 8;
  if (!this->_internal_topicrunninghash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_topicrunninghash());
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // .proto.FileID fileID = 3;
  if (this->_internal_has_fileid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileid_);
  }

  // .proto.ContractID contractID = 4;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  // .proto.ExchangeRateSet exchangeRate = 5;
  if (this->_internal_has_exchangerate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchangerate_);
  }

  // .proto.TopicID topicID = 6;
  if (this->_internal_has_topicid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topicid_);
  }

  // .proto.TokenID tokenID = 10;
  if (this->_internal_has_tokenid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tokenid_);
  }

  // .proto.ScheduleID scheduleID = 12;
  if (this->_internal_has_scheduleid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduleid_);
  }

  // .proto.TransactionID scheduledTransactionID = 13;
  if (this->_internal_has_scheduledtransactionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduledtransactionid_);
  }

  // uint64 topicSequenceNumber = 7;
  if (this->_internal_topicsequencenumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_topicsequencenumber());
  }

  // uint64 topicRunningHashVersion = 9;
  if (this->_internal_topicrunninghashversion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_topicrunninghashversion());
  }

  // uint64 newTotalSupply = 11;
  if (this->_internal_newtotalsupply() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_newtotalsupply());
  }

  // .proto.ResponseCodeEnum status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionReceipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionReceipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionReceipt::GetClassData() const { return &_class_data_; }


void TransactionReceipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionReceipt*>(&to_msg);
  auto& from = static_cast<const TransactionReceipt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TransactionReceipt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.serialnumbers_.MergeFrom(from._impl_.serialnumbers_);
  if (!from._internal_topicrunninghash().empty()) {
    _this->_internal_set_topicrunninghash(from._internal_topicrunninghash());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_has_fileid()) {
    _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
        from._internal_fileid());
  }
  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  if (from._internal_has_exchangerate()) {
    _this->_internal_mutable_exchangerate()->::proto::ExchangeRateSet::MergeFrom(
        from._internal_exchangerate());
  }
  if (from._internal_has_topicid()) {
    _this->_internal_mutable_topicid()->::proto::TopicID::MergeFrom(
        from._internal_topicid());
  }
  if (from._internal_has_tokenid()) {
    _this->_internal_mutable_tokenid()->::proto::TokenID::MergeFrom(
        from._internal_tokenid());
  }
  if (from._internal_has_scheduleid()) {
    _this->_internal_mutable_scheduleid()->::proto::ScheduleID::MergeFrom(
        from._internal_scheduleid());
  }
  if (from._internal_has_scheduledtransactionid()) {
    _this->_internal_mutable_scheduledtransactionid()->::proto::TransactionID::MergeFrom(
        from._internal_scheduledtransactionid());
  }
  if (from._internal_topicsequencenumber() != 0) {
    _this->_internal_set_topicsequencenumber(from._internal_topicsequencenumber());
  }
  if (from._internal_topicrunninghashversion() != 0) {
    _this->_internal_set_topicrunninghashversion(from._internal_topicrunninghashversion());
  }
  if (from._internal_newtotalsupply() != 0) {
    _this->_internal_set_newtotalsupply(from._internal_newtotalsupply());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionReceipt::CopyFrom(const TransactionReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TransactionReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReceipt::IsInitialized() const {
  return true;
}

void TransactionReceipt::InternalSwap(TransactionReceipt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.serialnumbers_.InternalSwap(&other->_impl_.serialnumbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topicrunninghash_, lhs_arena,
      &other->_impl_.topicrunninghash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionReceipt, _impl_.status_)
      + sizeof(TransactionReceipt::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TransactionReceipt, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionReceipt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_5freceipt_2eproto_getter, &descriptor_table_transaction_5freceipt_2eproto_once,
      file_level_metadata_transaction_5freceipt_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TransactionReceipt*
Arena::CreateMaybeMessage< ::proto::TransactionReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TransactionReceipt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus_submit_message.proto

#include "consensus_submit_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ConsensusMessageChunkInfo::ConsensusMessageChunkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.initialtransactionid_)*/nullptr
  , /*decltype(_impl_.total_)*/0
  , /*decltype(_impl_.number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsensusMessageChunkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusMessageChunkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusMessageChunkInfoDefaultTypeInternal() {}
  union {
    ConsensusMessageChunkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusMessageChunkInfoDefaultTypeInternal _ConsensusMessageChunkInfo_default_instance_;
PROTOBUF_CONSTEXPR ConsensusSubmitMessageTransactionBody::ConsensusSubmitMessageTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topicid_)*/nullptr
  , /*decltype(_impl_.chunkinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsensusSubmitMessageTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusSubmitMessageTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusSubmitMessageTransactionBodyDefaultTypeInternal() {}
  union {
    ConsensusSubmitMessageTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusSubmitMessageTransactionBodyDefaultTypeInternal _ConsensusSubmitMessageTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_consensus_5fsubmit_5fmessage_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_consensus_5fsubmit_5fmessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_consensus_5fsubmit_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_consensus_5fsubmit_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusMessageChunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusMessageChunkInfo, _impl_.initialtransactionid_),
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusMessageChunkInfo, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusMessageChunkInfo, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusSubmitMessageTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusSubmitMessageTransactionBody, _impl_.topicid_),
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusSubmitMessageTransactionBody, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::ConsensusSubmitMessageTransactionBody, _impl_.chunkinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ConsensusMessageChunkInfo)},
  { 9, -1, -1, sizeof(::proto::ConsensusSubmitMessageTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ConsensusMessageChunkInfo_default_instance_._instance,
  &::proto::_ConsensusSubmitMessageTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_consensus_5fsubmit_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036consensus_submit_message.proto\022\005proto\032"
  "\021basic_types.proto\"n\n\031ConsensusMessageCh"
  "unkInfo\0222\n\024initialTransactionID\030\001 \001(\0132\024."
  "proto.TransactionID\022\r\n\005total\030\002 \001(\005\022\016\n\006nu"
  "mber\030\003 \001(\005\"\216\001\n%ConsensusSubmitMessageTra"
  "nsactionBody\022\037\n\007topicID\030\001 \001(\0132\016.proto.To"
  "picID\022\017\n\007message\030\002 \001(\014\0223\n\tchunkInfo\030\003 \001("
  "\0132 .proto.ConsensusMessageChunkInfoB&\n\"c"
  "om.hederahashgraph.api.proto.javaP\001b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_consensus_5fsubmit_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_basic_5ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_consensus_5fsubmit_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_consensus_5fsubmit_5fmessage_2eproto = {
    false, false, 363, descriptor_table_protodef_consensus_5fsubmit_5fmessage_2eproto,
    "consensus_submit_message.proto",
    &descriptor_table_consensus_5fsubmit_5fmessage_2eproto_once, descriptor_table_consensus_5fsubmit_5fmessage_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_consensus_5fsubmit_5fmessage_2eproto::offsets,
    file_level_metadata_consensus_5fsubmit_5fmessage_2eproto, file_level_enum_descriptors_consensus_5fsubmit_5fmessage_2eproto,
    file_level_service_descriptors_consensus_5fsubmit_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_consensus_5fsubmit_5fmessage_2eproto_getter() {
  return &descriptor_table_consensus_5fsubmit_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_consensus_5fsubmit_5fmessage_2eproto(&descriptor_table_consensus_5fsubmit_5fmessage_2eproto);
namespace proto {

// ===================================================================

class ConsensusMessageChunkInfo::_Internal {
 public:
  static const ::proto::TransactionID& initialtransactionid(const ConsensusMessageChunkInfo* msg);
};

const ::proto::TransactionID&
ConsensusMessageChunkInfo::_Internal::initialtransactionid(const ConsensusMessageChunkInfo* msg) {
  return *msg->_impl_.initialtransactionid_;
}
void ConsensusMessageChunkInfo::clear_initialtransactionid() {
  if (GetArenaForAllocation() == nullptr && _impl_.initialtransactionid_ != nullptr) {
    delete _impl_.initialtransactionid_;
  }
  _impl_.initialtransactionid_ = nullptr;
}
ConsensusMessageChunkInfo::ConsensusMessageChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ConsensusMessageChunkInfo)
}
ConsensusMessageChunkInfo::ConsensusMessageChunkInfo(const ConsensusMessageChunkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusMessageChunkInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.initialtransactionid_){nullptr}
    , decltype(_impl_.total_){}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initialtransactionid()) {
    _this->_impl_.initialtransactionid_ = new ::proto::TransactionID(*from._impl_.initialtransactionid_);
  }
  ::memcpy(&_impl_.total_, &from._impl_.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_) -
    reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.number_));
  // @@protoc_insertion_point(copy_constructor:proto.ConsensusMessageChunkInfo)
}

inline void ConsensusMessageChunkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.initialtransactionid_){nullptr}
    , decltype(_impl_.total_){0}
    , decltype(_impl_.number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConsensusMessageChunkInfo::~ConsensusMessageChunkInfo() {
  // @@protoc_insertion_point(destructor:proto.ConsensusMessageChunkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusMessageChunkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.initialtransactionid_;
}

void ConsensusMessageChunkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusMessageChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ConsensusMessageChunkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.initialtransactionid_ != nullptr) {
    delete _impl_.initialtransactionid_;
  }
  _impl_.initialtransactionid_ = nullptr;
  ::memset(&_impl_.total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusMessageChunkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TransactionID initialTransactionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialtransactionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusMessageChunkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ConsensusMessageChunkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TransactionID initialTransactionID = 1;
  if (this->_internal_has_initialtransactionid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::initialtransactionid(this),
        _Internal::initialtransactionid(this).GetCachedSize(), target, stream);
  }

  // int32 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 number = 3;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ConsensusMessageChunkInfo)
  return target;
}

size_t ConsensusMessageChunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ConsensusMessageChunkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TransactionID initialTransactionID = 1;
  if (this->_internal_has_initialtransactionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initialtransactionid_);
  }

  // int32 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total());
  }

  // int32 number = 3;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusMessageChunkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusMessageChunkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusMessageChunkInfo::GetClassData() const { return &_class_data_; }


void ConsensusMessageChunkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusMessageChunkInfo*>(&to_msg);
  auto& from = static_cast<const ConsensusMessageChunkInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ConsensusMessageChunkInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initialtransactionid()) {
    _this->_internal_mutable_initialtransactionid()->::proto::TransactionID::MergeFrom(
        from._internal_initialtransactionid());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusMessageChunkInfo::CopyFrom(const ConsensusMessageChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ConsensusMessageChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusMessageChunkInfo::IsInitialized() const {
  return true;
}

void ConsensusMessageChunkInfo::InternalSwap(ConsensusMessageChunkInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusMessageChunkInfo, _impl_.number_)
      + sizeof(ConsensusMessageChunkInfo::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(ConsensusMessageChunkInfo, _impl_.initialtransactionid_)>(
          reinterpret_cast<char*>(&_impl_.initialtransactionid_),
          reinterpret_cast<char*>(&other->_impl_.initialtransactionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusMessageChunkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_consensus_5fsubmit_5fmessage_2eproto_getter, &descriptor_table_consensus_5fsubmit_5fmessage_2eproto_once,
      file_level_metadata_consensus_5fsubmit_5fmessage_2eproto[0]);
}

// ===================================================================

class ConsensusSubmitMessageTransactionBody::_Internal {
 public:
  static const ::proto::TopicID& topicid(const ConsensusSubmitMessageTransactionBody* msg);
  static const ::proto::ConsensusMessageChunkInfo& chunkinfo(const ConsensusSubmitMessageTransactionBody* msg);
};

const ::proto::TopicID&
ConsensusSubmitMessageTransactionBody::_Internal::topicid(const ConsensusSubmitMessageTransactionBody* msg) {
  return *msg->_impl_.topicid_;
}
const ::proto::ConsensusMessageChunkInfo&
ConsensusSubmitMessageTransactionBody::_Internal::chunkinfo(const ConsensusSubmitMessageTransactionBody* msg) {
  return *msg->_impl_.chunkinfo_;
}
void ConsensusSubmitMessageTransactionBody::clear_topicid() {
  if (GetArenaForAllocation() == nullptr && _impl_.topicid_ != nullptr) {
    delete _impl_.topicid_;
  }
  _impl_.topicid_ = nullptr;
}
ConsensusSubmitMessageTransactionBody::ConsensusSubmitMessageTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ConsensusSubmitMessageTransactionBody)
}
ConsensusSubmitMessageTransactionBody::ConsensusSubmitMessageTransactionBody(const ConsensusSubmitMessageTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusSubmitMessageTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.topicid_){nullptr}
    , decltype(_impl_.chunkinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_topicid()) {
    _this->_impl_.topicid_ = new ::proto::TopicID(*from._impl_.topicid_);
  }
  if (from._internal_has_chunkinfo()) {
    _this->_impl_.chunkinfo_ = new ::proto::ConsensusMessageChunkInfo(*from._impl_.chunkinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ConsensusSubmitMessageTransactionBody)
}

inline void ConsensusSubmitMessageTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.topicid_){nullptr}
    , decltype(_impl_.chunkinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConsensusSubmitMessageTransactionBody::~ConsensusSubmitMessageTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.ConsensusSubmitMessageTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusSubmitMessageTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.topicid_;
  if (this != internal_default_instance()) delete _impl_.chunkinfo_;
}

void ConsensusSubmitMessageTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusSubmitMessageTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ConsensusSubmitMessageTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.topicid_ != nullptr) {
    delete _impl_.topicid_;
  }
  _impl_.topicid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chunkinfo_ != nullptr) {
    delete _impl_.chunkinfo_;
  }
  _impl_.chunkinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusSubmitMessageTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TopicID topicID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topicid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusMessageChunkInfo chunkInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunkinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusSubmitMessageTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ConsensusSubmitMessageTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TopicID topicID = 1;
  if (this->_internal_has_topicid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topicid(this),
        _Internal::topicid(this).GetCachedSize(), target, stream);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .proto.ConsensusMessageChunkInfo chunkInfo = 3;
  if (this->_internal_has_chunkinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chunkinfo(this),
        _Internal::chunkinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ConsensusSubmitMessageTransactionBody)
  return target;
}

size_t ConsensusSubmitMessageTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ConsensusSubmitMessageTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // .proto.TopicID topicID = 1;
  if (this->_internal_has_topicid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topicid_);
  }

  // .proto.ConsensusMessageChunkInfo chunkInfo = 3;
  if (this->_internal_has_chunkinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunkinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusSubmitMessageTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusSubmitMessageTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusSubmitMessageTransactionBody::GetClassData() const { return &_class_data_; }


void ConsensusSubmitMessageTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusSubmitMessageTransactionBody*>(&to_msg);
  auto& from = static_cast<const ConsensusSubmitMessageTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ConsensusSubmitMessageTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_topicid()) {
    _this->_internal_mutable_topicid()->::proto::TopicID::MergeFrom(
        from._internal_topicid());
  }
  if (from._internal_has_chunkinfo()) {
    _this->_internal_mutable_chunkinfo()->::proto::ConsensusMessageChunkInfo::MergeFrom(
        from._internal_chunkinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusSubmitMessageTransactionBody::CopyFrom(const ConsensusSubmitMessageTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ConsensusSubmitMessageTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusSubmitMessageTransactionBody::IsInitialized() const {
  return true;
}

void ConsensusSubmitMessageTransactionBody::InternalSwap(ConsensusSubmitMessageTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusSubmitMessageTransactionBody, _impl_.chunkinfo_)
      + sizeof(ConsensusSubmitMessageTransactionBody::_impl_.chunkinfo_)
      - PROTOBUF_FIELD_OFFSET(ConsensusSubmitMessageTransactionBody, _impl_.topicid_)>(
          reinterpret_cast<char*>(&_impl_.topicid_),
          reinterpret_cast<char*>(&other->_impl_.topicid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusSubmitMessageTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_consensus_5fsubmit_5fmessage_2eproto_getter, &descriptor_table_consensus_5fsubmit_5fmessage_2eproto_once,
      file_level_metadata_consensus_5fsubmit_5fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ConsensusMessageChunkInfo*
Arena::CreateMaybeMessage< ::proto::ConsensusMessageChunkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ConsensusMessageChunkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ConsensusSubmitMessageTransactionBody*
Arena::CreateMaybeMessage< ::proto::ConsensusSubmitMessageTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ConsensusSubmitMessageTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

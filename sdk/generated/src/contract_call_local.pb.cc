// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_call_local.proto

#include "contract_call_local.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ContractLoginfo::ContractLoginfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/{}
  , /*decltype(_impl_.bloom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractLoginfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractLoginfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractLoginfoDefaultTypeInternal() {}
  union {
    ContractLoginfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractLoginfoDefaultTypeInternal _ContractLoginfo_default_instance_;
PROTOBUF_CONSTEXPR ContractFunctionResult::ContractFunctionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loginfo_)*/{}
  , /*decltype(_impl_.createdcontractids_)*/{}
  , /*decltype(_impl_.contractcallresult_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bloom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.functionparameters_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_.evm_address_)*/nullptr
  , /*decltype(_impl_.sender_id_)*/nullptr
  , /*decltype(_impl_.gasused_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_)*/int64_t{0}
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractFunctionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractFunctionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractFunctionResultDefaultTypeInternal() {}
  union {
    ContractFunctionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractFunctionResultDefaultTypeInternal _ContractFunctionResult_default_instance_;
PROTOBUF_CONSTEXPR ContractCallLocalQuery::ContractCallLocalQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.functionparameters_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_.sender_id_)*/nullptr
  , /*decltype(_impl_.gas_)*/int64_t{0}
  , /*decltype(_impl_.maxresultsize_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractCallLocalQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractCallLocalQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractCallLocalQueryDefaultTypeInternal() {}
  union {
    ContractCallLocalQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractCallLocalQueryDefaultTypeInternal _ContractCallLocalQuery_default_instance_;
PROTOBUF_CONSTEXPR ContractCallLocalResponse::ContractCallLocalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.functionresult_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractCallLocalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractCallLocalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractCallLocalResponseDefaultTypeInternal() {}
  union {
    ContractCallLocalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractCallLocalResponseDefaultTypeInternal _ContractCallLocalResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_contract_5fcall_5flocal_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_contract_5fcall_5flocal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_contract_5fcall_5flocal_2eproto = nullptr;

const uint32_t TableStruct_contract_5fcall_5flocal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractLoginfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractLoginfo, _impl_.contractid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractLoginfo, _impl_.bloom_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractLoginfo, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractLoginfo, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.contractid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.contractcallresult_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.errormessage_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.bloom_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.gasused_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.loginfo_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.createdcontractids_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.evm_address_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.functionparameters_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractFunctionResult, _impl_.sender_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _impl_.contractid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _impl_.functionparameters_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _impl_.maxresultsize_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalQuery, _impl_.sender_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractCallLocalResponse, _impl_.functionresult_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ContractLoginfo)},
  { 10, -1, -1, sizeof(::proto::ContractFunctionResult)},
  { 28, -1, -1, sizeof(::proto::ContractCallLocalQuery)},
  { 40, -1, -1, sizeof(::proto::ContractCallLocalResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ContractLoginfo_default_instance_._instance,
  &::proto::_ContractFunctionResult_default_instance_._instance,
  &::proto::_ContractCallLocalQuery_default_instance_._instance,
  &::proto::_ContractCallLocalResponse_default_instance_._instance,
};

const char descriptor_table_protodef_contract_5fcall_5flocal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031contract_call_local.proto\022\005proto\032\021basi"
  "c_types.proto\032\022query_header.proto\032\025respo"
  "nse_header.proto\032\036google/protobuf/wrappe"
  "rs.proto\"d\n\017ContractLoginfo\022%\n\ncontractI"
  "D\030\001 \001(\0132\021.proto.ContractID\022\r\n\005bloom\030\002 \001("
  "\014\022\r\n\005topic\030\003 \003(\014\022\014\n\004data\030\004 \001(\014\"\203\003\n\026Contr"
  "actFunctionResult\022%\n\ncontractID\030\001 \001(\0132\021."
  "proto.ContractID\022\032\n\022contractCallResult\030\002"
  " \001(\014\022\024\n\014errorMessage\030\003 \001(\t\022\r\n\005bloom\030\004 \001("
  "\014\022\017\n\007gasUsed\030\005 \001(\004\022\'\n\007logInfo\030\006 \003(\0132\026.pr"
  "oto.ContractLoginfo\0221\n\022createdContractID"
  "s\030\007 \003(\0132\021.proto.ContractIDB\002\030\001\0220\n\013evm_ad"
  "dress\030\t \001(\0132\033.google.protobuf.BytesValue"
  "\022\013\n\003gas\030\n \001(\003\022\016\n\006amount\030\013 \001(\003\022\032\n\022functio"
  "nParameters\030\014 \001(\014\022#\n\tsender_id\030\r \001(\0132\020.p"
  "roto.AccountIDJ\004\010\010\020\t\"\314\001\n\026ContractCallLoc"
  "alQuery\022\"\n\006header\030\001 \001(\0132\022.proto.QueryHea"
  "der\022%\n\ncontractID\030\002 \001(\0132\021.proto.Contract"
  "ID\022\013\n\003gas\030\003 \001(\003\022\032\n\022functionParameters\030\004 "
  "\001(\014\022\031\n\rmaxResultSize\030\005 \001(\003B\002\030\001\022#\n\tsender"
  "_id\030\006 \001(\0132\020.proto.AccountID\"y\n\031ContractC"
  "allLocalResponse\022%\n\006header\030\001 \001(\0132\025.proto"
  ".ResponseHeader\0225\n\016functionResult\030\002 \001(\0132"
  "\035.proto.ContractFunctionResultB&\n\"com.he"
  "derahashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_contract_5fcall_5flocal_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_contract_5fcall_5flocal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_contract_5fcall_5flocal_2eproto = {
    false, false, 998, descriptor_table_protodef_contract_5fcall_5flocal_2eproto,
    "contract_call_local.proto",
    &descriptor_table_contract_5fcall_5flocal_2eproto_once, descriptor_table_contract_5fcall_5flocal_2eproto_deps, 4, 4,
    schemas, file_default_instances, TableStruct_contract_5fcall_5flocal_2eproto::offsets,
    file_level_metadata_contract_5fcall_5flocal_2eproto, file_level_enum_descriptors_contract_5fcall_5flocal_2eproto,
    file_level_service_descriptors_contract_5fcall_5flocal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_contract_5fcall_5flocal_2eproto_getter() {
  return &descriptor_table_contract_5fcall_5flocal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_contract_5fcall_5flocal_2eproto(&descriptor_table_contract_5fcall_5flocal_2eproto);
namespace proto {

// ===================================================================

class ContractLoginfo::_Internal {
 public:
  static const ::proto::ContractID& contractid(const ContractLoginfo* msg);
};

const ::proto::ContractID&
ContractLoginfo::_Internal::contractid(const ContractLoginfo* msg) {
  return *msg->_impl_.contractid_;
}
void ContractLoginfo::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
ContractLoginfo::ContractLoginfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractLoginfo)
}
ContractLoginfo::ContractLoginfo(const ContractLoginfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractLoginfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){from._impl_.topic_}
    , decltype(_impl_.bloom_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.contractid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bloom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bloom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bloom().empty()) {
    _this->_impl_.bloom_.Set(from._internal_bloom(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContractLoginfo)
}

inline void ContractLoginfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){arena}
    , decltype(_impl_.bloom_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.contractid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bloom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bloom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractLoginfo::~ContractLoginfo() {
  // @@protoc_insertion_point(destructor:proto.ContractLoginfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractLoginfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.~RepeatedPtrField();
  _impl_.bloom_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contractid_;
}

void ContractLoginfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractLoginfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractLoginfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.Clear();
  _impl_.bloom_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractLoginfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ContractID contractID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bloom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bloom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topic();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractLoginfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractLoginfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  // bytes bloom = 2;
  if (!this->_internal_bloom().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bloom(), target);
  }

  // repeated bytes topic = 3;
  for (int i = 0, n = this->_internal_topic_size(); i < n; i++) {
    const auto& s = this->_internal_topic(i);
    target = stream->WriteBytes(3, s, target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractLoginfo)
  return target;
}

size_t ContractLoginfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractLoginfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topic = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.topic_.size());
  for (int i = 0, n = _impl_.topic_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.topic_.Get(i));
  }

  // bytes bloom = 2;
  if (!this->_internal_bloom().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bloom());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractLoginfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractLoginfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractLoginfo::GetClassData() const { return &_class_data_; }


void ContractLoginfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractLoginfo*>(&to_msg);
  auto& from = static_cast<const ContractLoginfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractLoginfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topic_.MergeFrom(from._impl_.topic_);
  if (!from._internal_bloom().empty()) {
    _this->_internal_set_bloom(from._internal_bloom());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractLoginfo::CopyFrom(const ContractLoginfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractLoginfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractLoginfo::IsInitialized() const {
  return true;
}

void ContractLoginfo::InternalSwap(ContractLoginfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.topic_.InternalSwap(&other->_impl_.topic_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bloom_, lhs_arena,
      &other->_impl_.bloom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.contractid_, other->_impl_.contractid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractLoginfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fcall_5flocal_2eproto_getter, &descriptor_table_contract_5fcall_5flocal_2eproto_once,
      file_level_metadata_contract_5fcall_5flocal_2eproto[0]);
}

// ===================================================================

class ContractFunctionResult::_Internal {
 public:
  static const ::proto::ContractID& contractid(const ContractFunctionResult* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BytesValue& evm_address(const ContractFunctionResult* msg);
  static const ::proto::AccountID& sender_id(const ContractFunctionResult* msg);
};

const ::proto::ContractID&
ContractFunctionResult::_Internal::contractid(const ContractFunctionResult* msg) {
  return *msg->_impl_.contractid_;
}
const ::PROTOBUF_NAMESPACE_ID::BytesValue&
ContractFunctionResult::_Internal::evm_address(const ContractFunctionResult* msg) {
  return *msg->_impl_.evm_address_;
}
const ::proto::AccountID&
ContractFunctionResult::_Internal::sender_id(const ContractFunctionResult* msg) {
  return *msg->_impl_.sender_id_;
}
void ContractFunctionResult::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
void ContractFunctionResult::clear_createdcontractids() {
  _impl_.createdcontractids_.Clear();
}
void ContractFunctionResult::clear_evm_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.evm_address_ != nullptr) {
    delete _impl_.evm_address_;
  }
  _impl_.evm_address_ = nullptr;
}
void ContractFunctionResult::clear_sender_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_id_ != nullptr) {
    delete _impl_.sender_id_;
  }
  _impl_.sender_id_ = nullptr;
}
ContractFunctionResult::ContractFunctionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractFunctionResult)
}
ContractFunctionResult::ContractFunctionResult(const ContractFunctionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractFunctionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loginfo_){from._impl_.loginfo_}
    , decltype(_impl_.createdcontractids_){from._impl_.createdcontractids_}
    , decltype(_impl_.contractcallresult_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.bloom_){}
    , decltype(_impl_.functionparameters_){}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.evm_address_){nullptr}
    , decltype(_impl_.sender_id_){nullptr}
    , decltype(_impl_.gasused_){}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contractcallresult_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractcallresult_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contractcallresult().empty()) {
    _this->_impl_.contractcallresult_.Set(from._internal_contractcallresult(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormessage().empty()) {
    _this->_impl_.errormessage_.Set(from._internal_errormessage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bloom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bloom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bloom().empty()) {
    _this->_impl_.bloom_.Set(from._internal_bloom(), 
      _this->GetArenaForAllocation());
  }
  _impl_.functionparameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.functionparameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_functionparameters().empty()) {
    _this->_impl_.functionparameters_.Set(from._internal_functionparameters(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  if (from._internal_has_evm_address()) {
    _this->_impl_.evm_address_ = new ::PROTOBUF_NAMESPACE_ID::BytesValue(*from._impl_.evm_address_);
  }
  if (from._internal_has_sender_id()) {
    _this->_impl_.sender_id_ = new ::proto::AccountID(*from._impl_.sender_id_);
  }
  ::memcpy(&_impl_.gasused_, &from._impl_.gasused_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.gasused_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:proto.ContractFunctionResult)
}

inline void ContractFunctionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loginfo_){arena}
    , decltype(_impl_.createdcontractids_){arena}
    , decltype(_impl_.contractcallresult_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.bloom_){}
    , decltype(_impl_.functionparameters_){}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.evm_address_){nullptr}
    , decltype(_impl_.sender_id_){nullptr}
    , decltype(_impl_.gasused_){uint64_t{0u}}
    , decltype(_impl_.gas_){int64_t{0}}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contractcallresult_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractcallresult_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bloom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bloom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.functionparameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.functionparameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractFunctionResult::~ContractFunctionResult() {
  // @@protoc_insertion_point(destructor:proto.ContractFunctionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractFunctionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loginfo_.~RepeatedPtrField();
  _impl_.createdcontractids_.~RepeatedPtrField();
  _impl_.contractcallresult_.Destroy();
  _impl_.errormessage_.Destroy();
  _impl_.bloom_.Destroy();
  _impl_.functionparameters_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contractid_;
  if (this != internal_default_instance()) delete _impl_.evm_address_;
  if (this != internal_default_instance()) delete _impl_.sender_id_;
}

void ContractFunctionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractFunctionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractFunctionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loginfo_.Clear();
  _impl_.createdcontractids_.Clear();
  _impl_.contractcallresult_.ClearToEmpty();
  _impl_.errormessage_.ClearToEmpty();
  _impl_.bloom_.ClearToEmpty();
  _impl_.functionparameters_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evm_address_ != nullptr) {
    delete _impl_.evm_address_;
  }
  _impl_.evm_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sender_id_ != nullptr) {
    delete _impl_.sender_id_;
  }
  _impl_.sender_id_ = nullptr;
  ::memset(&_impl_.gasused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.gasused_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractFunctionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ContractID contractID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes contractCallResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contractcallresult();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ContractFunctionResult.errorMessage"));
        } else
          goto handle_unusual;
        continue;
      // bytes bloom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bloom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gasUsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gasused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ContractLoginfo logInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loginfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ContractID createdContractIDs = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_createdcontractids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BytesValue evm_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_evm_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes functionParameters = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_functionparameters();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID sender_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractFunctionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractFunctionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  // bytes contractCallResult = 2;
  if (!this->_internal_contractcallresult().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contractcallresult(), target);
  }

  // string errorMessage = 3;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ContractFunctionResult.errorMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errormessage(), target);
  }

  // bytes bloom = 4;
  if (!this->_internal_bloom().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bloom(), target);
  }

  // uint64 gasUsed = 5;
  if (this->_internal_gasused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gasused(), target);
  }

  // repeated .proto.ContractLoginfo logInfo = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loginfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_loginfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.ContractID createdContractIDs = 7 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_createdcontractids_size()); i < n; i++) {
    const auto& repfield = this->_internal_createdcontractids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.BytesValue evm_address = 9;
  if (this->_internal_has_evm_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::evm_address(this),
        _Internal::evm_address(this).GetCachedSize(), target, stream);
  }

  // int64 gas = 10;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_gas(), target);
  }

  // int64 amount = 11;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_amount(), target);
  }

  // bytes functionParameters = 12;
  if (!this->_internal_functionparameters().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_functionparameters(), target);
  }

  // .proto.AccountID sender_id = 13;
  if (this->_internal_has_sender_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::sender_id(this),
        _Internal::sender_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractFunctionResult)
  return target;
}

size_t ContractFunctionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractFunctionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ContractLoginfo logInfo = 6;
  total_size += 1UL * this->_internal_loginfo_size();
  for (const auto& msg : this->_impl_.loginfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.ContractID createdContractIDs = 7 [deprecated = true];
  total_size += 1UL * this->_internal_createdcontractids_size();
  for (const auto& msg : this->_impl_.createdcontractids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes contractCallResult = 2;
  if (!this->_internal_contractcallresult().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractcallresult());
  }

  // string errorMessage = 3;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // bytes bloom = 4;
  if (!this->_internal_bloom().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bloom());
  }

  // bytes functionParameters = 12;
  if (!this->_internal_functionparameters().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_functionparameters());
  }

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  // .google.protobuf.BytesValue evm_address = 9;
  if (this->_internal_has_evm_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evm_address_);
  }

  // .proto.AccountID sender_id = 13;
  if (this->_internal_has_sender_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_id_);
  }

  // uint64 gasUsed = 5;
  if (this->_internal_gasused() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gasused());
  }

  // int64 gas = 10;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas());
  }

  // int64 amount = 11;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractFunctionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractFunctionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractFunctionResult::GetClassData() const { return &_class_data_; }


void ContractFunctionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractFunctionResult*>(&to_msg);
  auto& from = static_cast<const ContractFunctionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractFunctionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.loginfo_.MergeFrom(from._impl_.loginfo_);
  _this->_impl_.createdcontractids_.MergeFrom(from._impl_.createdcontractids_);
  if (!from._internal_contractcallresult().empty()) {
    _this->_internal_set_contractcallresult(from._internal_contractcallresult());
  }
  if (!from._internal_errormessage().empty()) {
    _this->_internal_set_errormessage(from._internal_errormessage());
  }
  if (!from._internal_bloom().empty()) {
    _this->_internal_set_bloom(from._internal_bloom());
  }
  if (!from._internal_functionparameters().empty()) {
    _this->_internal_set_functionparameters(from._internal_functionparameters());
  }
  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  if (from._internal_has_evm_address()) {
    _this->_internal_mutable_evm_address()->::PROTOBUF_NAMESPACE_ID::BytesValue::MergeFrom(
        from._internal_evm_address());
  }
  if (from._internal_has_sender_id()) {
    _this->_internal_mutable_sender_id()->::proto::AccountID::MergeFrom(
        from._internal_sender_id());
  }
  if (from._internal_gasused() != 0) {
    _this->_internal_set_gasused(from._internal_gasused());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractFunctionResult::CopyFrom(const ContractFunctionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractFunctionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractFunctionResult::IsInitialized() const {
  return true;
}

void ContractFunctionResult::InternalSwap(ContractFunctionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.loginfo_.InternalSwap(&other->_impl_.loginfo_);
  _impl_.createdcontractids_.InternalSwap(&other->_impl_.createdcontractids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contractcallresult_, lhs_arena,
      &other->_impl_.contractcallresult_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormessage_, lhs_arena,
      &other->_impl_.errormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bloom_, lhs_arena,
      &other->_impl_.bloom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.functionparameters_, lhs_arena,
      &other->_impl_.functionparameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractFunctionResult, _impl_.amount_)
      + sizeof(ContractFunctionResult::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(ContractFunctionResult, _impl_.contractid_)>(
          reinterpret_cast<char*>(&_impl_.contractid_),
          reinterpret_cast<char*>(&other->_impl_.contractid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractFunctionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fcall_5flocal_2eproto_getter, &descriptor_table_contract_5fcall_5flocal_2eproto_once,
      file_level_metadata_contract_5fcall_5flocal_2eproto[1]);
}

// ===================================================================

class ContractCallLocalQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const ContractCallLocalQuery* msg);
  static const ::proto::ContractID& contractid(const ContractCallLocalQuery* msg);
  static const ::proto::AccountID& sender_id(const ContractCallLocalQuery* msg);
};

const ::proto::QueryHeader&
ContractCallLocalQuery::_Internal::header(const ContractCallLocalQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::ContractID&
ContractCallLocalQuery::_Internal::contractid(const ContractCallLocalQuery* msg) {
  return *msg->_impl_.contractid_;
}
const ::proto::AccountID&
ContractCallLocalQuery::_Internal::sender_id(const ContractCallLocalQuery* msg) {
  return *msg->_impl_.sender_id_;
}
void ContractCallLocalQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void ContractCallLocalQuery::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
void ContractCallLocalQuery::clear_sender_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_id_ != nullptr) {
    delete _impl_.sender_id_;
  }
  _impl_.sender_id_ = nullptr;
}
ContractCallLocalQuery::ContractCallLocalQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractCallLocalQuery)
}
ContractCallLocalQuery::ContractCallLocalQuery(const ContractCallLocalQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractCallLocalQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.functionparameters_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.sender_id_){nullptr}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.maxresultsize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.functionparameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.functionparameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_functionparameters().empty()) {
    _this->_impl_.functionparameters_.Set(from._internal_functionparameters(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  if (from._internal_has_sender_id()) {
    _this->_impl_.sender_id_ = new ::proto::AccountID(*from._impl_.sender_id_);
  }
  ::memcpy(&_impl_.gas_, &from._impl_.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxresultsize_) -
    reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.maxresultsize_));
  // @@protoc_insertion_point(copy_constructor:proto.ContractCallLocalQuery)
}

inline void ContractCallLocalQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.functionparameters_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.sender_id_){nullptr}
    , decltype(_impl_.gas_){int64_t{0}}
    , decltype(_impl_.maxresultsize_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.functionparameters_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.functionparameters_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractCallLocalQuery::~ContractCallLocalQuery() {
  // @@protoc_insertion_point(destructor:proto.ContractCallLocalQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractCallLocalQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.functionparameters_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.contractid_;
  if (this != internal_default_instance()) delete _impl_.sender_id_;
}

void ContractCallLocalQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractCallLocalQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractCallLocalQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.functionparameters_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sender_id_ != nullptr) {
    delete _impl_.sender_id_;
  }
  _impl_.sender_id_ = nullptr;
  ::memset(&_impl_.gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxresultsize_) -
      reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.maxresultsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCallLocalQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractID contractID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes functionParameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_functionparameters();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 maxResultSize = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxresultsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID sender_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractCallLocalQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractCallLocalQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractID contractID = 2;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  // int64 gas = 3;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_gas(), target);
  }

  // bytes functionParameters = 4;
  if (!this->_internal_functionparameters().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_functionparameters(), target);
  }

  // int64 maxResultSize = 5 [deprecated = true];
  if (this->_internal_maxresultsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_maxresultsize(), target);
  }

  // .proto.AccountID sender_id = 6;
  if (this->_internal_has_sender_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sender_id(this),
        _Internal::sender_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractCallLocalQuery)
  return target;
}

size_t ContractCallLocalQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractCallLocalQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes functionParameters = 4;
  if (!this->_internal_functionparameters().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_functionparameters());
  }

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.ContractID contractID = 2;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  // .proto.AccountID sender_id = 6;
  if (this->_internal_has_sender_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_id_);
  }

  // int64 gas = 3;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas());
  }

  // int64 maxResultSize = 5 [deprecated = true];
  if (this->_internal_maxresultsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_maxresultsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractCallLocalQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractCallLocalQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractCallLocalQuery::GetClassData() const { return &_class_data_; }


void ContractCallLocalQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractCallLocalQuery*>(&to_msg);
  auto& from = static_cast<const ContractCallLocalQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractCallLocalQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_functionparameters().empty()) {
    _this->_internal_set_functionparameters(from._internal_functionparameters());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  if (from._internal_has_sender_id()) {
    _this->_internal_mutable_sender_id()->::proto::AccountID::MergeFrom(
        from._internal_sender_id());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_maxresultsize() != 0) {
    _this->_internal_set_maxresultsize(from._internal_maxresultsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractCallLocalQuery::CopyFrom(const ContractCallLocalQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractCallLocalQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCallLocalQuery::IsInitialized() const {
  return true;
}

void ContractCallLocalQuery::InternalSwap(ContractCallLocalQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.functionparameters_, lhs_arena,
      &other->_impl_.functionparameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCallLocalQuery, _impl_.maxresultsize_)
      + sizeof(ContractCallLocalQuery::_impl_.maxresultsize_)
      - PROTOBUF_FIELD_OFFSET(ContractCallLocalQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCallLocalQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fcall_5flocal_2eproto_getter, &descriptor_table_contract_5fcall_5flocal_2eproto_once,
      file_level_metadata_contract_5fcall_5flocal_2eproto[2]);
}

// ===================================================================

class ContractCallLocalResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const ContractCallLocalResponse* msg);
  static const ::proto::ContractFunctionResult& functionresult(const ContractCallLocalResponse* msg);
};

const ::proto::ResponseHeader&
ContractCallLocalResponse::_Internal::header(const ContractCallLocalResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::ContractFunctionResult&
ContractCallLocalResponse::_Internal::functionresult(const ContractCallLocalResponse* msg) {
  return *msg->_impl_.functionresult_;
}
void ContractCallLocalResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
ContractCallLocalResponse::ContractCallLocalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractCallLocalResponse)
}
ContractCallLocalResponse::ContractCallLocalResponse(const ContractCallLocalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractCallLocalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.functionresult_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_functionresult()) {
    _this->_impl_.functionresult_ = new ::proto::ContractFunctionResult(*from._impl_.functionresult_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContractCallLocalResponse)
}

inline void ContractCallLocalResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.functionresult_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContractCallLocalResponse::~ContractCallLocalResponse() {
  // @@protoc_insertion_point(destructor:proto.ContractCallLocalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractCallLocalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.functionresult_;
}

void ContractCallLocalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractCallLocalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractCallLocalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.functionresult_ != nullptr) {
    delete _impl_.functionresult_;
  }
  _impl_.functionresult_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCallLocalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractFunctionResult functionResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractCallLocalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractCallLocalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractFunctionResult functionResult = 2;
  if (this->_internal_has_functionresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::functionresult(this),
        _Internal::functionresult(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractCallLocalResponse)
  return target;
}

size_t ContractCallLocalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractCallLocalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.ContractFunctionResult functionResult = 2;
  if (this->_internal_has_functionresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.functionresult_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractCallLocalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractCallLocalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractCallLocalResponse::GetClassData() const { return &_class_data_; }


void ContractCallLocalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractCallLocalResponse*>(&to_msg);
  auto& from = static_cast<const ContractCallLocalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractCallLocalResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_functionresult()) {
    _this->_internal_mutable_functionresult()->::proto::ContractFunctionResult::MergeFrom(
        from._internal_functionresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractCallLocalResponse::CopyFrom(const ContractCallLocalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractCallLocalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCallLocalResponse::IsInitialized() const {
  return true;
}

void ContractCallLocalResponse::InternalSwap(ContractCallLocalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCallLocalResponse, _impl_.functionresult_)
      + sizeof(ContractCallLocalResponse::_impl_.functionresult_)
      - PROTOBUF_FIELD_OFFSET(ContractCallLocalResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCallLocalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fcall_5flocal_2eproto_getter, &descriptor_table_contract_5fcall_5flocal_2eproto_once,
      file_level_metadata_contract_5fcall_5flocal_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ContractLoginfo*
Arena::CreateMaybeMessage< ::proto::ContractLoginfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractLoginfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContractFunctionResult*
Arena::CreateMaybeMessage< ::proto::ContractFunctionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractFunctionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContractCallLocalQuery*
Arena::CreateMaybeMessage< ::proto::ContractCallLocalQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractCallLocalQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContractCallLocalResponse*
Arena::CreateMaybeMessage< ::proto::ContractCallLocalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractCallLocalResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

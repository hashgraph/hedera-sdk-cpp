// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule_get_info.proto

#include "schedule_get_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ScheduleGetInfoQuery::ScheduleGetInfoQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.scheduleid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleGetInfoQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleGetInfoQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleGetInfoQueryDefaultTypeInternal() {}
  union {
    ScheduleGetInfoQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleGetInfoQueryDefaultTypeInternal _ScheduleGetInfoQuery_default_instance_;
PROTOBUF_CONSTEXPR ScheduleInfo::ScheduleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scheduleid_)*/nullptr
  , /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.scheduledtransactionbody_)*/nullptr
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.signers_)*/nullptr
  , /*decltype(_impl_.creatoraccountid_)*/nullptr
  , /*decltype(_impl_.payeraccountid_)*/nullptr
  , /*decltype(_impl_.scheduledtransactionid_)*/nullptr
  , /*decltype(_impl_.wait_for_expiry_)*/false
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ScheduleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleInfoDefaultTypeInternal() {}
  union {
    ScheduleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleInfoDefaultTypeInternal _ScheduleInfo_default_instance_;
PROTOBUF_CONSTEXPR ScheduleGetInfoResponse::ScheduleGetInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.scheduleinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleGetInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleGetInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleGetInfoResponseDefaultTypeInternal() {}
  union {
    ScheduleGetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleGetInfoResponseDefaultTypeInternal _ScheduleGetInfoResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_schedule_5fget_5finfo_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_schedule_5fget_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_schedule_5fget_5finfo_2eproto = nullptr;

const uint32_t TableStruct_schedule_5fget_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleGetInfoQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleGetInfoQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleGetInfoQuery, _impl_.scheduleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.scheduleid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.expirationtime_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.scheduledtransactionbody_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.signers_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.creatoraccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.payeraccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.scheduledtransactionid_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.ledger_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.wait_for_expiry_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleInfo, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleGetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleGetInfoResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::ScheduleGetInfoResponse, _impl_.scheduleinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ScheduleGetInfoQuery)},
  { 8, -1, -1, sizeof(::proto::ScheduleInfo)},
  { 28, -1, -1, sizeof(::proto::ScheduleGetInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ScheduleGetInfoQuery_default_instance_._instance,
  &::proto::_ScheduleInfo_default_instance_._instance,
  &::proto::_ScheduleGetInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_schedule_5fget_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027schedule_get_info.proto\022\005proto\032\021basic_"
  "types.proto\032\017timestamp.proto\032\022query_head"
  "er.proto\032\025response_header.proto\032\"schedul"
  "able_transaction_body.proto\"a\n\024ScheduleG"
  "etInfoQuery\022\"\n\006header\030\001 \001(\0132\022.proto.Quer"
  "yHeader\022%\n\nscheduleID\030\002 \001(\0132\021.proto.Sche"
  "duleID\"\210\004\n\014ScheduleInfo\022%\n\nscheduleID\030\001 "
  "\001(\0132\021.proto.ScheduleID\022)\n\rdeletion_time\030"
  "\002 \001(\0132\020.proto.TimestampH\000\022*\n\016execution_t"
  "ime\030\003 \001(\0132\020.proto.TimestampH\000\022(\n\016expirat"
  "ionTime\030\004 \001(\0132\020.proto.Timestamp\022C\n\030sched"
  "uledTransactionBody\030\005 \001(\0132!.proto.Schedu"
  "lableTransactionBody\022\014\n\004memo\030\006 \001(\t\022\034\n\010ad"
  "minKey\030\007 \001(\0132\n.proto.Key\022\037\n\007signers\030\010 \001("
  "\0132\016.proto.KeyList\022*\n\020creatorAccountID\030\t "
  "\001(\0132\020.proto.AccountID\022(\n\016payerAccountID\030"
  "\n \001(\0132\020.proto.AccountID\0224\n\026scheduledTran"
  "sactionID\030\013 \001(\0132\024.proto.TransactionID\022\021\n"
  "\tledger_id\030\014 \001(\014\022\027\n\017wait_for_expiry\030\r \001("
  "\010B\006\n\004data\"k\n\027ScheduleGetInfoResponse\022%\n\006"
  "header\030\001 \001(\0132\025.proto.ResponseHeader\022)\n\014s"
  "cheduleInfo\030\002 \001(\0132\023.proto.ScheduleInfoB&"
  "\n\"com.hederahashgraph.api.proto.javaP\001b\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_schedule_5fget_5finfo_2eproto_deps[5] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_schedulable_5ftransaction_5fbody_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_schedule_5fget_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_schedule_5fget_5finfo_2eproto = {
    false, false, 926, descriptor_table_protodef_schedule_5fget_5finfo_2eproto,
    "schedule_get_info.proto",
    &descriptor_table_schedule_5fget_5finfo_2eproto_once, descriptor_table_schedule_5fget_5finfo_2eproto_deps, 5, 3,
    schemas, file_default_instances, TableStruct_schedule_5fget_5finfo_2eproto::offsets,
    file_level_metadata_schedule_5fget_5finfo_2eproto, file_level_enum_descriptors_schedule_5fget_5finfo_2eproto,
    file_level_service_descriptors_schedule_5fget_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_schedule_5fget_5finfo_2eproto_getter() {
  return &descriptor_table_schedule_5fget_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_schedule_5fget_5finfo_2eproto(&descriptor_table_schedule_5fget_5finfo_2eproto);
namespace proto {

// ===================================================================

class ScheduleGetInfoQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const ScheduleGetInfoQuery* msg);
  static const ::proto::ScheduleID& scheduleid(const ScheduleGetInfoQuery* msg);
};

const ::proto::QueryHeader&
ScheduleGetInfoQuery::_Internal::header(const ScheduleGetInfoQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::ScheduleID&
ScheduleGetInfoQuery::_Internal::scheduleid(const ScheduleGetInfoQuery* msg) {
  return *msg->_impl_.scheduleid_;
}
void ScheduleGetInfoQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void ScheduleGetInfoQuery::clear_scheduleid() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleid_ != nullptr) {
    delete _impl_.scheduleid_;
  }
  _impl_.scheduleid_ = nullptr;
}
ScheduleGetInfoQuery::ScheduleGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ScheduleGetInfoQuery)
}
ScheduleGetInfoQuery::ScheduleGetInfoQuery(const ScheduleGetInfoQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleGetInfoQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.scheduleid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_scheduleid()) {
    _this->_impl_.scheduleid_ = new ::proto::ScheduleID(*from._impl_.scheduleid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ScheduleGetInfoQuery)
}

inline void ScheduleGetInfoQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.scheduleid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScheduleGetInfoQuery::~ScheduleGetInfoQuery() {
  // @@protoc_insertion_point(destructor:proto.ScheduleGetInfoQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleGetInfoQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.scheduleid_;
}

void ScheduleGetInfoQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleGetInfoQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScheduleGetInfoQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleid_ != nullptr) {
    delete _impl_.scheduleid_;
  }
  _impl_.scheduleid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleGetInfoQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleID scheduleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduleid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleGetInfoQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScheduleGetInfoQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.ScheduleID scheduleID = 2;
  if (this->_internal_has_scheduleid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scheduleid(this),
        _Internal::scheduleid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScheduleGetInfoQuery)
  return target;
}

size_t ScheduleGetInfoQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScheduleGetInfoQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.ScheduleID scheduleID = 2;
  if (this->_internal_has_scheduleid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduleid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleGetInfoQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleGetInfoQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleGetInfoQuery::GetClassData() const { return &_class_data_; }


void ScheduleGetInfoQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleGetInfoQuery*>(&to_msg);
  auto& from = static_cast<const ScheduleGetInfoQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ScheduleGetInfoQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_scheduleid()) {
    _this->_internal_mutable_scheduleid()->::proto::ScheduleID::MergeFrom(
        from._internal_scheduleid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleGetInfoQuery::CopyFrom(const ScheduleGetInfoQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScheduleGetInfoQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleGetInfoQuery::IsInitialized() const {
  return true;
}

void ScheduleGetInfoQuery::InternalSwap(ScheduleGetInfoQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleGetInfoQuery, _impl_.scheduleid_)
      + sizeof(ScheduleGetInfoQuery::_impl_.scheduleid_)
      - PROTOBUF_FIELD_OFFSET(ScheduleGetInfoQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleGetInfoQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schedule_5fget_5finfo_2eproto_getter, &descriptor_table_schedule_5fget_5finfo_2eproto_once,
      file_level_metadata_schedule_5fget_5finfo_2eproto[0]);
}

// ===================================================================

class ScheduleInfo::_Internal {
 public:
  static const ::proto::ScheduleID& scheduleid(const ScheduleInfo* msg);
  static const ::proto::Timestamp& deletion_time(const ScheduleInfo* msg);
  static const ::proto::Timestamp& execution_time(const ScheduleInfo* msg);
  static const ::proto::Timestamp& expirationtime(const ScheduleInfo* msg);
  static const ::proto::SchedulableTransactionBody& scheduledtransactionbody(const ScheduleInfo* msg);
  static const ::proto::Key& adminkey(const ScheduleInfo* msg);
  static const ::proto::KeyList& signers(const ScheduleInfo* msg);
  static const ::proto::AccountID& creatoraccountid(const ScheduleInfo* msg);
  static const ::proto::AccountID& payeraccountid(const ScheduleInfo* msg);
  static const ::proto::TransactionID& scheduledtransactionid(const ScheduleInfo* msg);
};

const ::proto::ScheduleID&
ScheduleInfo::_Internal::scheduleid(const ScheduleInfo* msg) {
  return *msg->_impl_.scheduleid_;
}
const ::proto::Timestamp&
ScheduleInfo::_Internal::deletion_time(const ScheduleInfo* msg) {
  return *msg->_impl_.data_.deletion_time_;
}
const ::proto::Timestamp&
ScheduleInfo::_Internal::execution_time(const ScheduleInfo* msg) {
  return *msg->_impl_.data_.execution_time_;
}
const ::proto::Timestamp&
ScheduleInfo::_Internal::expirationtime(const ScheduleInfo* msg) {
  return *msg->_impl_.expirationtime_;
}
const ::proto::SchedulableTransactionBody&
ScheduleInfo::_Internal::scheduledtransactionbody(const ScheduleInfo* msg) {
  return *msg->_impl_.scheduledtransactionbody_;
}
const ::proto::Key&
ScheduleInfo::_Internal::adminkey(const ScheduleInfo* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::KeyList&
ScheduleInfo::_Internal::signers(const ScheduleInfo* msg) {
  return *msg->_impl_.signers_;
}
const ::proto::AccountID&
ScheduleInfo::_Internal::creatoraccountid(const ScheduleInfo* msg) {
  return *msg->_impl_.creatoraccountid_;
}
const ::proto::AccountID&
ScheduleInfo::_Internal::payeraccountid(const ScheduleInfo* msg) {
  return *msg->_impl_.payeraccountid_;
}
const ::proto::TransactionID&
ScheduleInfo::_Internal::scheduledtransactionid(const ScheduleInfo* msg) {
  return *msg->_impl_.scheduledtransactionid_;
}
void ScheduleInfo::clear_scheduleid() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleid_ != nullptr) {
    delete _impl_.scheduleid_;
  }
  _impl_.scheduleid_ = nullptr;
}
void ScheduleInfo::set_allocated_deletion_time(::proto::Timestamp* deletion_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (deletion_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deletion_time));
    if (message_arena != submessage_arena) {
      deletion_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deletion_time, submessage_arena);
    }
    set_has_deletion_time();
    _impl_.data_.deletion_time_ = deletion_time;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.deletion_time)
}
void ScheduleInfo::clear_deletion_time() {
  if (_internal_has_deletion_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.deletion_time_;
    }
    clear_has_data();
  }
}
void ScheduleInfo::set_allocated_execution_time(::proto::Timestamp* execution_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (execution_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_time));
    if (message_arena != submessage_arena) {
      execution_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_time, submessage_arena);
    }
    set_has_execution_time();
    _impl_.data_.execution_time_ = execution_time;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.execution_time)
}
void ScheduleInfo::clear_execution_time() {
  if (_internal_has_execution_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.execution_time_;
    }
    clear_has_data();
  }
}
void ScheduleInfo::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
void ScheduleInfo::clear_scheduledtransactionbody() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionbody_ != nullptr) {
    delete _impl_.scheduledtransactionbody_;
  }
  _impl_.scheduledtransactionbody_ = nullptr;
}
void ScheduleInfo::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void ScheduleInfo::clear_signers() {
  if (GetArenaForAllocation() == nullptr && _impl_.signers_ != nullptr) {
    delete _impl_.signers_;
  }
  _impl_.signers_ = nullptr;
}
void ScheduleInfo::clear_creatoraccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.creatoraccountid_ != nullptr) {
    delete _impl_.creatoraccountid_;
  }
  _impl_.creatoraccountid_ = nullptr;
}
void ScheduleInfo::clear_payeraccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.payeraccountid_ != nullptr) {
    delete _impl_.payeraccountid_;
  }
  _impl_.payeraccountid_ = nullptr;
}
void ScheduleInfo::clear_scheduledtransactionid() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionid_ != nullptr) {
    delete _impl_.scheduledtransactionid_;
  }
  _impl_.scheduledtransactionid_ = nullptr;
}
ScheduleInfo::ScheduleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ScheduleInfo)
}
ScheduleInfo::ScheduleInfo(const ScheduleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.scheduleid_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.scheduledtransactionbody_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.signers_){nullptr}
    , decltype(_impl_.creatoraccountid_){nullptr}
    , decltype(_impl_.payeraccountid_){nullptr}
    , decltype(_impl_.scheduledtransactionid_){nullptr}
    , decltype(_impl_.wait_for_expiry_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_id().empty()) {
    _this->_impl_.ledger_id_.Set(from._internal_ledger_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_scheduleid()) {
    _this->_impl_.scheduleid_ = new ::proto::ScheduleID(*from._impl_.scheduleid_);
  }
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::Timestamp(*from._impl_.expirationtime_);
  }
  if (from._internal_has_scheduledtransactionbody()) {
    _this->_impl_.scheduledtransactionbody_ = new ::proto::SchedulableTransactionBody(*from._impl_.scheduledtransactionbody_);
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_signers()) {
    _this->_impl_.signers_ = new ::proto::KeyList(*from._impl_.signers_);
  }
  if (from._internal_has_creatoraccountid()) {
    _this->_impl_.creatoraccountid_ = new ::proto::AccountID(*from._impl_.creatoraccountid_);
  }
  if (from._internal_has_payeraccountid()) {
    _this->_impl_.payeraccountid_ = new ::proto::AccountID(*from._impl_.payeraccountid_);
  }
  if (from._internal_has_scheduledtransactionid()) {
    _this->_impl_.scheduledtransactionid_ = new ::proto::TransactionID(*from._impl_.scheduledtransactionid_);
  }
  _this->_impl_.wait_for_expiry_ = from._impl_.wait_for_expiry_;
  clear_has_data();
  switch (from.data_case()) {
    case kDeletionTime: {
      _this->_internal_mutable_deletion_time()->::proto::Timestamp::MergeFrom(
          from._internal_deletion_time());
      break;
    }
    case kExecutionTime: {
      _this->_internal_mutable_execution_time()->::proto::Timestamp::MergeFrom(
          from._internal_execution_time());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ScheduleInfo)
}

inline void ScheduleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.scheduleid_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.scheduledtransactionbody_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.signers_){nullptr}
    , decltype(_impl_.creatoraccountid_){nullptr}
    , decltype(_impl_.payeraccountid_){nullptr}
    , decltype(_impl_.scheduledtransactionid_){nullptr}
    , decltype(_impl_.wait_for_expiry_){false}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data();
}

ScheduleInfo::~ScheduleInfo() {
  // @@protoc_insertion_point(destructor:proto.ScheduleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memo_.Destroy();
  _impl_.ledger_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.scheduleid_;
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
  if (this != internal_default_instance()) delete _impl_.scheduledtransactionbody_;
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.signers_;
  if (this != internal_default_instance()) delete _impl_.creatoraccountid_;
  if (this != internal_default_instance()) delete _impl_.payeraccountid_;
  if (this != internal_default_instance()) delete _impl_.scheduledtransactionid_;
  if (has_data()) {
    clear_data();
  }
}

void ScheduleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleInfo::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:proto.ScheduleInfo)
  switch (data_case()) {
    case kDeletionTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.deletion_time_;
      }
      break;
    }
    case kExecutionTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.execution_time_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void ScheduleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScheduleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memo_.ClearToEmpty();
  _impl_.ledger_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleid_ != nullptr) {
    delete _impl_.scheduleid_;
  }
  _impl_.scheduleid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionbody_ != nullptr) {
    delete _impl_.scheduledtransactionbody_;
  }
  _impl_.scheduledtransactionbody_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.signers_ != nullptr) {
    delete _impl_.signers_;
  }
  _impl_.signers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.creatoraccountid_ != nullptr) {
    delete _impl_.creatoraccountid_;
  }
  _impl_.creatoraccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payeraccountid_ != nullptr) {
    delete _impl_.payeraccountid_;
  }
  _impl_.payeraccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduledtransactionid_ != nullptr) {
    delete _impl_.scheduledtransactionid_;
  }
  _impl_.scheduledtransactionid_ = nullptr;
  _impl_.wait_for_expiry_ = false;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ScheduleID scheduleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduleid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp deletion_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletion_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp execution_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expirationTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SchedulableTransactionBody scheduledTransactionBody = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduledtransactionbody(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ScheduleInfo.memo"));
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.KeyList signers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_signers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID creatorAccountID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_creatoraccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID payerAccountID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_payeraccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionID scheduledTransactionID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduledtransactionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ledger_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_ledger_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wait_for_expiry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.wait_for_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScheduleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ScheduleID scheduleID = 1;
  if (this->_internal_has_scheduleid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scheduleid(this),
        _Internal::scheduleid(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp deletion_time = 2;
  if (_internal_has_deletion_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deletion_time(this),
        _Internal::deletion_time(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp execution_time = 3;
  if (_internal_has_execution_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::execution_time(this),
        _Internal::execution_time(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp expirationTime = 4;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  // .proto.SchedulableTransactionBody scheduledTransactionBody = 5;
  if (this->_internal_has_scheduledtransactionbody()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::scheduledtransactionbody(this),
        _Internal::scheduledtransactionbody(this).GetCachedSize(), target, stream);
  }

  // string memo = 6;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ScheduleInfo.memo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_memo(), target);
  }

  // .proto.Key adminKey = 7;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // .proto.KeyList signers = 8;
  if (this->_internal_has_signers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::signers(this),
        _Internal::signers(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID creatorAccountID = 9;
  if (this->_internal_has_creatoraccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::creatoraccountid(this),
        _Internal::creatoraccountid(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID payerAccountID = 10;
  if (this->_internal_has_payeraccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::payeraccountid(this),
        _Internal::payeraccountid(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionID scheduledTransactionID = 11;
  if (this->_internal_has_scheduledtransactionid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::scheduledtransactionid(this),
        _Internal::scheduledtransactionid(this).GetCachedSize(), target, stream);
  }

  // bytes ledger_id = 12;
  if (!this->_internal_ledger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_ledger_id(), target);
  }

  // bool wait_for_expiry = 13;
  if (this->_internal_wait_for_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_wait_for_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScheduleInfo)
  return target;
}

size_t ScheduleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScheduleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 6;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes ledger_id = 12;
  if (!this->_internal_ledger_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_id());
  }

  // .proto.ScheduleID scheduleID = 1;
  if (this->_internal_has_scheduleid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduleid_);
  }

  // .proto.Timestamp expirationTime = 4;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // .proto.SchedulableTransactionBody scheduledTransactionBody = 5;
  if (this->_internal_has_scheduledtransactionbody()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduledtransactionbody_);
  }

  // .proto.Key adminKey = 7;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.KeyList signers = 8;
  if (this->_internal_has_signers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signers_);
  }

  // .proto.AccountID creatorAccountID = 9;
  if (this->_internal_has_creatoraccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.creatoraccountid_);
  }

  // .proto.AccountID payerAccountID = 10;
  if (this->_internal_has_payeraccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payeraccountid_);
  }

  // .proto.TransactionID scheduledTransactionID = 11;
  if (this->_internal_has_scheduledtransactionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduledtransactionid_);
  }

  // bool wait_for_expiry = 13;
  if (this->_internal_wait_for_expiry() != 0) {
    total_size += 1 + 1;
  }

  switch (data_case()) {
    // .proto.Timestamp deletion_time = 2;
    case kDeletionTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.deletion_time_);
      break;
    }
    // .proto.Timestamp execution_time = 3;
    case kExecutionTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.execution_time_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleInfo::GetClassData() const { return &_class_data_; }


void ScheduleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleInfo*>(&to_msg);
  auto& from = static_cast<const ScheduleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ScheduleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_ledger_id().empty()) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_has_scheduleid()) {
    _this->_internal_mutable_scheduleid()->::proto::ScheduleID::MergeFrom(
        from._internal_scheduleid());
  }
  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::Timestamp::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_has_scheduledtransactionbody()) {
    _this->_internal_mutable_scheduledtransactionbody()->::proto::SchedulableTransactionBody::MergeFrom(
        from._internal_scheduledtransactionbody());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_signers()) {
    _this->_internal_mutable_signers()->::proto::KeyList::MergeFrom(
        from._internal_signers());
  }
  if (from._internal_has_creatoraccountid()) {
    _this->_internal_mutable_creatoraccountid()->::proto::AccountID::MergeFrom(
        from._internal_creatoraccountid());
  }
  if (from._internal_has_payeraccountid()) {
    _this->_internal_mutable_payeraccountid()->::proto::AccountID::MergeFrom(
        from._internal_payeraccountid());
  }
  if (from._internal_has_scheduledtransactionid()) {
    _this->_internal_mutable_scheduledtransactionid()->::proto::TransactionID::MergeFrom(
        from._internal_scheduledtransactionid());
  }
  if (from._internal_wait_for_expiry() != 0) {
    _this->_internal_set_wait_for_expiry(from._internal_wait_for_expiry());
  }
  switch (from.data_case()) {
    case kDeletionTime: {
      _this->_internal_mutable_deletion_time()->::proto::Timestamp::MergeFrom(
          from._internal_deletion_time());
      break;
    }
    case kExecutionTime: {
      _this->_internal_mutable_execution_time()->::proto::Timestamp::MergeFrom(
          from._internal_execution_time());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleInfo::CopyFrom(const ScheduleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScheduleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleInfo::IsInitialized() const {
  return true;
}

void ScheduleInfo::InternalSwap(ScheduleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_id_, lhs_arena,
      &other->_impl_.ledger_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleInfo, _impl_.wait_for_expiry_)
      + sizeof(ScheduleInfo::_impl_.wait_for_expiry_)
      - PROTOBUF_FIELD_OFFSET(ScheduleInfo, _impl_.scheduleid_)>(
          reinterpret_cast<char*>(&_impl_.scheduleid_),
          reinterpret_cast<char*>(&other->_impl_.scheduleid_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schedule_5fget_5finfo_2eproto_getter, &descriptor_table_schedule_5fget_5finfo_2eproto_once,
      file_level_metadata_schedule_5fget_5finfo_2eproto[1]);
}

// ===================================================================

class ScheduleGetInfoResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const ScheduleGetInfoResponse* msg);
  static const ::proto::ScheduleInfo& scheduleinfo(const ScheduleGetInfoResponse* msg);
};

const ::proto::ResponseHeader&
ScheduleGetInfoResponse::_Internal::header(const ScheduleGetInfoResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::ScheduleInfo&
ScheduleGetInfoResponse::_Internal::scheduleinfo(const ScheduleGetInfoResponse* msg) {
  return *msg->_impl_.scheduleinfo_;
}
void ScheduleGetInfoResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
ScheduleGetInfoResponse::ScheduleGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ScheduleGetInfoResponse)
}
ScheduleGetInfoResponse::ScheduleGetInfoResponse(const ScheduleGetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleGetInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.scheduleinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_scheduleinfo()) {
    _this->_impl_.scheduleinfo_ = new ::proto::ScheduleInfo(*from._impl_.scheduleinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ScheduleGetInfoResponse)
}

inline void ScheduleGetInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.scheduleinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScheduleGetInfoResponse::~ScheduleGetInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.ScheduleGetInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleGetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.scheduleinfo_;
}

void ScheduleGetInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleGetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScheduleGetInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleinfo_ != nullptr) {
    delete _impl_.scheduleinfo_;
  }
  _impl_.scheduleinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleGetInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleInfo scheduleInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduleinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleGetInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScheduleGetInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.ScheduleInfo scheduleInfo = 2;
  if (this->_internal_has_scheduleinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scheduleinfo(this),
        _Internal::scheduleinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScheduleGetInfoResponse)
  return target;
}

size_t ScheduleGetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScheduleGetInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.ScheduleInfo scheduleInfo = 2;
  if (this->_internal_has_scheduleinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduleinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleGetInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleGetInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleGetInfoResponse::GetClassData() const { return &_class_data_; }


void ScheduleGetInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleGetInfoResponse*>(&to_msg);
  auto& from = static_cast<const ScheduleGetInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ScheduleGetInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_scheduleinfo()) {
    _this->_internal_mutable_scheduleinfo()->::proto::ScheduleInfo::MergeFrom(
        from._internal_scheduleinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleGetInfoResponse::CopyFrom(const ScheduleGetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScheduleGetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleGetInfoResponse::IsInitialized() const {
  return true;
}

void ScheduleGetInfoResponse::InternalSwap(ScheduleGetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleGetInfoResponse, _impl_.scheduleinfo_)
      + sizeof(ScheduleGetInfoResponse::_impl_.scheduleinfo_)
      - PROTOBUF_FIELD_OFFSET(ScheduleGetInfoResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleGetInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schedule_5fget_5finfo_2eproto_getter, &descriptor_table_schedule_5fget_5finfo_2eproto_once,
      file_level_metadata_schedule_5fget_5finfo_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ScheduleGetInfoQuery*
Arena::CreateMaybeMessage< ::proto::ScheduleGetInfoQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ScheduleGetInfoQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ScheduleInfo*
Arena::CreateMaybeMessage< ::proto::ScheduleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ScheduleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ScheduleGetInfoResponse*
Arena::CreateMaybeMessage< ::proto::ScheduleGetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ScheduleGetInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_get_info.proto

#include "file_get_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR FileGetInfoQuery::FileGetInfoQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.fileid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileGetInfoQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileGetInfoQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileGetInfoQueryDefaultTypeInternal() {}
  union {
    FileGetInfoQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileGetInfoQueryDefaultTypeInternal _FileGetInfoQuery_default_instance_;
PROTOBUF_CONSTEXPR FileGetInfoResponse_FileInfo::FileGetInfoResponse_FileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileid_)*/nullptr
  , /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.keys_)*/nullptr
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileGetInfoResponse_FileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileGetInfoResponse_FileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileGetInfoResponse_FileInfoDefaultTypeInternal() {}
  union {
    FileGetInfoResponse_FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileGetInfoResponse_FileInfoDefaultTypeInternal _FileGetInfoResponse_FileInfo_default_instance_;
PROTOBUF_CONSTEXPR FileGetInfoResponse::FileGetInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.fileinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileGetInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileGetInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileGetInfoResponseDefaultTypeInternal() {}
  union {
    FileGetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileGetInfoResponseDefaultTypeInternal _FileGetInfoResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_file_5fget_5finfo_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_file_5fget_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_file_5fget_5finfo_2eproto = nullptr;

const uint32_t TableStruct_file_5fget_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoQuery, _impl_.fileid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.fileid_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.expirationtime_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse_FileInfo, _impl_.ledger_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::FileGetInfoResponse, _impl_.fileinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::FileGetInfoQuery)},
  { 8, -1, -1, sizeof(::proto::FileGetInfoResponse_FileInfo)},
  { 21, -1, -1, sizeof(::proto::FileGetInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_FileGetInfoQuery_default_instance_._instance,
  &::proto::_FileGetInfoResponse_FileInfo_default_instance_._instance,
  &::proto::_FileGetInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_file_5fget_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023file_get_info.proto\022\005proto\032\017timestamp."
  "proto\032\021basic_types.proto\032\022query_header.p"
  "roto\032\025response_header.proto\"U\n\020FileGetIn"
  "foQuery\022\"\n\006header\030\001 \001(\0132\022.proto.QueryHea"
  "der\022\035\n\006fileID\030\002 \001(\0132\r.proto.FileID\"\247\002\n\023F"
  "ileGetInfoResponse\022%\n\006header\030\001 \001(\0132\025.pro"
  "to.ResponseHeader\0225\n\010fileInfo\030\002 \001(\0132#.pr"
  "oto.FileGetInfoResponse.FileInfo\032\261\001\n\010Fil"
  "eInfo\022\035\n\006fileID\030\001 \001(\0132\r.proto.FileID\022\014\n\004"
  "size\030\002 \001(\003\022(\n\016expirationTime\030\003 \001(\0132\020.pro"
  "to.Timestamp\022\017\n\007deleted\030\004 \001(\010\022\034\n\004keys\030\005 "
  "\001(\0132\016.proto.KeyList\022\014\n\004memo\030\006 \001(\t\022\021\n\tled"
  "ger_id\030\007 \001(\014B&\n\"com.hederahashgraph.api."
  "proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_file_5fget_5finfo_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_file_5fget_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_file_5fget_5finfo_2eproto = {
    false, false, 540, descriptor_table_protodef_file_5fget_5finfo_2eproto,
    "file_get_info.proto",
    &descriptor_table_file_5fget_5finfo_2eproto_once, descriptor_table_file_5fget_5finfo_2eproto_deps, 4, 3,
    schemas, file_default_instances, TableStruct_file_5fget_5finfo_2eproto::offsets,
    file_level_metadata_file_5fget_5finfo_2eproto, file_level_enum_descriptors_file_5fget_5finfo_2eproto,
    file_level_service_descriptors_file_5fget_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_file_5fget_5finfo_2eproto_getter() {
  return &descriptor_table_file_5fget_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_file_5fget_5finfo_2eproto(&descriptor_table_file_5fget_5finfo_2eproto);
namespace proto {

// ===================================================================

class FileGetInfoQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const FileGetInfoQuery* msg);
  static const ::proto::FileID& fileid(const FileGetInfoQuery* msg);
};

const ::proto::QueryHeader&
FileGetInfoQuery::_Internal::header(const FileGetInfoQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::FileID&
FileGetInfoQuery::_Internal::fileid(const FileGetInfoQuery* msg) {
  return *msg->_impl_.fileid_;
}
void FileGetInfoQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void FileGetInfoQuery::clear_fileid() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
}
FileGetInfoQuery::FileGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FileGetInfoQuery)
}
FileGetInfoQuery::FileGetInfoQuery(const FileGetInfoQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileGetInfoQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.fileid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_fileid()) {
    _this->_impl_.fileid_ = new ::proto::FileID(*from._impl_.fileid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.FileGetInfoQuery)
}

inline void FileGetInfoQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.fileid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileGetInfoQuery::~FileGetInfoQuery() {
  // @@protoc_insertion_point(destructor:proto.FileGetInfoQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileGetInfoQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.fileid_;
}

void FileGetInfoQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileGetInfoQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileGetInfoQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileGetInfoQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileID fileID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileGetInfoQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FileGetInfoQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.FileID fileID = 2;
  if (this->_internal_has_fileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fileid(this),
        _Internal::fileid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FileGetInfoQuery)
  return target;
}

size_t FileGetInfoQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileGetInfoQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.FileID fileID = 2;
  if (this->_internal_has_fileid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileGetInfoQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileGetInfoQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileGetInfoQuery::GetClassData() const { return &_class_data_; }


void FileGetInfoQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileGetInfoQuery*>(&to_msg);
  auto& from = static_cast<const FileGetInfoQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FileGetInfoQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_fileid()) {
    _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
        from._internal_fileid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileGetInfoQuery::CopyFrom(const FileGetInfoQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileGetInfoQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileGetInfoQuery::IsInitialized() const {
  return true;
}

void FileGetInfoQuery::InternalSwap(FileGetInfoQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileGetInfoQuery, _impl_.fileid_)
      + sizeof(FileGetInfoQuery::_impl_.fileid_)
      - PROTOBUF_FIELD_OFFSET(FileGetInfoQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileGetInfoQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fget_5finfo_2eproto_getter, &descriptor_table_file_5fget_5finfo_2eproto_once,
      file_level_metadata_file_5fget_5finfo_2eproto[0]);
}

// ===================================================================

class FileGetInfoResponse_FileInfo::_Internal {
 public:
  static const ::proto::FileID& fileid(const FileGetInfoResponse_FileInfo* msg);
  static const ::proto::Timestamp& expirationtime(const FileGetInfoResponse_FileInfo* msg);
  static const ::proto::KeyList& keys(const FileGetInfoResponse_FileInfo* msg);
};

const ::proto::FileID&
FileGetInfoResponse_FileInfo::_Internal::fileid(const FileGetInfoResponse_FileInfo* msg) {
  return *msg->_impl_.fileid_;
}
const ::proto::Timestamp&
FileGetInfoResponse_FileInfo::_Internal::expirationtime(const FileGetInfoResponse_FileInfo* msg) {
  return *msg->_impl_.expirationtime_;
}
const ::proto::KeyList&
FileGetInfoResponse_FileInfo::_Internal::keys(const FileGetInfoResponse_FileInfo* msg) {
  return *msg->_impl_.keys_;
}
void FileGetInfoResponse_FileInfo::clear_fileid() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
}
void FileGetInfoResponse_FileInfo::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
void FileGetInfoResponse_FileInfo::clear_keys() {
  if (GetArenaForAllocation() == nullptr && _impl_.keys_ != nullptr) {
    delete _impl_.keys_;
  }
  _impl_.keys_ = nullptr;
}
FileGetInfoResponse_FileInfo::FileGetInfoResponse_FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FileGetInfoResponse.FileInfo)
}
FileGetInfoResponse_FileInfo::FileGetInfoResponse_FileInfo(const FileGetInfoResponse_FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileGetInfoResponse_FileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.fileid_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.keys_){nullptr}
    , decltype(_impl_.size_){}
    , decltype(_impl_.deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_id().empty()) {
    _this->_impl_.ledger_id_.Set(from._internal_ledger_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fileid()) {
    _this->_impl_.fileid_ = new ::proto::FileID(*from._impl_.fileid_);
  }
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::Timestamp(*from._impl_.expirationtime_);
  }
  if (from._internal_has_keys()) {
    _this->_impl_.keys_ = new ::proto::KeyList(*from._impl_.keys_);
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deleted_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.deleted_));
  // @@protoc_insertion_point(copy_constructor:proto.FileGetInfoResponse.FileInfo)
}

inline void FileGetInfoResponse_FileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.fileid_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.keys_){nullptr}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.deleted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileGetInfoResponse_FileInfo::~FileGetInfoResponse_FileInfo() {
  // @@protoc_insertion_point(destructor:proto.FileGetInfoResponse.FileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileGetInfoResponse_FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memo_.Destroy();
  _impl_.ledger_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fileid_;
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
  if (this != internal_default_instance()) delete _impl_.keys_;
}

void FileGetInfoResponse_FileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileGetInfoResponse_FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileGetInfoResponse.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memo_.ClearToEmpty();
  _impl_.ledger_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.keys_ != nullptr) {
    delete _impl_.keys_;
  }
  _impl_.keys_ = nullptr;
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.deleted_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.deleted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileGetInfoResponse_FileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.FileID fileID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expirationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.KeyList keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.FileGetInfoResponse.FileInfo.memo"));
        } else
          goto handle_unusual;
        continue;
      // bytes ledger_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ledger_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileGetInfoResponse_FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FileGetInfoResponse.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.FileID fileID = 1;
  if (this->_internal_has_fileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fileid(this),
        _Internal::fileid(this).GetCachedSize(), target, stream);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // .proto.Timestamp expirationTime = 3;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  // bool deleted = 4;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_deleted(), target);
  }

  // .proto.KeyList keys = 5;
  if (this->_internal_has_keys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::keys(this),
        _Internal::keys(this).GetCachedSize(), target, stream);
  }

  // string memo = 6;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.FileGetInfoResponse.FileInfo.memo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_memo(), target);
  }

  // bytes ledger_id = 7;
  if (!this->_internal_ledger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_ledger_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FileGetInfoResponse.FileInfo)
  return target;
}

size_t FileGetInfoResponse_FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileGetInfoResponse.FileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 6;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes ledger_id = 7;
  if (!this->_internal_ledger_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_id());
  }

  // .proto.FileID fileID = 1;
  if (this->_internal_has_fileid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileid_);
  }

  // .proto.Timestamp expirationTime = 3;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // .proto.KeyList keys = 5;
  if (this->_internal_has_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.keys_);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // bool deleted = 4;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileGetInfoResponse_FileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileGetInfoResponse_FileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileGetInfoResponse_FileInfo::GetClassData() const { return &_class_data_; }


void FileGetInfoResponse_FileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileGetInfoResponse_FileInfo*>(&to_msg);
  auto& from = static_cast<const FileGetInfoResponse_FileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FileGetInfoResponse.FileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_ledger_id().empty()) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_has_fileid()) {
    _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
        from._internal_fileid());
  }
  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::Timestamp::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_has_keys()) {
    _this->_internal_mutable_keys()->::proto::KeyList::MergeFrom(
        from._internal_keys());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileGetInfoResponse_FileInfo::CopyFrom(const FileGetInfoResponse_FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileGetInfoResponse.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileGetInfoResponse_FileInfo::IsInitialized() const {
  return true;
}

void FileGetInfoResponse_FileInfo::InternalSwap(FileGetInfoResponse_FileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_id_, lhs_arena,
      &other->_impl_.ledger_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileGetInfoResponse_FileInfo, _impl_.deleted_)
      + sizeof(FileGetInfoResponse_FileInfo::_impl_.deleted_)
      - PROTOBUF_FIELD_OFFSET(FileGetInfoResponse_FileInfo, _impl_.fileid_)>(
          reinterpret_cast<char*>(&_impl_.fileid_),
          reinterpret_cast<char*>(&other->_impl_.fileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileGetInfoResponse_FileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fget_5finfo_2eproto_getter, &descriptor_table_file_5fget_5finfo_2eproto_once,
      file_level_metadata_file_5fget_5finfo_2eproto[1]);
}

// ===================================================================

class FileGetInfoResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const FileGetInfoResponse* msg);
  static const ::proto::FileGetInfoResponse_FileInfo& fileinfo(const FileGetInfoResponse* msg);
};

const ::proto::ResponseHeader&
FileGetInfoResponse::_Internal::header(const FileGetInfoResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::FileGetInfoResponse_FileInfo&
FileGetInfoResponse::_Internal::fileinfo(const FileGetInfoResponse* msg) {
  return *msg->_impl_.fileinfo_;
}
void FileGetInfoResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
FileGetInfoResponse::FileGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FileGetInfoResponse)
}
FileGetInfoResponse::FileGetInfoResponse(const FileGetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileGetInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.fileinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_fileinfo()) {
    _this->_impl_.fileinfo_ = new ::proto::FileGetInfoResponse_FileInfo(*from._impl_.fileinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.FileGetInfoResponse)
}

inline void FileGetInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.fileinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileGetInfoResponse::~FileGetInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.FileGetInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileGetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.fileinfo_;
}

void FileGetInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileGetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileGetInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fileinfo_ != nullptr) {
    delete _impl_.fileinfo_;
  }
  _impl_.fileinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileGetInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileGetInfoResponse.FileInfo fileInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileGetInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FileGetInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.FileGetInfoResponse.FileInfo fileInfo = 2;
  if (this->_internal_has_fileinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fileinfo(this),
        _Internal::fileinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FileGetInfoResponse)
  return target;
}

size_t FileGetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileGetInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.FileGetInfoResponse.FileInfo fileInfo = 2;
  if (this->_internal_has_fileinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileGetInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileGetInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileGetInfoResponse::GetClassData() const { return &_class_data_; }


void FileGetInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileGetInfoResponse*>(&to_msg);
  auto& from = static_cast<const FileGetInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FileGetInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_fileinfo()) {
    _this->_internal_mutable_fileinfo()->::proto::FileGetInfoResponse_FileInfo::MergeFrom(
        from._internal_fileinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileGetInfoResponse::CopyFrom(const FileGetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileGetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileGetInfoResponse::IsInitialized() const {
  return true;
}

void FileGetInfoResponse::InternalSwap(FileGetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileGetInfoResponse, _impl_.fileinfo_)
      + sizeof(FileGetInfoResponse::_impl_.fileinfo_)
      - PROTOBUF_FIELD_OFFSET(FileGetInfoResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileGetInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_5fget_5finfo_2eproto_getter, &descriptor_table_file_5fget_5finfo_2eproto_once,
      file_level_metadata_file_5fget_5finfo_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::FileGetInfoQuery*
Arena::CreateMaybeMessage< ::proto::FileGetInfoQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FileGetInfoQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FileGetInfoResponse_FileInfo*
Arena::CreateMaybeMessage< ::proto::FileGetInfoResponse_FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FileGetInfoResponse_FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FileGetInfoResponse*
Arena::CreateMaybeMessage< ::proto::FileGetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FileGetInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

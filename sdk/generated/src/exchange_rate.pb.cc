// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange_rate.proto

#include "exchange_rate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ExchangeRate::ExchangeRate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.hbarequiv_)*/0
  , /*decltype(_impl_.centequiv_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRateDefaultTypeInternal() {}
  union {
    ExchangeRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRateDefaultTypeInternal _ExchangeRate_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRateSet::ExchangeRateSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currentrate_)*/nullptr
  , /*decltype(_impl_.nextrate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRateSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRateSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRateSetDefaultTypeInternal() {}
  union {
    ExchangeRateSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRateSetDefaultTypeInternal _ExchangeRateSet_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_exchange_5frate_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_exchange_5frate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_exchange_5frate_2eproto = nullptr;

const uint32_t TableStruct_exchange_5frate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRate, _impl_.hbarequiv_),
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRate, _impl_.centequiv_),
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRate, _impl_.expirationtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRateSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRateSet, _impl_.currentrate_),
  PROTOBUF_FIELD_OFFSET(::proto::ExchangeRateSet, _impl_.nextrate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ExchangeRate)},
  { 9, -1, -1, sizeof(::proto::ExchangeRateSet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ExchangeRate_default_instance_._instance,
  &::proto::_ExchangeRateSet_default_instance_._instance,
};

const char descriptor_table_protodef_exchange_5frate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023exchange_rate.proto\022\005proto\032\017timestamp."
  "proto\"e\n\014ExchangeRate\022\021\n\thbarEquiv\030\001 \001(\005"
  "\022\021\n\tcentEquiv\030\002 \001(\005\022/\n\016expirationTime\030\003 "
  "\001(\0132\027.proto.TimestampSeconds\"b\n\017Exchange"
  "RateSet\022(\n\013currentRate\030\001 \001(\0132\023.proto.Exc"
  "hangeRate\022%\n\010nextRate\030\002 \001(\0132\023.proto.Exch"
  "angeRateB&\n\"com.hederahashgraph.api.prot"
  "o.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_exchange_5frate_2eproto_deps[1] = {
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_exchange_5frate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_5frate_2eproto = {
    false, false, 296, descriptor_table_protodef_exchange_5frate_2eproto,
    "exchange_rate.proto",
    &descriptor_table_exchange_5frate_2eproto_once, descriptor_table_exchange_5frate_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_exchange_5frate_2eproto::offsets,
    file_level_metadata_exchange_5frate_2eproto, file_level_enum_descriptors_exchange_5frate_2eproto,
    file_level_service_descriptors_exchange_5frate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_5frate_2eproto_getter() {
  return &descriptor_table_exchange_5frate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_5frate_2eproto(&descriptor_table_exchange_5frate_2eproto);
namespace proto {

// ===================================================================

class ExchangeRate::_Internal {
 public:
  static const ::proto::TimestampSeconds& expirationtime(const ExchangeRate* msg);
};

const ::proto::TimestampSeconds&
ExchangeRate::_Internal::expirationtime(const ExchangeRate* msg) {
  return *msg->_impl_.expirationtime_;
}
void ExchangeRate::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
ExchangeRate::ExchangeRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExchangeRate)
}
ExchangeRate::ExchangeRate(const ExchangeRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.hbarequiv_){}
    , decltype(_impl_.centequiv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::TimestampSeconds(*from._impl_.expirationtime_);
  }
  ::memcpy(&_impl_.hbarequiv_, &from._impl_.hbarequiv_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.centequiv_) -
    reinterpret_cast<char*>(&_impl_.hbarequiv_)) + sizeof(_impl_.centequiv_));
  // @@protoc_insertion_point(copy_constructor:proto.ExchangeRate)
}

inline void ExchangeRate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.hbarequiv_){0}
    , decltype(_impl_.centequiv_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRate::~ExchangeRate() {
  // @@protoc_insertion_point(destructor:proto.ExchangeRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
}

void ExchangeRate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExchangeRate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  ::memset(&_impl_.hbarequiv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.centequiv_) -
      reinterpret_cast<char*>(&_impl_.hbarequiv_)) + sizeof(_impl_.centequiv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hbarEquiv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hbarequiv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 centEquiv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.centequiv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TimestampSeconds expirationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExchangeRate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hbarEquiv = 1;
  if (this->_internal_hbarequiv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_hbarequiv(), target);
  }

  // int32 centEquiv = 2;
  if (this->_internal_centequiv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_centequiv(), target);
  }

  // .proto.TimestampSeconds expirationTime = 3;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExchangeRate)
  return target;
}

size_t ExchangeRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExchangeRate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TimestampSeconds expirationTime = 3;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // int32 hbarEquiv = 1;
  if (this->_internal_hbarequiv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hbarequiv());
  }

  // int32 centEquiv = 2;
  if (this->_internal_centequiv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_centequiv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRate::GetClassData() const { return &_class_data_; }


void ExchangeRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRate*>(&to_msg);
  auto& from = static_cast<const ExchangeRate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExchangeRate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::TimestampSeconds::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_hbarequiv() != 0) {
    _this->_internal_set_hbarequiv(from._internal_hbarequiv());
  }
  if (from._internal_centequiv() != 0) {
    _this->_internal_set_centequiv(from._internal_centequiv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRate::CopyFrom(const ExchangeRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExchangeRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRate::IsInitialized() const {
  return true;
}

void ExchangeRate::InternalSwap(ExchangeRate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRate, _impl_.centequiv_)
      + sizeof(ExchangeRate::_impl_.centequiv_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRate, _impl_.expirationtime_)>(
          reinterpret_cast<char*>(&_impl_.expirationtime_),
          reinterpret_cast<char*>(&other->_impl_.expirationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_5frate_2eproto_getter, &descriptor_table_exchange_5frate_2eproto_once,
      file_level_metadata_exchange_5frate_2eproto[0]);
}

// ===================================================================

class ExchangeRateSet::_Internal {
 public:
  static const ::proto::ExchangeRate& currentrate(const ExchangeRateSet* msg);
  static const ::proto::ExchangeRate& nextrate(const ExchangeRateSet* msg);
};

const ::proto::ExchangeRate&
ExchangeRateSet::_Internal::currentrate(const ExchangeRateSet* msg) {
  return *msg->_impl_.currentrate_;
}
const ::proto::ExchangeRate&
ExchangeRateSet::_Internal::nextrate(const ExchangeRateSet* msg) {
  return *msg->_impl_.nextrate_;
}
ExchangeRateSet::ExchangeRateSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExchangeRateSet)
}
ExchangeRateSet::ExchangeRateSet(const ExchangeRateSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRateSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currentrate_){nullptr}
    , decltype(_impl_.nextrate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currentrate()) {
    _this->_impl_.currentrate_ = new ::proto::ExchangeRate(*from._impl_.currentrate_);
  }
  if (from._internal_has_nextrate()) {
    _this->_impl_.nextrate_ = new ::proto::ExchangeRate(*from._impl_.nextrate_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ExchangeRateSet)
}

inline void ExchangeRateSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currentrate_){nullptr}
    , decltype(_impl_.nextrate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRateSet::~ExchangeRateSet() {
  // @@protoc_insertion_point(destructor:proto.ExchangeRateSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRateSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.currentrate_;
  if (this != internal_default_instance()) delete _impl_.nextrate_;
}

void ExchangeRateSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRateSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExchangeRateSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.currentrate_ != nullptr) {
    delete _impl_.currentrate_;
  }
  _impl_.currentrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nextrate_ != nullptr) {
    delete _impl_.nextrate_;
  }
  _impl_.nextrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRateSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ExchangeRate currentRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ExchangeRate nextRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nextrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRateSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExchangeRateSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ExchangeRate currentRate = 1;
  if (this->_internal_has_currentrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::currentrate(this),
        _Internal::currentrate(this).GetCachedSize(), target, stream);
  }

  // .proto.ExchangeRate nextRate = 2;
  if (this->_internal_has_nextrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nextrate(this),
        _Internal::nextrate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExchangeRateSet)
  return target;
}

size_t ExchangeRateSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExchangeRateSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ExchangeRate currentRate = 1;
  if (this->_internal_has_currentrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currentrate_);
  }

  // .proto.ExchangeRate nextRate = 2;
  if (this->_internal_has_nextrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nextrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRateSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRateSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRateSet::GetClassData() const { return &_class_data_; }


void ExchangeRateSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRateSet*>(&to_msg);
  auto& from = static_cast<const ExchangeRateSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExchangeRateSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_currentrate()) {
    _this->_internal_mutable_currentrate()->::proto::ExchangeRate::MergeFrom(
        from._internal_currentrate());
  }
  if (from._internal_has_nextrate()) {
    _this->_internal_mutable_nextrate()->::proto::ExchangeRate::MergeFrom(
        from._internal_nextrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRateSet::CopyFrom(const ExchangeRateSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExchangeRateSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRateSet::IsInitialized() const {
  return true;
}

void ExchangeRateSet::InternalSwap(ExchangeRateSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRateSet, _impl_.nextrate_)
      + sizeof(ExchangeRateSet::_impl_.nextrate_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRateSet, _impl_.currentrate_)>(
          reinterpret_cast<char*>(&_impl_.currentrate_),
          reinterpret_cast<char*>(&other->_impl_.currentrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRateSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_5frate_2eproto_getter, &descriptor_table_exchange_5frate_2eproto_once,
      file_level_metadata_exchange_5frate_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ExchangeRate*
Arena::CreateMaybeMessage< ::proto::ExchangeRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExchangeRate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExchangeRateSet*
Arena::CreateMaybeMessage< ::proto::ExchangeRateSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExchangeRateSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_update.proto

#include "contract_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ContractUpdateTransactionBody::ContractUpdateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.proxyaccountid_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.fileid_)*/nullptr
  , /*decltype(_impl_.max_automatic_token_associations_)*/nullptr
  , /*decltype(_impl_.auto_renew_account_id_)*/nullptr
  , /*decltype(_impl_.decline_reward_)*/nullptr
  , /*decltype(_impl_.memoField_)*/{}
  , /*decltype(_impl_.staked_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ContractUpdateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractUpdateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractUpdateTransactionBodyDefaultTypeInternal() {}
  union {
    ContractUpdateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractUpdateTransactionBodyDefaultTypeInternal _ContractUpdateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_contract_5fupdate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_contract_5fupdate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_contract_5fupdate_2eproto = nullptr;

const uint32_t TableStruct_contract_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.contractid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.expirationtime_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.proxyaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.fileid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.max_automatic_token_associations_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.auto_renew_account_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.decline_reward_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.memoField_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractUpdateTransactionBody, _impl_.staked_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ContractUpdateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ContractUpdateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_contract_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025contract_update.proto\022\005proto\032\021basic_ty"
  "pes.proto\032\016duration.proto\032\017timestamp.pro"
  "to\032\036google/protobuf/wrappers.proto\"\341\004\n\035C"
  "ontractUpdateTransactionBody\022%\n\ncontract"
  "ID\030\001 \001(\0132\021.proto.ContractID\022(\n\016expiratio"
  "nTime\030\002 \001(\0132\020.proto.Timestamp\022\034\n\010adminKe"
  "y\030\003 \001(\0132\n.proto.Key\022,\n\016proxyAccountID\030\006 "
  "\001(\0132\020.proto.AccountIDB\002\030\001\022(\n\017autoRenewPe"
  "riod\030\007 \001(\0132\017.proto.Duration\022!\n\006fileID\030\010 "
  "\001(\0132\r.proto.FileIDB\002\030\001\022\022\n\004memo\030\t \001(\tB\002\030\001"
  "H\000\0223\n\013memoWrapper\030\n \001(\0132\034.google.protobu"
  "f.StringValueH\000\022E\n max_automatic_token_a"
  "ssociations\030\013 \001(\0132\033.google.protobuf.Int3"
  "2Value\022/\n\025auto_renew_account_id\030\014 \001(\0132\020."
  "proto.AccountID\022-\n\021staked_account_id\030\r \001"
  "(\0132\020.proto.AccountIDH\001\022\030\n\016staked_node_id"
  "\030\016 \001(\003H\001\0222\n\016decline_reward\030\017 \001(\0132\032.googl"
  "e.protobuf.BoolValueB\013\n\tmemoFieldB\013\n\tsta"
  "ked_idB&\n\"com.hederahashgraph.api.proto."
  "javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_contract_5fupdate_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_contract_5fupdate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_contract_5fupdate_2eproto = {
    false, false, 774, descriptor_table_protodef_contract_5fupdate_2eproto,
    "contract_update.proto",
    &descriptor_table_contract_5fupdate_2eproto_once, descriptor_table_contract_5fupdate_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_contract_5fupdate_2eproto::offsets,
    file_level_metadata_contract_5fupdate_2eproto, file_level_enum_descriptors_contract_5fupdate_2eproto,
    file_level_service_descriptors_contract_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_contract_5fupdate_2eproto_getter() {
  return &descriptor_table_contract_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_contract_5fupdate_2eproto(&descriptor_table_contract_5fupdate_2eproto);
namespace proto {

// ===================================================================

class ContractUpdateTransactionBody::_Internal {
 public:
  static const ::proto::ContractID& contractid(const ContractUpdateTransactionBody* msg);
  static const ::proto::Timestamp& expirationtime(const ContractUpdateTransactionBody* msg);
  static const ::proto::Key& adminkey(const ContractUpdateTransactionBody* msg);
  static const ::proto::AccountID& proxyaccountid(const ContractUpdateTransactionBody* msg);
  static const ::proto::Duration& autorenewperiod(const ContractUpdateTransactionBody* msg);
  static const ::proto::FileID& fileid(const ContractUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& memowrapper(const ContractUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_automatic_token_associations(const ContractUpdateTransactionBody* msg);
  static const ::proto::AccountID& auto_renew_account_id(const ContractUpdateTransactionBody* msg);
  static const ::proto::AccountID& staked_account_id(const ContractUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& decline_reward(const ContractUpdateTransactionBody* msg);
};

const ::proto::ContractID&
ContractUpdateTransactionBody::_Internal::contractid(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.contractid_;
}
const ::proto::Timestamp&
ContractUpdateTransactionBody::_Internal::expirationtime(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.expirationtime_;
}
const ::proto::Key&
ContractUpdateTransactionBody::_Internal::adminkey(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::AccountID&
ContractUpdateTransactionBody::_Internal::proxyaccountid(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.proxyaccountid_;
}
const ::proto::Duration&
ContractUpdateTransactionBody::_Internal::autorenewperiod(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::FileID&
ContractUpdateTransactionBody::_Internal::fileid(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.fileid_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
ContractUpdateTransactionBody::_Internal::memowrapper(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.memoField_.memowrapper_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
ContractUpdateTransactionBody::_Internal::max_automatic_token_associations(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.max_automatic_token_associations_;
}
const ::proto::AccountID&
ContractUpdateTransactionBody::_Internal::auto_renew_account_id(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.auto_renew_account_id_;
}
const ::proto::AccountID&
ContractUpdateTransactionBody::_Internal::staked_account_id(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.staked_id_.staked_account_id_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
ContractUpdateTransactionBody::_Internal::decline_reward(const ContractUpdateTransactionBody* msg) {
  return *msg->_impl_.decline_reward_;
}
void ContractUpdateTransactionBody::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
void ContractUpdateTransactionBody::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
void ContractUpdateTransactionBody::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void ContractUpdateTransactionBody::clear_proxyaccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
}
void ContractUpdateTransactionBody::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void ContractUpdateTransactionBody::clear_fileid() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
}
void ContractUpdateTransactionBody::set_allocated_memowrapper(::PROTOBUF_NAMESPACE_ID::StringValue* memowrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_memoField();
  if (memowrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memowrapper));
    if (message_arena != submessage_arena) {
      memowrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memowrapper, submessage_arena);
    }
    set_has_memowrapper();
    _impl_.memoField_.memowrapper_ = memowrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.memoWrapper)
}
void ContractUpdateTransactionBody::clear_memowrapper() {
  if (_internal_has_memowrapper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.memoField_.memowrapper_;
    }
    clear_has_memoField();
  }
}
void ContractUpdateTransactionBody::clear_max_automatic_token_associations() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_automatic_token_associations_ != nullptr) {
    delete _impl_.max_automatic_token_associations_;
  }
  _impl_.max_automatic_token_associations_ = nullptr;
}
void ContractUpdateTransactionBody::clear_auto_renew_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_account_id_ != nullptr) {
    delete _impl_.auto_renew_account_id_;
  }
  _impl_.auto_renew_account_id_ = nullptr;
}
void ContractUpdateTransactionBody::set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_staked_id();
  if (staked_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staked_account_id));
    if (message_arena != submessage_arena) {
      staked_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staked_account_id, submessage_arena);
    }
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.staked_account_id)
}
void ContractUpdateTransactionBody::clear_staked_account_id() {
  if (_internal_has_staked_account_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.staked_id_.staked_account_id_;
    }
    clear_has_staked_id();
  }
}
void ContractUpdateTransactionBody::clear_decline_reward() {
  if (GetArenaForAllocation() == nullptr && _impl_.decline_reward_ != nullptr) {
    delete _impl_.decline_reward_;
  }
  _impl_.decline_reward_ = nullptr;
}
ContractUpdateTransactionBody::ContractUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractUpdateTransactionBody)
}
ContractUpdateTransactionBody::ContractUpdateTransactionBody(const ContractUpdateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractUpdateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.fileid_){nullptr}
    , decltype(_impl_.max_automatic_token_associations_){nullptr}
    , decltype(_impl_.auto_renew_account_id_){nullptr}
    , decltype(_impl_.decline_reward_){nullptr}
    , decltype(_impl_.memoField_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::Timestamp(*from._impl_.expirationtime_);
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_impl_.proxyaccountid_ = new ::proto::AccountID(*from._impl_.proxyaccountid_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_fileid()) {
    _this->_impl_.fileid_ = new ::proto::FileID(*from._impl_.fileid_);
  }
  if (from._internal_has_max_automatic_token_associations()) {
    _this->_impl_.max_automatic_token_associations_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.max_automatic_token_associations_);
  }
  if (from._internal_has_auto_renew_account_id()) {
    _this->_impl_.auto_renew_account_id_ = new ::proto::AccountID(*from._impl_.auto_renew_account_id_);
  }
  if (from._internal_has_decline_reward()) {
    _this->_impl_.decline_reward_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.decline_reward_);
  }
  clear_has_memoField();
  switch (from.memoField_case()) {
    case kMemo: {
      _this->_internal_set_memo(from._internal_memo());
      break;
    }
    case kMemoWrapper: {
      _this->_internal_mutable_memowrapper()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
          from._internal_memowrapper());
      break;
    }
    case MEMOFIELD_NOT_SET: {
      break;
    }
  }
  clear_has_staked_id();
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContractUpdateTransactionBody)
}

inline void ContractUpdateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.fileid_){nullptr}
    , decltype(_impl_.max_automatic_token_associations_){nullptr}
    , decltype(_impl_.auto_renew_account_id_){nullptr}
    , decltype(_impl_.decline_reward_){nullptr}
    , decltype(_impl_.memoField_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_memoField();
  clear_has_staked_id();
}

ContractUpdateTransactionBody::~ContractUpdateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.ContractUpdateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractUpdateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.contractid_;
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.proxyaccountid_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.fileid_;
  if (this != internal_default_instance()) delete _impl_.max_automatic_token_associations_;
  if (this != internal_default_instance()) delete _impl_.auto_renew_account_id_;
  if (this != internal_default_instance()) delete _impl_.decline_reward_;
  if (has_memoField()) {
    clear_memoField();
  }
  if (has_staked_id()) {
    clear_staked_id();
  }
}

void ContractUpdateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractUpdateTransactionBody::clear_memoField() {
// @@protoc_insertion_point(one_of_clear_start:proto.ContractUpdateTransactionBody)
  switch (memoField_case()) {
    case kMemo: {
      _impl_.memoField_.memo_.Destroy();
      break;
    }
    case kMemoWrapper: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.memoField_.memowrapper_;
      }
      break;
    }
    case MEMOFIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MEMOFIELD_NOT_SET;
}

void ContractUpdateTransactionBody::clear_staked_id() {
// @@protoc_insertion_point(one_of_clear_start:proto.ContractUpdateTransactionBody)
  switch (staked_id_case()) {
    case kStakedAccountId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.staked_id_.staked_account_id_;
      }
      break;
    }
    case kStakedNodeId: {
      // No need to clear
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = STAKED_ID_NOT_SET;
}


void ContractUpdateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fileid_ != nullptr) {
    delete _impl_.fileid_;
  }
  _impl_.fileid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_automatic_token_associations_ != nullptr) {
    delete _impl_.max_automatic_token_associations_;
  }
  _impl_.max_automatic_token_associations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_account_id_ != nullptr) {
    delete _impl_.auto_renew_account_id_;
  }
  _impl_.auto_renew_account_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.decline_reward_ != nullptr) {
    delete _impl_.decline_reward_;
  }
  _impl_.decline_reward_ = nullptr;
  clear_memoField();
  clear_staked_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractUpdateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ContractID contractID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expirationTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID proxyAccountID = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxyaccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileID fileID = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ContractUpdateTransactionBody.memo"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue memoWrapper = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_memowrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value max_automatic_token_associations = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_automatic_token_associations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID auto_renew_account_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_renew_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID staked_account_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_staked_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staked_node_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _internal_set_staked_node_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue decline_reward = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_decline_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractUpdateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp expirationTime = 2;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  // .proto.Key adminKey = 3;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID proxyAccountID = 6 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::proxyaccountid(this),
        _Internal::proxyaccountid(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration autoRenewPeriod = 7;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // .proto.FileID fileID = 8 [deprecated = true];
  if (this->_internal_has_fileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fileid(this),
        _Internal::fileid(this).GetCachedSize(), target, stream);
  }

  // string memo = 9 [deprecated = true];
  if (_internal_has_memo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ContractUpdateTransactionBody.memo");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_memo(), target);
  }

  // .google.protobuf.StringValue memoWrapper = 10;
  if (_internal_has_memowrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::memowrapper(this),
        _Internal::memowrapper(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value max_automatic_token_associations = 11;
  if (this->_internal_has_max_automatic_token_associations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::max_automatic_token_associations(this),
        _Internal::max_automatic_token_associations(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID auto_renew_account_id = 12;
  if (this->_internal_has_auto_renew_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::auto_renew_account_id(this),
        _Internal::auto_renew_account_id(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID staked_account_id = 13;
  if (_internal_has_staked_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::staked_account_id(this),
        _Internal::staked_account_id(this).GetCachedSize(), target, stream);
  }

  // int64 staked_node_id = 14;
  if (_internal_has_staked_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_staked_node_id(), target);
  }

  // .google.protobuf.BoolValue decline_reward = 15;
  if (this->_internal_has_decline_reward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::decline_reward(this),
        _Internal::decline_reward(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractUpdateTransactionBody)
  return target;
}

size_t ContractUpdateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractUpdateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  // .proto.Timestamp expirationTime = 2;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // .proto.Key adminKey = 3;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.AccountID proxyAccountID = 6 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxyaccountid_);
  }

  // .proto.Duration autoRenewPeriod = 7;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.FileID fileID = 8 [deprecated = true];
  if (this->_internal_has_fileid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileid_);
  }

  // .google.protobuf.Int32Value max_automatic_token_associations = 11;
  if (this->_internal_has_max_automatic_token_associations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_automatic_token_associations_);
  }

  // .proto.AccountID auto_renew_account_id = 12;
  if (this->_internal_has_auto_renew_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auto_renew_account_id_);
  }

  // .google.protobuf.BoolValue decline_reward = 15;
  if (this->_internal_has_decline_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.decline_reward_);
  }

  switch (memoField_case()) {
    // string memo = 9 [deprecated = true];
    case kMemo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memo());
      break;
    }
    // .google.protobuf.StringValue memoWrapper = 10;
    case kMemoWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.memoField_.memowrapper_);
      break;
    }
    case MEMOFIELD_NOT_SET: {
      break;
    }
  }
  switch (staked_id_case()) {
    // .proto.AccountID staked_account_id = 13;
    case kStakedAccountId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.staked_id_.staked_account_id_);
      break;
    }
    // int64 staked_node_id = 14;
    case kStakedNodeId: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractUpdateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractUpdateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractUpdateTransactionBody::GetClassData() const { return &_class_data_; }


void ContractUpdateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractUpdateTransactionBody*>(&to_msg);
  auto& from = static_cast<const ContractUpdateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractUpdateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::Timestamp::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_internal_mutable_proxyaccountid()->::proto::AccountID::MergeFrom(
        from._internal_proxyaccountid());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_fileid()) {
    _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
        from._internal_fileid());
  }
  if (from._internal_has_max_automatic_token_associations()) {
    _this->_internal_mutable_max_automatic_token_associations()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_max_automatic_token_associations());
  }
  if (from._internal_has_auto_renew_account_id()) {
    _this->_internal_mutable_auto_renew_account_id()->::proto::AccountID::MergeFrom(
        from._internal_auto_renew_account_id());
  }
  if (from._internal_has_decline_reward()) {
    _this->_internal_mutable_decline_reward()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_decline_reward());
  }
  switch (from.memoField_case()) {
    case kMemo: {
      _this->_internal_set_memo(from._internal_memo());
      break;
    }
    case kMemoWrapper: {
      _this->_internal_mutable_memowrapper()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
          from._internal_memowrapper());
      break;
    }
    case MEMOFIELD_NOT_SET: {
      break;
    }
  }
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractUpdateTransactionBody::CopyFrom(const ContractUpdateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractUpdateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractUpdateTransactionBody::IsInitialized() const {
  return true;
}

void ContractUpdateTransactionBody::InternalSwap(ContractUpdateTransactionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractUpdateTransactionBody, _impl_.decline_reward_)
      + sizeof(ContractUpdateTransactionBody::_impl_.decline_reward_)
      - PROTOBUF_FIELD_OFFSET(ContractUpdateTransactionBody, _impl_.contractid_)>(
          reinterpret_cast<char*>(&_impl_.contractid_),
          reinterpret_cast<char*>(&other->_impl_.contractid_));
  swap(_impl_.memoField_, other->_impl_.memoField_);
  swap(_impl_.staked_id_, other->_impl_.staked_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractUpdateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fupdate_2eproto_getter, &descriptor_table_contract_5fupdate_2eproto_once,
      file_level_metadata_contract_5fupdate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ContractUpdateTransactionBody*
Arena::CreateMaybeMessage< ::proto::ContractUpdateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractUpdateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

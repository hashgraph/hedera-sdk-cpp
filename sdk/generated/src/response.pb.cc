// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#include "response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_response_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_response_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_response_2eproto = nullptr;

const uint32_t TableStruct_response_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::Response, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_Response_default_instance_._instance,
};

const char descriptor_table_protodef_response_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016response.proto\022\005proto\032\020get_by_key.prot"
  "o\032\030get_by_solidity_id.proto\032\031contract_ca"
  "ll_local.proto\032\033contract_get_bytecode.pr"
  "oto\032\027contract_get_info.proto\032\032contract_g"
  "et_records.proto\032 crypto_get_account_bal"
  "ance.proto\032 crypto_get_account_records.p"
  "roto\032\025crypto_get_info.proto\032\032crypto_get_"
  "live_hash.proto\032\030crypto_get_stakers.prot"
  "o\032\027file_get_contents.proto\032\023file_get_inf"
  "o.proto\032\035transaction_get_receipt.proto\032\034"
  "transaction_get_record.proto\032!transactio"
  "n_get_fast_record.proto\032\036consensus_get_t"
  "opic_info.proto\032\036network_get_version_inf"
  "o.proto\032 network_get_execution_time.prot"
  "o\032!token_get_account_nft_infos.proto\032\024to"
  "ken_get_info.proto\032\030token_get_nft_info.p"
  "roto\032\031token_get_nft_infos.proto\032\027schedul"
  "e_get_info.proto\032\031get_account_details.pr"
  "oto\"\362\014\n\010Response\022+\n\010getByKey\030\001 \001(\0132\027.pro"
  "to.GetByKeyResponseH\000\0229\n\017getBySolidityID"
  "\030\002 \001(\0132\036.proto.GetBySolidityIDResponseH\000"
  "\022=\n\021contractCallLocal\030\003 \001(\0132 .proto.Cont"
  "ractCallLocalResponseH\000\022I\n\033contractGetBy"
  "tecodeResponse\030\005 \001(\0132\".proto.ContractGet"
  "BytecodeResponseH\000\0229\n\017contractGetInfo\030\004 "
  "\001(\0132\036.proto.ContractGetInfoResponseH\000\022G\n"
  "\032contractGetRecordsResponse\030\006 \001(\0132!.prot"
  "o.ContractGetRecordsResponseH\000\022I\n\027crypto"
  "getAccountBalance\030\007 \001(\0132&.proto.CryptoGe"
  "tAccountBalanceResponseH\000\022I\n\027cryptoGetAc"
  "countRecords\030\010 \001(\0132&.proto.CryptoGetAcco"
  "untRecordsResponseH\000\0225\n\rcryptoGetInfo\030\t "
  "\001(\0132\034.proto.CryptoGetInfoResponseH\000\022=\n\021c"
  "ryptoGetLiveHash\030\n \001(\0132 .proto.CryptoGet"
  "LiveHashResponseH\000\022@\n\025cryptoGetProxyStak"
  "ers\030\013 \001(\0132\037.proto.CryptoGetStakersRespon"
  "seH\000\0229\n\017fileGetContents\030\014 \001(\0132\036.proto.Fi"
  "leGetContentsResponseH\000\0221\n\013fileGetInfo\030\r"
  " \001(\0132\032.proto.FileGetInfoResponseH\000\022E\n\025tr"
  "ansactionGetReceipt\030\016 \001(\0132$.proto.Transa"
  "ctionGetReceiptResponseH\000\022C\n\024transaction"
  "GetRecord\030\017 \001(\0132#.proto.TransactionGetRe"
  "cordResponseH\000\022K\n\030transactionGetFastReco"
  "rd\030\020 \001(\0132\'.proto.TransactionGetFastRecor"
  "dResponseH\000\022F\n\025consensusGetTopicInfo\030\226\001 "
  "\001(\0132$.proto.ConsensusGetTopicInfoRespons"
  "eH\000\022F\n\025networkGetVersionInfo\030\227\001 \001(\0132$.pr"
  "oto.NetworkGetVersionInfoResponseH\000\0224\n\014t"
  "okenGetInfo\030\230\001 \001(\0132\033.proto.TokenGetInfoR"
  "esponseH\000\022:\n\017scheduleGetInfo\030\231\001 \001(\0132\036.pr"
  "oto.ScheduleGetInfoResponseH\000\022J\n\027tokenGe"
  "tAccountNftInfos\030\232\001 \001(\0132&.proto.TokenGet"
  "AccountNftInfosResponseH\000\022:\n\017tokenGetNft"
  "Info\030\233\001 \001(\0132\036.proto.TokenGetNftInfoRespo"
  "nseH\000\022<\n\020tokenGetNftInfos\030\234\001 \001(\0132\037.proto"
  ".TokenGetNftInfosResponseH\000\022J\n\027networkGe"
  "tExecutionTime\030\235\001 \001(\0132&.proto.NetworkGet"
  "ExecutionTimeResponseH\000\022;\n\016accountDetail"
  "s\030\236\001 \001(\0132 .proto.GetAccountDetailsRespon"
  "seH\000B\n\n\010responseB&\n\"com.hederahashgraph."
  "api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_response_2eproto_deps[25] = {
  &::descriptor_table_consensus_5fget_5ftopic_5finfo_2eproto,
  &::descriptor_table_contract_5fcall_5flocal_2eproto,
  &::descriptor_table_contract_5fget_5fbytecode_2eproto,
  &::descriptor_table_contract_5fget_5finfo_2eproto,
  &::descriptor_table_contract_5fget_5frecords_2eproto,
  &::descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto,
  &::descriptor_table_crypto_5fget_5faccount_5frecords_2eproto,
  &::descriptor_table_crypto_5fget_5finfo_2eproto,
  &::descriptor_table_crypto_5fget_5flive_5fhash_2eproto,
  &::descriptor_table_crypto_5fget_5fstakers_2eproto,
  &::descriptor_table_file_5fget_5fcontents_2eproto,
  &::descriptor_table_file_5fget_5finfo_2eproto,
  &::descriptor_table_get_5faccount_5fdetails_2eproto,
  &::descriptor_table_get_5fby_5fkey_2eproto,
  &::descriptor_table_get_5fby_5fsolidity_5fid_2eproto,
  &::descriptor_table_network_5fget_5fexecution_5ftime_2eproto,
  &::descriptor_table_network_5fget_5fversion_5finfo_2eproto,
  &::descriptor_table_schedule_5fget_5finfo_2eproto,
  &::descriptor_table_token_5fget_5faccount_5fnft_5finfos_2eproto,
  &::descriptor_table_token_5fget_5finfo_2eproto,
  &::descriptor_table_token_5fget_5fnft_5finfo_2eproto,
  &::descriptor_table_token_5fget_5fnft_5finfos_2eproto,
  &::descriptor_table_transaction_5fget_5ffast_5frecord_2eproto,
  &::descriptor_table_transaction_5fget_5freceipt_2eproto,
  &::descriptor_table_transaction_5fget_5frecord_2eproto,
};
static ::_pbi::once_flag descriptor_table_response_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_response_2eproto = {
    false, false, 2424, descriptor_table_protodef_response_2eproto,
    "response.proto",
    &descriptor_table_response_2eproto_once, descriptor_table_response_2eproto_deps, 25, 1,
    schemas, file_default_instances, TableStruct_response_2eproto::offsets,
    file_level_metadata_response_2eproto, file_level_enum_descriptors_response_2eproto,
    file_level_service_descriptors_response_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_response_2eproto_getter() {
  return &descriptor_table_response_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_response_2eproto(&descriptor_table_response_2eproto);
namespace proto {

// ===================================================================

class Response::_Internal {
 public:
  static const ::proto::GetByKeyResponse& getbykey(const Response* msg);
  static const ::proto::GetBySolidityIDResponse& getbysolidityid(const Response* msg);
  static const ::proto::ContractCallLocalResponse& contractcalllocal(const Response* msg);
  static const ::proto::ContractGetBytecodeResponse& contractgetbytecoderesponse(const Response* msg);
  static const ::proto::ContractGetInfoResponse& contractgetinfo(const Response* msg);
  static const ::proto::ContractGetRecordsResponse& contractgetrecordsresponse(const Response* msg);
  static const ::proto::CryptoGetAccountBalanceResponse& cryptogetaccountbalance(const Response* msg);
  static const ::proto::CryptoGetAccountRecordsResponse& cryptogetaccountrecords(const Response* msg);
  static const ::proto::CryptoGetInfoResponse& cryptogetinfo(const Response* msg);
  static const ::proto::CryptoGetLiveHashResponse& cryptogetlivehash(const Response* msg);
  static const ::proto::CryptoGetStakersResponse& cryptogetproxystakers(const Response* msg);
  static const ::proto::FileGetContentsResponse& filegetcontents(const Response* msg);
  static const ::proto::FileGetInfoResponse& filegetinfo(const Response* msg);
  static const ::proto::TransactionGetReceiptResponse& transactiongetreceipt(const Response* msg);
  static const ::proto::TransactionGetRecordResponse& transactiongetrecord(const Response* msg);
  static const ::proto::TransactionGetFastRecordResponse& transactiongetfastrecord(const Response* msg);
  static const ::proto::ConsensusGetTopicInfoResponse& consensusgettopicinfo(const Response* msg);
  static const ::proto::NetworkGetVersionInfoResponse& networkgetversioninfo(const Response* msg);
  static const ::proto::TokenGetInfoResponse& tokengetinfo(const Response* msg);
  static const ::proto::ScheduleGetInfoResponse& schedulegetinfo(const Response* msg);
  static const ::proto::TokenGetAccountNftInfosResponse& tokengetaccountnftinfos(const Response* msg);
  static const ::proto::TokenGetNftInfoResponse& tokengetnftinfo(const Response* msg);
  static const ::proto::TokenGetNftInfosResponse& tokengetnftinfos(const Response* msg);
  static const ::proto::NetworkGetExecutionTimeResponse& networkgetexecutiontime(const Response* msg);
  static const ::proto::GetAccountDetailsResponse& accountdetails(const Response* msg);
};

const ::proto::GetByKeyResponse&
Response::_Internal::getbykey(const Response* msg) {
  return *msg->_impl_.response_.getbykey_;
}
const ::proto::GetBySolidityIDResponse&
Response::_Internal::getbysolidityid(const Response* msg) {
  return *msg->_impl_.response_.getbysolidityid_;
}
const ::proto::ContractCallLocalResponse&
Response::_Internal::contractcalllocal(const Response* msg) {
  return *msg->_impl_.response_.contractcalllocal_;
}
const ::proto::ContractGetBytecodeResponse&
Response::_Internal::contractgetbytecoderesponse(const Response* msg) {
  return *msg->_impl_.response_.contractgetbytecoderesponse_;
}
const ::proto::ContractGetInfoResponse&
Response::_Internal::contractgetinfo(const Response* msg) {
  return *msg->_impl_.response_.contractgetinfo_;
}
const ::proto::ContractGetRecordsResponse&
Response::_Internal::contractgetrecordsresponse(const Response* msg) {
  return *msg->_impl_.response_.contractgetrecordsresponse_;
}
const ::proto::CryptoGetAccountBalanceResponse&
Response::_Internal::cryptogetaccountbalance(const Response* msg) {
  return *msg->_impl_.response_.cryptogetaccountbalance_;
}
const ::proto::CryptoGetAccountRecordsResponse&
Response::_Internal::cryptogetaccountrecords(const Response* msg) {
  return *msg->_impl_.response_.cryptogetaccountrecords_;
}
const ::proto::CryptoGetInfoResponse&
Response::_Internal::cryptogetinfo(const Response* msg) {
  return *msg->_impl_.response_.cryptogetinfo_;
}
const ::proto::CryptoGetLiveHashResponse&
Response::_Internal::cryptogetlivehash(const Response* msg) {
  return *msg->_impl_.response_.cryptogetlivehash_;
}
const ::proto::CryptoGetStakersResponse&
Response::_Internal::cryptogetproxystakers(const Response* msg) {
  return *msg->_impl_.response_.cryptogetproxystakers_;
}
const ::proto::FileGetContentsResponse&
Response::_Internal::filegetcontents(const Response* msg) {
  return *msg->_impl_.response_.filegetcontents_;
}
const ::proto::FileGetInfoResponse&
Response::_Internal::filegetinfo(const Response* msg) {
  return *msg->_impl_.response_.filegetinfo_;
}
const ::proto::TransactionGetReceiptResponse&
Response::_Internal::transactiongetreceipt(const Response* msg) {
  return *msg->_impl_.response_.transactiongetreceipt_;
}
const ::proto::TransactionGetRecordResponse&
Response::_Internal::transactiongetrecord(const Response* msg) {
  return *msg->_impl_.response_.transactiongetrecord_;
}
const ::proto::TransactionGetFastRecordResponse&
Response::_Internal::transactiongetfastrecord(const Response* msg) {
  return *msg->_impl_.response_.transactiongetfastrecord_;
}
const ::proto::ConsensusGetTopicInfoResponse&
Response::_Internal::consensusgettopicinfo(const Response* msg) {
  return *msg->_impl_.response_.consensusgettopicinfo_;
}
const ::proto::NetworkGetVersionInfoResponse&
Response::_Internal::networkgetversioninfo(const Response* msg) {
  return *msg->_impl_.response_.networkgetversioninfo_;
}
const ::proto::TokenGetInfoResponse&
Response::_Internal::tokengetinfo(const Response* msg) {
  return *msg->_impl_.response_.tokengetinfo_;
}
const ::proto::ScheduleGetInfoResponse&
Response::_Internal::schedulegetinfo(const Response* msg) {
  return *msg->_impl_.response_.schedulegetinfo_;
}
const ::proto::TokenGetAccountNftInfosResponse&
Response::_Internal::tokengetaccountnftinfos(const Response* msg) {
  return *msg->_impl_.response_.tokengetaccountnftinfos_;
}
const ::proto::TokenGetNftInfoResponse&
Response::_Internal::tokengetnftinfo(const Response* msg) {
  return *msg->_impl_.response_.tokengetnftinfo_;
}
const ::proto::TokenGetNftInfosResponse&
Response::_Internal::tokengetnftinfos(const Response* msg) {
  return *msg->_impl_.response_.tokengetnftinfos_;
}
const ::proto::NetworkGetExecutionTimeResponse&
Response::_Internal::networkgetexecutiontime(const Response* msg) {
  return *msg->_impl_.response_.networkgetexecutiontime_;
}
const ::proto::GetAccountDetailsResponse&
Response::_Internal::accountdetails(const Response* msg) {
  return *msg->_impl_.response_.accountdetails_;
}
void Response::set_allocated_getbykey(::proto::GetByKeyResponse* getbykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (getbykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbykey));
    if (message_arena != submessage_arena) {
      getbykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbykey, submessage_arena);
    }
    set_has_getbykey();
    _impl_.response_.getbykey_ = getbykey;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.getByKey)
}
void Response::clear_getbykey() {
  if (_internal_has_getbykey()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.getbykey_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_getbysolidityid(::proto::GetBySolidityIDResponse* getbysolidityid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (getbysolidityid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbysolidityid));
    if (message_arena != submessage_arena) {
      getbysolidityid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbysolidityid, submessage_arena);
    }
    set_has_getbysolidityid();
    _impl_.response_.getbysolidityid_ = getbysolidityid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.getBySolidityID)
}
void Response::clear_getbysolidityid() {
  if (_internal_has_getbysolidityid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.getbysolidityid_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_contractcalllocal(::proto::ContractCallLocalResponse* contractcalllocal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (contractcalllocal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractcalllocal));
    if (message_arena != submessage_arena) {
      contractcalllocal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractcalllocal, submessage_arena);
    }
    set_has_contractcalllocal();
    _impl_.response_.contractcalllocal_ = contractcalllocal;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.contractCallLocal)
}
void Response::clear_contractcalllocal() {
  if (_internal_has_contractcalllocal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.contractcalllocal_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_contractgetbytecoderesponse(::proto::ContractGetBytecodeResponse* contractgetbytecoderesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (contractgetbytecoderesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractgetbytecoderesponse));
    if (message_arena != submessage_arena) {
      contractgetbytecoderesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractgetbytecoderesponse, submessage_arena);
    }
    set_has_contractgetbytecoderesponse();
    _impl_.response_.contractgetbytecoderesponse_ = contractgetbytecoderesponse;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.contractGetBytecodeResponse)
}
void Response::clear_contractgetbytecoderesponse() {
  if (_internal_has_contractgetbytecoderesponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.contractgetbytecoderesponse_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_contractgetinfo(::proto::ContractGetInfoResponse* contractgetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (contractgetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractgetinfo));
    if (message_arena != submessage_arena) {
      contractgetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractgetinfo, submessage_arena);
    }
    set_has_contractgetinfo();
    _impl_.response_.contractgetinfo_ = contractgetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.contractGetInfo)
}
void Response::clear_contractgetinfo() {
  if (_internal_has_contractgetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.contractgetinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_contractgetrecordsresponse(::proto::ContractGetRecordsResponse* contractgetrecordsresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (contractgetrecordsresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractgetrecordsresponse));
    if (message_arena != submessage_arena) {
      contractgetrecordsresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractgetrecordsresponse, submessage_arena);
    }
    set_has_contractgetrecordsresponse();
    _impl_.response_.contractgetrecordsresponse_ = contractgetrecordsresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.contractGetRecordsResponse)
}
void Response::clear_contractgetrecordsresponse() {
  if (_internal_has_contractgetrecordsresponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.contractgetrecordsresponse_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_cryptogetaccountbalance(::proto::CryptoGetAccountBalanceResponse* cryptogetaccountbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (cryptogetaccountbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetaccountbalance));
    if (message_arena != submessage_arena) {
      cryptogetaccountbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetaccountbalance, submessage_arena);
    }
    set_has_cryptogetaccountbalance();
    _impl_.response_.cryptogetaccountbalance_ = cryptogetaccountbalance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.cryptogetAccountBalance)
}
void Response::clear_cryptogetaccountbalance() {
  if (_internal_has_cryptogetaccountbalance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.cryptogetaccountbalance_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_cryptogetaccountrecords(::proto::CryptoGetAccountRecordsResponse* cryptogetaccountrecords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (cryptogetaccountrecords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetaccountrecords));
    if (message_arena != submessage_arena) {
      cryptogetaccountrecords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetaccountrecords, submessage_arena);
    }
    set_has_cryptogetaccountrecords();
    _impl_.response_.cryptogetaccountrecords_ = cryptogetaccountrecords;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.cryptoGetAccountRecords)
}
void Response::clear_cryptogetaccountrecords() {
  if (_internal_has_cryptogetaccountrecords()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.cryptogetaccountrecords_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_cryptogetinfo(::proto::CryptoGetInfoResponse* cryptogetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (cryptogetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetinfo));
    if (message_arena != submessage_arena) {
      cryptogetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetinfo, submessage_arena);
    }
    set_has_cryptogetinfo();
    _impl_.response_.cryptogetinfo_ = cryptogetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.cryptoGetInfo)
}
void Response::clear_cryptogetinfo() {
  if (_internal_has_cryptogetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.cryptogetinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_cryptogetlivehash(::proto::CryptoGetLiveHashResponse* cryptogetlivehash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (cryptogetlivehash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetlivehash));
    if (message_arena != submessage_arena) {
      cryptogetlivehash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetlivehash, submessage_arena);
    }
    set_has_cryptogetlivehash();
    _impl_.response_.cryptogetlivehash_ = cryptogetlivehash;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.cryptoGetLiveHash)
}
void Response::clear_cryptogetlivehash() {
  if (_internal_has_cryptogetlivehash()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.cryptogetlivehash_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_cryptogetproxystakers(::proto::CryptoGetStakersResponse* cryptogetproxystakers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (cryptogetproxystakers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptogetproxystakers));
    if (message_arena != submessage_arena) {
      cryptogetproxystakers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptogetproxystakers, submessage_arena);
    }
    set_has_cryptogetproxystakers();
    _impl_.response_.cryptogetproxystakers_ = cryptogetproxystakers;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.cryptoGetProxyStakers)
}
void Response::clear_cryptogetproxystakers() {
  if (_internal_has_cryptogetproxystakers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.cryptogetproxystakers_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_filegetcontents(::proto::FileGetContentsResponse* filegetcontents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (filegetcontents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filegetcontents));
    if (message_arena != submessage_arena) {
      filegetcontents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filegetcontents, submessage_arena);
    }
    set_has_filegetcontents();
    _impl_.response_.filegetcontents_ = filegetcontents;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.fileGetContents)
}
void Response::clear_filegetcontents() {
  if (_internal_has_filegetcontents()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.filegetcontents_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_filegetinfo(::proto::FileGetInfoResponse* filegetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (filegetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filegetinfo));
    if (message_arena != submessage_arena) {
      filegetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filegetinfo, submessage_arena);
    }
    set_has_filegetinfo();
    _impl_.response_.filegetinfo_ = filegetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.fileGetInfo)
}
void Response::clear_filegetinfo() {
  if (_internal_has_filegetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.filegetinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_transactiongetreceipt(::proto::TransactionGetReceiptResponse* transactiongetreceipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (transactiongetreceipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactiongetreceipt));
    if (message_arena != submessage_arena) {
      transactiongetreceipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactiongetreceipt, submessage_arena);
    }
    set_has_transactiongetreceipt();
    _impl_.response_.transactiongetreceipt_ = transactiongetreceipt;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.transactionGetReceipt)
}
void Response::clear_transactiongetreceipt() {
  if (_internal_has_transactiongetreceipt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.transactiongetreceipt_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_transactiongetrecord(::proto::TransactionGetRecordResponse* transactiongetrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (transactiongetrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactiongetrecord));
    if (message_arena != submessage_arena) {
      transactiongetrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactiongetrecord, submessage_arena);
    }
    set_has_transactiongetrecord();
    _impl_.response_.transactiongetrecord_ = transactiongetrecord;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.transactionGetRecord)
}
void Response::clear_transactiongetrecord() {
  if (_internal_has_transactiongetrecord()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.transactiongetrecord_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_transactiongetfastrecord(::proto::TransactionGetFastRecordResponse* transactiongetfastrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (transactiongetfastrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactiongetfastrecord));
    if (message_arena != submessage_arena) {
      transactiongetfastrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactiongetfastrecord, submessage_arena);
    }
    set_has_transactiongetfastrecord();
    _impl_.response_.transactiongetfastrecord_ = transactiongetfastrecord;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.transactionGetFastRecord)
}
void Response::clear_transactiongetfastrecord() {
  if (_internal_has_transactiongetfastrecord()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.transactiongetfastrecord_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_consensusgettopicinfo(::proto::ConsensusGetTopicInfoResponse* consensusgettopicinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (consensusgettopicinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensusgettopicinfo));
    if (message_arena != submessage_arena) {
      consensusgettopicinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensusgettopicinfo, submessage_arena);
    }
    set_has_consensusgettopicinfo();
    _impl_.response_.consensusgettopicinfo_ = consensusgettopicinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.consensusGetTopicInfo)
}
void Response::clear_consensusgettopicinfo() {
  if (_internal_has_consensusgettopicinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.consensusgettopicinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_networkgetversioninfo(::proto::NetworkGetVersionInfoResponse* networkgetversioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (networkgetversioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkgetversioninfo));
    if (message_arena != submessage_arena) {
      networkgetversioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkgetversioninfo, submessage_arena);
    }
    set_has_networkgetversioninfo();
    _impl_.response_.networkgetversioninfo_ = networkgetversioninfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.networkGetVersionInfo)
}
void Response::clear_networkgetversioninfo() {
  if (_internal_has_networkgetversioninfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.networkgetversioninfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_tokengetinfo(::proto::TokenGetInfoResponse* tokengetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (tokengetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetinfo));
    if (message_arena != submessage_arena) {
      tokengetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetinfo, submessage_arena);
    }
    set_has_tokengetinfo();
    _impl_.response_.tokengetinfo_ = tokengetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.tokenGetInfo)
}
void Response::clear_tokengetinfo() {
  if (_internal_has_tokengetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.tokengetinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_schedulegetinfo(::proto::ScheduleGetInfoResponse* schedulegetinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (schedulegetinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schedulegetinfo));
    if (message_arena != submessage_arena) {
      schedulegetinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedulegetinfo, submessage_arena);
    }
    set_has_schedulegetinfo();
    _impl_.response_.schedulegetinfo_ = schedulegetinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.scheduleGetInfo)
}
void Response::clear_schedulegetinfo() {
  if (_internal_has_schedulegetinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.schedulegetinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_tokengetaccountnftinfos(::proto::TokenGetAccountNftInfosResponse* tokengetaccountnftinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (tokengetaccountnftinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetaccountnftinfos));
    if (message_arena != submessage_arena) {
      tokengetaccountnftinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetaccountnftinfos, submessage_arena);
    }
    set_has_tokengetaccountnftinfos();
    _impl_.response_.tokengetaccountnftinfos_ = tokengetaccountnftinfos;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.tokenGetAccountNftInfos)
}
void Response::clear_tokengetaccountnftinfos() {
  if (_internal_has_tokengetaccountnftinfos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.tokengetaccountnftinfos_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_tokengetnftinfo(::proto::TokenGetNftInfoResponse* tokengetnftinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (tokengetnftinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetnftinfo));
    if (message_arena != submessage_arena) {
      tokengetnftinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetnftinfo, submessage_arena);
    }
    set_has_tokengetnftinfo();
    _impl_.response_.tokengetnftinfo_ = tokengetnftinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.tokenGetNftInfo)
}
void Response::clear_tokengetnftinfo() {
  if (_internal_has_tokengetnftinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.tokengetnftinfo_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_tokengetnftinfos(::proto::TokenGetNftInfosResponse* tokengetnftinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (tokengetnftinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengetnftinfos));
    if (message_arena != submessage_arena) {
      tokengetnftinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengetnftinfos, submessage_arena);
    }
    set_has_tokengetnftinfos();
    _impl_.response_.tokengetnftinfos_ = tokengetnftinfos;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.tokenGetNftInfos)
}
void Response::clear_tokengetnftinfos() {
  if (_internal_has_tokengetnftinfos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.tokengetnftinfos_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_networkgetexecutiontime(::proto::NetworkGetExecutionTimeResponse* networkgetexecutiontime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (networkgetexecutiontime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkgetexecutiontime));
    if (message_arena != submessage_arena) {
      networkgetexecutiontime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkgetexecutiontime, submessage_arena);
    }
    set_has_networkgetexecutiontime();
    _impl_.response_.networkgetexecutiontime_ = networkgetexecutiontime;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.networkGetExecutionTime)
}
void Response::clear_networkgetexecutiontime() {
  if (_internal_has_networkgetexecutiontime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.networkgetexecutiontime_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_accountdetails(::proto::GetAccountDetailsResponse* accountdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (accountdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountdetails));
    if (message_arena != submessage_arena) {
      accountdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountdetails, submessage_arena);
    }
    set_has_accountdetails();
    _impl_.response_.accountdetails_ = accountdetails;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Response.accountDetails)
}
void Response::clear_accountdetails() {
  if (_internal_has_accountdetails()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.accountdetails_;
    }
    clear_has_response();
  }
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kGetByKey: {
      _this->_internal_mutable_getbykey()->::proto::GetByKeyResponse::MergeFrom(
          from._internal_getbykey());
      break;
    }
    case kGetBySolidityID: {
      _this->_internal_mutable_getbysolidityid()->::proto::GetBySolidityIDResponse::MergeFrom(
          from._internal_getbysolidityid());
      break;
    }
    case kContractCallLocal: {
      _this->_internal_mutable_contractcalllocal()->::proto::ContractCallLocalResponse::MergeFrom(
          from._internal_contractcalllocal());
      break;
    }
    case kContractGetBytecodeResponse: {
      _this->_internal_mutable_contractgetbytecoderesponse()->::proto::ContractGetBytecodeResponse::MergeFrom(
          from._internal_contractgetbytecoderesponse());
      break;
    }
    case kContractGetInfo: {
      _this->_internal_mutable_contractgetinfo()->::proto::ContractGetInfoResponse::MergeFrom(
          from._internal_contractgetinfo());
      break;
    }
    case kContractGetRecordsResponse: {
      _this->_internal_mutable_contractgetrecordsresponse()->::proto::ContractGetRecordsResponse::MergeFrom(
          from._internal_contractgetrecordsresponse());
      break;
    }
    case kCryptogetAccountBalance: {
      _this->_internal_mutable_cryptogetaccountbalance()->::proto::CryptoGetAccountBalanceResponse::MergeFrom(
          from._internal_cryptogetaccountbalance());
      break;
    }
    case kCryptoGetAccountRecords: {
      _this->_internal_mutable_cryptogetaccountrecords()->::proto::CryptoGetAccountRecordsResponse::MergeFrom(
          from._internal_cryptogetaccountrecords());
      break;
    }
    case kCryptoGetInfo: {
      _this->_internal_mutable_cryptogetinfo()->::proto::CryptoGetInfoResponse::MergeFrom(
          from._internal_cryptogetinfo());
      break;
    }
    case kCryptoGetLiveHash: {
      _this->_internal_mutable_cryptogetlivehash()->::proto::CryptoGetLiveHashResponse::MergeFrom(
          from._internal_cryptogetlivehash());
      break;
    }
    case kCryptoGetProxyStakers: {
      _this->_internal_mutable_cryptogetproxystakers()->::proto::CryptoGetStakersResponse::MergeFrom(
          from._internal_cryptogetproxystakers());
      break;
    }
    case kFileGetContents: {
      _this->_internal_mutable_filegetcontents()->::proto::FileGetContentsResponse::MergeFrom(
          from._internal_filegetcontents());
      break;
    }
    case kFileGetInfo: {
      _this->_internal_mutable_filegetinfo()->::proto::FileGetInfoResponse::MergeFrom(
          from._internal_filegetinfo());
      break;
    }
    case kTransactionGetReceipt: {
      _this->_internal_mutable_transactiongetreceipt()->::proto::TransactionGetReceiptResponse::MergeFrom(
          from._internal_transactiongetreceipt());
      break;
    }
    case kTransactionGetRecord: {
      _this->_internal_mutable_transactiongetrecord()->::proto::TransactionGetRecordResponse::MergeFrom(
          from._internal_transactiongetrecord());
      break;
    }
    case kTransactionGetFastRecord: {
      _this->_internal_mutable_transactiongetfastrecord()->::proto::TransactionGetFastRecordResponse::MergeFrom(
          from._internal_transactiongetfastrecord());
      break;
    }
    case kConsensusGetTopicInfo: {
      _this->_internal_mutable_consensusgettopicinfo()->::proto::ConsensusGetTopicInfoResponse::MergeFrom(
          from._internal_consensusgettopicinfo());
      break;
    }
    case kNetworkGetVersionInfo: {
      _this->_internal_mutable_networkgetversioninfo()->::proto::NetworkGetVersionInfoResponse::MergeFrom(
          from._internal_networkgetversioninfo());
      break;
    }
    case kTokenGetInfo: {
      _this->_internal_mutable_tokengetinfo()->::proto::TokenGetInfoResponse::MergeFrom(
          from._internal_tokengetinfo());
      break;
    }
    case kScheduleGetInfo: {
      _this->_internal_mutable_schedulegetinfo()->::proto::ScheduleGetInfoResponse::MergeFrom(
          from._internal_schedulegetinfo());
      break;
    }
    case kTokenGetAccountNftInfos: {
      _this->_internal_mutable_tokengetaccountnftinfos()->::proto::TokenGetAccountNftInfosResponse::MergeFrom(
          from._internal_tokengetaccountnftinfos());
      break;
    }
    case kTokenGetNftInfo: {
      _this->_internal_mutable_tokengetnftinfo()->::proto::TokenGetNftInfoResponse::MergeFrom(
          from._internal_tokengetnftinfo());
      break;
    }
    case kTokenGetNftInfos: {
      _this->_internal_mutable_tokengetnftinfos()->::proto::TokenGetNftInfosResponse::MergeFrom(
          from._internal_tokengetnftinfos());
      break;
    }
    case kNetworkGetExecutionTime: {
      _this->_internal_mutable_networkgetexecutiontime()->::proto::NetworkGetExecutionTimeResponse::MergeFrom(
          from._internal_networkgetexecutiontime());
      break;
    }
    case kAccountDetails: {
      _this->_internal_mutable_accountdetails()->::proto::GetAccountDetailsResponse::MergeFrom(
          from._internal_accountdetails());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:proto.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:proto.Response)
  switch (response_case()) {
    case kGetByKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.getbykey_;
      }
      break;
    }
    case kGetBySolidityID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.getbysolidityid_;
      }
      break;
    }
    case kContractCallLocal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.contractcalllocal_;
      }
      break;
    }
    case kContractGetBytecodeResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.contractgetbytecoderesponse_;
      }
      break;
    }
    case kContractGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.contractgetinfo_;
      }
      break;
    }
    case kContractGetRecordsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.contractgetrecordsresponse_;
      }
      break;
    }
    case kCryptogetAccountBalance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.cryptogetaccountbalance_;
      }
      break;
    }
    case kCryptoGetAccountRecords: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.cryptogetaccountrecords_;
      }
      break;
    }
    case kCryptoGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.cryptogetinfo_;
      }
      break;
    }
    case kCryptoGetLiveHash: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.cryptogetlivehash_;
      }
      break;
    }
    case kCryptoGetProxyStakers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.cryptogetproxystakers_;
      }
      break;
    }
    case kFileGetContents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.filegetcontents_;
      }
      break;
    }
    case kFileGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.filegetinfo_;
      }
      break;
    }
    case kTransactionGetReceipt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.transactiongetreceipt_;
      }
      break;
    }
    case kTransactionGetRecord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.transactiongetrecord_;
      }
      break;
    }
    case kTransactionGetFastRecord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.transactiongetfastrecord_;
      }
      break;
    }
    case kConsensusGetTopicInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.consensusgettopicinfo_;
      }
      break;
    }
    case kNetworkGetVersionInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.networkgetversioninfo_;
      }
      break;
    }
    case kTokenGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.tokengetinfo_;
      }
      break;
    }
    case kScheduleGetInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.schedulegetinfo_;
      }
      break;
    }
    case kTokenGetAccountNftInfos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.tokengetaccountnftinfos_;
      }
      break;
    }
    case kTokenGetNftInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.tokengetnftinfo_;
      }
      break;
    }
    case kTokenGetNftInfos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.tokengetnftinfos_;
      }
      break;
    }
    case kNetworkGetExecutionTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.networkgetexecutiontime_;
      }
      break;
    }
    case kAccountDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.accountdetails_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.GetByKeyResponse getByKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbykey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.GetBySolidityIDResponse getBySolidityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbysolidityid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractCallLocalResponse contractCallLocal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractcalllocal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetInfoResponse contractGetInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractgetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetBytecodeResponse contractGetBytecodeResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractgetbytecoderesponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetRecordsResponse contractGetRecordsResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractgetrecordsresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetAccountBalanceResponse cryptogetAccountBalance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetaccountbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetAccountRecordsResponse cryptoGetAccountRecords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetaccountrecords(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetInfoResponse cryptoGetInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetLiveHashResponse cryptoGetLiveHash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetlivehash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoGetStakersResponse cryptoGetProxyStakers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptogetproxystakers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileGetContentsResponse fileGetContents = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filegetcontents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileGetInfoResponse fileGetInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_filegetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionGetReceiptResponse transactionGetReceipt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactiongetreceipt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionGetRecordResponse transactionGetRecord = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactiongetrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionGetFastRecordResponse transactionGetFastRecord = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactiongetfastrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusGetTopicInfoResponse consensusGetTopicInfo = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensusgettopicinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.NetworkGetVersionInfoResponse networkGetVersionInfo = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_networkgetversioninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetInfoResponse tokenGetInfo = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleGetInfoResponse scheduleGetInfo = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedulegetinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetAccountNftInfosResponse tokenGetAccountNftInfos = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetaccountnftinfos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetNftInfoResponse tokenGetNftInfo = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetnftinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGetNftInfosResponse tokenGetNftInfos = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengetnftinfos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.NetworkGetExecutionTimeResponse networkGetExecutionTime = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_networkgetexecutiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.GetAccountDetailsResponse accountDetails = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GetByKeyResponse getByKey = 1;
  if (_internal_has_getbykey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::getbykey(this),
        _Internal::getbykey(this).GetCachedSize(), target, stream);
  }

  // .proto.GetBySolidityIDResponse getBySolidityID = 2;
  if (_internal_has_getbysolidityid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::getbysolidityid(this),
        _Internal::getbysolidityid(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractCallLocalResponse contractCallLocal = 3;
  if (_internal_has_contractcalllocal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contractcalllocal(this),
        _Internal::contractcalllocal(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetInfoResponse contractGetInfo = 4;
  if (_internal_has_contractgetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contractgetinfo(this),
        _Internal::contractgetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetBytecodeResponse contractGetBytecodeResponse = 5;
  if (_internal_has_contractgetbytecoderesponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::contractgetbytecoderesponse(this),
        _Internal::contractgetbytecoderesponse(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetRecordsResponse contractGetRecordsResponse = 6;
  if (_internal_has_contractgetrecordsresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::contractgetrecordsresponse(this),
        _Internal::contractgetrecordsresponse(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetAccountBalanceResponse cryptogetAccountBalance = 7;
  if (_internal_has_cryptogetaccountbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cryptogetaccountbalance(this),
        _Internal::cryptogetaccountbalance(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetAccountRecordsResponse cryptoGetAccountRecords = 8;
  if (_internal_has_cryptogetaccountrecords()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::cryptogetaccountrecords(this),
        _Internal::cryptogetaccountrecords(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetInfoResponse cryptoGetInfo = 9;
  if (_internal_has_cryptogetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cryptogetinfo(this),
        _Internal::cryptogetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetLiveHashResponse cryptoGetLiveHash = 10;
  if (_internal_has_cryptogetlivehash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cryptogetlivehash(this),
        _Internal::cryptogetlivehash(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoGetStakersResponse cryptoGetProxyStakers = 11;
  if (_internal_has_cryptogetproxystakers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cryptogetproxystakers(this),
        _Internal::cryptogetproxystakers(this).GetCachedSize(), target, stream);
  }

  // .proto.FileGetContentsResponse fileGetContents = 12;
  if (_internal_has_filegetcontents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::filegetcontents(this),
        _Internal::filegetcontents(this).GetCachedSize(), target, stream);
  }

  // .proto.FileGetInfoResponse fileGetInfo = 13;
  if (_internal_has_filegetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::filegetinfo(this),
        _Internal::filegetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionGetReceiptResponse transactionGetReceipt = 14;
  if (_internal_has_transactiongetreceipt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::transactiongetreceipt(this),
        _Internal::transactiongetreceipt(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionGetRecordResponse transactionGetRecord = 15;
  if (_internal_has_transactiongetrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::transactiongetrecord(this),
        _Internal::transactiongetrecord(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionGetFastRecordResponse transactionGetFastRecord = 16;
  if (_internal_has_transactiongetfastrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::transactiongetfastrecord(this),
        _Internal::transactiongetfastrecord(this).GetCachedSize(), target, stream);
  }

  // .proto.ConsensusGetTopicInfoResponse consensusGetTopicInfo = 150;
  if (_internal_has_consensusgettopicinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(150, _Internal::consensusgettopicinfo(this),
        _Internal::consensusgettopicinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.NetworkGetVersionInfoResponse networkGetVersionInfo = 151;
  if (_internal_has_networkgetversioninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(151, _Internal::networkgetversioninfo(this),
        _Internal::networkgetversioninfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetInfoResponse tokenGetInfo = 152;
  if (_internal_has_tokengetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(152, _Internal::tokengetinfo(this),
        _Internal::tokengetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.ScheduleGetInfoResponse scheduleGetInfo = 153;
  if (_internal_has_schedulegetinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(153, _Internal::schedulegetinfo(this),
        _Internal::schedulegetinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetAccountNftInfosResponse tokenGetAccountNftInfos = 154;
  if (_internal_has_tokengetaccountnftinfos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(154, _Internal::tokengetaccountnftinfos(this),
        _Internal::tokengetaccountnftinfos(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetNftInfoResponse tokenGetNftInfo = 155;
  if (_internal_has_tokengetnftinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(155, _Internal::tokengetnftinfo(this),
        _Internal::tokengetnftinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGetNftInfosResponse tokenGetNftInfos = 156;
  if (_internal_has_tokengetnftinfos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(156, _Internal::tokengetnftinfos(this),
        _Internal::tokengetnftinfos(this).GetCachedSize(), target, stream);
  }

  // .proto.NetworkGetExecutionTimeResponse networkGetExecutionTime = 157;
  if (_internal_has_networkgetexecutiontime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(157, _Internal::networkgetexecutiontime(this),
        _Internal::networkgetexecutiontime(this).GetCachedSize(), target, stream);
  }

  // .proto.GetAccountDetailsResponse accountDetails = 158;
  if (_internal_has_accountdetails()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(158, _Internal::accountdetails(this),
        _Internal::accountdetails(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .proto.GetByKeyResponse getByKey = 1;
    case kGetByKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.getbykey_);
      break;
    }
    // .proto.GetBySolidityIDResponse getBySolidityID = 2;
    case kGetBySolidityID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.getbysolidityid_);
      break;
    }
    // .proto.ContractCallLocalResponse contractCallLocal = 3;
    case kContractCallLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.contractcalllocal_);
      break;
    }
    // .proto.ContractGetBytecodeResponse contractGetBytecodeResponse = 5;
    case kContractGetBytecodeResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.contractgetbytecoderesponse_);
      break;
    }
    // .proto.ContractGetInfoResponse contractGetInfo = 4;
    case kContractGetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.contractgetinfo_);
      break;
    }
    // .proto.ContractGetRecordsResponse contractGetRecordsResponse = 6;
    case kContractGetRecordsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.contractgetrecordsresponse_);
      break;
    }
    // .proto.CryptoGetAccountBalanceResponse cryptogetAccountBalance = 7;
    case kCryptogetAccountBalance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.cryptogetaccountbalance_);
      break;
    }
    // .proto.CryptoGetAccountRecordsResponse cryptoGetAccountRecords = 8;
    case kCryptoGetAccountRecords: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.cryptogetaccountrecords_);
      break;
    }
    // .proto.CryptoGetInfoResponse cryptoGetInfo = 9;
    case kCryptoGetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.cryptogetinfo_);
      break;
    }
    // .proto.CryptoGetLiveHashResponse cryptoGetLiveHash = 10;
    case kCryptoGetLiveHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.cryptogetlivehash_);
      break;
    }
    // .proto.CryptoGetStakersResponse cryptoGetProxyStakers = 11;
    case kCryptoGetProxyStakers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.cryptogetproxystakers_);
      break;
    }
    // .proto.FileGetContentsResponse fileGetContents = 12;
    case kFileGetContents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.filegetcontents_);
      break;
    }
    // .proto.FileGetInfoResponse fileGetInfo = 13;
    case kFileGetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.filegetinfo_);
      break;
    }
    // .proto.TransactionGetReceiptResponse transactionGetReceipt = 14;
    case kTransactionGetReceipt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.transactiongetreceipt_);
      break;
    }
    // .proto.TransactionGetRecordResponse transactionGetRecord = 15;
    case kTransactionGetRecord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.transactiongetrecord_);
      break;
    }
    // .proto.TransactionGetFastRecordResponse transactionGetFastRecord = 16;
    case kTransactionGetFastRecord: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.transactiongetfastrecord_);
      break;
    }
    // .proto.ConsensusGetTopicInfoResponse consensusGetTopicInfo = 150;
    case kConsensusGetTopicInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.consensusgettopicinfo_);
      break;
    }
    // .proto.NetworkGetVersionInfoResponse networkGetVersionInfo = 151;
    case kNetworkGetVersionInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.networkgetversioninfo_);
      break;
    }
    // .proto.TokenGetInfoResponse tokenGetInfo = 152;
    case kTokenGetInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.tokengetinfo_);
      break;
    }
    // .proto.ScheduleGetInfoResponse scheduleGetInfo = 153;
    case kScheduleGetInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.schedulegetinfo_);
      break;
    }
    // .proto.TokenGetAccountNftInfosResponse tokenGetAccountNftInfos = 154;
    case kTokenGetAccountNftInfos: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.tokengetaccountnftinfos_);
      break;
    }
    // .proto.TokenGetNftInfoResponse tokenGetNftInfo = 155;
    case kTokenGetNftInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.tokengetnftinfo_);
      break;
    }
    // .proto.TokenGetNftInfosResponse tokenGetNftInfos = 156;
    case kTokenGetNftInfos: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.tokengetnftinfos_);
      break;
    }
    // .proto.NetworkGetExecutionTimeResponse networkGetExecutionTime = 157;
    case kNetworkGetExecutionTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.networkgetexecutiontime_);
      break;
    }
    // .proto.GetAccountDetailsResponse accountDetails = 158;
    case kAccountDetails: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.accountdetails_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kGetByKey: {
      _this->_internal_mutable_getbykey()->::proto::GetByKeyResponse::MergeFrom(
          from._internal_getbykey());
      break;
    }
    case kGetBySolidityID: {
      _this->_internal_mutable_getbysolidityid()->::proto::GetBySolidityIDResponse::MergeFrom(
          from._internal_getbysolidityid());
      break;
    }
    case kContractCallLocal: {
      _this->_internal_mutable_contractcalllocal()->::proto::ContractCallLocalResponse::MergeFrom(
          from._internal_contractcalllocal());
      break;
    }
    case kContractGetBytecodeResponse: {
      _this->_internal_mutable_contractgetbytecoderesponse()->::proto::ContractGetBytecodeResponse::MergeFrom(
          from._internal_contractgetbytecoderesponse());
      break;
    }
    case kContractGetInfo: {
      _this->_internal_mutable_contractgetinfo()->::proto::ContractGetInfoResponse::MergeFrom(
          from._internal_contractgetinfo());
      break;
    }
    case kContractGetRecordsResponse: {
      _this->_internal_mutable_contractgetrecordsresponse()->::proto::ContractGetRecordsResponse::MergeFrom(
          from._internal_contractgetrecordsresponse());
      break;
    }
    case kCryptogetAccountBalance: {
      _this->_internal_mutable_cryptogetaccountbalance()->::proto::CryptoGetAccountBalanceResponse::MergeFrom(
          from._internal_cryptogetaccountbalance());
      break;
    }
    case kCryptoGetAccountRecords: {
      _this->_internal_mutable_cryptogetaccountrecords()->::proto::CryptoGetAccountRecordsResponse::MergeFrom(
          from._internal_cryptogetaccountrecords());
      break;
    }
    case kCryptoGetInfo: {
      _this->_internal_mutable_cryptogetinfo()->::proto::CryptoGetInfoResponse::MergeFrom(
          from._internal_cryptogetinfo());
      break;
    }
    case kCryptoGetLiveHash: {
      _this->_internal_mutable_cryptogetlivehash()->::proto::CryptoGetLiveHashResponse::MergeFrom(
          from._internal_cryptogetlivehash());
      break;
    }
    case kCryptoGetProxyStakers: {
      _this->_internal_mutable_cryptogetproxystakers()->::proto::CryptoGetStakersResponse::MergeFrom(
          from._internal_cryptogetproxystakers());
      break;
    }
    case kFileGetContents: {
      _this->_internal_mutable_filegetcontents()->::proto::FileGetContentsResponse::MergeFrom(
          from._internal_filegetcontents());
      break;
    }
    case kFileGetInfo: {
      _this->_internal_mutable_filegetinfo()->::proto::FileGetInfoResponse::MergeFrom(
          from._internal_filegetinfo());
      break;
    }
    case kTransactionGetReceipt: {
      _this->_internal_mutable_transactiongetreceipt()->::proto::TransactionGetReceiptResponse::MergeFrom(
          from._internal_transactiongetreceipt());
      break;
    }
    case kTransactionGetRecord: {
      _this->_internal_mutable_transactiongetrecord()->::proto::TransactionGetRecordResponse::MergeFrom(
          from._internal_transactiongetrecord());
      break;
    }
    case kTransactionGetFastRecord: {
      _this->_internal_mutable_transactiongetfastrecord()->::proto::TransactionGetFastRecordResponse::MergeFrom(
          from._internal_transactiongetfastrecord());
      break;
    }
    case kConsensusGetTopicInfo: {
      _this->_internal_mutable_consensusgettopicinfo()->::proto::ConsensusGetTopicInfoResponse::MergeFrom(
          from._internal_consensusgettopicinfo());
      break;
    }
    case kNetworkGetVersionInfo: {
      _this->_internal_mutable_networkgetversioninfo()->::proto::NetworkGetVersionInfoResponse::MergeFrom(
          from._internal_networkgetversioninfo());
      break;
    }
    case kTokenGetInfo: {
      _this->_internal_mutable_tokengetinfo()->::proto::TokenGetInfoResponse::MergeFrom(
          from._internal_tokengetinfo());
      break;
    }
    case kScheduleGetInfo: {
      _this->_internal_mutable_schedulegetinfo()->::proto::ScheduleGetInfoResponse::MergeFrom(
          from._internal_schedulegetinfo());
      break;
    }
    case kTokenGetAccountNftInfos: {
      _this->_internal_mutable_tokengetaccountnftinfos()->::proto::TokenGetAccountNftInfosResponse::MergeFrom(
          from._internal_tokengetaccountnftinfos());
      break;
    }
    case kTokenGetNftInfo: {
      _this->_internal_mutable_tokengetnftinfo()->::proto::TokenGetNftInfoResponse::MergeFrom(
          from._internal_tokengetnftinfo());
      break;
    }
    case kTokenGetNftInfos: {
      _this->_internal_mutable_tokengetnftinfos()->::proto::TokenGetNftInfosResponse::MergeFrom(
          from._internal_tokengetnftinfos());
      break;
    }
    case kNetworkGetExecutionTime: {
      _this->_internal_mutable_networkgetexecutiontime()->::proto::NetworkGetExecutionTimeResponse::MergeFrom(
          from._internal_networkgetexecutiontime());
      break;
    }
    case kAccountDetails: {
      _this->_internal_mutable_accountdetails()->::proto::GetAccountDetailsResponse::MergeFrom(
          from._internal_accountdetails());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_response_2eproto_getter, &descriptor_table_response_2eproto_once,
      file_level_metadata_response_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Response*
Arena::CreateMaybeMessage< ::proto::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_record.proto

#include "transaction_record.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR TransactionRecord::TransactionRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokentransferlists_)*/{}
  , /*decltype(_impl_.assessed_custom_fees_)*/{}
  , /*decltype(_impl_.automatic_token_associations_)*/{}
  , /*decltype(_impl_.paid_staking_rewards_)*/{}
  , /*decltype(_impl_.transactionhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ethereum_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receipt_)*/nullptr
  , /*decltype(_impl_.consensustimestamp_)*/nullptr
  , /*decltype(_impl_.transactionid_)*/nullptr
  , /*decltype(_impl_.transferlist_)*/nullptr
  , /*decltype(_impl_.scheduleref_)*/nullptr
  , /*decltype(_impl_.parent_consensus_timestamp_)*/nullptr
  , /*decltype(_impl_.transactionfee_)*/uint64_t{0u}
  , /*decltype(_impl_.body_)*/{}
  , /*decltype(_impl_.entropy_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TransactionRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionRecordDefaultTypeInternal() {}
  union {
    TransactionRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionRecordDefaultTypeInternal _TransactionRecord_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_transaction_5frecord_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transaction_5frecord_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transaction_5frecord_2eproto = nullptr;

const uint32_t TableStruct_transaction_5frecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.receipt_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.transactionhash_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.consensustimestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.transactionid_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.transactionfee_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.transferlist_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.tokentransferlists_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.scheduleref_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.assessed_custom_fees_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.automatic_token_associations_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.parent_consensus_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.ethereum_hash_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.paid_staking_rewards_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::proto::TransactionRecord, _impl_.entropy_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::TransactionRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_TransactionRecord_default_instance_._instance,
};

const char descriptor_table_protodef_transaction_5frecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030transaction_record.proto\022\005proto\032\017times"
  "tamp.proto\032\021basic_types.proto\032\021custom_fe"
  "es.proto\032\031transaction_receipt.proto\032\025cry"
  "pto_transfer.proto\032\031contract_call_local."
  "proto\"\245\006\n\021TransactionRecord\022*\n\007receipt\030\001"
  " \001(\0132\031.proto.TransactionReceipt\022\027\n\017trans"
  "actionHash\030\002 \001(\014\022,\n\022consensusTimestamp\030\003"
  " \001(\0132\020.proto.Timestamp\022+\n\rtransactionID\030"
  "\004 \001(\0132\024.proto.TransactionID\022\014\n\004memo\030\005 \001("
  "\t\022\026\n\016transactionFee\030\006 \001(\004\022;\n\022contractCal"
  "lResult\030\007 \001(\0132\035.proto.ContractFunctionRe"
  "sultH\000\022=\n\024contractCreateResult\030\010 \001(\0132\035.p"
  "roto.ContractFunctionResultH\000\022)\n\014transfe"
  "rList\030\n \001(\0132\023.proto.TransferList\0224\n\022toke"
  "nTransferLists\030\013 \003(\0132\030.proto.TokenTransf"
  "erList\022&\n\013scheduleRef\030\014 \001(\0132\021.proto.Sche"
  "duleID\0226\n\024assessed_custom_fees\030\r \003(\0132\030.p"
  "roto.AssessedCustomFee\022=\n\034automatic_toke"
  "n_associations\030\016 \003(\0132\027.proto.TokenAssoci"
  "ation\0224\n\032parent_consensus_timestamp\030\017 \001("
  "\0132\020.proto.Timestamp\022\r\n\005alias\030\020 \001(\014\022\025\n\ret"
  "hereum_hash\030\021 \001(\014\0222\n\024paid_staking_reward"
  "s\030\022 \003(\0132\024.proto.AccountAmount\022\024\n\nprng_by"
  "tes\030\023 \001(\014H\001\022\025\n\013prng_number\030\024 \001(\005H\001B\006\n\004bo"
  "dyB\t\n\007entropyB&\n\"com.hederahashgraph.api"
  ".proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transaction_5frecord_2eproto_deps[6] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_contract_5fcall_5flocal_2eproto,
  &::descriptor_table_crypto_5ftransfer_2eproto,
  &::descriptor_table_custom_5ffees_2eproto,
  &::descriptor_table_timestamp_2eproto,
  &::descriptor_table_transaction_5freceipt_2eproto,
};
static ::_pbi::once_flag descriptor_table_transaction_5frecord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transaction_5frecord_2eproto = {
    false, false, 1021, descriptor_table_protodef_transaction_5frecord_2eproto,
    "transaction_record.proto",
    &descriptor_table_transaction_5frecord_2eproto_once, descriptor_table_transaction_5frecord_2eproto_deps, 6, 1,
    schemas, file_default_instances, TableStruct_transaction_5frecord_2eproto::offsets,
    file_level_metadata_transaction_5frecord_2eproto, file_level_enum_descriptors_transaction_5frecord_2eproto,
    file_level_service_descriptors_transaction_5frecord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transaction_5frecord_2eproto_getter() {
  return &descriptor_table_transaction_5frecord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transaction_5frecord_2eproto(&descriptor_table_transaction_5frecord_2eproto);
namespace proto {

// ===================================================================

class TransactionRecord::_Internal {
 public:
  static const ::proto::TransactionReceipt& receipt(const TransactionRecord* msg);
  static const ::proto::Timestamp& consensustimestamp(const TransactionRecord* msg);
  static const ::proto::TransactionID& transactionid(const TransactionRecord* msg);
  static const ::proto::ContractFunctionResult& contractcallresult(const TransactionRecord* msg);
  static const ::proto::ContractFunctionResult& contractcreateresult(const TransactionRecord* msg);
  static const ::proto::TransferList& transferlist(const TransactionRecord* msg);
  static const ::proto::ScheduleID& scheduleref(const TransactionRecord* msg);
  static const ::proto::Timestamp& parent_consensus_timestamp(const TransactionRecord* msg);
};

const ::proto::TransactionReceipt&
TransactionRecord::_Internal::receipt(const TransactionRecord* msg) {
  return *msg->_impl_.receipt_;
}
const ::proto::Timestamp&
TransactionRecord::_Internal::consensustimestamp(const TransactionRecord* msg) {
  return *msg->_impl_.consensustimestamp_;
}
const ::proto::TransactionID&
TransactionRecord::_Internal::transactionid(const TransactionRecord* msg) {
  return *msg->_impl_.transactionid_;
}
const ::proto::ContractFunctionResult&
TransactionRecord::_Internal::contractcallresult(const TransactionRecord* msg) {
  return *msg->_impl_.body_.contractcallresult_;
}
const ::proto::ContractFunctionResult&
TransactionRecord::_Internal::contractcreateresult(const TransactionRecord* msg) {
  return *msg->_impl_.body_.contractcreateresult_;
}
const ::proto::TransferList&
TransactionRecord::_Internal::transferlist(const TransactionRecord* msg) {
  return *msg->_impl_.transferlist_;
}
const ::proto::ScheduleID&
TransactionRecord::_Internal::scheduleref(const TransactionRecord* msg) {
  return *msg->_impl_.scheduleref_;
}
const ::proto::Timestamp&
TransactionRecord::_Internal::parent_consensus_timestamp(const TransactionRecord* msg) {
  return *msg->_impl_.parent_consensus_timestamp_;
}
void TransactionRecord::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_ != nullptr) {
    delete _impl_.receipt_;
  }
  _impl_.receipt_ = nullptr;
}
void TransactionRecord::clear_consensustimestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.consensustimestamp_ != nullptr) {
    delete _impl_.consensustimestamp_;
  }
  _impl_.consensustimestamp_ = nullptr;
}
void TransactionRecord::clear_transactionid() {
  if (GetArenaForAllocation() == nullptr && _impl_.transactionid_ != nullptr) {
    delete _impl_.transactionid_;
  }
  _impl_.transactionid_ = nullptr;
}
void TransactionRecord::set_allocated_contractcallresult(::proto::ContractFunctionResult* contractcallresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (contractcallresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractcallresult));
    if (message_arena != submessage_arena) {
      contractcallresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractcallresult, submessage_arena);
    }
    set_has_contractcallresult();
    _impl_.body_.contractcallresult_ = contractcallresult;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.contractCallResult)
}
void TransactionRecord::clear_contractcallresult() {
  if (_internal_has_contractcallresult()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.body_.contractcallresult_;
    }
    clear_has_body();
  }
}
void TransactionRecord::set_allocated_contractcreateresult(::proto::ContractFunctionResult* contractcreateresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (contractcreateresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractcreateresult));
    if (message_arena != submessage_arena) {
      contractcreateresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractcreateresult, submessage_arena);
    }
    set_has_contractcreateresult();
    _impl_.body_.contractcreateresult_ = contractcreateresult;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.contractCreateResult)
}
void TransactionRecord::clear_contractcreateresult() {
  if (_internal_has_contractcreateresult()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.body_.contractcreateresult_;
    }
    clear_has_body();
  }
}
void TransactionRecord::clear_transferlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.transferlist_ != nullptr) {
    delete _impl_.transferlist_;
  }
  _impl_.transferlist_ = nullptr;
}
void TransactionRecord::clear_tokentransferlists() {
  _impl_.tokentransferlists_.Clear();
}
void TransactionRecord::clear_scheduleref() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleref_ != nullptr) {
    delete _impl_.scheduleref_;
  }
  _impl_.scheduleref_ = nullptr;
}
void TransactionRecord::clear_assessed_custom_fees() {
  _impl_.assessed_custom_fees_.Clear();
}
void TransactionRecord::clear_automatic_token_associations() {
  _impl_.automatic_token_associations_.Clear();
}
void TransactionRecord::clear_parent_consensus_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.parent_consensus_timestamp_ != nullptr) {
    delete _impl_.parent_consensus_timestamp_;
  }
  _impl_.parent_consensus_timestamp_ = nullptr;
}
void TransactionRecord::clear_paid_staking_rewards() {
  _impl_.paid_staking_rewards_.Clear();
}
TransactionRecord::TransactionRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TransactionRecord)
}
TransactionRecord::TransactionRecord(const TransactionRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokentransferlists_){from._impl_.tokentransferlists_}
    , decltype(_impl_.assessed_custom_fees_){from._impl_.assessed_custom_fees_}
    , decltype(_impl_.automatic_token_associations_){from._impl_.automatic_token_associations_}
    , decltype(_impl_.paid_staking_rewards_){from._impl_.paid_staking_rewards_}
    , decltype(_impl_.transactionhash_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.ethereum_hash_){}
    , decltype(_impl_.receipt_){nullptr}
    , decltype(_impl_.consensustimestamp_){nullptr}
    , decltype(_impl_.transactionid_){nullptr}
    , decltype(_impl_.transferlist_){nullptr}
    , decltype(_impl_.scheduleref_){nullptr}
    , decltype(_impl_.parent_consensus_timestamp_){nullptr}
    , decltype(_impl_.transactionfee_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.entropy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transactionhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transactionhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transactionhash().empty()) {
    _this->_impl_.transactionhash_.Set(from._internal_transactionhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ethereum_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ethereum_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ethereum_hash().empty()) {
    _this->_impl_.ethereum_hash_.Set(from._internal_ethereum_hash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_receipt()) {
    _this->_impl_.receipt_ = new ::proto::TransactionReceipt(*from._impl_.receipt_);
  }
  if (from._internal_has_consensustimestamp()) {
    _this->_impl_.consensustimestamp_ = new ::proto::Timestamp(*from._impl_.consensustimestamp_);
  }
  if (from._internal_has_transactionid()) {
    _this->_impl_.transactionid_ = new ::proto::TransactionID(*from._impl_.transactionid_);
  }
  if (from._internal_has_transferlist()) {
    _this->_impl_.transferlist_ = new ::proto::TransferList(*from._impl_.transferlist_);
  }
  if (from._internal_has_scheduleref()) {
    _this->_impl_.scheduleref_ = new ::proto::ScheduleID(*from._impl_.scheduleref_);
  }
  if (from._internal_has_parent_consensus_timestamp()) {
    _this->_impl_.parent_consensus_timestamp_ = new ::proto::Timestamp(*from._impl_.parent_consensus_timestamp_);
  }
  _this->_impl_.transactionfee_ = from._impl_.transactionfee_;
  clear_has_body();
  switch (from.body_case()) {
    case kContractCallResult: {
      _this->_internal_mutable_contractcallresult()->::proto::ContractFunctionResult::MergeFrom(
          from._internal_contractcallresult());
      break;
    }
    case kContractCreateResult: {
      _this->_internal_mutable_contractcreateresult()->::proto::ContractFunctionResult::MergeFrom(
          from._internal_contractcreateresult());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  clear_has_entropy();
  switch (from.entropy_case()) {
    case kPrngBytes: {
      _this->_internal_set_prng_bytes(from._internal_prng_bytes());
      break;
    }
    case kPrngNumber: {
      _this->_internal_set_prng_number(from._internal_prng_number());
      break;
    }
    case ENTROPY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.TransactionRecord)
}

inline void TransactionRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokentransferlists_){arena}
    , decltype(_impl_.assessed_custom_fees_){arena}
    , decltype(_impl_.automatic_token_associations_){arena}
    , decltype(_impl_.paid_staking_rewards_){arena}
    , decltype(_impl_.transactionhash_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.ethereum_hash_){}
    , decltype(_impl_.receipt_){nullptr}
    , decltype(_impl_.consensustimestamp_){nullptr}
    , decltype(_impl_.transactionid_){nullptr}
    , decltype(_impl_.transferlist_){nullptr}
    , decltype(_impl_.scheduleref_){nullptr}
    , decltype(_impl_.parent_consensus_timestamp_){nullptr}
    , decltype(_impl_.transactionfee_){uint64_t{0u}}
    , decltype(_impl_.body_){}
    , decltype(_impl_.entropy_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.transactionhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transactionhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ethereum_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ethereum_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_body();
  clear_has_entropy();
}

TransactionRecord::~TransactionRecord() {
  // @@protoc_insertion_point(destructor:proto.TransactionRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tokentransferlists_.~RepeatedPtrField();
  _impl_.assessed_custom_fees_.~RepeatedPtrField();
  _impl_.automatic_token_associations_.~RepeatedPtrField();
  _impl_.paid_staking_rewards_.~RepeatedPtrField();
  _impl_.transactionhash_.Destroy();
  _impl_.memo_.Destroy();
  _impl_.alias_.Destroy();
  _impl_.ethereum_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.receipt_;
  if (this != internal_default_instance()) delete _impl_.consensustimestamp_;
  if (this != internal_default_instance()) delete _impl_.transactionid_;
  if (this != internal_default_instance()) delete _impl_.transferlist_;
  if (this != internal_default_instance()) delete _impl_.scheduleref_;
  if (this != internal_default_instance()) delete _impl_.parent_consensus_timestamp_;
  if (has_body()) {
    clear_body();
  }
  if (has_entropy()) {
    clear_entropy();
  }
}

void TransactionRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionRecord::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:proto.TransactionRecord)
  switch (body_case()) {
    case kContractCallResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.contractcallresult_;
      }
      break;
    }
    case kContractCreateResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.contractcreateresult_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BODY_NOT_SET;
}

void TransactionRecord::clear_entropy() {
// @@protoc_insertion_point(one_of_clear_start:proto.TransactionRecord)
  switch (entropy_case()) {
    case kPrngBytes: {
      _impl_.entropy_.prng_bytes_.Destroy();
      break;
    }
    case kPrngNumber: {
      // No need to clear
      break;
    }
    case ENTROPY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = ENTROPY_NOT_SET;
}


void TransactionRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TransactionRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tokentransferlists_.Clear();
  _impl_.assessed_custom_fees_.Clear();
  _impl_.automatic_token_associations_.Clear();
  _impl_.paid_staking_rewards_.Clear();
  _impl_.transactionhash_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.ethereum_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.receipt_ != nullptr) {
    delete _impl_.receipt_;
  }
  _impl_.receipt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.consensustimestamp_ != nullptr) {
    delete _impl_.consensustimestamp_;
  }
  _impl_.consensustimestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transactionid_ != nullptr) {
    delete _impl_.transactionid_;
  }
  _impl_.transactionid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transferlist_ != nullptr) {
    delete _impl_.transferlist_;
  }
  _impl_.transferlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleref_ != nullptr) {
    delete _impl_.scheduleref_;
  }
  _impl_.scheduleref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.parent_consensus_timestamp_ != nullptr) {
    delete _impl_.parent_consensus_timestamp_;
  }
  _impl_.parent_consensus_timestamp_ = nullptr;
  _impl_.transactionfee_ = uint64_t{0u};
  clear_body();
  clear_entropy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TransactionReceipt receipt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transactionHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transactionhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp consensusTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensustimestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransactionID transactionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TransactionRecord.memo"));
        } else
          goto handle_unusual;
        continue;
      // uint64 transactionFee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.transactionfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractFunctionResult contractCallResult = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractcallresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractFunctionResult contractCreateResult = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractcreateresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransferList transferList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transferlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenTransferList tokenTransferLists = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokentransferlists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleID scheduleRef = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduleref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.AssessedCustomFee assessed_custom_fees = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assessed_custom_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenAssociation automatic_token_associations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_automatic_token_associations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp parent_consensus_timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_consensus_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes alias = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ethereum_hash = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_ethereum_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.AccountAmount paid_staking_rewards = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_paid_staking_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes prng_bytes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_prng_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prng_number = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _internal_set_prng_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransactionRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TransactionReceipt receipt = 1;
  if (this->_internal_has_receipt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::receipt(this),
        _Internal::receipt(this).GetCachedSize(), target, stream);
  }

  // bytes transactionHash = 2;
  if (!this->_internal_transactionhash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transactionhash(), target);
  }

  // .proto.Timestamp consensusTimestamp = 3;
  if (this->_internal_has_consensustimestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::consensustimestamp(this),
        _Internal::consensustimestamp(this).GetCachedSize(), target, stream);
  }

  // .proto.TransactionID transactionID = 4;
  if (this->_internal_has_transactionid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transactionid(this),
        _Internal::transactionid(this).GetCachedSize(), target, stream);
  }

  // string memo = 5;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TransactionRecord.memo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_memo(), target);
  }

  // uint64 transactionFee = 6;
  if (this->_internal_transactionfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_transactionfee(), target);
  }

  // .proto.ContractFunctionResult contractCallResult = 7;
  if (_internal_has_contractcallresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::contractcallresult(this),
        _Internal::contractcallresult(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractFunctionResult contractCreateResult = 8;
  if (_internal_has_contractcreateresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::contractcreateresult(this),
        _Internal::contractcreateresult(this).GetCachedSize(), target, stream);
  }

  // .proto.TransferList transferList = 10;
  if (this->_internal_has_transferlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::transferlist(this),
        _Internal::transferlist(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.TokenTransferList tokenTransferLists = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokentransferlists_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokentransferlists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.ScheduleID scheduleRef = 12;
  if (this->_internal_has_scheduleref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::scheduleref(this),
        _Internal::scheduleref(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.AssessedCustomFee assessed_custom_fees = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assessed_custom_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_assessed_custom_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.TokenAssociation automatic_token_associations = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_automatic_token_associations_size()); i < n; i++) {
    const auto& repfield = this->_internal_automatic_token_associations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.Timestamp parent_consensus_timestamp = 15;
  if (this->_internal_has_parent_consensus_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::parent_consensus_timestamp(this),
        _Internal::parent_consensus_timestamp(this).GetCachedSize(), target, stream);
  }

  // bytes alias = 16;
  if (!this->_internal_alias().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_alias(), target);
  }

  // bytes ethereum_hash = 17;
  if (!this->_internal_ethereum_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_ethereum_hash(), target);
  }

  // repeated .proto.AccountAmount paid_staking_rewards = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paid_staking_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_paid_staking_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes prng_bytes = 19;
  if (_internal_has_prng_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_prng_bytes(), target);
  }

  // int32 prng_number = 20;
  if (_internal_has_prng_number()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_prng_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransactionRecord)
  return target;
}

size_t TransactionRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TransactionRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TokenTransferList tokenTransferLists = 11;
  total_size += 1UL * this->_internal_tokentransferlists_size();
  for (const auto& msg : this->_impl_.tokentransferlists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.AssessedCustomFee assessed_custom_fees = 13;
  total_size += 1UL * this->_internal_assessed_custom_fees_size();
  for (const auto& msg : this->_impl_.assessed_custom_fees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.TokenAssociation automatic_token_associations = 14;
  total_size += 1UL * this->_internal_automatic_token_associations_size();
  for (const auto& msg : this->_impl_.automatic_token_associations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.AccountAmount paid_staking_rewards = 18;
  total_size += 2UL * this->_internal_paid_staking_rewards_size();
  for (const auto& msg : this->_impl_.paid_staking_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transactionHash = 2;
  if (!this->_internal_transactionhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transactionhash());
  }

  // string memo = 5;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes alias = 16;
  if (!this->_internal_alias().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alias());
  }

  // bytes ethereum_hash = 17;
  if (!this->_internal_ethereum_hash().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ethereum_hash());
  }

  // .proto.TransactionReceipt receipt = 1;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.receipt_);
  }

  // .proto.Timestamp consensusTimestamp = 3;
  if (this->_internal_has_consensustimestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensustimestamp_);
  }

  // .proto.TransactionID transactionID = 4;
  if (this->_internal_has_transactionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transactionid_);
  }

  // .proto.TransferList transferList = 10;
  if (this->_internal_has_transferlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transferlist_);
  }

  // .proto.ScheduleID scheduleRef = 12;
  if (this->_internal_has_scheduleref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scheduleref_);
  }

  // .proto.Timestamp parent_consensus_timestamp = 15;
  if (this->_internal_has_parent_consensus_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_consensus_timestamp_);
  }

  // uint64 transactionFee = 6;
  if (this->_internal_transactionfee() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transactionfee());
  }

  switch (body_case()) {
    // .proto.ContractFunctionResult contractCallResult = 7;
    case kContractCallResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.contractcallresult_);
      break;
    }
    // .proto.ContractFunctionResult contractCreateResult = 8;
    case kContractCreateResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.contractcreateresult_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  switch (entropy_case()) {
    // bytes prng_bytes = 19;
    case kPrngBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prng_bytes());
      break;
    }
    // int32 prng_number = 20;
    case kPrngNumber: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_prng_number());
      break;
    }
    case ENTROPY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionRecord::GetClassData() const { return &_class_data_; }


void TransactionRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionRecord*>(&to_msg);
  auto& from = static_cast<const TransactionRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TransactionRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tokentransferlists_.MergeFrom(from._impl_.tokentransferlists_);
  _this->_impl_.assessed_custom_fees_.MergeFrom(from._impl_.assessed_custom_fees_);
  _this->_impl_.automatic_token_associations_.MergeFrom(from._impl_.automatic_token_associations_);
  _this->_impl_.paid_staking_rewards_.MergeFrom(from._impl_.paid_staking_rewards_);
  if (!from._internal_transactionhash().empty()) {
    _this->_internal_set_transactionhash(from._internal_transactionhash());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_ethereum_hash().empty()) {
    _this->_internal_set_ethereum_hash(from._internal_ethereum_hash());
  }
  if (from._internal_has_receipt()) {
    _this->_internal_mutable_receipt()->::proto::TransactionReceipt::MergeFrom(
        from._internal_receipt());
  }
  if (from._internal_has_consensustimestamp()) {
    _this->_internal_mutable_consensustimestamp()->::proto::Timestamp::MergeFrom(
        from._internal_consensustimestamp());
  }
  if (from._internal_has_transactionid()) {
    _this->_internal_mutable_transactionid()->::proto::TransactionID::MergeFrom(
        from._internal_transactionid());
  }
  if (from._internal_has_transferlist()) {
    _this->_internal_mutable_transferlist()->::proto::TransferList::MergeFrom(
        from._internal_transferlist());
  }
  if (from._internal_has_scheduleref()) {
    _this->_internal_mutable_scheduleref()->::proto::ScheduleID::MergeFrom(
        from._internal_scheduleref());
  }
  if (from._internal_has_parent_consensus_timestamp()) {
    _this->_internal_mutable_parent_consensus_timestamp()->::proto::Timestamp::MergeFrom(
        from._internal_parent_consensus_timestamp());
  }
  if (from._internal_transactionfee() != 0) {
    _this->_internal_set_transactionfee(from._internal_transactionfee());
  }
  switch (from.body_case()) {
    case kContractCallResult: {
      _this->_internal_mutable_contractcallresult()->::proto::ContractFunctionResult::MergeFrom(
          from._internal_contractcallresult());
      break;
    }
    case kContractCreateResult: {
      _this->_internal_mutable_contractcreateresult()->::proto::ContractFunctionResult::MergeFrom(
          from._internal_contractcreateresult());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  switch (from.entropy_case()) {
    case kPrngBytes: {
      _this->_internal_set_prng_bytes(from._internal_prng_bytes());
      break;
    }
    case kPrngNumber: {
      _this->_internal_set_prng_number(from._internal_prng_number());
      break;
    }
    case ENTROPY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionRecord::CopyFrom(const TransactionRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TransactionRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRecord::IsInitialized() const {
  return true;
}

void TransactionRecord::InternalSwap(TransactionRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tokentransferlists_.InternalSwap(&other->_impl_.tokentransferlists_);
  _impl_.assessed_custom_fees_.InternalSwap(&other->_impl_.assessed_custom_fees_);
  _impl_.automatic_token_associations_.InternalSwap(&other->_impl_.automatic_token_associations_);
  _impl_.paid_staking_rewards_.InternalSwap(&other->_impl_.paid_staking_rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transactionhash_, lhs_arena,
      &other->_impl_.transactionhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ethereum_hash_, lhs_arena,
      &other->_impl_.ethereum_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionRecord, _impl_.transactionfee_)
      + sizeof(TransactionRecord::_impl_.transactionfee_)
      - PROTOBUF_FIELD_OFFSET(TransactionRecord, _impl_.receipt_)>(
          reinterpret_cast<char*>(&_impl_.receipt_),
          reinterpret_cast<char*>(&other->_impl_.receipt_));
  swap(_impl_.body_, other->_impl_.body_);
  swap(_impl_.entropy_, other->_impl_.entropy_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transaction_5frecord_2eproto_getter, &descriptor_table_transaction_5frecord_2eproto_once,
      file_level_metadata_transaction_5frecord_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TransactionRecord*
Arena::CreateMaybeMessage< ::proto::TransactionRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TransactionRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_by_key.proto

#include "get_by_key.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR GetByKeyQuery::GetByKeyQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetByKeyQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetByKeyQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetByKeyQueryDefaultTypeInternal() {}
  union {
    GetByKeyQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetByKeyQueryDefaultTypeInternal _GetByKeyQuery_default_instance_;
PROTOBUF_CONSTEXPR EntityID::EntityID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EntityIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityIDDefaultTypeInternal() {}
  union {
    EntityID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityIDDefaultTypeInternal _EntityID_default_instance_;
PROTOBUF_CONSTEXPR GetByKeyResponse::GetByKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetByKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetByKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetByKeyResponseDefaultTypeInternal() {}
  union {
    GetByKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetByKeyResponseDefaultTypeInternal _GetByKeyResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_get_5fby_5fkey_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_get_5fby_5fkey_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_get_5fby_5fkey_2eproto = nullptr;

const uint32_t TableStruct_get_5fby_5fkey_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GetByKeyQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetByKeyQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::GetByKeyQuery, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EntityID, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::EntityID, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::EntityID, _impl_.entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GetByKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetByKeyResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::GetByKeyResponse, _impl_.entities_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::GetByKeyQuery)},
  { 8, -1, -1, sizeof(::proto::EntityID)},
  { 19, -1, -1, sizeof(::proto::GetByKeyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_GetByKeyQuery_default_instance_._instance,
  &::proto::_EntityID_default_instance_._instance,
  &::proto::_GetByKeyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_get_5fby_5fkey_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020get_by_key.proto\022\005proto\032\021basic_types.p"
  "roto\032\022query_header.proto\032\025response_heade"
  "r.proto\032\032crypto_add_live_hash.proto\"L\n\rG"
  "etByKeyQuery\022\"\n\006header\030\001 \001(\0132\022.proto.Que"
  "ryHeader\022\027\n\003key\030\002 \001(\0132\n.proto.Key\"\252\001\n\010En"
  "tityID\022%\n\taccountID\030\001 \001(\0132\020.proto.Accoun"
  "tIDH\000\022#\n\010liveHash\030\002 \001(\0132\017.proto.LiveHash"
  "H\000\022\037\n\006fileID\030\003 \001(\0132\r.proto.FileIDH\000\022\'\n\nc"
  "ontractID\030\004 \001(\0132\021.proto.ContractIDH\000B\010\n\006"
  "entity\"\\\n\020GetByKeyResponse\022%\n\006header\030\001 \001"
  "(\0132\025.proto.ResponseHeader\022!\n\010entities\030\002 "
  "\003(\0132\017.proto.EntityIDB&\n\"com.hederahashgr"
  "aph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_get_5fby_5fkey_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_crypto_5fadd_5flive_5fhash_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_get_5fby_5fkey_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_get_5fby_5fkey_2eproto = {
    false, false, 508, descriptor_table_protodef_get_5fby_5fkey_2eproto,
    "get_by_key.proto",
    &descriptor_table_get_5fby_5fkey_2eproto_once, descriptor_table_get_5fby_5fkey_2eproto_deps, 4, 3,
    schemas, file_default_instances, TableStruct_get_5fby_5fkey_2eproto::offsets,
    file_level_metadata_get_5fby_5fkey_2eproto, file_level_enum_descriptors_get_5fby_5fkey_2eproto,
    file_level_service_descriptors_get_5fby_5fkey_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_get_5fby_5fkey_2eproto_getter() {
  return &descriptor_table_get_5fby_5fkey_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_get_5fby_5fkey_2eproto(&descriptor_table_get_5fby_5fkey_2eproto);
namespace proto {

// ===================================================================

class GetByKeyQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const GetByKeyQuery* msg);
  static const ::proto::Key& key(const GetByKeyQuery* msg);
};

const ::proto::QueryHeader&
GetByKeyQuery::_Internal::header(const GetByKeyQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::Key&
GetByKeyQuery::_Internal::key(const GetByKeyQuery* msg) {
  return *msg->_impl_.key_;
}
void GetByKeyQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void GetByKeyQuery::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
GetByKeyQuery::GetByKeyQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GetByKeyQuery)
}
GetByKeyQuery::GetByKeyQuery(const GetByKeyQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetByKeyQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::Key(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetByKeyQuery)
}

inline void GetByKeyQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetByKeyQuery::~GetByKeyQuery() {
  // @@protoc_insertion_point(destructor:proto.GetByKeyQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetByKeyQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.key_;
}

void GetByKeyQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetByKeyQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetByKeyQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetByKeyQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetByKeyQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetByKeyQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.Key key = 2;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetByKeyQuery)
  return target;
}

size_t GetByKeyQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetByKeyQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.Key key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetByKeyQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetByKeyQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetByKeyQuery::GetClassData() const { return &_class_data_; }


void GetByKeyQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetByKeyQuery*>(&to_msg);
  auto& from = static_cast<const GetByKeyQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GetByKeyQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::Key::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetByKeyQuery::CopyFrom(const GetByKeyQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetByKeyQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetByKeyQuery::IsInitialized() const {
  return true;
}

void GetByKeyQuery::InternalSwap(GetByKeyQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetByKeyQuery, _impl_.key_)
      + sizeof(GetByKeyQuery::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(GetByKeyQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetByKeyQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5fby_5fkey_2eproto_getter, &descriptor_table_get_5fby_5fkey_2eproto_once,
      file_level_metadata_get_5fby_5fkey_2eproto[0]);
}

// ===================================================================

class EntityID::_Internal {
 public:
  static const ::proto::AccountID& accountid(const EntityID* msg);
  static const ::proto::LiveHash& livehash(const EntityID* msg);
  static const ::proto::FileID& fileid(const EntityID* msg);
  static const ::proto::ContractID& contractid(const EntityID* msg);
};

const ::proto::AccountID&
EntityID::_Internal::accountid(const EntityID* msg) {
  return *msg->_impl_.entity_.accountid_;
}
const ::proto::LiveHash&
EntityID::_Internal::livehash(const EntityID* msg) {
  return *msg->_impl_.entity_.livehash_;
}
const ::proto::FileID&
EntityID::_Internal::fileid(const EntityID* msg) {
  return *msg->_impl_.entity_.fileid_;
}
const ::proto::ContractID&
EntityID::_Internal::contractid(const EntityID* msg) {
  return *msg->_impl_.entity_.contractid_;
}
void EntityID::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    set_has_accountid();
    _impl_.entity_.accountid_ = accountid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityID.accountID)
}
void EntityID::clear_accountid() {
  if (_internal_has_accountid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.entity_.accountid_;
    }
    clear_has_entity();
  }
}
void EntityID::set_allocated_livehash(::proto::LiveHash* livehash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (livehash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(livehash));
    if (message_arena != submessage_arena) {
      livehash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, livehash, submessage_arena);
    }
    set_has_livehash();
    _impl_.entity_.livehash_ = livehash;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityID.liveHash)
}
void EntityID::clear_livehash() {
  if (_internal_has_livehash()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.entity_.livehash_;
    }
    clear_has_entity();
  }
}
void EntityID::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    set_has_fileid();
    _impl_.entity_.fileid_ = fileid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityID.fileID)
}
void EntityID::clear_fileid() {
  if (_internal_has_fileid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.entity_.fileid_;
    }
    clear_has_entity();
  }
}
void EntityID::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    set_has_contractid();
    _impl_.entity_.contractid_ = contractid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.EntityID.contractID)
}
void EntityID::clear_contractid() {
  if (_internal_has_contractid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.entity_.contractid_;
    }
    clear_has_entity();
  }
}
EntityID::EntityID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.EntityID)
}
EntityID::EntityID(const EntityID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entity();
  switch (from.entity_case()) {
    case kAccountID: {
      _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
          from._internal_accountid());
      break;
    }
    case kLiveHash: {
      _this->_internal_mutable_livehash()->::proto::LiveHash::MergeFrom(
          from._internal_livehash());
      break;
    }
    case kFileID: {
      _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
          from._internal_fileid());
      break;
    }
    case kContractID: {
      _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
          from._internal_contractid());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.EntityID)
}

inline void EntityID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_entity();
}

EntityID::~EntityID() {
  // @@protoc_insertion_point(destructor:proto.EntityID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_entity()) {
    clear_entity();
  }
}

void EntityID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityID::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:proto.EntityID)
  switch (entity_case()) {
    case kAccountID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.entity_.accountid_;
      }
      break;
    }
    case kLiveHash: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.entity_.livehash_;
      }
      break;
    }
    case kFileID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.entity_.fileid_;
      }
      break;
    }
    case kContractID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.entity_.contractid_;
      }
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENTITY_NOT_SET;
}


void EntityID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntityID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID accountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.LiveHash liveHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_livehash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileID fileID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractID contractID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntityID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID accountID = 1;
  if (_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // .proto.LiveHash liveHash = 2;
  if (_internal_has_livehash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::livehash(this),
        _Internal::livehash(this).GetCachedSize(), target, stream);
  }

  // .proto.FileID fileID = 3;
  if (_internal_has_fileid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fileid(this),
        _Internal::fileid(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractID contractID = 4;
  if (_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntityID)
  return target;
}

size_t EntityID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntityID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_case()) {
    // .proto.AccountID accountID = 1;
    case kAccountID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_.accountid_);
      break;
    }
    // .proto.LiveHash liveHash = 2;
    case kLiveHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_.livehash_);
      break;
    }
    // .proto.FileID fileID = 3;
    case kFileID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_.fileid_);
      break;
    }
    // .proto.ContractID contractID = 4;
    case kContractID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entity_.contractid_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityID::GetClassData() const { return &_class_data_; }


void EntityID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityID*>(&to_msg);
  auto& from = static_cast<const EntityID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.EntityID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_case()) {
    case kAccountID: {
      _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
          from._internal_accountid());
      break;
    }
    case kLiveHash: {
      _this->_internal_mutable_livehash()->::proto::LiveHash::MergeFrom(
          from._internal_livehash());
      break;
    }
    case kFileID: {
      _this->_internal_mutable_fileid()->::proto::FileID::MergeFrom(
          from._internal_fileid());
      break;
    }
    case kContractID: {
      _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
          from._internal_contractid());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityID::CopyFrom(const EntityID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntityID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityID::IsInitialized() const {
  return true;
}

void EntityID::InternalSwap(EntityID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.entity_, other->_impl_.entity_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5fby_5fkey_2eproto_getter, &descriptor_table_get_5fby_5fkey_2eproto_once,
      file_level_metadata_get_5fby_5fkey_2eproto[1]);
}

// ===================================================================

class GetByKeyResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const GetByKeyResponse* msg);
};

const ::proto::ResponseHeader&
GetByKeyResponse::_Internal::header(const GetByKeyResponse* msg) {
  return *msg->_impl_.header_;
}
void GetByKeyResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
GetByKeyResponse::GetByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GetByKeyResponse)
}
GetByKeyResponse::GetByKeyResponse(const GetByKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetByKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){from._impl_.entities_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetByKeyResponse)
}

inline void GetByKeyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetByKeyResponse::~GetByKeyResponse() {
  // @@protoc_insertion_point(destructor:proto.GetByKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetByKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entities_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void GetByKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetByKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetByKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetByKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.EntityID entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetByKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetByKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.EntityID entities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_entities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetByKeyResponse)
  return target;
}

size_t GetByKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetByKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.EntityID entities = 2;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->_impl_.entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetByKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetByKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetByKeyResponse::GetClassData() const { return &_class_data_; }


void GetByKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetByKeyResponse*>(&to_msg);
  auto& from = static_cast<const GetByKeyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GetByKeyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entities_.MergeFrom(from._impl_.entities_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetByKeyResponse::CopyFrom(const GetByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetByKeyResponse::IsInitialized() const {
  return true;
}

void GetByKeyResponse::InternalSwap(GetByKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entities_.InternalSwap(&other->_impl_.entities_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetByKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5fby_5fkey_2eproto_getter, &descriptor_table_get_5fby_5fkey_2eproto_once,
      file_level_metadata_get_5fby_5fkey_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::GetByKeyQuery*
Arena::CreateMaybeMessage< ::proto::GetByKeyQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetByKeyQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EntityID*
Arena::CreateMaybeMessage< ::proto::EntityID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::EntityID >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GetByKeyResponse*
Arena::CreateMaybeMessage< ::proto::GetByKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetByKeyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_add_live_hash.proto

#include "crypto_add_live_hash.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR LiveHash::LiveHash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.keys_)*/nullptr
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiveHashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveHashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveHashDefaultTypeInternal() {}
  union {
    LiveHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveHashDefaultTypeInternal _LiveHash_default_instance_;
PROTOBUF_CONSTEXPR CryptoAddLiveHashTransactionBody::CryptoAddLiveHashTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.livehash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoAddLiveHashTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoAddLiveHashTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoAddLiveHashTransactionBodyDefaultTypeInternal() {}
  union {
    CryptoAddLiveHashTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoAddLiveHashTransactionBodyDefaultTypeInternal _CryptoAddLiveHashTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fadd_5flive_5fhash_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fadd_5flive_5fhash_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fadd_5flive_5fhash_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fadd_5flive_5fhash_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LiveHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LiveHash, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveHash, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveHash, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::proto::LiveHash, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoAddLiveHashTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoAddLiveHashTransactionBody, _impl_.livehash_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::LiveHash)},
  { 10, -1, -1, sizeof(::proto::CryptoAddLiveHashTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_LiveHash_default_instance_._instance,
  &::proto::_CryptoAddLiveHashTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fadd_5flive_5fhash_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032crypto_add_live_hash.proto\022\005proto\032\021bas"
  "ic_types.proto\032\016duration.proto\"~\n\010LiveHa"
  "sh\022#\n\taccountId\030\001 \001(\0132\020.proto.AccountID\022"
  "\014\n\004hash\030\002 \001(\014\022\034\n\004keys\030\003 \001(\0132\016.proto.KeyL"
  "ist\022!\n\010duration\030\005 \001(\0132\017.proto.Duration\"E"
  "\n CryptoAddLiveHashTransactionBody\022!\n\010li"
  "veHash\030\003 \001(\0132\017.proto.LiveHashB&\n\"com.hed"
  "erahashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_deps[2] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fadd_5flive_5fhash_2eproto = {
    false, false, 317, descriptor_table_protodef_crypto_5fadd_5flive_5fhash_2eproto,
    "crypto_add_live_hash.proto",
    &descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_once, descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_crypto_5fadd_5flive_5fhash_2eproto::offsets,
    file_level_metadata_crypto_5fadd_5flive_5fhash_2eproto, file_level_enum_descriptors_crypto_5fadd_5flive_5fhash_2eproto,
    file_level_service_descriptors_crypto_5fadd_5flive_5fhash_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_getter() {
  return &descriptor_table_crypto_5fadd_5flive_5fhash_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fadd_5flive_5fhash_2eproto(&descriptor_table_crypto_5fadd_5flive_5fhash_2eproto);
namespace proto {

// ===================================================================

class LiveHash::_Internal {
 public:
  static const ::proto::AccountID& accountid(const LiveHash* msg);
  static const ::proto::KeyList& keys(const LiveHash* msg);
  static const ::proto::Duration& duration(const LiveHash* msg);
};

const ::proto::AccountID&
LiveHash::_Internal::accountid(const LiveHash* msg) {
  return *msg->_impl_.accountid_;
}
const ::proto::KeyList&
LiveHash::_Internal::keys(const LiveHash* msg) {
  return *msg->_impl_.keys_;
}
const ::proto::Duration&
LiveHash::_Internal::duration(const LiveHash* msg) {
  return *msg->_impl_.duration_;
}
void LiveHash::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
void LiveHash::clear_keys() {
  if (GetArenaForAllocation() == nullptr && _impl_.keys_ != nullptr) {
    delete _impl_.keys_;
  }
  _impl_.keys_ = nullptr;
}
void LiveHash::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
LiveHash::LiveHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LiveHash)
}
LiveHash::LiveHash(const LiveHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveHash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.keys_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  if (from._internal_has_keys()) {
    _this->_impl_.keys_ = new ::proto::KeyList(*from._impl_.keys_);
  }
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::proto::Duration(*from._impl_.duration_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.LiveHash)
}

inline void LiveHash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.keys_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiveHash::~LiveHash() {
  // @@protoc_insertion_point(destructor:proto.LiveHash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.accountid_;
  if (this != internal_default_instance()) delete _impl_.keys_;
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void LiveHash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveHash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LiveHash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.keys_ != nullptr) {
    delete _impl_.keys_;
  }
  _impl_.keys_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveHash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID accountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.KeyList keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveHash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LiveHash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID accountId = 1;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // .proto.KeyList keys = 3;
  if (this->_internal_has_keys()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::keys(this),
        _Internal::keys(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration duration = 5;
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LiveHash)
  return target;
}

size_t LiveHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LiveHash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .proto.AccountID accountId = 1;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // .proto.KeyList keys = 3;
  if (this->_internal_has_keys()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.keys_);
  }

  // .proto.Duration duration = 5;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveHash::GetClassData() const { return &_class_data_; }


void LiveHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveHash*>(&to_msg);
  auto& from = static_cast<const LiveHash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LiveHash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_has_keys()) {
    _this->_internal_mutable_keys()->::proto::KeyList::MergeFrom(
        from._internal_keys());
  }
  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::proto::Duration::MergeFrom(
        from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveHash::CopyFrom(const LiveHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LiveHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHash::IsInitialized() const {
  return true;
}

void LiveHash::InternalSwap(LiveHash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveHash, _impl_.duration_)
      + sizeof(LiveHash::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(LiveHash, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveHash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_getter, &descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_once,
      file_level_metadata_crypto_5fadd_5flive_5fhash_2eproto[0]);
}

// ===================================================================

class CryptoAddLiveHashTransactionBody::_Internal {
 public:
  static const ::proto::LiveHash& livehash(const CryptoAddLiveHashTransactionBody* msg);
};

const ::proto::LiveHash&
CryptoAddLiveHashTransactionBody::_Internal::livehash(const CryptoAddLiveHashTransactionBody* msg) {
  return *msg->_impl_.livehash_;
}
CryptoAddLiveHashTransactionBody::CryptoAddLiveHashTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoAddLiveHashTransactionBody)
}
CryptoAddLiveHashTransactionBody::CryptoAddLiveHashTransactionBody(const CryptoAddLiveHashTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoAddLiveHashTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.livehash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_livehash()) {
    _this->_impl_.livehash_ = new ::proto::LiveHash(*from._impl_.livehash_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoAddLiveHashTransactionBody)
}

inline void CryptoAddLiveHashTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.livehash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoAddLiveHashTransactionBody::~CryptoAddLiveHashTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.CryptoAddLiveHashTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoAddLiveHashTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.livehash_;
}

void CryptoAddLiveHashTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoAddLiveHashTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoAddLiveHashTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.livehash_ != nullptr) {
    delete _impl_.livehash_;
  }
  _impl_.livehash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoAddLiveHashTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.LiveHash liveHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_livehash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoAddLiveHashTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoAddLiveHashTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.LiveHash liveHash = 3;
  if (this->_internal_has_livehash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::livehash(this),
        _Internal::livehash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoAddLiveHashTransactionBody)
  return target;
}

size_t CryptoAddLiveHashTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoAddLiveHashTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.LiveHash liveHash = 3;
  if (this->_internal_has_livehash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.livehash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoAddLiveHashTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoAddLiveHashTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoAddLiveHashTransactionBody::GetClassData() const { return &_class_data_; }


void CryptoAddLiveHashTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoAddLiveHashTransactionBody*>(&to_msg);
  auto& from = static_cast<const CryptoAddLiveHashTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoAddLiveHashTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_livehash()) {
    _this->_internal_mutable_livehash()->::proto::LiveHash::MergeFrom(
        from._internal_livehash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoAddLiveHashTransactionBody::CopyFrom(const CryptoAddLiveHashTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoAddLiveHashTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoAddLiveHashTransactionBody::IsInitialized() const {
  return true;
}

void CryptoAddLiveHashTransactionBody::InternalSwap(CryptoAddLiveHashTransactionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.livehash_, other->_impl_.livehash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoAddLiveHashTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_getter, &descriptor_table_crypto_5fadd_5flive_5fhash_2eproto_once,
      file_level_metadata_crypto_5fadd_5flive_5fhash_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::LiveHash*
Arena::CreateMaybeMessage< ::proto::LiveHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LiveHash >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CryptoAddLiveHashTransactionBody*
Arena::CreateMaybeMessage< ::proto::CryptoAddLiveHashTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoAddLiveHashTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_get_info.proto

#include "contract_get_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ContractGetInfoQuery::ContractGetInfoQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractGetInfoQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractGetInfoQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractGetInfoQueryDefaultTypeInternal() {}
  union {
    ContractGetInfoQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractGetInfoQueryDefaultTypeInternal _ContractGetInfoQuery_default_instance_;
PROTOBUF_CONSTEXPR ContractGetInfoResponse_ContractInfo::ContractGetInfoResponse_ContractInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokenrelationships_)*/{}
  , /*decltype(_impl_.contractaccountid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contractid_)*/nullptr
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.auto_renew_account_id_)*/nullptr
  , /*decltype(_impl_.staking_info_)*/nullptr
  , /*decltype(_impl_.storage_)*/int64_t{0}
  , /*decltype(_impl_.balance_)*/uint64_t{0u}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.max_automatic_token_associations_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractGetInfoResponse_ContractInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractGetInfoResponse_ContractInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractGetInfoResponse_ContractInfoDefaultTypeInternal() {}
  union {
    ContractGetInfoResponse_ContractInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractGetInfoResponse_ContractInfoDefaultTypeInternal _ContractGetInfoResponse_ContractInfo_default_instance_;
PROTOBUF_CONSTEXPR ContractGetInfoResponse::ContractGetInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.contractinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractGetInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractGetInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractGetInfoResponseDefaultTypeInternal() {}
  union {
    ContractGetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractGetInfoResponseDefaultTypeInternal _ContractGetInfoResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_contract_5fget_5finfo_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_contract_5fget_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_contract_5fget_5finfo_2eproto = nullptr;

const uint32_t TableStruct_contract_5fget_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoQuery, _impl_.contractid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.contractid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.contractaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.expirationtime_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.storage_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.tokenrelationships_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.ledger_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.auto_renew_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.max_automatic_token_associations_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse_ContractInfo, _impl_.staking_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::ContractGetInfoResponse, _impl_.contractinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ContractGetInfoQuery)},
  { 8, -1, -1, sizeof(::proto::ContractGetInfoResponse_ContractInfo)},
  { 29, -1, -1, sizeof(::proto::ContractGetInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ContractGetInfoQuery_default_instance_._instance,
  &::proto::_ContractGetInfoResponse_ContractInfo_default_instance_._instance,
  &::proto::_ContractGetInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_contract_5fget_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027contract_get_info.proto\022\005proto\032\017timest"
  "amp.proto\032\016duration.proto\032\021basic_types.p"
  "roto\032\022query_header.proto\032\025response_heade"
  "r.proto\"a\n\024ContractGetInfoQuery\022\"\n\006heade"
  "r\030\001 \001(\0132\022.proto.QueryHeader\022%\n\ncontractI"
  "D\030\002 \001(\0132\021.proto.ContractID\"\200\005\n\027ContractG"
  "etInfoResponse\022%\n\006header\030\001 \001(\0132\025.proto.R"
  "esponseHeader\022A\n\014contractInfo\030\002 \001(\0132+.pr"
  "oto.ContractGetInfoResponse.ContractInfo"
  "\032\372\003\n\014ContractInfo\022%\n\ncontractID\030\001 \001(\0132\021."
  "proto.ContractID\022#\n\taccountID\030\002 \001(\0132\020.pr"
  "oto.AccountID\022\031\n\021contractAccountID\030\003 \001(\t"
  "\022\034\n\010adminKey\030\004 \001(\0132\n.proto.Key\022(\n\016expira"
  "tionTime\030\005 \001(\0132\020.proto.Timestamp\022(\n\017auto"
  "RenewPeriod\030\006 \001(\0132\017.proto.Duration\022\017\n\007st"
  "orage\030\007 \001(\003\022\014\n\004memo\030\010 \001(\t\022\017\n\007balance\030\t \001"
  "(\004\022\017\n\007deleted\030\n \001(\010\0228\n\022tokenRelationship"
  "s\030\013 \003(\0132\030.proto.TokenRelationshipB\002\030\001\022\021\n"
  "\tledger_id\030\014 \001(\014\022/\n\025auto_renew_account_i"
  "d\030\r \001(\0132\020.proto.AccountID\022(\n max_automat"
  "ic_token_associations\030\016 \001(\005\022(\n\014staking_i"
  "nfo\030\017 \001(\0132\022.proto.StakingInfoB&\n\"com.hed"
  "erahashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_contract_5fget_5finfo_2eproto_deps[5] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_contract_5fget_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_contract_5fget_5finfo_2eproto = {
    false, false, 917, descriptor_table_protodef_contract_5fget_5finfo_2eproto,
    "contract_get_info.proto",
    &descriptor_table_contract_5fget_5finfo_2eproto_once, descriptor_table_contract_5fget_5finfo_2eproto_deps, 5, 3,
    schemas, file_default_instances, TableStruct_contract_5fget_5finfo_2eproto::offsets,
    file_level_metadata_contract_5fget_5finfo_2eproto, file_level_enum_descriptors_contract_5fget_5finfo_2eproto,
    file_level_service_descriptors_contract_5fget_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_contract_5fget_5finfo_2eproto_getter() {
  return &descriptor_table_contract_5fget_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_contract_5fget_5finfo_2eproto(&descriptor_table_contract_5fget_5finfo_2eproto);
namespace proto {

// ===================================================================

class ContractGetInfoQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const ContractGetInfoQuery* msg);
  static const ::proto::ContractID& contractid(const ContractGetInfoQuery* msg);
};

const ::proto::QueryHeader&
ContractGetInfoQuery::_Internal::header(const ContractGetInfoQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::ContractID&
ContractGetInfoQuery::_Internal::contractid(const ContractGetInfoQuery* msg) {
  return *msg->_impl_.contractid_;
}
void ContractGetInfoQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void ContractGetInfoQuery::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
ContractGetInfoQuery::ContractGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractGetInfoQuery)
}
ContractGetInfoQuery::ContractGetInfoQuery(const ContractGetInfoQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractGetInfoQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.contractid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContractGetInfoQuery)
}

inline void ContractGetInfoQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.contractid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContractGetInfoQuery::~ContractGetInfoQuery() {
  // @@protoc_insertion_point(destructor:proto.ContractGetInfoQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractGetInfoQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.contractid_;
}

void ContractGetInfoQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractGetInfoQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractGetInfoQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractGetInfoQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractID contractID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractGetInfoQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractGetInfoQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractID contractID = 2;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractGetInfoQuery)
  return target;
}

size_t ContractGetInfoQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractGetInfoQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.ContractID contractID = 2;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractGetInfoQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractGetInfoQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractGetInfoQuery::GetClassData() const { return &_class_data_; }


void ContractGetInfoQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractGetInfoQuery*>(&to_msg);
  auto& from = static_cast<const ContractGetInfoQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractGetInfoQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractGetInfoQuery::CopyFrom(const ContractGetInfoQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractGetInfoQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractGetInfoQuery::IsInitialized() const {
  return true;
}

void ContractGetInfoQuery::InternalSwap(ContractGetInfoQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractGetInfoQuery, _impl_.contractid_)
      + sizeof(ContractGetInfoQuery::_impl_.contractid_)
      - PROTOBUF_FIELD_OFFSET(ContractGetInfoQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractGetInfoQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fget_5finfo_2eproto_getter, &descriptor_table_contract_5fget_5finfo_2eproto_once,
      file_level_metadata_contract_5fget_5finfo_2eproto[0]);
}

// ===================================================================

class ContractGetInfoResponse_ContractInfo::_Internal {
 public:
  static const ::proto::ContractID& contractid(const ContractGetInfoResponse_ContractInfo* msg);
  static const ::proto::AccountID& accountid(const ContractGetInfoResponse_ContractInfo* msg);
  static const ::proto::Key& adminkey(const ContractGetInfoResponse_ContractInfo* msg);
  static const ::proto::Timestamp& expirationtime(const ContractGetInfoResponse_ContractInfo* msg);
  static const ::proto::Duration& autorenewperiod(const ContractGetInfoResponse_ContractInfo* msg);
  static const ::proto::AccountID& auto_renew_account_id(const ContractGetInfoResponse_ContractInfo* msg);
  static const ::proto::StakingInfo& staking_info(const ContractGetInfoResponse_ContractInfo* msg);
};

const ::proto::ContractID&
ContractGetInfoResponse_ContractInfo::_Internal::contractid(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.contractid_;
}
const ::proto::AccountID&
ContractGetInfoResponse_ContractInfo::_Internal::accountid(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.accountid_;
}
const ::proto::Key&
ContractGetInfoResponse_ContractInfo::_Internal::adminkey(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::Timestamp&
ContractGetInfoResponse_ContractInfo::_Internal::expirationtime(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.expirationtime_;
}
const ::proto::Duration&
ContractGetInfoResponse_ContractInfo::_Internal::autorenewperiod(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::AccountID&
ContractGetInfoResponse_ContractInfo::_Internal::auto_renew_account_id(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.auto_renew_account_id_;
}
const ::proto::StakingInfo&
ContractGetInfoResponse_ContractInfo::_Internal::staking_info(const ContractGetInfoResponse_ContractInfo* msg) {
  return *msg->_impl_.staking_info_;
}
void ContractGetInfoResponse_ContractInfo::clear_contractid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
}
void ContractGetInfoResponse_ContractInfo::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
void ContractGetInfoResponse_ContractInfo::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void ContractGetInfoResponse_ContractInfo::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
void ContractGetInfoResponse_ContractInfo::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void ContractGetInfoResponse_ContractInfo::clear_tokenrelationships() {
  _impl_.tokenrelationships_.Clear();
}
void ContractGetInfoResponse_ContractInfo::clear_auto_renew_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_account_id_ != nullptr) {
    delete _impl_.auto_renew_account_id_;
  }
  _impl_.auto_renew_account_id_ = nullptr;
}
void ContractGetInfoResponse_ContractInfo::clear_staking_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.staking_info_ != nullptr) {
    delete _impl_.staking_info_;
  }
  _impl_.staking_info_ = nullptr;
}
ContractGetInfoResponse_ContractInfo::ContractGetInfoResponse_ContractInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractGetInfoResponse.ContractInfo)
}
ContractGetInfoResponse_ContractInfo::ContractGetInfoResponse_ContractInfo(const ContractGetInfoResponse_ContractInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractGetInfoResponse_ContractInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenrelationships_){from._impl_.tokenrelationships_}
    , decltype(_impl_.contractaccountid_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.auto_renew_account_id_){nullptr}
    , decltype(_impl_.staking_info_){nullptr}
    , decltype(_impl_.storage_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.max_automatic_token_associations_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contractaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contractaccountid().empty()) {
    _this->_impl_.contractaccountid_.Set(from._internal_contractaccountid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_id().empty()) {
    _this->_impl_.ledger_id_.Set(from._internal_ledger_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contractid()) {
    _this->_impl_.contractid_ = new ::proto::ContractID(*from._impl_.contractid_);
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::Timestamp(*from._impl_.expirationtime_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_auto_renew_account_id()) {
    _this->_impl_.auto_renew_account_id_ = new ::proto::AccountID(*from._impl_.auto_renew_account_id_);
  }
  if (from._internal_has_staking_info()) {
    _this->_impl_.staking_info_ = new ::proto::StakingInfo(*from._impl_.staking_info_);
  }
  ::memcpy(&_impl_.storage_, &from._impl_.storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_automatic_token_associations_) -
    reinterpret_cast<char*>(&_impl_.storage_)) + sizeof(_impl_.max_automatic_token_associations_));
  // @@protoc_insertion_point(copy_constructor:proto.ContractGetInfoResponse.ContractInfo)
}

inline void ContractGetInfoResponse_ContractInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenrelationships_){arena}
    , decltype(_impl_.contractaccountid_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.contractid_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.auto_renew_account_id_){nullptr}
    , decltype(_impl_.staking_info_){nullptr}
    , decltype(_impl_.storage_){int64_t{0}}
    , decltype(_impl_.balance_){uint64_t{0u}}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.max_automatic_token_associations_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contractaccountid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contractaccountid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractGetInfoResponse_ContractInfo::~ContractGetInfoResponse_ContractInfo() {
  // @@protoc_insertion_point(destructor:proto.ContractGetInfoResponse.ContractInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractGetInfoResponse_ContractInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tokenrelationships_.~RepeatedPtrField();
  _impl_.contractaccountid_.Destroy();
  _impl_.memo_.Destroy();
  _impl_.ledger_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contractid_;
  if (this != internal_default_instance()) delete _impl_.accountid_;
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.auto_renew_account_id_;
  if (this != internal_default_instance()) delete _impl_.staking_info_;
}

void ContractGetInfoResponse_ContractInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractGetInfoResponse_ContractInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractGetInfoResponse.ContractInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tokenrelationships_.Clear();
  _impl_.contractaccountid_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  _impl_.ledger_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contractid_ != nullptr) {
    delete _impl_.contractid_;
  }
  _impl_.contractid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_account_id_ != nullptr) {
    delete _impl_.auto_renew_account_id_;
  }
  _impl_.auto_renew_account_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.staking_info_ != nullptr) {
    delete _impl_.staking_info_;
  }
  _impl_.staking_info_ = nullptr;
  ::memset(&_impl_.storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_automatic_token_associations_) -
      reinterpret_cast<char*>(&_impl_.storage_)) + sizeof(_impl_.max_automatic_token_associations_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractGetInfoResponse_ContractInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ContractID contractID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contractAccountID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_contractaccountid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ContractGetInfoResponse.ContractInfo.contractAccountID"));
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expirationTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 storage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ContractGetInfoResponse.ContractInfo.memo"));
        } else
          goto handle_unusual;
        continue;
      // uint64 balance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokenrelationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes ledger_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_ledger_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID auto_renew_account_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_renew_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_automatic_token_associations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.max_automatic_token_associations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.StakingInfo staking_info = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractGetInfoResponse_ContractInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractGetInfoResponse.ContractInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // string contractAccountID = 3;
  if (!this->_internal_contractaccountid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractaccountid().data(), static_cast<int>(this->_internal_contractaccountid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ContractGetInfoResponse.ContractInfo.contractAccountID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_contractaccountid(), target);
  }

  // .proto.Key adminKey = 4;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp expirationTime = 5;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration autoRenewPeriod = 6;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // int64 storage = 7;
  if (this->_internal_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_storage(), target);
  }

  // string memo = 8;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ContractGetInfoResponse.ContractInfo.memo");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_memo(), target);
  }

  // uint64 balance = 9;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_balance(), target);
  }

  // bool deleted = 10;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_deleted(), target);
  }

  // repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokenrelationships_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokenrelationships(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes ledger_id = 12;
  if (!this->_internal_ledger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_ledger_id(), target);
  }

  // .proto.AccountID auto_renew_account_id = 13;
  if (this->_internal_has_auto_renew_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::auto_renew_account_id(this),
        _Internal::auto_renew_account_id(this).GetCachedSize(), target, stream);
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_automatic_token_associations(), target);
  }

  // .proto.StakingInfo staking_info = 15;
  if (this->_internal_has_staking_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::staking_info(this),
        _Internal::staking_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractGetInfoResponse.ContractInfo)
  return target;
}

size_t ContractGetInfoResponse_ContractInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractGetInfoResponse.ContractInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];
  total_size += 1UL * this->_internal_tokenrelationships_size();
  for (const auto& msg : this->_impl_.tokenrelationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contractAccountID = 3;
  if (!this->_internal_contractaccountid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractaccountid());
  }

  // string memo = 8;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes ledger_id = 12;
  if (!this->_internal_ledger_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_id());
  }

  // .proto.ContractID contractID = 1;
  if (this->_internal_has_contractid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractid_);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // .proto.Key adminKey = 4;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.Timestamp expirationTime = 5;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // .proto.Duration autoRenewPeriod = 6;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.AccountID auto_renew_account_id = 13;
  if (this->_internal_has_auto_renew_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auto_renew_account_id_);
  }

  // .proto.StakingInfo staking_info = 15;
  if (this->_internal_has_staking_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.staking_info_);
  }

  // int64 storage = 7;
  if (this->_internal_storage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_storage());
  }

  // uint64 balance = 9;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
  }

  // bool deleted = 10;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_automatic_token_associations());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractGetInfoResponse_ContractInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractGetInfoResponse_ContractInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractGetInfoResponse_ContractInfo::GetClassData() const { return &_class_data_; }


void ContractGetInfoResponse_ContractInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractGetInfoResponse_ContractInfo*>(&to_msg);
  auto& from = static_cast<const ContractGetInfoResponse_ContractInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractGetInfoResponse.ContractInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tokenrelationships_.MergeFrom(from._impl_.tokenrelationships_);
  if (!from._internal_contractaccountid().empty()) {
    _this->_internal_set_contractaccountid(from._internal_contractaccountid());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_ledger_id().empty()) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_has_contractid()) {
    _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
        from._internal_contractid());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::Timestamp::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_auto_renew_account_id()) {
    _this->_internal_mutable_auto_renew_account_id()->::proto::AccountID::MergeFrom(
        from._internal_auto_renew_account_id());
  }
  if (from._internal_has_staking_info()) {
    _this->_internal_mutable_staking_info()->::proto::StakingInfo::MergeFrom(
        from._internal_staking_info());
  }
  if (from._internal_storage() != 0) {
    _this->_internal_set_storage(from._internal_storage());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  if (from._internal_max_automatic_token_associations() != 0) {
    _this->_internal_set_max_automatic_token_associations(from._internal_max_automatic_token_associations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractGetInfoResponse_ContractInfo::CopyFrom(const ContractGetInfoResponse_ContractInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractGetInfoResponse.ContractInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractGetInfoResponse_ContractInfo::IsInitialized() const {
  return true;
}

void ContractGetInfoResponse_ContractInfo::InternalSwap(ContractGetInfoResponse_ContractInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tokenrelationships_.InternalSwap(&other->_impl_.tokenrelationships_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contractaccountid_, lhs_arena,
      &other->_impl_.contractaccountid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_id_, lhs_arena,
      &other->_impl_.ledger_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractGetInfoResponse_ContractInfo, _impl_.max_automatic_token_associations_)
      + sizeof(ContractGetInfoResponse_ContractInfo::_impl_.max_automatic_token_associations_)
      - PROTOBUF_FIELD_OFFSET(ContractGetInfoResponse_ContractInfo, _impl_.contractid_)>(
          reinterpret_cast<char*>(&_impl_.contractid_),
          reinterpret_cast<char*>(&other->_impl_.contractid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractGetInfoResponse_ContractInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fget_5finfo_2eproto_getter, &descriptor_table_contract_5fget_5finfo_2eproto_once,
      file_level_metadata_contract_5fget_5finfo_2eproto[1]);
}

// ===================================================================

class ContractGetInfoResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const ContractGetInfoResponse* msg);
  static const ::proto::ContractGetInfoResponse_ContractInfo& contractinfo(const ContractGetInfoResponse* msg);
};

const ::proto::ResponseHeader&
ContractGetInfoResponse::_Internal::header(const ContractGetInfoResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::ContractGetInfoResponse_ContractInfo&
ContractGetInfoResponse::_Internal::contractinfo(const ContractGetInfoResponse* msg) {
  return *msg->_impl_.contractinfo_;
}
void ContractGetInfoResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
ContractGetInfoResponse::ContractGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ContractGetInfoResponse)
}
ContractGetInfoResponse::ContractGetInfoResponse(const ContractGetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractGetInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.contractinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_contractinfo()) {
    _this->_impl_.contractinfo_ = new ::proto::ContractGetInfoResponse_ContractInfo(*from._impl_.contractinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ContractGetInfoResponse)
}

inline void ContractGetInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.contractinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContractGetInfoResponse::~ContractGetInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.ContractGetInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractGetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.contractinfo_;
}

void ContractGetInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractGetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ContractGetInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contractinfo_ != nullptr) {
    delete _impl_.contractinfo_;
  }
  _impl_.contractinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractGetInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractGetInfoResponse.ContractInfo contractInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractGetInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ContractGetInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractGetInfoResponse.ContractInfo contractInfo = 2;
  if (this->_internal_has_contractinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contractinfo(this),
        _Internal::contractinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ContractGetInfoResponse)
  return target;
}

size_t ContractGetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ContractGetInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.ContractGetInfoResponse.ContractInfo contractInfo = 2;
  if (this->_internal_has_contractinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contractinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractGetInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractGetInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractGetInfoResponse::GetClassData() const { return &_class_data_; }


void ContractGetInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractGetInfoResponse*>(&to_msg);
  auto& from = static_cast<const ContractGetInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ContractGetInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_contractinfo()) {
    _this->_internal_mutable_contractinfo()->::proto::ContractGetInfoResponse_ContractInfo::MergeFrom(
        from._internal_contractinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractGetInfoResponse::CopyFrom(const ContractGetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ContractGetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractGetInfoResponse::IsInitialized() const {
  return true;
}

void ContractGetInfoResponse::InternalSwap(ContractGetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractGetInfoResponse, _impl_.contractinfo_)
      + sizeof(ContractGetInfoResponse::_impl_.contractinfo_)
      - PROTOBUF_FIELD_OFFSET(ContractGetInfoResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractGetInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contract_5fget_5finfo_2eproto_getter, &descriptor_table_contract_5fget_5finfo_2eproto_once,
      file_level_metadata_contract_5fget_5finfo_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ContractGetInfoQuery*
Arena::CreateMaybeMessage< ::proto::ContractGetInfoQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractGetInfoQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContractGetInfoResponse_ContractInfo*
Arena::CreateMaybeMessage< ::proto::ContractGetInfoResponse_ContractInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractGetInfoResponse_ContractInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ContractGetInfoResponse*
Arena::CreateMaybeMessage< ::proto::ContractGetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ContractGetInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedulable_transaction_body.proto

#include "schedulable_transaction_body.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR SchedulableTransactionBody::SchedulableTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transactionfee_)*/uint64_t{0u}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SchedulableTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchedulableTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchedulableTransactionBodyDefaultTypeInternal() {}
  union {
    SchedulableTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchedulableTransactionBodyDefaultTypeInternal _SchedulableTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_schedulable_5ftransaction_5fbody_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_schedulable_5ftransaction_5fbody_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_schedulable_5ftransaction_5fbody_2eproto = nullptr;

const uint32_t TableStruct_schedulable_5ftransaction_5fbody_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SchedulableTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::SchedulableTransactionBody, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SchedulableTransactionBody, _impl_.transactionfee_),
  PROTOBUF_FIELD_OFFSET(::proto::SchedulableTransactionBody, _impl_.memo_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::SchedulableTransactionBody, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::SchedulableTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_SchedulableTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_schedulable_5ftransaction_5fbody_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"schedulable_transaction_body.proto\022\005pr"
  "oto\032\023system_delete.proto\032\025system_undelet"
  "e.proto\032\014freeze.proto\032\023contract_call.pro"
  "to\032\025contract_create.proto\032\025contract_upda"
  "te.proto\032\023crypto_create.proto\032\023crypto_de"
  "lete.proto\032\025crypto_transfer.proto\032\023crypt"
  "o_update.proto\032\036crypto_approve_allowance"
  ".proto\032\035crypto_delete_allowance.proto\032\021f"
  "ile_append.proto\032\021file_create.proto\032\021fil"
  "e_delete.proto\032\021file_update.proto\032\025contr"
  "act_delete.proto\032\034consensus_create_topic"
  ".proto\032\034consensus_update_topic.proto\032\034co"
  "nsensus_delete_topic.proto\032\036consensus_su"
  "bmit_message.proto\032\022token_create.proto\032\032"
  "token_freeze_account.proto\032\034token_unfree"
  "ze_account.proto\032\025token_grant_kyc.proto\032"
  "\026token_revoke_kyc.proto\032\022token_delete.pr"
  "oto\032\022token_update.proto\032\020token_mint.prot"
  "o\032\020token_burn.proto\032\030token_wipe_account."
  "proto\032\025token_associate.proto\032\026token_diss"
  "ociate.proto\032\037token_fee_schedule_update."
  "proto\032\021token_pause.proto\032\023token_unpause."
  "proto\032\025schedule_delete.proto\032\017util_prng."
  "proto\"\335\023\n\032SchedulableTransactionBody\022\026\n\016"
  "transactionFee\030\001 \001(\004\022\014\n\004memo\030\002 \001(\t\022:\n\014co"
  "ntractCall\030\003 \001(\0132\".proto.ContractCallTra"
  "nsactionBodyH\000\022F\n\026contractCreateInstance"
  "\030\004 \001(\0132$.proto.ContractCreateTransaction"
  "BodyH\000\022F\n\026contractUpdateInstance\030\005 \001(\0132$"
  ".proto.ContractUpdateTransactionBodyH\000\022F"
  "\n\026contractDeleteInstance\030\006 \001(\0132$.proto.C"
  "ontractDeleteTransactionBodyH\000\022N\n\026crypto"
  "ApproveAllowance\030% \001(\0132,.proto.CryptoApp"
  "roveAllowanceTransactionBodyH\000\022L\n\025crypto"
  "DeleteAllowance\030& \001(\0132+.proto.CryptoDele"
  "teAllowanceTransactionBodyH\000\022A\n\023cryptoCr"
  "eateAccount\030\007 \001(\0132\".proto.CryptoCreateTr"
  "ansactionBodyH\000\022:\n\014cryptoDelete\030\010 \001(\0132\"."
  "proto.CryptoDeleteTransactionBodyH\000\022>\n\016c"
  "ryptoTransfer\030\t \001(\0132$.proto.CryptoTransf"
  "erTransactionBodyH\000\022A\n\023cryptoUpdateAccou"
  "nt\030\n \001(\0132\".proto.CryptoUpdateTransaction"
  "BodyH\000\0226\n\nfileAppend\030\013 \001(\0132 .proto.FileA"
  "ppendTransactionBodyH\000\0226\n\nfileCreate\030\014 \001"
  "(\0132 .proto.FileCreateTransactionBodyH\000\0226"
  "\n\nfileDelete\030\r \001(\0132 .proto.FileDeleteTra"
  "nsactionBodyH\000\0226\n\nfileUpdate\030\016 \001(\0132 .pro"
  "to.FileUpdateTransactionBodyH\000\022:\n\014system"
  "Delete\030\017 \001(\0132\".proto.SystemDeleteTransac"
  "tionBodyH\000\022>\n\016systemUndelete\030\020 \001(\0132$.pro"
  "to.SystemUndeleteTransactionBodyH\000\022.\n\006fr"
  "eeze\030\021 \001(\0132\034.proto.FreezeTransactionBody"
  "H\000\022J\n\024consensusCreateTopic\030\022 \001(\0132*.proto"
  ".ConsensusCreateTopicTransactionBodyH\000\022J"
  "\n\024consensusUpdateTopic\030\023 \001(\0132*.proto.Con"
  "sensusUpdateTopicTransactionBodyH\000\022J\n\024co"
  "nsensusDeleteTopic\030\024 \001(\0132*.proto.Consens"
  "usDeleteTopicTransactionBodyH\000\022N\n\026consen"
  "susSubmitMessage\030\025 \001(\0132,.proto.Consensus"
  "SubmitMessageTransactionBodyH\000\022:\n\rtokenC"
  "reation\030\026 \001(\0132!.proto.TokenCreateTransac"
  "tionBodyH\000\022\?\n\013tokenFreeze\030\027 \001(\0132(.proto."
  "TokenFreezeAccountTransactionBodyH\000\022C\n\rt"
  "okenUnfreeze\030\030 \001(\0132*.proto.TokenUnfreeze"
  "AccountTransactionBodyH\000\022<\n\rtokenGrantKy"
  "c\030\031 \001(\0132#.proto.TokenGrantKycTransaction"
  "BodyH\000\022>\n\016tokenRevokeKyc\030\032 \001(\0132$.proto.T"
  "okenRevokeKycTransactionBodyH\000\022:\n\rtokenD"
  "eletion\030\033 \001(\0132!.proto.TokenDeleteTransac"
  "tionBodyH\000\0228\n\013tokenUpdate\030\034 \001(\0132!.proto."
  "TokenUpdateTransactionBodyH\000\0224\n\ttokenMin"
  "t\030\035 \001(\0132\037.proto.TokenMintTransactionBody"
  "H\000\0224\n\ttokenBurn\030\036 \001(\0132\037.proto.TokenBurnT"
  "ransactionBodyH\000\022;\n\ttokenWipe\030\037 \001(\0132&.pr"
  "oto.TokenWipeAccountTransactionBodyH\000\022>\n"
  "\016tokenAssociate\030  \001(\0132$.proto.TokenAssoc"
  "iateTransactionBodyH\000\022@\n\017tokenDissociate"
  "\030! \001(\0132%.proto.TokenDissociateTransactio"
  "nBodyH\000\022Q\n\031token_fee_schedule_update\030\' \001"
  "(\0132,.proto.TokenFeeScheduleUpdateTransac"
  "tionBodyH\000\0227\n\013token_pause\030# \001(\0132 .proto."
  "TokenPauseTransactionBodyH\000\022;\n\rtoken_unp"
  "ause\030$ \001(\0132\".proto.TokenUnpauseTransacti"
  "onBodyH\000\022>\n\016scheduleDelete\030\" \001(\0132$.proto"
  ".ScheduleDeleteTransactionBodyH\000\0223\n\tutil"
  "_prng\030( \001(\0132\036.proto.UtilPrngTransactionB"
  "odyH\000B\006\n\004dataB&\n\"com.hederahashgraph.api"
  ".proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_schedulable_5ftransaction_5fbody_2eproto_deps[38] = {
  &::descriptor_table_consensus_5fcreate_5ftopic_2eproto,
  &::descriptor_table_consensus_5fdelete_5ftopic_2eproto,
  &::descriptor_table_consensus_5fsubmit_5fmessage_2eproto,
  &::descriptor_table_consensus_5fupdate_5ftopic_2eproto,
  &::descriptor_table_contract_5fcall_2eproto,
  &::descriptor_table_contract_5fcreate_2eproto,
  &::descriptor_table_contract_5fdelete_2eproto,
  &::descriptor_table_contract_5fupdate_2eproto,
  &::descriptor_table_crypto_5fapprove_5fallowance_2eproto,
  &::descriptor_table_crypto_5fcreate_2eproto,
  &::descriptor_table_crypto_5fdelete_2eproto,
  &::descriptor_table_crypto_5fdelete_5fallowance_2eproto,
  &::descriptor_table_crypto_5ftransfer_2eproto,
  &::descriptor_table_crypto_5fupdate_2eproto,
  &::descriptor_table_file_5fappend_2eproto,
  &::descriptor_table_file_5fcreate_2eproto,
  &::descriptor_table_file_5fdelete_2eproto,
  &::descriptor_table_file_5fupdate_2eproto,
  &::descriptor_table_freeze_2eproto,
  &::descriptor_table_schedule_5fdelete_2eproto,
  &::descriptor_table_system_5fdelete_2eproto,
  &::descriptor_table_system_5fundelete_2eproto,
  &::descriptor_table_token_5fassociate_2eproto,
  &::descriptor_table_token_5fburn_2eproto,
  &::descriptor_table_token_5fcreate_2eproto,
  &::descriptor_table_token_5fdelete_2eproto,
  &::descriptor_table_token_5fdissociate_2eproto,
  &::descriptor_table_token_5ffee_5fschedule_5fupdate_2eproto,
  &::descriptor_table_token_5ffreeze_5faccount_2eproto,
  &::descriptor_table_token_5fgrant_5fkyc_2eproto,
  &::descriptor_table_token_5fmint_2eproto,
  &::descriptor_table_token_5fpause_2eproto,
  &::descriptor_table_token_5frevoke_5fkyc_2eproto,
  &::descriptor_table_token_5funfreeze_5faccount_2eproto,
  &::descriptor_table_token_5funpause_2eproto,
  &::descriptor_table_token_5fupdate_2eproto,
  &::descriptor_table_token_5fwipe_5faccount_2eproto,
  &::descriptor_table_util_5fprng_2eproto,
};
static ::_pbi::once_flag descriptor_table_schedulable_5ftransaction_5fbody_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_schedulable_5ftransaction_5fbody_2eproto = {
    false, false, 3501, descriptor_table_protodef_schedulable_5ftransaction_5fbody_2eproto,
    "schedulable_transaction_body.proto",
    &descriptor_table_schedulable_5ftransaction_5fbody_2eproto_once, descriptor_table_schedulable_5ftransaction_5fbody_2eproto_deps, 38, 1,
    schemas, file_default_instances, TableStruct_schedulable_5ftransaction_5fbody_2eproto::offsets,
    file_level_metadata_schedulable_5ftransaction_5fbody_2eproto, file_level_enum_descriptors_schedulable_5ftransaction_5fbody_2eproto,
    file_level_service_descriptors_schedulable_5ftransaction_5fbody_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_schedulable_5ftransaction_5fbody_2eproto_getter() {
  return &descriptor_table_schedulable_5ftransaction_5fbody_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_schedulable_5ftransaction_5fbody_2eproto(&descriptor_table_schedulable_5ftransaction_5fbody_2eproto);
namespace proto {

// ===================================================================

class SchedulableTransactionBody::_Internal {
 public:
  static const ::proto::ContractCallTransactionBody& contractcall(const SchedulableTransactionBody* msg);
  static const ::proto::ContractCreateTransactionBody& contractcreateinstance(const SchedulableTransactionBody* msg);
  static const ::proto::ContractUpdateTransactionBody& contractupdateinstance(const SchedulableTransactionBody* msg);
  static const ::proto::ContractDeleteTransactionBody& contractdeleteinstance(const SchedulableTransactionBody* msg);
  static const ::proto::CryptoApproveAllowanceTransactionBody& cryptoapproveallowance(const SchedulableTransactionBody* msg);
  static const ::proto::CryptoDeleteAllowanceTransactionBody& cryptodeleteallowance(const SchedulableTransactionBody* msg);
  static const ::proto::CryptoCreateTransactionBody& cryptocreateaccount(const SchedulableTransactionBody* msg);
  static const ::proto::CryptoDeleteTransactionBody& cryptodelete(const SchedulableTransactionBody* msg);
  static const ::proto::CryptoTransferTransactionBody& cryptotransfer(const SchedulableTransactionBody* msg);
  static const ::proto::CryptoUpdateTransactionBody& cryptoupdateaccount(const SchedulableTransactionBody* msg);
  static const ::proto::FileAppendTransactionBody& fileappend(const SchedulableTransactionBody* msg);
  static const ::proto::FileCreateTransactionBody& filecreate(const SchedulableTransactionBody* msg);
  static const ::proto::FileDeleteTransactionBody& filedelete(const SchedulableTransactionBody* msg);
  static const ::proto::FileUpdateTransactionBody& fileupdate(const SchedulableTransactionBody* msg);
  static const ::proto::SystemDeleteTransactionBody& systemdelete(const SchedulableTransactionBody* msg);
  static const ::proto::SystemUndeleteTransactionBody& systemundelete(const SchedulableTransactionBody* msg);
  static const ::proto::FreezeTransactionBody& freeze(const SchedulableTransactionBody* msg);
  static const ::proto::ConsensusCreateTopicTransactionBody& consensuscreatetopic(const SchedulableTransactionBody* msg);
  static const ::proto::ConsensusUpdateTopicTransactionBody& consensusupdatetopic(const SchedulableTransactionBody* msg);
  static const ::proto::ConsensusDeleteTopicTransactionBody& consensusdeletetopic(const SchedulableTransactionBody* msg);
  static const ::proto::ConsensusSubmitMessageTransactionBody& consensussubmitmessage(const SchedulableTransactionBody* msg);
  static const ::proto::TokenCreateTransactionBody& tokencreation(const SchedulableTransactionBody* msg);
  static const ::proto::TokenFreezeAccountTransactionBody& tokenfreeze(const SchedulableTransactionBody* msg);
  static const ::proto::TokenUnfreezeAccountTransactionBody& tokenunfreeze(const SchedulableTransactionBody* msg);
  static const ::proto::TokenGrantKycTransactionBody& tokengrantkyc(const SchedulableTransactionBody* msg);
  static const ::proto::TokenRevokeKycTransactionBody& tokenrevokekyc(const SchedulableTransactionBody* msg);
  static const ::proto::TokenDeleteTransactionBody& tokendeletion(const SchedulableTransactionBody* msg);
  static const ::proto::TokenUpdateTransactionBody& tokenupdate(const SchedulableTransactionBody* msg);
  static const ::proto::TokenMintTransactionBody& tokenmint(const SchedulableTransactionBody* msg);
  static const ::proto::TokenBurnTransactionBody& tokenburn(const SchedulableTransactionBody* msg);
  static const ::proto::TokenWipeAccountTransactionBody& tokenwipe(const SchedulableTransactionBody* msg);
  static const ::proto::TokenAssociateTransactionBody& tokenassociate(const SchedulableTransactionBody* msg);
  static const ::proto::TokenDissociateTransactionBody& tokendissociate(const SchedulableTransactionBody* msg);
  static const ::proto::TokenFeeScheduleUpdateTransactionBody& token_fee_schedule_update(const SchedulableTransactionBody* msg);
  static const ::proto::TokenPauseTransactionBody& token_pause(const SchedulableTransactionBody* msg);
  static const ::proto::TokenUnpauseTransactionBody& token_unpause(const SchedulableTransactionBody* msg);
  static const ::proto::ScheduleDeleteTransactionBody& scheduledelete(const SchedulableTransactionBody* msg);
  static const ::proto::UtilPrngTransactionBody& util_prng(const SchedulableTransactionBody* msg);
};

const ::proto::ContractCallTransactionBody&
SchedulableTransactionBody::_Internal::contractcall(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.contractcall_;
}
const ::proto::ContractCreateTransactionBody&
SchedulableTransactionBody::_Internal::contractcreateinstance(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.contractcreateinstance_;
}
const ::proto::ContractUpdateTransactionBody&
SchedulableTransactionBody::_Internal::contractupdateinstance(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.contractupdateinstance_;
}
const ::proto::ContractDeleteTransactionBody&
SchedulableTransactionBody::_Internal::contractdeleteinstance(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.contractdeleteinstance_;
}
const ::proto::CryptoApproveAllowanceTransactionBody&
SchedulableTransactionBody::_Internal::cryptoapproveallowance(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.cryptoapproveallowance_;
}
const ::proto::CryptoDeleteAllowanceTransactionBody&
SchedulableTransactionBody::_Internal::cryptodeleteallowance(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.cryptodeleteallowance_;
}
const ::proto::CryptoCreateTransactionBody&
SchedulableTransactionBody::_Internal::cryptocreateaccount(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.cryptocreateaccount_;
}
const ::proto::CryptoDeleteTransactionBody&
SchedulableTransactionBody::_Internal::cryptodelete(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.cryptodelete_;
}
const ::proto::CryptoTransferTransactionBody&
SchedulableTransactionBody::_Internal::cryptotransfer(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.cryptotransfer_;
}
const ::proto::CryptoUpdateTransactionBody&
SchedulableTransactionBody::_Internal::cryptoupdateaccount(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.cryptoupdateaccount_;
}
const ::proto::FileAppendTransactionBody&
SchedulableTransactionBody::_Internal::fileappend(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.fileappend_;
}
const ::proto::FileCreateTransactionBody&
SchedulableTransactionBody::_Internal::filecreate(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.filecreate_;
}
const ::proto::FileDeleteTransactionBody&
SchedulableTransactionBody::_Internal::filedelete(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.filedelete_;
}
const ::proto::FileUpdateTransactionBody&
SchedulableTransactionBody::_Internal::fileupdate(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.fileupdate_;
}
const ::proto::SystemDeleteTransactionBody&
SchedulableTransactionBody::_Internal::systemdelete(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.systemdelete_;
}
const ::proto::SystemUndeleteTransactionBody&
SchedulableTransactionBody::_Internal::systemundelete(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.systemundelete_;
}
const ::proto::FreezeTransactionBody&
SchedulableTransactionBody::_Internal::freeze(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.freeze_;
}
const ::proto::ConsensusCreateTopicTransactionBody&
SchedulableTransactionBody::_Internal::consensuscreatetopic(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.consensuscreatetopic_;
}
const ::proto::ConsensusUpdateTopicTransactionBody&
SchedulableTransactionBody::_Internal::consensusupdatetopic(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.consensusupdatetopic_;
}
const ::proto::ConsensusDeleteTopicTransactionBody&
SchedulableTransactionBody::_Internal::consensusdeletetopic(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.consensusdeletetopic_;
}
const ::proto::ConsensusSubmitMessageTransactionBody&
SchedulableTransactionBody::_Internal::consensussubmitmessage(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.consensussubmitmessage_;
}
const ::proto::TokenCreateTransactionBody&
SchedulableTransactionBody::_Internal::tokencreation(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokencreation_;
}
const ::proto::TokenFreezeAccountTransactionBody&
SchedulableTransactionBody::_Internal::tokenfreeze(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenfreeze_;
}
const ::proto::TokenUnfreezeAccountTransactionBody&
SchedulableTransactionBody::_Internal::tokenunfreeze(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenunfreeze_;
}
const ::proto::TokenGrantKycTransactionBody&
SchedulableTransactionBody::_Internal::tokengrantkyc(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokengrantkyc_;
}
const ::proto::TokenRevokeKycTransactionBody&
SchedulableTransactionBody::_Internal::tokenrevokekyc(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenrevokekyc_;
}
const ::proto::TokenDeleteTransactionBody&
SchedulableTransactionBody::_Internal::tokendeletion(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokendeletion_;
}
const ::proto::TokenUpdateTransactionBody&
SchedulableTransactionBody::_Internal::tokenupdate(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenupdate_;
}
const ::proto::TokenMintTransactionBody&
SchedulableTransactionBody::_Internal::tokenmint(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenmint_;
}
const ::proto::TokenBurnTransactionBody&
SchedulableTransactionBody::_Internal::tokenburn(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenburn_;
}
const ::proto::TokenWipeAccountTransactionBody&
SchedulableTransactionBody::_Internal::tokenwipe(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenwipe_;
}
const ::proto::TokenAssociateTransactionBody&
SchedulableTransactionBody::_Internal::tokenassociate(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokenassociate_;
}
const ::proto::TokenDissociateTransactionBody&
SchedulableTransactionBody::_Internal::tokendissociate(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.tokendissociate_;
}
const ::proto::TokenFeeScheduleUpdateTransactionBody&
SchedulableTransactionBody::_Internal::token_fee_schedule_update(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.token_fee_schedule_update_;
}
const ::proto::TokenPauseTransactionBody&
SchedulableTransactionBody::_Internal::token_pause(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.token_pause_;
}
const ::proto::TokenUnpauseTransactionBody&
SchedulableTransactionBody::_Internal::token_unpause(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.token_unpause_;
}
const ::proto::ScheduleDeleteTransactionBody&
SchedulableTransactionBody::_Internal::scheduledelete(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.scheduledelete_;
}
const ::proto::UtilPrngTransactionBody&
SchedulableTransactionBody::_Internal::util_prng(const SchedulableTransactionBody* msg) {
  return *msg->_impl_.data_.util_prng_;
}
void SchedulableTransactionBody::set_allocated_contractcall(::proto::ContractCallTransactionBody* contractcall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (contractcall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractcall));
    if (message_arena != submessage_arena) {
      contractcall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractcall, submessage_arena);
    }
    set_has_contractcall();
    _impl_.data_.contractcall_ = contractcall;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.contractCall)
}
void SchedulableTransactionBody::clear_contractcall() {
  if (_internal_has_contractcall()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.contractcall_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_contractcreateinstance(::proto::ContractCreateTransactionBody* contractcreateinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (contractcreateinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractcreateinstance));
    if (message_arena != submessage_arena) {
      contractcreateinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractcreateinstance, submessage_arena);
    }
    set_has_contractcreateinstance();
    _impl_.data_.contractcreateinstance_ = contractcreateinstance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.contractCreateInstance)
}
void SchedulableTransactionBody::clear_contractcreateinstance() {
  if (_internal_has_contractcreateinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.contractcreateinstance_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_contractupdateinstance(::proto::ContractUpdateTransactionBody* contractupdateinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (contractupdateinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractupdateinstance));
    if (message_arena != submessage_arena) {
      contractupdateinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractupdateinstance, submessage_arena);
    }
    set_has_contractupdateinstance();
    _impl_.data_.contractupdateinstance_ = contractupdateinstance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.contractUpdateInstance)
}
void SchedulableTransactionBody::clear_contractupdateinstance() {
  if (_internal_has_contractupdateinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.contractupdateinstance_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_contractdeleteinstance(::proto::ContractDeleteTransactionBody* contractdeleteinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (contractdeleteinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractdeleteinstance));
    if (message_arena != submessage_arena) {
      contractdeleteinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractdeleteinstance, submessage_arena);
    }
    set_has_contractdeleteinstance();
    _impl_.data_.contractdeleteinstance_ = contractdeleteinstance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.contractDeleteInstance)
}
void SchedulableTransactionBody::clear_contractdeleteinstance() {
  if (_internal_has_contractdeleteinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.contractdeleteinstance_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_cryptoapproveallowance(::proto::CryptoApproveAllowanceTransactionBody* cryptoapproveallowance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cryptoapproveallowance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptoapproveallowance));
    if (message_arena != submessage_arena) {
      cryptoapproveallowance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptoapproveallowance, submessage_arena);
    }
    set_has_cryptoapproveallowance();
    _impl_.data_.cryptoapproveallowance_ = cryptoapproveallowance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.cryptoApproveAllowance)
}
void SchedulableTransactionBody::clear_cryptoapproveallowance() {
  if (_internal_has_cryptoapproveallowance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cryptoapproveallowance_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_cryptodeleteallowance(::proto::CryptoDeleteAllowanceTransactionBody* cryptodeleteallowance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cryptodeleteallowance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptodeleteallowance));
    if (message_arena != submessage_arena) {
      cryptodeleteallowance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptodeleteallowance, submessage_arena);
    }
    set_has_cryptodeleteallowance();
    _impl_.data_.cryptodeleteallowance_ = cryptodeleteallowance;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.cryptoDeleteAllowance)
}
void SchedulableTransactionBody::clear_cryptodeleteallowance() {
  if (_internal_has_cryptodeleteallowance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cryptodeleteallowance_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_cryptocreateaccount(::proto::CryptoCreateTransactionBody* cryptocreateaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cryptocreateaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptocreateaccount));
    if (message_arena != submessage_arena) {
      cryptocreateaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptocreateaccount, submessage_arena);
    }
    set_has_cryptocreateaccount();
    _impl_.data_.cryptocreateaccount_ = cryptocreateaccount;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.cryptoCreateAccount)
}
void SchedulableTransactionBody::clear_cryptocreateaccount() {
  if (_internal_has_cryptocreateaccount()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cryptocreateaccount_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_cryptodelete(::proto::CryptoDeleteTransactionBody* cryptodelete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cryptodelete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptodelete));
    if (message_arena != submessage_arena) {
      cryptodelete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptodelete, submessage_arena);
    }
    set_has_cryptodelete();
    _impl_.data_.cryptodelete_ = cryptodelete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.cryptoDelete)
}
void SchedulableTransactionBody::clear_cryptodelete() {
  if (_internal_has_cryptodelete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cryptodelete_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_cryptotransfer(::proto::CryptoTransferTransactionBody* cryptotransfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cryptotransfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptotransfer));
    if (message_arena != submessage_arena) {
      cryptotransfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptotransfer, submessage_arena);
    }
    set_has_cryptotransfer();
    _impl_.data_.cryptotransfer_ = cryptotransfer;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.cryptoTransfer)
}
void SchedulableTransactionBody::clear_cryptotransfer() {
  if (_internal_has_cryptotransfer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cryptotransfer_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_cryptoupdateaccount(::proto::CryptoUpdateTransactionBody* cryptoupdateaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cryptoupdateaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cryptoupdateaccount));
    if (message_arena != submessage_arena) {
      cryptoupdateaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cryptoupdateaccount, submessage_arena);
    }
    set_has_cryptoupdateaccount();
    _impl_.data_.cryptoupdateaccount_ = cryptoupdateaccount;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.cryptoUpdateAccount)
}
void SchedulableTransactionBody::clear_cryptoupdateaccount() {
  if (_internal_has_cryptoupdateaccount()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cryptoupdateaccount_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_fileappend(::proto::FileAppendTransactionBody* fileappend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (fileappend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileappend));
    if (message_arena != submessage_arena) {
      fileappend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileappend, submessage_arena);
    }
    set_has_fileappend();
    _impl_.data_.fileappend_ = fileappend;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.fileAppend)
}
void SchedulableTransactionBody::clear_fileappend() {
  if (_internal_has_fileappend()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.fileappend_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_filecreate(::proto::FileCreateTransactionBody* filecreate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (filecreate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filecreate));
    if (message_arena != submessage_arena) {
      filecreate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filecreate, submessage_arena);
    }
    set_has_filecreate();
    _impl_.data_.filecreate_ = filecreate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.fileCreate)
}
void SchedulableTransactionBody::clear_filecreate() {
  if (_internal_has_filecreate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.filecreate_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_filedelete(::proto::FileDeleteTransactionBody* filedelete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (filedelete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filedelete));
    if (message_arena != submessage_arena) {
      filedelete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filedelete, submessage_arena);
    }
    set_has_filedelete();
    _impl_.data_.filedelete_ = filedelete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.fileDelete)
}
void SchedulableTransactionBody::clear_filedelete() {
  if (_internal_has_filedelete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.filedelete_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_fileupdate(::proto::FileUpdateTransactionBody* fileupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (fileupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileupdate));
    if (message_arena != submessage_arena) {
      fileupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileupdate, submessage_arena);
    }
    set_has_fileupdate();
    _impl_.data_.fileupdate_ = fileupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.fileUpdate)
}
void SchedulableTransactionBody::clear_fileupdate() {
  if (_internal_has_fileupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.fileupdate_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_systemdelete(::proto::SystemDeleteTransactionBody* systemdelete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (systemdelete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemdelete));
    if (message_arena != submessage_arena) {
      systemdelete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemdelete, submessage_arena);
    }
    set_has_systemdelete();
    _impl_.data_.systemdelete_ = systemdelete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.systemDelete)
}
void SchedulableTransactionBody::clear_systemdelete() {
  if (_internal_has_systemdelete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.systemdelete_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_systemundelete(::proto::SystemUndeleteTransactionBody* systemundelete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (systemundelete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemundelete));
    if (message_arena != submessage_arena) {
      systemundelete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemundelete, submessage_arena);
    }
    set_has_systemundelete();
    _impl_.data_.systemundelete_ = systemundelete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.systemUndelete)
}
void SchedulableTransactionBody::clear_systemundelete() {
  if (_internal_has_systemundelete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.systemundelete_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_freeze(::proto::FreezeTransactionBody* freeze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (freeze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freeze));
    if (message_arena != submessage_arena) {
      freeze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeze, submessage_arena);
    }
    set_has_freeze();
    _impl_.data_.freeze_ = freeze;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.freeze)
}
void SchedulableTransactionBody::clear_freeze() {
  if (_internal_has_freeze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.freeze_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_consensuscreatetopic(::proto::ConsensusCreateTopicTransactionBody* consensuscreatetopic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (consensuscreatetopic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensuscreatetopic));
    if (message_arena != submessage_arena) {
      consensuscreatetopic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensuscreatetopic, submessage_arena);
    }
    set_has_consensuscreatetopic();
    _impl_.data_.consensuscreatetopic_ = consensuscreatetopic;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.consensusCreateTopic)
}
void SchedulableTransactionBody::clear_consensuscreatetopic() {
  if (_internal_has_consensuscreatetopic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.consensuscreatetopic_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_consensusupdatetopic(::proto::ConsensusUpdateTopicTransactionBody* consensusupdatetopic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (consensusupdatetopic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensusupdatetopic));
    if (message_arena != submessage_arena) {
      consensusupdatetopic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensusupdatetopic, submessage_arena);
    }
    set_has_consensusupdatetopic();
    _impl_.data_.consensusupdatetopic_ = consensusupdatetopic;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.consensusUpdateTopic)
}
void SchedulableTransactionBody::clear_consensusupdatetopic() {
  if (_internal_has_consensusupdatetopic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.consensusupdatetopic_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_consensusdeletetopic(::proto::ConsensusDeleteTopicTransactionBody* consensusdeletetopic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (consensusdeletetopic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensusdeletetopic));
    if (message_arena != submessage_arena) {
      consensusdeletetopic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensusdeletetopic, submessage_arena);
    }
    set_has_consensusdeletetopic();
    _impl_.data_.consensusdeletetopic_ = consensusdeletetopic;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.consensusDeleteTopic)
}
void SchedulableTransactionBody::clear_consensusdeletetopic() {
  if (_internal_has_consensusdeletetopic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.consensusdeletetopic_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_consensussubmitmessage(::proto::ConsensusSubmitMessageTransactionBody* consensussubmitmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (consensussubmitmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensussubmitmessage));
    if (message_arena != submessage_arena) {
      consensussubmitmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensussubmitmessage, submessage_arena);
    }
    set_has_consensussubmitmessage();
    _impl_.data_.consensussubmitmessage_ = consensussubmitmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.consensusSubmitMessage)
}
void SchedulableTransactionBody::clear_consensussubmitmessage() {
  if (_internal_has_consensussubmitmessage()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.consensussubmitmessage_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokencreation(::proto::TokenCreateTransactionBody* tokencreation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokencreation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokencreation));
    if (message_arena != submessage_arena) {
      tokencreation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokencreation, submessage_arena);
    }
    set_has_tokencreation();
    _impl_.data_.tokencreation_ = tokencreation;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenCreation)
}
void SchedulableTransactionBody::clear_tokencreation() {
  if (_internal_has_tokencreation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokencreation_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenfreeze(::proto::TokenFreezeAccountTransactionBody* tokenfreeze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenfreeze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenfreeze));
    if (message_arena != submessage_arena) {
      tokenfreeze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenfreeze, submessage_arena);
    }
    set_has_tokenfreeze();
    _impl_.data_.tokenfreeze_ = tokenfreeze;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenFreeze)
}
void SchedulableTransactionBody::clear_tokenfreeze() {
  if (_internal_has_tokenfreeze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenfreeze_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenunfreeze(::proto::TokenUnfreezeAccountTransactionBody* tokenunfreeze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenunfreeze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenunfreeze));
    if (message_arena != submessage_arena) {
      tokenunfreeze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenunfreeze, submessage_arena);
    }
    set_has_tokenunfreeze();
    _impl_.data_.tokenunfreeze_ = tokenunfreeze;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenUnfreeze)
}
void SchedulableTransactionBody::clear_tokenunfreeze() {
  if (_internal_has_tokenunfreeze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenunfreeze_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokengrantkyc(::proto::TokenGrantKycTransactionBody* tokengrantkyc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokengrantkyc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokengrantkyc));
    if (message_arena != submessage_arena) {
      tokengrantkyc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokengrantkyc, submessage_arena);
    }
    set_has_tokengrantkyc();
    _impl_.data_.tokengrantkyc_ = tokengrantkyc;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenGrantKyc)
}
void SchedulableTransactionBody::clear_tokengrantkyc() {
  if (_internal_has_tokengrantkyc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokengrantkyc_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenrevokekyc(::proto::TokenRevokeKycTransactionBody* tokenrevokekyc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenrevokekyc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenrevokekyc));
    if (message_arena != submessage_arena) {
      tokenrevokekyc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenrevokekyc, submessage_arena);
    }
    set_has_tokenrevokekyc();
    _impl_.data_.tokenrevokekyc_ = tokenrevokekyc;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenRevokeKyc)
}
void SchedulableTransactionBody::clear_tokenrevokekyc() {
  if (_internal_has_tokenrevokekyc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenrevokekyc_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokendeletion(::proto::TokenDeleteTransactionBody* tokendeletion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokendeletion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokendeletion));
    if (message_arena != submessage_arena) {
      tokendeletion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokendeletion, submessage_arena);
    }
    set_has_tokendeletion();
    _impl_.data_.tokendeletion_ = tokendeletion;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenDeletion)
}
void SchedulableTransactionBody::clear_tokendeletion() {
  if (_internal_has_tokendeletion()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokendeletion_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenupdate(::proto::TokenUpdateTransactionBody* tokenupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenupdate));
    if (message_arena != submessage_arena) {
      tokenupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenupdate, submessage_arena);
    }
    set_has_tokenupdate();
    _impl_.data_.tokenupdate_ = tokenupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenUpdate)
}
void SchedulableTransactionBody::clear_tokenupdate() {
  if (_internal_has_tokenupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenupdate_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenmint(::proto::TokenMintTransactionBody* tokenmint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenmint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenmint));
    if (message_arena != submessage_arena) {
      tokenmint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenmint, submessage_arena);
    }
    set_has_tokenmint();
    _impl_.data_.tokenmint_ = tokenmint;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenMint)
}
void SchedulableTransactionBody::clear_tokenmint() {
  if (_internal_has_tokenmint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenmint_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenburn(::proto::TokenBurnTransactionBody* tokenburn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenburn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenburn));
    if (message_arena != submessage_arena) {
      tokenburn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenburn, submessage_arena);
    }
    set_has_tokenburn();
    _impl_.data_.tokenburn_ = tokenburn;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenBurn)
}
void SchedulableTransactionBody::clear_tokenburn() {
  if (_internal_has_tokenburn()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenburn_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenwipe(::proto::TokenWipeAccountTransactionBody* tokenwipe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenwipe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenwipe));
    if (message_arena != submessage_arena) {
      tokenwipe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenwipe, submessage_arena);
    }
    set_has_tokenwipe();
    _impl_.data_.tokenwipe_ = tokenwipe;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenWipe)
}
void SchedulableTransactionBody::clear_tokenwipe() {
  if (_internal_has_tokenwipe()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenwipe_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokenassociate(::proto::TokenAssociateTransactionBody* tokenassociate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokenassociate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenassociate));
    if (message_arena != submessage_arena) {
      tokenassociate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenassociate, submessage_arena);
    }
    set_has_tokenassociate();
    _impl_.data_.tokenassociate_ = tokenassociate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenAssociate)
}
void SchedulableTransactionBody::clear_tokenassociate() {
  if (_internal_has_tokenassociate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokenassociate_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_tokendissociate(::proto::TokenDissociateTransactionBody* tokendissociate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (tokendissociate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokendissociate));
    if (message_arena != submessage_arena) {
      tokendissociate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokendissociate, submessage_arena);
    }
    set_has_tokendissociate();
    _impl_.data_.tokendissociate_ = tokendissociate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.tokenDissociate)
}
void SchedulableTransactionBody::clear_tokendissociate() {
  if (_internal_has_tokendissociate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.tokendissociate_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_token_fee_schedule_update(::proto::TokenFeeScheduleUpdateTransactionBody* token_fee_schedule_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (token_fee_schedule_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_fee_schedule_update));
    if (message_arena != submessage_arena) {
      token_fee_schedule_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_fee_schedule_update, submessage_arena);
    }
    set_has_token_fee_schedule_update();
    _impl_.data_.token_fee_schedule_update_ = token_fee_schedule_update;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.token_fee_schedule_update)
}
void SchedulableTransactionBody::clear_token_fee_schedule_update() {
  if (_internal_has_token_fee_schedule_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.token_fee_schedule_update_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_token_pause(::proto::TokenPauseTransactionBody* token_pause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (token_pause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_pause));
    if (message_arena != submessage_arena) {
      token_pause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_pause, submessage_arena);
    }
    set_has_token_pause();
    _impl_.data_.token_pause_ = token_pause;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.token_pause)
}
void SchedulableTransactionBody::clear_token_pause() {
  if (_internal_has_token_pause()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.token_pause_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_token_unpause(::proto::TokenUnpauseTransactionBody* token_unpause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (token_unpause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_unpause));
    if (message_arena != submessage_arena) {
      token_unpause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_unpause, submessage_arena);
    }
    set_has_token_unpause();
    _impl_.data_.token_unpause_ = token_unpause;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.token_unpause)
}
void SchedulableTransactionBody::clear_token_unpause() {
  if (_internal_has_token_unpause()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.token_unpause_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_scheduledelete(::proto::ScheduleDeleteTransactionBody* scheduledelete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (scheduledelete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledelete));
    if (message_arena != submessage_arena) {
      scheduledelete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduledelete, submessage_arena);
    }
    set_has_scheduledelete();
    _impl_.data_.scheduledelete_ = scheduledelete;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.scheduleDelete)
}
void SchedulableTransactionBody::clear_scheduledelete() {
  if (_internal_has_scheduledelete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.scheduledelete_;
    }
    clear_has_data();
  }
}
void SchedulableTransactionBody::set_allocated_util_prng(::proto::UtilPrngTransactionBody* util_prng) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (util_prng) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(util_prng));
    if (message_arena != submessage_arena) {
      util_prng = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, util_prng, submessage_arena);
    }
    set_has_util_prng();
    _impl_.data_.util_prng_ = util_prng;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SchedulableTransactionBody.util_prng)
}
void SchedulableTransactionBody::clear_util_prng() {
  if (_internal_has_util_prng()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.util_prng_;
    }
    clear_has_data();
  }
}
SchedulableTransactionBody::SchedulableTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SchedulableTransactionBody)
}
SchedulableTransactionBody::SchedulableTransactionBody(const SchedulableTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SchedulableTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.transactionfee_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.transactionfee_ = from._impl_.transactionfee_;
  clear_has_data();
  switch (from.data_case()) {
    case kContractCall: {
      _this->_internal_mutable_contractcall()->::proto::ContractCallTransactionBody::MergeFrom(
          from._internal_contractcall());
      break;
    }
    case kContractCreateInstance: {
      _this->_internal_mutable_contractcreateinstance()->::proto::ContractCreateTransactionBody::MergeFrom(
          from._internal_contractcreateinstance());
      break;
    }
    case kContractUpdateInstance: {
      _this->_internal_mutable_contractupdateinstance()->::proto::ContractUpdateTransactionBody::MergeFrom(
          from._internal_contractupdateinstance());
      break;
    }
    case kContractDeleteInstance: {
      _this->_internal_mutable_contractdeleteinstance()->::proto::ContractDeleteTransactionBody::MergeFrom(
          from._internal_contractdeleteinstance());
      break;
    }
    case kCryptoApproveAllowance: {
      _this->_internal_mutable_cryptoapproveallowance()->::proto::CryptoApproveAllowanceTransactionBody::MergeFrom(
          from._internal_cryptoapproveallowance());
      break;
    }
    case kCryptoDeleteAllowance: {
      _this->_internal_mutable_cryptodeleteallowance()->::proto::CryptoDeleteAllowanceTransactionBody::MergeFrom(
          from._internal_cryptodeleteallowance());
      break;
    }
    case kCryptoCreateAccount: {
      _this->_internal_mutable_cryptocreateaccount()->::proto::CryptoCreateTransactionBody::MergeFrom(
          from._internal_cryptocreateaccount());
      break;
    }
    case kCryptoDelete: {
      _this->_internal_mutable_cryptodelete()->::proto::CryptoDeleteTransactionBody::MergeFrom(
          from._internal_cryptodelete());
      break;
    }
    case kCryptoTransfer: {
      _this->_internal_mutable_cryptotransfer()->::proto::CryptoTransferTransactionBody::MergeFrom(
          from._internal_cryptotransfer());
      break;
    }
    case kCryptoUpdateAccount: {
      _this->_internal_mutable_cryptoupdateaccount()->::proto::CryptoUpdateTransactionBody::MergeFrom(
          from._internal_cryptoupdateaccount());
      break;
    }
    case kFileAppend: {
      _this->_internal_mutable_fileappend()->::proto::FileAppendTransactionBody::MergeFrom(
          from._internal_fileappend());
      break;
    }
    case kFileCreate: {
      _this->_internal_mutable_filecreate()->::proto::FileCreateTransactionBody::MergeFrom(
          from._internal_filecreate());
      break;
    }
    case kFileDelete: {
      _this->_internal_mutable_filedelete()->::proto::FileDeleteTransactionBody::MergeFrom(
          from._internal_filedelete());
      break;
    }
    case kFileUpdate: {
      _this->_internal_mutable_fileupdate()->::proto::FileUpdateTransactionBody::MergeFrom(
          from._internal_fileupdate());
      break;
    }
    case kSystemDelete: {
      _this->_internal_mutable_systemdelete()->::proto::SystemDeleteTransactionBody::MergeFrom(
          from._internal_systemdelete());
      break;
    }
    case kSystemUndelete: {
      _this->_internal_mutable_systemundelete()->::proto::SystemUndeleteTransactionBody::MergeFrom(
          from._internal_systemundelete());
      break;
    }
    case kFreeze: {
      _this->_internal_mutable_freeze()->::proto::FreezeTransactionBody::MergeFrom(
          from._internal_freeze());
      break;
    }
    case kConsensusCreateTopic: {
      _this->_internal_mutable_consensuscreatetopic()->::proto::ConsensusCreateTopicTransactionBody::MergeFrom(
          from._internal_consensuscreatetopic());
      break;
    }
    case kConsensusUpdateTopic: {
      _this->_internal_mutable_consensusupdatetopic()->::proto::ConsensusUpdateTopicTransactionBody::MergeFrom(
          from._internal_consensusupdatetopic());
      break;
    }
    case kConsensusDeleteTopic: {
      _this->_internal_mutable_consensusdeletetopic()->::proto::ConsensusDeleteTopicTransactionBody::MergeFrom(
          from._internal_consensusdeletetopic());
      break;
    }
    case kConsensusSubmitMessage: {
      _this->_internal_mutable_consensussubmitmessage()->::proto::ConsensusSubmitMessageTransactionBody::MergeFrom(
          from._internal_consensussubmitmessage());
      break;
    }
    case kTokenCreation: {
      _this->_internal_mutable_tokencreation()->::proto::TokenCreateTransactionBody::MergeFrom(
          from._internal_tokencreation());
      break;
    }
    case kTokenFreeze: {
      _this->_internal_mutable_tokenfreeze()->::proto::TokenFreezeAccountTransactionBody::MergeFrom(
          from._internal_tokenfreeze());
      break;
    }
    case kTokenUnfreeze: {
      _this->_internal_mutable_tokenunfreeze()->::proto::TokenUnfreezeAccountTransactionBody::MergeFrom(
          from._internal_tokenunfreeze());
      break;
    }
    case kTokenGrantKyc: {
      _this->_internal_mutable_tokengrantkyc()->::proto::TokenGrantKycTransactionBody::MergeFrom(
          from._internal_tokengrantkyc());
      break;
    }
    case kTokenRevokeKyc: {
      _this->_internal_mutable_tokenrevokekyc()->::proto::TokenRevokeKycTransactionBody::MergeFrom(
          from._internal_tokenrevokekyc());
      break;
    }
    case kTokenDeletion: {
      _this->_internal_mutable_tokendeletion()->::proto::TokenDeleteTransactionBody::MergeFrom(
          from._internal_tokendeletion());
      break;
    }
    case kTokenUpdate: {
      _this->_internal_mutable_tokenupdate()->::proto::TokenUpdateTransactionBody::MergeFrom(
          from._internal_tokenupdate());
      break;
    }
    case kTokenMint: {
      _this->_internal_mutable_tokenmint()->::proto::TokenMintTransactionBody::MergeFrom(
          from._internal_tokenmint());
      break;
    }
    case kTokenBurn: {
      _this->_internal_mutable_tokenburn()->::proto::TokenBurnTransactionBody::MergeFrom(
          from._internal_tokenburn());
      break;
    }
    case kTokenWipe: {
      _this->_internal_mutable_tokenwipe()->::proto::TokenWipeAccountTransactionBody::MergeFrom(
          from._internal_tokenwipe());
      break;
    }
    case kTokenAssociate: {
      _this->_internal_mutable_tokenassociate()->::proto::TokenAssociateTransactionBody::MergeFrom(
          from._internal_tokenassociate());
      break;
    }
    case kTokenDissociate: {
      _this->_internal_mutable_tokendissociate()->::proto::TokenDissociateTransactionBody::MergeFrom(
          from._internal_tokendissociate());
      break;
    }
    case kTokenFeeScheduleUpdate: {
      _this->_internal_mutable_token_fee_schedule_update()->::proto::TokenFeeScheduleUpdateTransactionBody::MergeFrom(
          from._internal_token_fee_schedule_update());
      break;
    }
    case kTokenPause: {
      _this->_internal_mutable_token_pause()->::proto::TokenPauseTransactionBody::MergeFrom(
          from._internal_token_pause());
      break;
    }
    case kTokenUnpause: {
      _this->_internal_mutable_token_unpause()->::proto::TokenUnpauseTransactionBody::MergeFrom(
          from._internal_token_unpause());
      break;
    }
    case kScheduleDelete: {
      _this->_internal_mutable_scheduledelete()->::proto::ScheduleDeleteTransactionBody::MergeFrom(
          from._internal_scheduledelete());
      break;
    }
    case kUtilPrng: {
      _this->_internal_mutable_util_prng()->::proto::UtilPrngTransactionBody::MergeFrom(
          from._internal_util_prng());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SchedulableTransactionBody)
}

inline void SchedulableTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memo_){}
    , decltype(_impl_.transactionfee_){uint64_t{0u}}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data();
}

SchedulableTransactionBody::~SchedulableTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.SchedulableTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SchedulableTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.memo_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void SchedulableTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchedulableTransactionBody::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:proto.SchedulableTransactionBody)
  switch (data_case()) {
    case kContractCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.contractcall_;
      }
      break;
    }
    case kContractCreateInstance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.contractcreateinstance_;
      }
      break;
    }
    case kContractUpdateInstance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.contractupdateinstance_;
      }
      break;
    }
    case kContractDeleteInstance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.contractdeleteinstance_;
      }
      break;
    }
    case kCryptoApproveAllowance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cryptoapproveallowance_;
      }
      break;
    }
    case kCryptoDeleteAllowance: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cryptodeleteallowance_;
      }
      break;
    }
    case kCryptoCreateAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cryptocreateaccount_;
      }
      break;
    }
    case kCryptoDelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cryptodelete_;
      }
      break;
    }
    case kCryptoTransfer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cryptotransfer_;
      }
      break;
    }
    case kCryptoUpdateAccount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cryptoupdateaccount_;
      }
      break;
    }
    case kFileAppend: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.fileappend_;
      }
      break;
    }
    case kFileCreate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.filecreate_;
      }
      break;
    }
    case kFileDelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.filedelete_;
      }
      break;
    }
    case kFileUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.fileupdate_;
      }
      break;
    }
    case kSystemDelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.systemdelete_;
      }
      break;
    }
    case kSystemUndelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.systemundelete_;
      }
      break;
    }
    case kFreeze: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.freeze_;
      }
      break;
    }
    case kConsensusCreateTopic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.consensuscreatetopic_;
      }
      break;
    }
    case kConsensusUpdateTopic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.consensusupdatetopic_;
      }
      break;
    }
    case kConsensusDeleteTopic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.consensusdeletetopic_;
      }
      break;
    }
    case kConsensusSubmitMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.consensussubmitmessage_;
      }
      break;
    }
    case kTokenCreation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokencreation_;
      }
      break;
    }
    case kTokenFreeze: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenfreeze_;
      }
      break;
    }
    case kTokenUnfreeze: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenunfreeze_;
      }
      break;
    }
    case kTokenGrantKyc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokengrantkyc_;
      }
      break;
    }
    case kTokenRevokeKyc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenrevokekyc_;
      }
      break;
    }
    case kTokenDeletion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokendeletion_;
      }
      break;
    }
    case kTokenUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenupdate_;
      }
      break;
    }
    case kTokenMint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenmint_;
      }
      break;
    }
    case kTokenBurn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenburn_;
      }
      break;
    }
    case kTokenWipe: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenwipe_;
      }
      break;
    }
    case kTokenAssociate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokenassociate_;
      }
      break;
    }
    case kTokenDissociate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.tokendissociate_;
      }
      break;
    }
    case kTokenFeeScheduleUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.token_fee_schedule_update_;
      }
      break;
    }
    case kTokenPause: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.token_pause_;
      }
      break;
    }
    case kTokenUnpause: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.token_unpause_;
      }
      break;
    }
    case kScheduleDelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.scheduledelete_;
      }
      break;
    }
    case kUtilPrng: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.util_prng_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void SchedulableTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SchedulableTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memo_.ClearToEmpty();
  _impl_.transactionfee_ = uint64_t{0u};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedulableTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 transactionFee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transactionfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SchedulableTransactionBody.memo"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractCallTransactionBody contractCall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractcall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractCreateTransactionBody contractCreateInstance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractcreateinstance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractUpdateTransactionBody contractUpdateInstance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractupdateinstance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractDeleteTransactionBody contractDeleteInstance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractdeleteinstance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoCreateTransactionBody cryptoCreateAccount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptocreateaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoDeleteTransactionBody cryptoDelete = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptodelete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoTransferTransactionBody cryptoTransfer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptotransfer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoUpdateTransactionBody cryptoUpdateAccount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptoupdateaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileAppendTransactionBody fileAppend = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileappend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileCreateTransactionBody fileCreate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filecreate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileDeleteTransactionBody fileDelete = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_filedelete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FileUpdateTransactionBody fileUpdate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SystemDeleteTransactionBody systemDelete = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemdelete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SystemUndeleteTransactionBody systemUndelete = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemundelete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.FreezeTransactionBody freeze = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeze(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusCreateTopicTransactionBody consensusCreateTopic = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensuscreatetopic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusUpdateTopicTransactionBody consensusUpdateTopic = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensusupdatetopic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusDeleteTopicTransactionBody consensusDeleteTopic = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensusdeletetopic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ConsensusSubmitMessageTransactionBody consensusSubmitMessage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensussubmitmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenCreateTransactionBody tokenCreation = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokencreation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenFreezeAccountTransactionBody tokenFreeze = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenfreeze(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenUnfreezeAccountTransactionBody tokenUnfreeze = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenunfreeze(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenGrantKycTransactionBody tokenGrantKyc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokengrantkyc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenRevokeKycTransactionBody tokenRevokeKyc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenrevokekyc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenDeleteTransactionBody tokenDeletion = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokendeletion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenUpdateTransactionBody tokenUpdate = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenMintTransactionBody tokenMint = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenmint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenBurnTransactionBody tokenBurn = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenburn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenWipeAccountTransactionBody tokenWipe = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenwipe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenAssociateTransactionBody tokenAssociate = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenassociate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenDissociateTransactionBody tokenDissociate = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokendissociate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ScheduleDeleteTransactionBody scheduleDelete = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduledelete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenPauseTransactionBody token_pause = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_pause(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenUnpauseTransactionBody token_unpause = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_unpause(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoApproveAllowanceTransactionBody cryptoApproveAllowance = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptoapproveallowance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CryptoDeleteAllowanceTransactionBody cryptoDeleteAllowance = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cryptodeleteallowance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenFeeScheduleUpdateTransactionBody token_fee_schedule_update = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_fee_schedule_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.UtilPrngTransactionBody util_prng = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_prng(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchedulableTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SchedulableTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 transactionFee = 1;
  if (this->_internal_transactionfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_transactionfee(), target);
  }

  // string memo = 2;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SchedulableTransactionBody.memo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_memo(), target);
  }

  // .proto.ContractCallTransactionBody contractCall = 3;
  if (_internal_has_contractcall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contractcall(this),
        _Internal::contractcall(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractCreateTransactionBody contractCreateInstance = 4;
  if (_internal_has_contractcreateinstance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contractcreateinstance(this),
        _Internal::contractcreateinstance(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractUpdateTransactionBody contractUpdateInstance = 5;
  if (_internal_has_contractupdateinstance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::contractupdateinstance(this),
        _Internal::contractupdateinstance(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractDeleteTransactionBody contractDeleteInstance = 6;
  if (_internal_has_contractdeleteinstance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::contractdeleteinstance(this),
        _Internal::contractdeleteinstance(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoCreateTransactionBody cryptoCreateAccount = 7;
  if (_internal_has_cryptocreateaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cryptocreateaccount(this),
        _Internal::cryptocreateaccount(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoDeleteTransactionBody cryptoDelete = 8;
  if (_internal_has_cryptodelete()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::cryptodelete(this),
        _Internal::cryptodelete(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoTransferTransactionBody cryptoTransfer = 9;
  if (_internal_has_cryptotransfer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cryptotransfer(this),
        _Internal::cryptotransfer(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoUpdateTransactionBody cryptoUpdateAccount = 10;
  if (_internal_has_cryptoupdateaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cryptoupdateaccount(this),
        _Internal::cryptoupdateaccount(this).GetCachedSize(), target, stream);
  }

  // .proto.FileAppendTransactionBody fileAppend = 11;
  if (_internal_has_fileappend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::fileappend(this),
        _Internal::fileappend(this).GetCachedSize(), target, stream);
  }

  // .proto.FileCreateTransactionBody fileCreate = 12;
  if (_internal_has_filecreate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::filecreate(this),
        _Internal::filecreate(this).GetCachedSize(), target, stream);
  }

  // .proto.FileDeleteTransactionBody fileDelete = 13;
  if (_internal_has_filedelete()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::filedelete(this),
        _Internal::filedelete(this).GetCachedSize(), target, stream);
  }

  // .proto.FileUpdateTransactionBody fileUpdate = 14;
  if (_internal_has_fileupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::fileupdate(this),
        _Internal::fileupdate(this).GetCachedSize(), target, stream);
  }

  // .proto.SystemDeleteTransactionBody systemDelete = 15;
  if (_internal_has_systemdelete()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::systemdelete(this),
        _Internal::systemdelete(this).GetCachedSize(), target, stream);
  }

  // .proto.SystemUndeleteTransactionBody systemUndelete = 16;
  if (_internal_has_systemundelete()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::systemundelete(this),
        _Internal::systemundelete(this).GetCachedSize(), target, stream);
  }

  // .proto.FreezeTransactionBody freeze = 17;
  if (_internal_has_freeze()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::freeze(this),
        _Internal::freeze(this).GetCachedSize(), target, stream);
  }

  // .proto.ConsensusCreateTopicTransactionBody consensusCreateTopic = 18;
  if (_internal_has_consensuscreatetopic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::consensuscreatetopic(this),
        _Internal::consensuscreatetopic(this).GetCachedSize(), target, stream);
  }

  // .proto.ConsensusUpdateTopicTransactionBody consensusUpdateTopic = 19;
  if (_internal_has_consensusupdatetopic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::consensusupdatetopic(this),
        _Internal::consensusupdatetopic(this).GetCachedSize(), target, stream);
  }

  // .proto.ConsensusDeleteTopicTransactionBody consensusDeleteTopic = 20;
  if (_internal_has_consensusdeletetopic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::consensusdeletetopic(this),
        _Internal::consensusdeletetopic(this).GetCachedSize(), target, stream);
  }

  // .proto.ConsensusSubmitMessageTransactionBody consensusSubmitMessage = 21;
  if (_internal_has_consensussubmitmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::consensussubmitmessage(this),
        _Internal::consensussubmitmessage(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenCreateTransactionBody tokenCreation = 22;
  if (_internal_has_tokencreation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tokencreation(this),
        _Internal::tokencreation(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenFreezeAccountTransactionBody tokenFreeze = 23;
  if (_internal_has_tokenfreeze()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::tokenfreeze(this),
        _Internal::tokenfreeze(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenUnfreezeAccountTransactionBody tokenUnfreeze = 24;
  if (_internal_has_tokenunfreeze()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::tokenunfreeze(this),
        _Internal::tokenunfreeze(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenGrantKycTransactionBody tokenGrantKyc = 25;
  if (_internal_has_tokengrantkyc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::tokengrantkyc(this),
        _Internal::tokengrantkyc(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenRevokeKycTransactionBody tokenRevokeKyc = 26;
  if (_internal_has_tokenrevokekyc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::tokenrevokekyc(this),
        _Internal::tokenrevokekyc(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenDeleteTransactionBody tokenDeletion = 27;
  if (_internal_has_tokendeletion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::tokendeletion(this),
        _Internal::tokendeletion(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenUpdateTransactionBody tokenUpdate = 28;
  if (_internal_has_tokenupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::tokenupdate(this),
        _Internal::tokenupdate(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenMintTransactionBody tokenMint = 29;
  if (_internal_has_tokenmint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::tokenmint(this),
        _Internal::tokenmint(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenBurnTransactionBody tokenBurn = 30;
  if (_internal_has_tokenburn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::tokenburn(this),
        _Internal::tokenburn(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenWipeAccountTransactionBody tokenWipe = 31;
  if (_internal_has_tokenwipe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::tokenwipe(this),
        _Internal::tokenwipe(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenAssociateTransactionBody tokenAssociate = 32;
  if (_internal_has_tokenassociate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::tokenassociate(this),
        _Internal::tokenassociate(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenDissociateTransactionBody tokenDissociate = 33;
  if (_internal_has_tokendissociate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::tokendissociate(this),
        _Internal::tokendissociate(this).GetCachedSize(), target, stream);
  }

  // .proto.ScheduleDeleteTransactionBody scheduleDelete = 34;
  if (_internal_has_scheduledelete()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::scheduledelete(this),
        _Internal::scheduledelete(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenPauseTransactionBody token_pause = 35;
  if (_internal_has_token_pause()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::token_pause(this),
        _Internal::token_pause(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenUnpauseTransactionBody token_unpause = 36;
  if (_internal_has_token_unpause()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::token_unpause(this),
        _Internal::token_unpause(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoApproveAllowanceTransactionBody cryptoApproveAllowance = 37;
  if (_internal_has_cryptoapproveallowance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::cryptoapproveallowance(this),
        _Internal::cryptoapproveallowance(this).GetCachedSize(), target, stream);
  }

  // .proto.CryptoDeleteAllowanceTransactionBody cryptoDeleteAllowance = 38;
  if (_internal_has_cryptodeleteallowance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::cryptodeleteallowance(this),
        _Internal::cryptodeleteallowance(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenFeeScheduleUpdateTransactionBody token_fee_schedule_update = 39;
  if (_internal_has_token_fee_schedule_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::token_fee_schedule_update(this),
        _Internal::token_fee_schedule_update(this).GetCachedSize(), target, stream);
  }

  // .proto.UtilPrngTransactionBody util_prng = 40;
  if (_internal_has_util_prng()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::util_prng(this),
        _Internal::util_prng(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SchedulableTransactionBody)
  return target;
}

size_t SchedulableTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SchedulableTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 2;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 transactionFee = 1;
  if (this->_internal_transactionfee() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transactionfee());
  }

  switch (data_case()) {
    // .proto.ContractCallTransactionBody contractCall = 3;
    case kContractCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.contractcall_);
      break;
    }
    // .proto.ContractCreateTransactionBody contractCreateInstance = 4;
    case kContractCreateInstance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.contractcreateinstance_);
      break;
    }
    // .proto.ContractUpdateTransactionBody contractUpdateInstance = 5;
    case kContractUpdateInstance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.contractupdateinstance_);
      break;
    }
    // .proto.ContractDeleteTransactionBody contractDeleteInstance = 6;
    case kContractDeleteInstance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.contractdeleteinstance_);
      break;
    }
    // .proto.CryptoApproveAllowanceTransactionBody cryptoApproveAllowance = 37;
    case kCryptoApproveAllowance: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cryptoapproveallowance_);
      break;
    }
    // .proto.CryptoDeleteAllowanceTransactionBody cryptoDeleteAllowance = 38;
    case kCryptoDeleteAllowance: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cryptodeleteallowance_);
      break;
    }
    // .proto.CryptoCreateTransactionBody cryptoCreateAccount = 7;
    case kCryptoCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cryptocreateaccount_);
      break;
    }
    // .proto.CryptoDeleteTransactionBody cryptoDelete = 8;
    case kCryptoDelete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cryptodelete_);
      break;
    }
    // .proto.CryptoTransferTransactionBody cryptoTransfer = 9;
    case kCryptoTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cryptotransfer_);
      break;
    }
    // .proto.CryptoUpdateTransactionBody cryptoUpdateAccount = 10;
    case kCryptoUpdateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cryptoupdateaccount_);
      break;
    }
    // .proto.FileAppendTransactionBody fileAppend = 11;
    case kFileAppend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.fileappend_);
      break;
    }
    // .proto.FileCreateTransactionBody fileCreate = 12;
    case kFileCreate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.filecreate_);
      break;
    }
    // .proto.FileDeleteTransactionBody fileDelete = 13;
    case kFileDelete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.filedelete_);
      break;
    }
    // .proto.FileUpdateTransactionBody fileUpdate = 14;
    case kFileUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.fileupdate_);
      break;
    }
    // .proto.SystemDeleteTransactionBody systemDelete = 15;
    case kSystemDelete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.systemdelete_);
      break;
    }
    // .proto.SystemUndeleteTransactionBody systemUndelete = 16;
    case kSystemUndelete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.systemundelete_);
      break;
    }
    // .proto.FreezeTransactionBody freeze = 17;
    case kFreeze: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.freeze_);
      break;
    }
    // .proto.ConsensusCreateTopicTransactionBody consensusCreateTopic = 18;
    case kConsensusCreateTopic: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.consensuscreatetopic_);
      break;
    }
    // .proto.ConsensusUpdateTopicTransactionBody consensusUpdateTopic = 19;
    case kConsensusUpdateTopic: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.consensusupdatetopic_);
      break;
    }
    // .proto.ConsensusDeleteTopicTransactionBody consensusDeleteTopic = 20;
    case kConsensusDeleteTopic: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.consensusdeletetopic_);
      break;
    }
    // .proto.ConsensusSubmitMessageTransactionBody consensusSubmitMessage = 21;
    case kConsensusSubmitMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.consensussubmitmessage_);
      break;
    }
    // .proto.TokenCreateTransactionBody tokenCreation = 22;
    case kTokenCreation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokencreation_);
      break;
    }
    // .proto.TokenFreezeAccountTransactionBody tokenFreeze = 23;
    case kTokenFreeze: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenfreeze_);
      break;
    }
    // .proto.TokenUnfreezeAccountTransactionBody tokenUnfreeze = 24;
    case kTokenUnfreeze: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenunfreeze_);
      break;
    }
    // .proto.TokenGrantKycTransactionBody tokenGrantKyc = 25;
    case kTokenGrantKyc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokengrantkyc_);
      break;
    }
    // .proto.TokenRevokeKycTransactionBody tokenRevokeKyc = 26;
    case kTokenRevokeKyc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenrevokekyc_);
      break;
    }
    // .proto.TokenDeleteTransactionBody tokenDeletion = 27;
    case kTokenDeletion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokendeletion_);
      break;
    }
    // .proto.TokenUpdateTransactionBody tokenUpdate = 28;
    case kTokenUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenupdate_);
      break;
    }
    // .proto.TokenMintTransactionBody tokenMint = 29;
    case kTokenMint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenmint_);
      break;
    }
    // .proto.TokenBurnTransactionBody tokenBurn = 30;
    case kTokenBurn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenburn_);
      break;
    }
    // .proto.TokenWipeAccountTransactionBody tokenWipe = 31;
    case kTokenWipe: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenwipe_);
      break;
    }
    // .proto.TokenAssociateTransactionBody tokenAssociate = 32;
    case kTokenAssociate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokenassociate_);
      break;
    }
    // .proto.TokenDissociateTransactionBody tokenDissociate = 33;
    case kTokenDissociate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.tokendissociate_);
      break;
    }
    // .proto.TokenFeeScheduleUpdateTransactionBody token_fee_schedule_update = 39;
    case kTokenFeeScheduleUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.token_fee_schedule_update_);
      break;
    }
    // .proto.TokenPauseTransactionBody token_pause = 35;
    case kTokenPause: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.token_pause_);
      break;
    }
    // .proto.TokenUnpauseTransactionBody token_unpause = 36;
    case kTokenUnpause: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.token_unpause_);
      break;
    }
    // .proto.ScheduleDeleteTransactionBody scheduleDelete = 34;
    case kScheduleDelete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.scheduledelete_);
      break;
    }
    // .proto.UtilPrngTransactionBody util_prng = 40;
    case kUtilPrng: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.util_prng_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchedulableTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SchedulableTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchedulableTransactionBody::GetClassData() const { return &_class_data_; }


void SchedulableTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SchedulableTransactionBody*>(&to_msg);
  auto& from = static_cast<const SchedulableTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SchedulableTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (from._internal_transactionfee() != 0) {
    _this->_internal_set_transactionfee(from._internal_transactionfee());
  }
  switch (from.data_case()) {
    case kContractCall: {
      _this->_internal_mutable_contractcall()->::proto::ContractCallTransactionBody::MergeFrom(
          from._internal_contractcall());
      break;
    }
    case kContractCreateInstance: {
      _this->_internal_mutable_contractcreateinstance()->::proto::ContractCreateTransactionBody::MergeFrom(
          from._internal_contractcreateinstance());
      break;
    }
    case kContractUpdateInstance: {
      _this->_internal_mutable_contractupdateinstance()->::proto::ContractUpdateTransactionBody::MergeFrom(
          from._internal_contractupdateinstance());
      break;
    }
    case kContractDeleteInstance: {
      _this->_internal_mutable_contractdeleteinstance()->::proto::ContractDeleteTransactionBody::MergeFrom(
          from._internal_contractdeleteinstance());
      break;
    }
    case kCryptoApproveAllowance: {
      _this->_internal_mutable_cryptoapproveallowance()->::proto::CryptoApproveAllowanceTransactionBody::MergeFrom(
          from._internal_cryptoapproveallowance());
      break;
    }
    case kCryptoDeleteAllowance: {
      _this->_internal_mutable_cryptodeleteallowance()->::proto::CryptoDeleteAllowanceTransactionBody::MergeFrom(
          from._internal_cryptodeleteallowance());
      break;
    }
    case kCryptoCreateAccount: {
      _this->_internal_mutable_cryptocreateaccount()->::proto::CryptoCreateTransactionBody::MergeFrom(
          from._internal_cryptocreateaccount());
      break;
    }
    case kCryptoDelete: {
      _this->_internal_mutable_cryptodelete()->::proto::CryptoDeleteTransactionBody::MergeFrom(
          from._internal_cryptodelete());
      break;
    }
    case kCryptoTransfer: {
      _this->_internal_mutable_cryptotransfer()->::proto::CryptoTransferTransactionBody::MergeFrom(
          from._internal_cryptotransfer());
      break;
    }
    case kCryptoUpdateAccount: {
      _this->_internal_mutable_cryptoupdateaccount()->::proto::CryptoUpdateTransactionBody::MergeFrom(
          from._internal_cryptoupdateaccount());
      break;
    }
    case kFileAppend: {
      _this->_internal_mutable_fileappend()->::proto::FileAppendTransactionBody::MergeFrom(
          from._internal_fileappend());
      break;
    }
    case kFileCreate: {
      _this->_internal_mutable_filecreate()->::proto::FileCreateTransactionBody::MergeFrom(
          from._internal_filecreate());
      break;
    }
    case kFileDelete: {
      _this->_internal_mutable_filedelete()->::proto::FileDeleteTransactionBody::MergeFrom(
          from._internal_filedelete());
      break;
    }
    case kFileUpdate: {
      _this->_internal_mutable_fileupdate()->::proto::FileUpdateTransactionBody::MergeFrom(
          from._internal_fileupdate());
      break;
    }
    case kSystemDelete: {
      _this->_internal_mutable_systemdelete()->::proto::SystemDeleteTransactionBody::MergeFrom(
          from._internal_systemdelete());
      break;
    }
    case kSystemUndelete: {
      _this->_internal_mutable_systemundelete()->::proto::SystemUndeleteTransactionBody::MergeFrom(
          from._internal_systemundelete());
      break;
    }
    case kFreeze: {
      _this->_internal_mutable_freeze()->::proto::FreezeTransactionBody::MergeFrom(
          from._internal_freeze());
      break;
    }
    case kConsensusCreateTopic: {
      _this->_internal_mutable_consensuscreatetopic()->::proto::ConsensusCreateTopicTransactionBody::MergeFrom(
          from._internal_consensuscreatetopic());
      break;
    }
    case kConsensusUpdateTopic: {
      _this->_internal_mutable_consensusupdatetopic()->::proto::ConsensusUpdateTopicTransactionBody::MergeFrom(
          from._internal_consensusupdatetopic());
      break;
    }
    case kConsensusDeleteTopic: {
      _this->_internal_mutable_consensusdeletetopic()->::proto::ConsensusDeleteTopicTransactionBody::MergeFrom(
          from._internal_consensusdeletetopic());
      break;
    }
    case kConsensusSubmitMessage: {
      _this->_internal_mutable_consensussubmitmessage()->::proto::ConsensusSubmitMessageTransactionBody::MergeFrom(
          from._internal_consensussubmitmessage());
      break;
    }
    case kTokenCreation: {
      _this->_internal_mutable_tokencreation()->::proto::TokenCreateTransactionBody::MergeFrom(
          from._internal_tokencreation());
      break;
    }
    case kTokenFreeze: {
      _this->_internal_mutable_tokenfreeze()->::proto::TokenFreezeAccountTransactionBody::MergeFrom(
          from._internal_tokenfreeze());
      break;
    }
    case kTokenUnfreeze: {
      _this->_internal_mutable_tokenunfreeze()->::proto::TokenUnfreezeAccountTransactionBody::MergeFrom(
          from._internal_tokenunfreeze());
      break;
    }
    case kTokenGrantKyc: {
      _this->_internal_mutable_tokengrantkyc()->::proto::TokenGrantKycTransactionBody::MergeFrom(
          from._internal_tokengrantkyc());
      break;
    }
    case kTokenRevokeKyc: {
      _this->_internal_mutable_tokenrevokekyc()->::proto::TokenRevokeKycTransactionBody::MergeFrom(
          from._internal_tokenrevokekyc());
      break;
    }
    case kTokenDeletion: {
      _this->_internal_mutable_tokendeletion()->::proto::TokenDeleteTransactionBody::MergeFrom(
          from._internal_tokendeletion());
      break;
    }
    case kTokenUpdate: {
      _this->_internal_mutable_tokenupdate()->::proto::TokenUpdateTransactionBody::MergeFrom(
          from._internal_tokenupdate());
      break;
    }
    case kTokenMint: {
      _this->_internal_mutable_tokenmint()->::proto::TokenMintTransactionBody::MergeFrom(
          from._internal_tokenmint());
      break;
    }
    case kTokenBurn: {
      _this->_internal_mutable_tokenburn()->::proto::TokenBurnTransactionBody::MergeFrom(
          from._internal_tokenburn());
      break;
    }
    case kTokenWipe: {
      _this->_internal_mutable_tokenwipe()->::proto::TokenWipeAccountTransactionBody::MergeFrom(
          from._internal_tokenwipe());
      break;
    }
    case kTokenAssociate: {
      _this->_internal_mutable_tokenassociate()->::proto::TokenAssociateTransactionBody::MergeFrom(
          from._internal_tokenassociate());
      break;
    }
    case kTokenDissociate: {
      _this->_internal_mutable_tokendissociate()->::proto::TokenDissociateTransactionBody::MergeFrom(
          from._internal_tokendissociate());
      break;
    }
    case kTokenFeeScheduleUpdate: {
      _this->_internal_mutable_token_fee_schedule_update()->::proto::TokenFeeScheduleUpdateTransactionBody::MergeFrom(
          from._internal_token_fee_schedule_update());
      break;
    }
    case kTokenPause: {
      _this->_internal_mutable_token_pause()->::proto::TokenPauseTransactionBody::MergeFrom(
          from._internal_token_pause());
      break;
    }
    case kTokenUnpause: {
      _this->_internal_mutable_token_unpause()->::proto::TokenUnpauseTransactionBody::MergeFrom(
          from._internal_token_unpause());
      break;
    }
    case kScheduleDelete: {
      _this->_internal_mutable_scheduledelete()->::proto::ScheduleDeleteTransactionBody::MergeFrom(
          from._internal_scheduledelete());
      break;
    }
    case kUtilPrng: {
      _this->_internal_mutable_util_prng()->::proto::UtilPrngTransactionBody::MergeFrom(
          from._internal_util_prng());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchedulableTransactionBody::CopyFrom(const SchedulableTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SchedulableTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulableTransactionBody::IsInitialized() const {
  return true;
}

void SchedulableTransactionBody::InternalSwap(SchedulableTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  swap(_impl_.transactionfee_, other->_impl_.transactionfee_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulableTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_schedulable_5ftransaction_5fbody_2eproto_getter, &descriptor_table_schedulable_5ftransaction_5fbody_2eproto_once,
      file_level_metadata_schedulable_5ftransaction_5fbody_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::SchedulableTransactionBody*
Arena::CreateMaybeMessage< ::proto::SchedulableTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SchedulableTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

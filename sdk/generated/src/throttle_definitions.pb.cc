// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: throttle_definitions.proto

#include "throttle_definitions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ThrottleGroup::ThrottleGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operations_)*/{}
  , /*decltype(_impl_._operations_cached_byte_size_)*/{0}
  , /*decltype(_impl_.milliopspersec_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThrottleGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThrottleGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThrottleGroupDefaultTypeInternal() {}
  union {
    ThrottleGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThrottleGroupDefaultTypeInternal _ThrottleGroup_default_instance_;
PROTOBUF_CONSTEXPR ThrottleBucket::ThrottleBucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.throttlegroups_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.burstperiodms_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThrottleBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThrottleBucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThrottleBucketDefaultTypeInternal() {}
  union {
    ThrottleBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThrottleBucketDefaultTypeInternal _ThrottleBucket_default_instance_;
PROTOBUF_CONSTEXPR ThrottleDefinitions::ThrottleDefinitions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.throttlebuckets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThrottleDefinitionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThrottleDefinitionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThrottleDefinitionsDefaultTypeInternal() {}
  union {
    ThrottleDefinitions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThrottleDefinitionsDefaultTypeInternal _ThrottleDefinitions_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_throttle_5fdefinitions_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_throttle_5fdefinitions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_throttle_5fdefinitions_2eproto = nullptr;

const uint32_t TableStruct_throttle_5fdefinitions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleGroup, _impl_.operations_),
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleGroup, _impl_.milliopspersec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleBucket, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleBucket, _impl_.burstperiodms_),
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleBucket, _impl_.throttlegroups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleDefinitions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ThrottleDefinitions, _impl_.throttlebuckets_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ThrottleGroup)},
  { 8, -1, -1, sizeof(::proto::ThrottleBucket)},
  { 17, -1, -1, sizeof(::proto::ThrottleDefinitions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ThrottleGroup_default_instance_._instance,
  &::proto::_ThrottleBucket_default_instance_._instance,
  &::proto::_ThrottleDefinitions_default_instance_._instance,
};

const char descriptor_table_protodef_throttle_5fdefinitions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032throttle_definitions.proto\022\005proto\032\021bas"
  "ic_types.proto\"W\n\rThrottleGroup\022.\n\nopera"
  "tions\030\001 \003(\0162\032.proto.HederaFunctionality\022"
  "\026\n\016milliOpsPerSec\030\002 \001(\004\"c\n\016ThrottleBucke"
  "t\022\014\n\004name\030\001 \001(\t\022\025\n\rburstPeriodMs\030\002 \001(\004\022,"
  "\n\016throttleGroups\030\003 \003(\0132\024.proto.ThrottleG"
  "roup\"E\n\023ThrottleDefinitions\022.\n\017throttleB"
  "uckets\030\001 \003(\0132\025.proto.ThrottleBucketB&\n\"c"
  "om.hederahashgraph.api.proto.javaP\001b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_throttle_5fdefinitions_2eproto_deps[1] = {
  &::descriptor_table_basic_5ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_throttle_5fdefinitions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_throttle_5fdefinitions_2eproto = {
    false, false, 363, descriptor_table_protodef_throttle_5fdefinitions_2eproto,
    "throttle_definitions.proto",
    &descriptor_table_throttle_5fdefinitions_2eproto_once, descriptor_table_throttle_5fdefinitions_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_throttle_5fdefinitions_2eproto::offsets,
    file_level_metadata_throttle_5fdefinitions_2eproto, file_level_enum_descriptors_throttle_5fdefinitions_2eproto,
    file_level_service_descriptors_throttle_5fdefinitions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_throttle_5fdefinitions_2eproto_getter() {
  return &descriptor_table_throttle_5fdefinitions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_throttle_5fdefinitions_2eproto(&descriptor_table_throttle_5fdefinitions_2eproto);
namespace proto {

// ===================================================================

class ThrottleGroup::_Internal {
 public:
};

ThrottleGroup::ThrottleGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ThrottleGroup)
}
ThrottleGroup::ThrottleGroup(const ThrottleGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThrottleGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){from._impl_.operations_}
    , /*decltype(_impl_._operations_cached_byte_size_)*/{0}
    , decltype(_impl_.milliopspersec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.milliopspersec_ = from._impl_.milliopspersec_;
  // @@protoc_insertion_point(copy_constructor:proto.ThrottleGroup)
}

inline void ThrottleGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){arena}
    , /*decltype(_impl_._operations_cached_byte_size_)*/{0}
    , decltype(_impl_.milliopspersec_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThrottleGroup::~ThrottleGroup() {
  // @@protoc_insertion_point(destructor:proto.ThrottleGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThrottleGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operations_.~RepeatedField();
}

void ThrottleGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThrottleGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ThrottleGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_.Clear();
  _impl_.milliopspersec_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.HederaFunctionality operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operations(static_cast<::proto::HederaFunctionality>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 milliOpsPerSec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.milliopspersec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThrottleGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ThrottleGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.HederaFunctionality operations = 1;
  {
    int byte_size = _impl_._operations_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.operations_, byte_size, target);
    }
  }

  // uint64 milliOpsPerSec = 2;
  if (this->_internal_milliopspersec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_milliopspersec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ThrottleGroup)
  return target;
}

size_t ThrottleGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ThrottleGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.HederaFunctionality operations = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_operations(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._operations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 milliOpsPerSec = 2;
  if (this->_internal_milliopspersec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_milliopspersec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThrottleGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThrottleGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThrottleGroup::GetClassData() const { return &_class_data_; }


void ThrottleGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThrottleGroup*>(&to_msg);
  auto& from = static_cast<const ThrottleGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ThrottleGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operations_.MergeFrom(from._impl_.operations_);
  if (from._internal_milliopspersec() != 0) {
    _this->_internal_set_milliopspersec(from._internal_milliopspersec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThrottleGroup::CopyFrom(const ThrottleGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ThrottleGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleGroup::IsInitialized() const {
  return true;
}

void ThrottleGroup::InternalSwap(ThrottleGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
  swap(_impl_.milliopspersec_, other->_impl_.milliopspersec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_throttle_5fdefinitions_2eproto_getter, &descriptor_table_throttle_5fdefinitions_2eproto_once,
      file_level_metadata_throttle_5fdefinitions_2eproto[0]);
}

// ===================================================================

class ThrottleBucket::_Internal {
 public:
};

ThrottleBucket::ThrottleBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ThrottleBucket)
}
ThrottleBucket::ThrottleBucket(const ThrottleBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThrottleBucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.throttlegroups_){from._impl_.throttlegroups_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.burstperiodms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.burstperiodms_ = from._impl_.burstperiodms_;
  // @@protoc_insertion_point(copy_constructor:proto.ThrottleBucket)
}

inline void ThrottleBucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.throttlegroups_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.burstperiodms_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThrottleBucket::~ThrottleBucket() {
  // @@protoc_insertion_point(destructor:proto.ThrottleBucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThrottleBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.throttlegroups_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ThrottleBucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThrottleBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ThrottleBucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.throttlegroups_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.burstperiodms_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleBucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ThrottleBucket.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 burstPeriodMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.burstperiodms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ThrottleGroup throttleGroups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_throttlegroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThrottleBucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ThrottleBucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ThrottleBucket.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 burstPeriodMs = 2;
  if (this->_internal_burstperiodms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_burstperiodms(), target);
  }

  // repeated .proto.ThrottleGroup throttleGroups = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_throttlegroups_size()); i < n; i++) {
    const auto& repfield = this->_internal_throttlegroups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ThrottleBucket)
  return target;
}

size_t ThrottleBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ThrottleBucket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ThrottleGroup throttleGroups = 3;
  total_size += 1UL * this->_internal_throttlegroups_size();
  for (const auto& msg : this->_impl_.throttlegroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 burstPeriodMs = 2;
  if (this->_internal_burstperiodms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_burstperiodms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThrottleBucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThrottleBucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThrottleBucket::GetClassData() const { return &_class_data_; }


void ThrottleBucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThrottleBucket*>(&to_msg);
  auto& from = static_cast<const ThrottleBucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ThrottleBucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.throttlegroups_.MergeFrom(from._impl_.throttlegroups_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_burstperiodms() != 0) {
    _this->_internal_set_burstperiodms(from._internal_burstperiodms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThrottleBucket::CopyFrom(const ThrottleBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ThrottleBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleBucket::IsInitialized() const {
  return true;
}

void ThrottleBucket::InternalSwap(ThrottleBucket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.throttlegroups_.InternalSwap(&other->_impl_.throttlegroups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.burstperiodms_, other->_impl_.burstperiodms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleBucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_throttle_5fdefinitions_2eproto_getter, &descriptor_table_throttle_5fdefinitions_2eproto_once,
      file_level_metadata_throttle_5fdefinitions_2eproto[1]);
}

// ===================================================================

class ThrottleDefinitions::_Internal {
 public:
};

ThrottleDefinitions::ThrottleDefinitions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ThrottleDefinitions)
}
ThrottleDefinitions::ThrottleDefinitions(const ThrottleDefinitions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThrottleDefinitions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.throttlebuckets_){from._impl_.throttlebuckets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ThrottleDefinitions)
}

inline void ThrottleDefinitions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.throttlebuckets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThrottleDefinitions::~ThrottleDefinitions() {
  // @@protoc_insertion_point(destructor:proto.ThrottleDefinitions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThrottleDefinitions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.throttlebuckets_.~RepeatedPtrField();
}

void ThrottleDefinitions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThrottleDefinitions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ThrottleDefinitions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.throttlebuckets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThrottleDefinitions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.ThrottleBucket throttleBuckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_throttlebuckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThrottleDefinitions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ThrottleDefinitions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ThrottleBucket throttleBuckets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_throttlebuckets_size()); i < n; i++) {
    const auto& repfield = this->_internal_throttlebuckets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ThrottleDefinitions)
  return target;
}

size_t ThrottleDefinitions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ThrottleDefinitions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ThrottleBucket throttleBuckets = 1;
  total_size += 1UL * this->_internal_throttlebuckets_size();
  for (const auto& msg : this->_impl_.throttlebuckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThrottleDefinitions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThrottleDefinitions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThrottleDefinitions::GetClassData() const { return &_class_data_; }


void ThrottleDefinitions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThrottleDefinitions*>(&to_msg);
  auto& from = static_cast<const ThrottleDefinitions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ThrottleDefinitions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.throttlebuckets_.MergeFrom(from._impl_.throttlebuckets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThrottleDefinitions::CopyFrom(const ThrottleDefinitions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ThrottleDefinitions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleDefinitions::IsInitialized() const {
  return true;
}

void ThrottleDefinitions::InternalSwap(ThrottleDefinitions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.throttlebuckets_.InternalSwap(&other->_impl_.throttlebuckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThrottleDefinitions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_throttle_5fdefinitions_2eproto_getter, &descriptor_table_throttle_5fdefinitions_2eproto_once,
      file_level_metadata_throttle_5fdefinitions_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ThrottleGroup*
Arena::CreateMaybeMessage< ::proto::ThrottleGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ThrottleGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ThrottleBucket*
Arena::CreateMaybeMessage< ::proto::ThrottleBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ThrottleBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ThrottleDefinitions*
Arena::CreateMaybeMessage< ::proto::ThrottleDefinitions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ThrottleDefinitions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

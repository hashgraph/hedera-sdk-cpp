// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_get_stakers.proto

#include "crypto_get_stakers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoGetStakersQuery::CryptoGetStakersQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoGetStakersQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetStakersQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetStakersQueryDefaultTypeInternal() {}
  union {
    CryptoGetStakersQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetStakersQueryDefaultTypeInternal _CryptoGetStakersQuery_default_instance_;
PROTOBUF_CONSTEXPR ProxyStaker::ProxyStaker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProxyStakerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyStakerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyStakerDefaultTypeInternal() {}
  union {
    ProxyStaker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyStakerDefaultTypeInternal _ProxyStaker_default_instance_;
PROTOBUF_CONSTEXPR AllProxyStakers::AllProxyStakers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proxystaker_)*/{}
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllProxyStakersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllProxyStakersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllProxyStakersDefaultTypeInternal() {}
  union {
    AllProxyStakers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllProxyStakersDefaultTypeInternal _AllProxyStakers_default_instance_;
PROTOBUF_CONSTEXPR CryptoGetStakersResponse::CryptoGetStakersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.stakers_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoGetStakersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetStakersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetStakersResponseDefaultTypeInternal() {}
  union {
    CryptoGetStakersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetStakersResponseDefaultTypeInternal _CryptoGetStakersResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fget_5fstakers_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fget_5fstakers_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fget_5fstakers_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fget_5fstakers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetStakersQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetStakersQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetStakersQuery, _impl_.accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ProxyStaker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ProxyStaker, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::ProxyStaker, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AllProxyStakers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AllProxyStakers, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::AllProxyStakers, _impl_.proxystaker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetStakersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetStakersResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetStakersResponse, _impl_.stakers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoGetStakersQuery)},
  { 8, -1, -1, sizeof(::proto::ProxyStaker)},
  { 16, -1, -1, sizeof(::proto::AllProxyStakers)},
  { 24, -1, -1, sizeof(::proto::CryptoGetStakersResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoGetStakersQuery_default_instance_._instance,
  &::proto::_ProxyStaker_default_instance_._instance,
  &::proto::_AllProxyStakers_default_instance_._instance,
  &::proto::_CryptoGetStakersResponse_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fget_5fstakers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030crypto_get_stakers.proto\022\005proto\032\021basic"
  "_types.proto\032\022query_header.proto\032\025respon"
  "se_header.proto\"`\n\025CryptoGetStakersQuery"
  "\022\"\n\006header\030\001 \001(\0132\022.proto.QueryHeader\022#\n\t"
  "accountID\030\002 \001(\0132\020.proto.AccountID\"B\n\013Pro"
  "xyStaker\022#\n\taccountID\030\001 \001(\0132\020.proto.Acco"
  "untID\022\016\n\006amount\030\002 \001(\003\"_\n\017AllProxyStakers"
  "\022#\n\taccountID\030\001 \001(\0132\020.proto.AccountID\022\'\n"
  "\013proxyStaker\030\002 \003(\0132\022.proto.ProxyStaker\"j"
  "\n\030CryptoGetStakersResponse\022%\n\006header\030\001 \001"
  "(\0132\025.proto.ResponseHeader\022\'\n\007stakers\030\003 \001"
  "(\0132\026.proto.AllProxyStakersB&\n\"com.hedera"
  "hashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fget_5fstakers_2eproto_deps[3] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fget_5fstakers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fget_5fstakers_2eproto = {
    false, false, 514, descriptor_table_protodef_crypto_5fget_5fstakers_2eproto,
    "crypto_get_stakers.proto",
    &descriptor_table_crypto_5fget_5fstakers_2eproto_once, descriptor_table_crypto_5fget_5fstakers_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_crypto_5fget_5fstakers_2eproto::offsets,
    file_level_metadata_crypto_5fget_5fstakers_2eproto, file_level_enum_descriptors_crypto_5fget_5fstakers_2eproto,
    file_level_service_descriptors_crypto_5fget_5fstakers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fget_5fstakers_2eproto_getter() {
  return &descriptor_table_crypto_5fget_5fstakers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fget_5fstakers_2eproto(&descriptor_table_crypto_5fget_5fstakers_2eproto);
namespace proto {

// ===================================================================

class CryptoGetStakersQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const CryptoGetStakersQuery* msg);
  static const ::proto::AccountID& accountid(const CryptoGetStakersQuery* msg);
};

const ::proto::QueryHeader&
CryptoGetStakersQuery::_Internal::header(const CryptoGetStakersQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AccountID&
CryptoGetStakersQuery::_Internal::accountid(const CryptoGetStakersQuery* msg) {
  return *msg->_impl_.accountid_;
}
void CryptoGetStakersQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void CryptoGetStakersQuery::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
CryptoGetStakersQuery::CryptoGetStakersQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetStakersQuery)
}
CryptoGetStakersQuery::CryptoGetStakersQuery(const CryptoGetStakersQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetStakersQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetStakersQuery)
}

inline void CryptoGetStakersQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoGetStakersQuery::~CryptoGetStakersQuery() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetStakersQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetStakersQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.accountid_;
}

void CryptoGetStakersQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetStakersQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetStakersQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetStakersQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetStakersQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetStakersQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetStakersQuery)
  return target;
}

size_t CryptoGetStakersQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetStakersQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetStakersQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetStakersQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetStakersQuery::GetClassData() const { return &_class_data_; }


void CryptoGetStakersQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetStakersQuery*>(&to_msg);
  auto& from = static_cast<const CryptoGetStakersQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetStakersQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetStakersQuery::CopyFrom(const CryptoGetStakersQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetStakersQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetStakersQuery::IsInitialized() const {
  return true;
}

void CryptoGetStakersQuery::InternalSwap(CryptoGetStakersQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoGetStakersQuery, _impl_.accountid_)
      + sizeof(CryptoGetStakersQuery::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CryptoGetStakersQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetStakersQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5fstakers_2eproto_getter, &descriptor_table_crypto_5fget_5fstakers_2eproto_once,
      file_level_metadata_crypto_5fget_5fstakers_2eproto[0]);
}

// ===================================================================

class ProxyStaker::_Internal {
 public:
  static const ::proto::AccountID& accountid(const ProxyStaker* msg);
};

const ::proto::AccountID&
ProxyStaker::_Internal::accountid(const ProxyStaker* msg) {
  return *msg->_impl_.accountid_;
}
void ProxyStaker::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
ProxyStaker::ProxyStaker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ProxyStaker)
}
ProxyStaker::ProxyStaker(const ProxyStaker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProxyStaker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.ProxyStaker)
}

inline void ProxyStaker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProxyStaker::~ProxyStaker() {
  // @@protoc_insertion_point(destructor:proto.ProxyStaker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProxyStaker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.accountid_;
}

void ProxyStaker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProxyStaker::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProxyStaker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProxyStaker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID accountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProxyStaker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProxyStaker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID accountID = 1;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProxyStaker)
  return target;
}

size_t ProxyStaker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProxyStaker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.AccountID accountID = 1;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProxyStaker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProxyStaker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProxyStaker::GetClassData() const { return &_class_data_; }


void ProxyStaker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProxyStaker*>(&to_msg);
  auto& from = static_cast<const ProxyStaker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ProxyStaker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyStaker::CopyFrom(const ProxyStaker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProxyStaker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyStaker::IsInitialized() const {
  return true;
}

void ProxyStaker::InternalSwap(ProxyStaker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProxyStaker, _impl_.amount_)
      + sizeof(ProxyStaker::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(ProxyStaker, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyStaker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5fstakers_2eproto_getter, &descriptor_table_crypto_5fget_5fstakers_2eproto_once,
      file_level_metadata_crypto_5fget_5fstakers_2eproto[1]);
}

// ===================================================================

class AllProxyStakers::_Internal {
 public:
  static const ::proto::AccountID& accountid(const AllProxyStakers* msg);
};

const ::proto::AccountID&
AllProxyStakers::_Internal::accountid(const AllProxyStakers* msg) {
  return *msg->_impl_.accountid_;
}
void AllProxyStakers::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
AllProxyStakers::AllProxyStakers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AllProxyStakers)
}
AllProxyStakers::AllProxyStakers(const AllProxyStakers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllProxyStakers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proxystaker_){from._impl_.proxystaker_}
    , decltype(_impl_.accountid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AllProxyStakers)
}

inline void AllProxyStakers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proxystaker_){arena}
    , decltype(_impl_.accountid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllProxyStakers::~AllProxyStakers() {
  // @@protoc_insertion_point(destructor:proto.AllProxyStakers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllProxyStakers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proxystaker_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.accountid_;
}

void AllProxyStakers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllProxyStakers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AllProxyStakers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proxystaker_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllProxyStakers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID accountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ProxyStaker proxyStaker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proxystaker(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllProxyStakers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AllProxyStakers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID accountID = 1;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.ProxyStaker proxyStaker = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proxystaker_size()); i < n; i++) {
    const auto& repfield = this->_internal_proxystaker(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AllProxyStakers)
  return target;
}

size_t AllProxyStakers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AllProxyStakers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ProxyStaker proxyStaker = 2;
  total_size += 1UL * this->_internal_proxystaker_size();
  for (const auto& msg : this->_impl_.proxystaker_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.AccountID accountID = 1;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllProxyStakers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllProxyStakers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllProxyStakers::GetClassData() const { return &_class_data_; }


void AllProxyStakers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllProxyStakers*>(&to_msg);
  auto& from = static_cast<const AllProxyStakers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AllProxyStakers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.proxystaker_.MergeFrom(from._impl_.proxystaker_);
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllProxyStakers::CopyFrom(const AllProxyStakers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AllProxyStakers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllProxyStakers::IsInitialized() const {
  return true;
}

void AllProxyStakers::InternalSwap(AllProxyStakers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.proxystaker_.InternalSwap(&other->_impl_.proxystaker_);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllProxyStakers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5fstakers_2eproto_getter, &descriptor_table_crypto_5fget_5fstakers_2eproto_once,
      file_level_metadata_crypto_5fget_5fstakers_2eproto[2]);
}

// ===================================================================

class CryptoGetStakersResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const CryptoGetStakersResponse* msg);
  static const ::proto::AllProxyStakers& stakers(const CryptoGetStakersResponse* msg);
};

const ::proto::ResponseHeader&
CryptoGetStakersResponse::_Internal::header(const CryptoGetStakersResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AllProxyStakers&
CryptoGetStakersResponse::_Internal::stakers(const CryptoGetStakersResponse* msg) {
  return *msg->_impl_.stakers_;
}
void CryptoGetStakersResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
CryptoGetStakersResponse::CryptoGetStakersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetStakersResponse)
}
CryptoGetStakersResponse::CryptoGetStakersResponse(const CryptoGetStakersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetStakersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.stakers_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_stakers()) {
    _this->_impl_.stakers_ = new ::proto::AllProxyStakers(*from._impl_.stakers_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetStakersResponse)
}

inline void CryptoGetStakersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.stakers_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoGetStakersResponse::~CryptoGetStakersResponse() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetStakersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetStakersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.stakers_;
}

void CryptoGetStakersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetStakersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetStakersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stakers_ != nullptr) {
    delete _impl_.stakers_;
  }
  _impl_.stakers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetStakersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AllProxyStakers stakers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stakers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetStakersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetStakersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AllProxyStakers stakers = 3;
  if (this->_internal_has_stakers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stakers(this),
        _Internal::stakers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetStakersResponse)
  return target;
}

size_t CryptoGetStakersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetStakersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.AllProxyStakers stakers = 3;
  if (this->_internal_has_stakers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stakers_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetStakersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetStakersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetStakersResponse::GetClassData() const { return &_class_data_; }


void CryptoGetStakersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetStakersResponse*>(&to_msg);
  auto& from = static_cast<const CryptoGetStakersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetStakersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_stakers()) {
    _this->_internal_mutable_stakers()->::proto::AllProxyStakers::MergeFrom(
        from._internal_stakers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetStakersResponse::CopyFrom(const CryptoGetStakersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetStakersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetStakersResponse::IsInitialized() const {
  return true;
}

void CryptoGetStakersResponse::InternalSwap(CryptoGetStakersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoGetStakersResponse, _impl_.stakers_)
      + sizeof(CryptoGetStakersResponse::_impl_.stakers_)
      - PROTOBUF_FIELD_OFFSET(CryptoGetStakersResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetStakersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5fstakers_2eproto_getter, &descriptor_table_crypto_5fget_5fstakers_2eproto_once,
      file_level_metadata_crypto_5fget_5fstakers_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoGetStakersQuery*
Arena::CreateMaybeMessage< ::proto::CryptoGetStakersQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetStakersQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ProxyStaker*
Arena::CreateMaybeMessage< ::proto::ProxyStaker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ProxyStaker >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AllProxyStakers*
Arena::CreateMaybeMessage< ::proto::AllProxyStakers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AllProxyStakers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CryptoGetStakersResponse*
Arena::CreateMaybeMessage< ::proto::CryptoGetStakersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetStakersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

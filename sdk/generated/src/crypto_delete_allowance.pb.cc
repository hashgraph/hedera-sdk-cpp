// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_delete_allowance.proto

#include "crypto_delete_allowance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoDeleteAllowanceTransactionBody::CryptoDeleteAllowanceTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nftallowances_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoDeleteAllowanceTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoDeleteAllowanceTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoDeleteAllowanceTransactionBodyDefaultTypeInternal() {}
  union {
    CryptoDeleteAllowanceTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoDeleteAllowanceTransactionBodyDefaultTypeInternal _CryptoDeleteAllowanceTransactionBody_default_instance_;
PROTOBUF_CONSTEXPR NftRemoveAllowance::NftRemoveAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serial_numbers_)*/{}
  , /*decltype(_impl_._serial_numbers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.token_id_)*/nullptr
  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NftRemoveAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NftRemoveAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NftRemoveAllowanceDefaultTypeInternal() {}
  union {
    NftRemoveAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NftRemoveAllowanceDefaultTypeInternal _NftRemoveAllowance_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fdelete_5fallowance_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fdelete_5fallowance_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fdelete_5fallowance_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fdelete_5fallowance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoDeleteAllowanceTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoDeleteAllowanceTransactionBody, _impl_.nftallowances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::NftRemoveAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NftRemoveAllowance, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::proto::NftRemoveAllowance, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::proto::NftRemoveAllowance, _impl_.serial_numbers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoDeleteAllowanceTransactionBody)},
  { 7, -1, -1, sizeof(::proto::NftRemoveAllowance)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoDeleteAllowanceTransactionBody_default_instance_._instance,
  &::proto::_NftRemoveAllowance_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fdelete_5fallowance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035crypto_delete_allowance.proto\022\005proto\032\021"
  "basic_types.proto\"X\n$CryptoDeleteAllowan"
  "ceTransactionBody\0220\n\rnftAllowances\030\002 \003(\013"
  "2\031.proto.NftRemoveAllowance\"o\n\022NftRemove"
  "Allowance\022 \n\010token_id\030\001 \001(\0132\016.proto.Toke"
  "nID\022\037\n\005owner\030\002 \001(\0132\020.proto.AccountID\022\026\n\016"
  "serial_numbers\030\003 \003(\003B&\n\"com.hederahashgr"
  "aph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fdelete_5fallowance_2eproto_deps[1] = {
  &::descriptor_table_basic_5ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fdelete_5fallowance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fdelete_5fallowance_2eproto = {
    false, false, 308, descriptor_table_protodef_crypto_5fdelete_5fallowance_2eproto,
    "crypto_delete_allowance.proto",
    &descriptor_table_crypto_5fdelete_5fallowance_2eproto_once, descriptor_table_crypto_5fdelete_5fallowance_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_crypto_5fdelete_5fallowance_2eproto::offsets,
    file_level_metadata_crypto_5fdelete_5fallowance_2eproto, file_level_enum_descriptors_crypto_5fdelete_5fallowance_2eproto,
    file_level_service_descriptors_crypto_5fdelete_5fallowance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fdelete_5fallowance_2eproto_getter() {
  return &descriptor_table_crypto_5fdelete_5fallowance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fdelete_5fallowance_2eproto(&descriptor_table_crypto_5fdelete_5fallowance_2eproto);
namespace proto {

// ===================================================================

class CryptoDeleteAllowanceTransactionBody::_Internal {
 public:
};

CryptoDeleteAllowanceTransactionBody::CryptoDeleteAllowanceTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoDeleteAllowanceTransactionBody)
}
CryptoDeleteAllowanceTransactionBody::CryptoDeleteAllowanceTransactionBody(const CryptoDeleteAllowanceTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoDeleteAllowanceTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nftallowances_){from._impl_.nftallowances_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CryptoDeleteAllowanceTransactionBody)
}

inline void CryptoDeleteAllowanceTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nftallowances_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoDeleteAllowanceTransactionBody::~CryptoDeleteAllowanceTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.CryptoDeleteAllowanceTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoDeleteAllowanceTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nftallowances_.~RepeatedPtrField();
}

void CryptoDeleteAllowanceTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoDeleteAllowanceTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoDeleteAllowanceTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nftallowances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoDeleteAllowanceTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.NftRemoveAllowance nftAllowances = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nftallowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoDeleteAllowanceTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoDeleteAllowanceTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.NftRemoveAllowance nftAllowances = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nftallowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_nftallowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoDeleteAllowanceTransactionBody)
  return target;
}

size_t CryptoDeleteAllowanceTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoDeleteAllowanceTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.NftRemoveAllowance nftAllowances = 2;
  total_size += 1UL * this->_internal_nftallowances_size();
  for (const auto& msg : this->_impl_.nftallowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoDeleteAllowanceTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoDeleteAllowanceTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoDeleteAllowanceTransactionBody::GetClassData() const { return &_class_data_; }


void CryptoDeleteAllowanceTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoDeleteAllowanceTransactionBody*>(&to_msg);
  auto& from = static_cast<const CryptoDeleteAllowanceTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoDeleteAllowanceTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nftallowances_.MergeFrom(from._impl_.nftallowances_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoDeleteAllowanceTransactionBody::CopyFrom(const CryptoDeleteAllowanceTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoDeleteAllowanceTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoDeleteAllowanceTransactionBody::IsInitialized() const {
  return true;
}

void CryptoDeleteAllowanceTransactionBody::InternalSwap(CryptoDeleteAllowanceTransactionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nftallowances_.InternalSwap(&other->_impl_.nftallowances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoDeleteAllowanceTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fdelete_5fallowance_2eproto_getter, &descriptor_table_crypto_5fdelete_5fallowance_2eproto_once,
      file_level_metadata_crypto_5fdelete_5fallowance_2eproto[0]);
}

// ===================================================================

class NftRemoveAllowance::_Internal {
 public:
  static const ::proto::TokenID& token_id(const NftRemoveAllowance* msg);
  static const ::proto::AccountID& owner(const NftRemoveAllowance* msg);
};

const ::proto::TokenID&
NftRemoveAllowance::_Internal::token_id(const NftRemoveAllowance* msg) {
  return *msg->_impl_.token_id_;
}
const ::proto::AccountID&
NftRemoveAllowance::_Internal::owner(const NftRemoveAllowance* msg) {
  return *msg->_impl_.owner_;
}
void NftRemoveAllowance::clear_token_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
}
void NftRemoveAllowance::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
NftRemoveAllowance::NftRemoveAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NftRemoveAllowance)
}
NftRemoveAllowance::NftRemoveAllowance(const NftRemoveAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NftRemoveAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_numbers_){from._impl_.serial_numbers_}
    , /*decltype(_impl_._serial_numbers_cached_byte_size_)*/{0}
    , decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token_id()) {
    _this->_impl_.token_id_ = new ::proto::TokenID(*from._impl_.token_id_);
  }
  if (from._internal_has_owner()) {
    _this->_impl_.owner_ = new ::proto::AccountID(*from._impl_.owner_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.NftRemoveAllowance)
}

inline void NftRemoveAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_numbers_){arena}
    , /*decltype(_impl_._serial_numbers_cached_byte_size_)*/{0}
    , decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NftRemoveAllowance::~NftRemoveAllowance() {
  // @@protoc_insertion_point(destructor:proto.NftRemoveAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NftRemoveAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serial_numbers_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.token_id_;
  if (this != internal_default_instance()) delete _impl_.owner_;
}

void NftRemoveAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NftRemoveAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NftRemoveAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_numbers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NftRemoveAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID token_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 serial_numbers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_serial_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_serial_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NftRemoveAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NftRemoveAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID token_id = 1;
  if (this->_internal_has_token_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::token_id(this),
        _Internal::token_id(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID owner = 2;
  if (this->_internal_has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // repeated int64 serial_numbers = 3;
  {
    int byte_size = _impl_._serial_numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_serial_numbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NftRemoveAllowance)
  return target;
}

size_t NftRemoveAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NftRemoveAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 serial_numbers = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.serial_numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._serial_numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .proto.TokenID token_id = 1;
  if (this->_internal_has_token_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_id_);
  }

  // .proto.AccountID owner = 2;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NftRemoveAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NftRemoveAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NftRemoveAllowance::GetClassData() const { return &_class_data_; }


void NftRemoveAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NftRemoveAllowance*>(&to_msg);
  auto& from = static_cast<const NftRemoveAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NftRemoveAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.serial_numbers_.MergeFrom(from._impl_.serial_numbers_);
  if (from._internal_has_token_id()) {
    _this->_internal_mutable_token_id()->::proto::TokenID::MergeFrom(
        from._internal_token_id());
  }
  if (from._internal_has_owner()) {
    _this->_internal_mutable_owner()->::proto::AccountID::MergeFrom(
        from._internal_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NftRemoveAllowance::CopyFrom(const NftRemoveAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NftRemoveAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NftRemoveAllowance::IsInitialized() const {
  return true;
}

void NftRemoveAllowance::InternalSwap(NftRemoveAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.serial_numbers_.InternalSwap(&other->_impl_.serial_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NftRemoveAllowance, _impl_.owner_)
      + sizeof(NftRemoveAllowance::_impl_.owner_)
      - PROTOBUF_FIELD_OFFSET(NftRemoveAllowance, _impl_.token_id_)>(
          reinterpret_cast<char*>(&_impl_.token_id_),
          reinterpret_cast<char*>(&other->_impl_.token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NftRemoveAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fdelete_5fallowance_2eproto_getter, &descriptor_table_crypto_5fdelete_5fallowance_2eproto_once,
      file_level_metadata_crypto_5fdelete_5fallowance_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoDeleteAllowanceTransactionBody*
Arena::CreateMaybeMessage< ::proto::CryptoDeleteAllowanceTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoDeleteAllowanceTransactionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NftRemoveAllowance*
Arena::CreateMaybeMessage< ::proto::NftRemoveAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NftRemoveAllowance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

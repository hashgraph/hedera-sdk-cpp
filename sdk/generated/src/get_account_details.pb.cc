// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_account_details.proto

#include "get_account_details.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR GetAccountDetailsQuery::GetAccountDetailsQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.account_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountDetailsQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDetailsQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDetailsQueryDefaultTypeInternal() {}
  union {
    GetAccountDetailsQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDetailsQueryDefaultTypeInternal _GetAccountDetailsQuery_default_instance_;
PROTOBUF_CONSTEXPR GetAccountDetailsResponse_AccountDetails::GetAccountDetailsResponse_AccountDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_relationships_)*/{}
  , /*decltype(_impl_.granted_crypto_allowances_)*/{}
  , /*decltype(_impl_.granted_nft_allowances_)*/{}
  , /*decltype(_impl_.granted_token_allowances_)*/{}
  , /*decltype(_impl_.contract_account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alias_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/nullptr
  , /*decltype(_impl_.proxy_account_id_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.expiration_time_)*/nullptr
  , /*decltype(_impl_.auto_renew_period_)*/nullptr
  , /*decltype(_impl_.proxy_received_)*/int64_t{0}
  , /*decltype(_impl_.balance_)*/uint64_t{0u}
  , /*decltype(_impl_.deleted_)*/false
  , /*decltype(_impl_.receiver_sig_required_)*/false
  , /*decltype(_impl_.max_automatic_token_associations_)*/0
  , /*decltype(_impl_.owned_nfts_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountDetailsResponse_AccountDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDetailsResponse_AccountDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDetailsResponse_AccountDetailsDefaultTypeInternal() {}
  union {
    GetAccountDetailsResponse_AccountDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDetailsResponse_AccountDetailsDefaultTypeInternal _GetAccountDetailsResponse_AccountDetails_default_instance_;
PROTOBUF_CONSTEXPR GetAccountDetailsResponse::GetAccountDetailsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.account_details_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountDetailsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountDetailsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountDetailsResponseDefaultTypeInternal() {}
  union {
    GetAccountDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountDetailsResponseDefaultTypeInternal _GetAccountDetailsResponse_default_instance_;
PROTOBUF_CONSTEXPR GrantedCryptoAllowance::GrantedCryptoAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spender_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantedCryptoAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantedCryptoAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantedCryptoAllowanceDefaultTypeInternal() {}
  union {
    GrantedCryptoAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantedCryptoAllowanceDefaultTypeInternal _GrantedCryptoAllowance_default_instance_;
PROTOBUF_CONSTEXPR GrantedNftAllowance::GrantedNftAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_id_)*/nullptr
  , /*decltype(_impl_.spender_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantedNftAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantedNftAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantedNftAllowanceDefaultTypeInternal() {}
  union {
    GrantedNftAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantedNftAllowanceDefaultTypeInternal _GrantedNftAllowance_default_instance_;
PROTOBUF_CONSTEXPR GrantedTokenAllowance::GrantedTokenAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_id_)*/nullptr
  , /*decltype(_impl_.spender_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrantedTokenAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantedTokenAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantedTokenAllowanceDefaultTypeInternal() {}
  union {
    GrantedTokenAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantedTokenAllowanceDefaultTypeInternal _GrantedTokenAllowance_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_get_5faccount_5fdetails_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_get_5faccount_5fdetails_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_get_5faccount_5fdetails_2eproto = nullptr;

const uint32_t TableStruct_get_5faccount_5fdetails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsQuery, _impl_.account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.contract_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.deleted_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.proxy_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.proxy_received_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.receiver_sig_required_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.expiration_time_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.auto_renew_period_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.token_relationships_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.owned_nfts_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.max_automatic_token_associations_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.alias_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.ledger_id_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.granted_crypto_allowances_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.granted_nft_allowances_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse_AccountDetails, _impl_.granted_token_allowances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::GetAccountDetailsResponse, _impl_.account_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GrantedCryptoAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GrantedCryptoAllowance, _impl_.spender_),
  PROTOBUF_FIELD_OFFSET(::proto::GrantedCryptoAllowance, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GrantedNftAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GrantedNftAllowance, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::proto::GrantedNftAllowance, _impl_.spender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GrantedTokenAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GrantedTokenAllowance, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::proto::GrantedTokenAllowance, _impl_.spender_),
  PROTOBUF_FIELD_OFFSET(::proto::GrantedTokenAllowance, _impl_.amount_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::GetAccountDetailsQuery)},
  { 8, -1, -1, sizeof(::proto::GetAccountDetailsResponse_AccountDetails)},
  { 33, -1, -1, sizeof(::proto::GetAccountDetailsResponse)},
  { 41, -1, -1, sizeof(::proto::GrantedCryptoAllowance)},
  { 49, -1, -1, sizeof(::proto::GrantedNftAllowance)},
  { 57, -1, -1, sizeof(::proto::GrantedTokenAllowance)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_GetAccountDetailsQuery_default_instance_._instance,
  &::proto::_GetAccountDetailsResponse_AccountDetails_default_instance_._instance,
  &::proto::_GetAccountDetailsResponse_default_instance_._instance,
  &::proto::_GrantedCryptoAllowance_default_instance_._instance,
  &::proto::_GrantedNftAllowance_default_instance_._instance,
  &::proto::_GrantedTokenAllowance_default_instance_._instance,
};

const char descriptor_table_protodef_get_5faccount_5fdetails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031get_account_details.proto\022\005proto\032\017time"
  "stamp.proto\032\016duration.proto\032\021basic_types"
  ".proto\032\022query_header.proto\032\025response_hea"
  "der.proto\032\032crypto_add_live_hash.proto\032\036g"
  "oogle/protobuf/wrappers.proto\"b\n\026GetAcco"
  "untDetailsQuery\022\"\n\006header\030\001 \001(\0132\022.proto."
  "QueryHeader\022$\n\naccount_id\030\002 \001(\0132\020.proto."
  "AccountID\"\276\006\n\031GetAccountDetailsResponse\022"
  "%\n\006header\030\001 \001(\0132\025.proto.ResponseHeader\022H"
  "\n\017account_details\030\002 \001(\0132/.proto.GetAccou"
  "ntDetailsResponse.AccountDetails\032\257\005\n\016Acc"
  "ountDetails\022$\n\naccount_id\030\001 \001(\0132\020.proto."
  "AccountID\022\033\n\023contract_account_id\030\002 \001(\t\022\017"
  "\n\007deleted\030\003 \001(\010\022.\n\020proxy_account_id\030\004 \001("
  "\0132\020.proto.AccountIDB\002\030\001\022\026\n\016proxy_receive"
  "d\030\005 \001(\003\022\027\n\003key\030\006 \001(\0132\n.proto.Key\022\017\n\007bala"
  "nce\030\007 \001(\004\022\035\n\025receiver_sig_required\030\010 \001(\010"
  "\022)\n\017expiration_time\030\t \001(\0132\020.proto.Timest"
  "amp\022*\n\021auto_renew_period\030\n \001(\0132\017.proto.D"
  "uration\0225\n\023token_relationships\030\013 \003(\0132\030.p"
  "roto.TokenRelationship\022\014\n\004memo\030\014 \001(\t\022\022\n\n"
  "owned_nfts\030\r \001(\003\022(\n max_automatic_token_"
  "associations\030\016 \001(\005\022\r\n\005alias\030\017 \001(\014\022\021\n\tled"
  "ger_id\030\020 \001(\014\022@\n\031granted_crypto_allowance"
  "s\030\021 \003(\0132\035.proto.GrantedCryptoAllowance\022:"
  "\n\026granted_nft_allowances\030\022 \003(\0132\032.proto.G"
  "rantedNftAllowance\022>\n\030granted_token_allo"
  "wances\030\023 \003(\0132\034.proto.GrantedTokenAllowan"
  "ce\"K\n\026GrantedCryptoAllowance\022!\n\007spender\030"
  "\001 \001(\0132\020.proto.AccountID\022\016\n\006amount\030\002 \001(\003\""
  "Z\n\023GrantedNftAllowance\022 \n\010token_id\030\001 \001(\013"
  "2\016.proto.TokenID\022!\n\007spender\030\002 \001(\0132\020.prot"
  "o.AccountID\"l\n\025GrantedTokenAllowance\022 \n\010"
  "token_id\030\001 \001(\0132\016.proto.TokenID\022!\n\007spende"
  "r\030\002 \001(\0132\020.proto.AccountID\022\016\n\006amount\030\003 \001("
  "\003B&\n\"com.hederahashgraph.api.proto.javaP"
  "\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_get_5faccount_5fdetails_2eproto_deps[7] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_crypto_5fadd_5flive_5fhash_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_get_5faccount_5fdetails_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_get_5faccount_5fdetails_2eproto = {
    false, false, 1449, descriptor_table_protodef_get_5faccount_5fdetails_2eproto,
    "get_account_details.proto",
    &descriptor_table_get_5faccount_5fdetails_2eproto_once, descriptor_table_get_5faccount_5fdetails_2eproto_deps, 7, 6,
    schemas, file_default_instances, TableStruct_get_5faccount_5fdetails_2eproto::offsets,
    file_level_metadata_get_5faccount_5fdetails_2eproto, file_level_enum_descriptors_get_5faccount_5fdetails_2eproto,
    file_level_service_descriptors_get_5faccount_5fdetails_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_get_5faccount_5fdetails_2eproto_getter() {
  return &descriptor_table_get_5faccount_5fdetails_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_get_5faccount_5fdetails_2eproto(&descriptor_table_get_5faccount_5fdetails_2eproto);
namespace proto {

// ===================================================================

class GetAccountDetailsQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const GetAccountDetailsQuery* msg);
  static const ::proto::AccountID& account_id(const GetAccountDetailsQuery* msg);
};

const ::proto::QueryHeader&
GetAccountDetailsQuery::_Internal::header(const GetAccountDetailsQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AccountID&
GetAccountDetailsQuery::_Internal::account_id(const GetAccountDetailsQuery* msg) {
  return *msg->_impl_.account_id_;
}
void GetAccountDetailsQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void GetAccountDetailsQuery::clear_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.account_id_ != nullptr) {
    delete _impl_.account_id_;
  }
  _impl_.account_id_ = nullptr;
}
GetAccountDetailsQuery::GetAccountDetailsQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GetAccountDetailsQuery)
}
GetAccountDetailsQuery::GetAccountDetailsQuery(const GetAccountDetailsQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountDetailsQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.account_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_account_id()) {
    _this->_impl_.account_id_ = new ::proto::AccountID(*from._impl_.account_id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetAccountDetailsQuery)
}

inline void GetAccountDetailsQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.account_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAccountDetailsQuery::~GetAccountDetailsQuery() {
  // @@protoc_insertion_point(destructor:proto.GetAccountDetailsQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountDetailsQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.account_id_;
}

void GetAccountDetailsQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountDetailsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetAccountDetailsQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.account_id_ != nullptr) {
    delete _impl_.account_id_;
  }
  _impl_.account_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDetailsQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountDetailsQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetAccountDetailsQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID account_id = 2;
  if (this->_internal_has_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::account_id(this),
        _Internal::account_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetAccountDetailsQuery)
  return target;
}

size_t GetAccountDetailsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetAccountDetailsQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.AccountID account_id = 2;
  if (this->_internal_has_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.account_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountDetailsQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountDetailsQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountDetailsQuery::GetClassData() const { return &_class_data_; }


void GetAccountDetailsQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountDetailsQuery*>(&to_msg);
  auto& from = static_cast<const GetAccountDetailsQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GetAccountDetailsQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_account_id()) {
    _this->_internal_mutable_account_id()->::proto::AccountID::MergeFrom(
        from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountDetailsQuery::CopyFrom(const GetAccountDetailsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetAccountDetailsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDetailsQuery::IsInitialized() const {
  return true;
}

void GetAccountDetailsQuery::InternalSwap(GetAccountDetailsQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccountDetailsQuery, _impl_.account_id_)
      + sizeof(GetAccountDetailsQuery::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(GetAccountDetailsQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDetailsQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5faccount_5fdetails_2eproto_getter, &descriptor_table_get_5faccount_5fdetails_2eproto_once,
      file_level_metadata_get_5faccount_5fdetails_2eproto[0]);
}

// ===================================================================

class GetAccountDetailsResponse_AccountDetails::_Internal {
 public:
  static const ::proto::AccountID& account_id(const GetAccountDetailsResponse_AccountDetails* msg);
  static const ::proto::AccountID& proxy_account_id(const GetAccountDetailsResponse_AccountDetails* msg);
  static const ::proto::Key& key(const GetAccountDetailsResponse_AccountDetails* msg);
  static const ::proto::Timestamp& expiration_time(const GetAccountDetailsResponse_AccountDetails* msg);
  static const ::proto::Duration& auto_renew_period(const GetAccountDetailsResponse_AccountDetails* msg);
};

const ::proto::AccountID&
GetAccountDetailsResponse_AccountDetails::_Internal::account_id(const GetAccountDetailsResponse_AccountDetails* msg) {
  return *msg->_impl_.account_id_;
}
const ::proto::AccountID&
GetAccountDetailsResponse_AccountDetails::_Internal::proxy_account_id(const GetAccountDetailsResponse_AccountDetails* msg) {
  return *msg->_impl_.proxy_account_id_;
}
const ::proto::Key&
GetAccountDetailsResponse_AccountDetails::_Internal::key(const GetAccountDetailsResponse_AccountDetails* msg) {
  return *msg->_impl_.key_;
}
const ::proto::Timestamp&
GetAccountDetailsResponse_AccountDetails::_Internal::expiration_time(const GetAccountDetailsResponse_AccountDetails* msg) {
  return *msg->_impl_.expiration_time_;
}
const ::proto::Duration&
GetAccountDetailsResponse_AccountDetails::_Internal::auto_renew_period(const GetAccountDetailsResponse_AccountDetails* msg) {
  return *msg->_impl_.auto_renew_period_;
}
void GetAccountDetailsResponse_AccountDetails::clear_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.account_id_ != nullptr) {
    delete _impl_.account_id_;
  }
  _impl_.account_id_ = nullptr;
}
void GetAccountDetailsResponse_AccountDetails::clear_proxy_account_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.proxy_account_id_ != nullptr) {
    delete _impl_.proxy_account_id_;
  }
  _impl_.proxy_account_id_ = nullptr;
}
void GetAccountDetailsResponse_AccountDetails::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
void GetAccountDetailsResponse_AccountDetails::clear_expiration_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
}
void GetAccountDetailsResponse_AccountDetails::clear_auto_renew_period() {
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_period_ != nullptr) {
    delete _impl_.auto_renew_period_;
  }
  _impl_.auto_renew_period_ = nullptr;
}
void GetAccountDetailsResponse_AccountDetails::clear_token_relationships() {
  _impl_.token_relationships_.Clear();
}
GetAccountDetailsResponse_AccountDetails::GetAccountDetailsResponse_AccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GetAccountDetailsResponse.AccountDetails)
}
GetAccountDetailsResponse_AccountDetails::GetAccountDetailsResponse_AccountDetails(const GetAccountDetailsResponse_AccountDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountDetailsResponse_AccountDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_relationships_){from._impl_.token_relationships_}
    , decltype(_impl_.granted_crypto_allowances_){from._impl_.granted_crypto_allowances_}
    , decltype(_impl_.granted_nft_allowances_){from._impl_.granted_nft_allowances_}
    , decltype(_impl_.granted_token_allowances_){from._impl_.granted_token_allowances_}
    , decltype(_impl_.contract_account_id_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.account_id_){nullptr}
    , decltype(_impl_.proxy_account_id_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.auto_renew_period_){nullptr}
    , decltype(_impl_.proxy_received_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.deleted_){}
    , decltype(_impl_.receiver_sig_required_){}
    , decltype(_impl_.max_automatic_token_associations_){}
    , decltype(_impl_.owned_nfts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_account_id().empty()) {
    _this->_impl_.contract_account_id_.Set(from._internal_contract_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alias().empty()) {
    _this->_impl_.alias_.Set(from._internal_alias(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_id().empty()) {
    _this->_impl_.ledger_id_.Set(from._internal_ledger_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_account_id()) {
    _this->_impl_.account_id_ = new ::proto::AccountID(*from._impl_.account_id_);
  }
  if (from._internal_has_proxy_account_id()) {
    _this->_impl_.proxy_account_id_ = new ::proto::AccountID(*from._impl_.proxy_account_id_);
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::Key(*from._impl_.key_);
  }
  if (from._internal_has_expiration_time()) {
    _this->_impl_.expiration_time_ = new ::proto::Timestamp(*from._impl_.expiration_time_);
  }
  if (from._internal_has_auto_renew_period()) {
    _this->_impl_.auto_renew_period_ = new ::proto::Duration(*from._impl_.auto_renew_period_);
  }
  ::memcpy(&_impl_.proxy_received_, &from._impl_.proxy_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owned_nfts_) -
    reinterpret_cast<char*>(&_impl_.proxy_received_)) + sizeof(_impl_.owned_nfts_));
  // @@protoc_insertion_point(copy_constructor:proto.GetAccountDetailsResponse.AccountDetails)
}

inline void GetAccountDetailsResponse_AccountDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_relationships_){arena}
    , decltype(_impl_.granted_crypto_allowances_){arena}
    , decltype(_impl_.granted_nft_allowances_){arena}
    , decltype(_impl_.granted_token_allowances_){arena}
    , decltype(_impl_.contract_account_id_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.alias_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.account_id_){nullptr}
    , decltype(_impl_.proxy_account_id_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.expiration_time_){nullptr}
    , decltype(_impl_.auto_renew_period_){nullptr}
    , decltype(_impl_.proxy_received_){int64_t{0}}
    , decltype(_impl_.balance_){uint64_t{0u}}
    , decltype(_impl_.deleted_){false}
    , decltype(_impl_.receiver_sig_required_){false}
    , decltype(_impl_.max_automatic_token_associations_){0}
    , decltype(_impl_.owned_nfts_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contract_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alias_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccountDetailsResponse_AccountDetails::~GetAccountDetailsResponse_AccountDetails() {
  // @@protoc_insertion_point(destructor:proto.GetAccountDetailsResponse.AccountDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountDetailsResponse_AccountDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_relationships_.~RepeatedPtrField();
  _impl_.granted_crypto_allowances_.~RepeatedPtrField();
  _impl_.granted_nft_allowances_.~RepeatedPtrField();
  _impl_.granted_token_allowances_.~RepeatedPtrField();
  _impl_.contract_account_id_.Destroy();
  _impl_.memo_.Destroy();
  _impl_.alias_.Destroy();
  _impl_.ledger_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.account_id_;
  if (this != internal_default_instance()) delete _impl_.proxy_account_id_;
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.expiration_time_;
  if (this != internal_default_instance()) delete _impl_.auto_renew_period_;
}

void GetAccountDetailsResponse_AccountDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountDetailsResponse_AccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetAccountDetailsResponse.AccountDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_relationships_.Clear();
  _impl_.granted_crypto_allowances_.Clear();
  _impl_.granted_nft_allowances_.Clear();
  _impl_.granted_token_allowances_.Clear();
  _impl_.contract_account_id_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.ledger_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.account_id_ != nullptr) {
    delete _impl_.account_id_;
  }
  _impl_.account_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.proxy_account_id_ != nullptr) {
    delete _impl_.proxy_account_id_;
  }
  _impl_.proxy_account_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiration_time_ != nullptr) {
    delete _impl_.expiration_time_;
  }
  _impl_.expiration_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.auto_renew_period_ != nullptr) {
    delete _impl_.auto_renew_period_;
  }
  _impl_.auto_renew_period_ = nullptr;
  ::memset(&_impl_.proxy_received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.owned_nfts_) -
      reinterpret_cast<char*>(&_impl_.proxy_received_)) + sizeof(_impl_.owned_nfts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDetailsResponse_AccountDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contract_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GetAccountDetailsResponse.AccountDetails.contract_account_id"));
        } else
          goto handle_unusual;
        continue;
      // bool deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID proxy_account_id = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxy_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 proxy_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.proxy_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 balance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool receiver_sig_required = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.receiver_sig_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expiration_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration auto_renew_period = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_renew_period(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenRelationship token_relationships = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token_relationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string memo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GetAccountDetailsResponse.AccountDetails.memo"));
        } else
          goto handle_unusual;
        continue;
      // int64 owned_nfts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.owned_nfts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_automatic_token_associations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.max_automatic_token_associations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes alias = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ledger_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_ledger_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.GrantedCryptoAllowance granted_crypto_allowances = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_granted_crypto_allowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.GrantedNftAllowance granted_nft_allowances = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_granted_nft_allowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.GrantedTokenAllowance granted_token_allowances = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_granted_token_allowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountDetailsResponse_AccountDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetAccountDetailsResponse.AccountDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID account_id = 1;
  if (this->_internal_has_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::account_id(this),
        _Internal::account_id(this).GetCachedSize(), target, stream);
  }

  // string contract_account_id = 2;
  if (!this->_internal_contract_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_account_id().data(), static_cast<int>(this->_internal_contract_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GetAccountDetailsResponse.AccountDetails.contract_account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_account_id(), target);
  }

  // bool deleted = 3;
  if (this->_internal_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_deleted(), target);
  }

  // .proto.AccountID proxy_account_id = 4 [deprecated = true];
  if (this->_internal_has_proxy_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proxy_account_id(this),
        _Internal::proxy_account_id(this).GetCachedSize(), target, stream);
  }

  // int64 proxy_received = 5;
  if (this->_internal_proxy_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_proxy_received(), target);
  }

  // .proto.Key key = 6;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // uint64 balance = 7;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_balance(), target);
  }

  // bool receiver_sig_required = 8;
  if (this->_internal_receiver_sig_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_receiver_sig_required(), target);
  }

  // .proto.Timestamp expiration_time = 9;
  if (this->_internal_has_expiration_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::expiration_time(this),
        _Internal::expiration_time(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration auto_renew_period = 10;
  if (this->_internal_has_auto_renew_period()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::auto_renew_period(this),
        _Internal::auto_renew_period(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.TokenRelationship token_relationships = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_token_relationships_size()); i < n; i++) {
    const auto& repfield = this->_internal_token_relationships(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string memo = 12;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GetAccountDetailsResponse.AccountDetails.memo");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_memo(), target);
  }

  // int64 owned_nfts = 13;
  if (this->_internal_owned_nfts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_owned_nfts(), target);
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_automatic_token_associations(), target);
  }

  // bytes alias = 15;
  if (!this->_internal_alias().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_alias(), target);
  }

  // bytes ledger_id = 16;
  if (!this->_internal_ledger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_ledger_id(), target);
  }

  // repeated .proto.GrantedCryptoAllowance granted_crypto_allowances = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_granted_crypto_allowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_granted_crypto_allowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.GrantedNftAllowance granted_nft_allowances = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_granted_nft_allowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_granted_nft_allowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.GrantedTokenAllowance granted_token_allowances = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_granted_token_allowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_granted_token_allowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetAccountDetailsResponse.AccountDetails)
  return target;
}

size_t GetAccountDetailsResponse_AccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetAccountDetailsResponse.AccountDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TokenRelationship token_relationships = 11;
  total_size += 1UL * this->_internal_token_relationships_size();
  for (const auto& msg : this->_impl_.token_relationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.GrantedCryptoAllowance granted_crypto_allowances = 17;
  total_size += 2UL * this->_internal_granted_crypto_allowances_size();
  for (const auto& msg : this->_impl_.granted_crypto_allowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.GrantedNftAllowance granted_nft_allowances = 18;
  total_size += 2UL * this->_internal_granted_nft_allowances_size();
  for (const auto& msg : this->_impl_.granted_nft_allowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.GrantedTokenAllowance granted_token_allowances = 19;
  total_size += 2UL * this->_internal_granted_token_allowances_size();
  for (const auto& msg : this->_impl_.granted_token_allowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_account_id = 2;
  if (!this->_internal_contract_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_account_id());
  }

  // string memo = 12;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes alias = 15;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_alias());
  }

  // bytes ledger_id = 16;
  if (!this->_internal_ledger_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_id());
  }

  // .proto.AccountID account_id = 1;
  if (this->_internal_has_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.account_id_);
  }

  // .proto.AccountID proxy_account_id = 4 [deprecated = true];
  if (this->_internal_has_proxy_account_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxy_account_id_);
  }

  // .proto.Key key = 6;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // .proto.Timestamp expiration_time = 9;
  if (this->_internal_has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_time_);
  }

  // .proto.Duration auto_renew_period = 10;
  if (this->_internal_has_auto_renew_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auto_renew_period_);
  }

  // int64 proxy_received = 5;
  if (this->_internal_proxy_received() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_proxy_received());
  }

  // uint64 balance = 7;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
  }

  // bool deleted = 3;
  if (this->_internal_deleted() != 0) {
    total_size += 1 + 1;
  }

  // bool receiver_sig_required = 8;
  if (this->_internal_receiver_sig_required() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_automatic_token_associations = 14;
  if (this->_internal_max_automatic_token_associations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_automatic_token_associations());
  }

  // int64 owned_nfts = 13;
  if (this->_internal_owned_nfts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_owned_nfts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountDetailsResponse_AccountDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountDetailsResponse_AccountDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountDetailsResponse_AccountDetails::GetClassData() const { return &_class_data_; }


void GetAccountDetailsResponse_AccountDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountDetailsResponse_AccountDetails*>(&to_msg);
  auto& from = static_cast<const GetAccountDetailsResponse_AccountDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GetAccountDetailsResponse.AccountDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.token_relationships_.MergeFrom(from._impl_.token_relationships_);
  _this->_impl_.granted_crypto_allowances_.MergeFrom(from._impl_.granted_crypto_allowances_);
  _this->_impl_.granted_nft_allowances_.MergeFrom(from._impl_.granted_nft_allowances_);
  _this->_impl_.granted_token_allowances_.MergeFrom(from._impl_.granted_token_allowances_);
  if (!from._internal_contract_account_id().empty()) {
    _this->_internal_set_contract_account_id(from._internal_contract_account_id());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_ledger_id().empty()) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_has_account_id()) {
    _this->_internal_mutable_account_id()->::proto::AccountID::MergeFrom(
        from._internal_account_id());
  }
  if (from._internal_has_proxy_account_id()) {
    _this->_internal_mutable_proxy_account_id()->::proto::AccountID::MergeFrom(
        from._internal_proxy_account_id());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::Key::MergeFrom(
        from._internal_key());
  }
  if (from._internal_has_expiration_time()) {
    _this->_internal_mutable_expiration_time()->::proto::Timestamp::MergeFrom(
        from._internal_expiration_time());
  }
  if (from._internal_has_auto_renew_period()) {
    _this->_internal_mutable_auto_renew_period()->::proto::Duration::MergeFrom(
        from._internal_auto_renew_period());
  }
  if (from._internal_proxy_received() != 0) {
    _this->_internal_set_proxy_received(from._internal_proxy_received());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_deleted() != 0) {
    _this->_internal_set_deleted(from._internal_deleted());
  }
  if (from._internal_receiver_sig_required() != 0) {
    _this->_internal_set_receiver_sig_required(from._internal_receiver_sig_required());
  }
  if (from._internal_max_automatic_token_associations() != 0) {
    _this->_internal_set_max_automatic_token_associations(from._internal_max_automatic_token_associations());
  }
  if (from._internal_owned_nfts() != 0) {
    _this->_internal_set_owned_nfts(from._internal_owned_nfts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountDetailsResponse_AccountDetails::CopyFrom(const GetAccountDetailsResponse_AccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetAccountDetailsResponse.AccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDetailsResponse_AccountDetails::IsInitialized() const {
  return true;
}

void GetAccountDetailsResponse_AccountDetails::InternalSwap(GetAccountDetailsResponse_AccountDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.token_relationships_.InternalSwap(&other->_impl_.token_relationships_);
  _impl_.granted_crypto_allowances_.InternalSwap(&other->_impl_.granted_crypto_allowances_);
  _impl_.granted_nft_allowances_.InternalSwap(&other->_impl_.granted_nft_allowances_);
  _impl_.granted_token_allowances_.InternalSwap(&other->_impl_.granted_token_allowances_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_account_id_, lhs_arena,
      &other->_impl_.contract_account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alias_, lhs_arena,
      &other->_impl_.alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_id_, lhs_arena,
      &other->_impl_.ledger_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccountDetailsResponse_AccountDetails, _impl_.owned_nfts_)
      + sizeof(GetAccountDetailsResponse_AccountDetails::_impl_.owned_nfts_)
      - PROTOBUF_FIELD_OFFSET(GetAccountDetailsResponse_AccountDetails, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDetailsResponse_AccountDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5faccount_5fdetails_2eproto_getter, &descriptor_table_get_5faccount_5fdetails_2eproto_once,
      file_level_metadata_get_5faccount_5fdetails_2eproto[1]);
}

// ===================================================================

class GetAccountDetailsResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const GetAccountDetailsResponse* msg);
  static const ::proto::GetAccountDetailsResponse_AccountDetails& account_details(const GetAccountDetailsResponse* msg);
};

const ::proto::ResponseHeader&
GetAccountDetailsResponse::_Internal::header(const GetAccountDetailsResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::GetAccountDetailsResponse_AccountDetails&
GetAccountDetailsResponse::_Internal::account_details(const GetAccountDetailsResponse* msg) {
  return *msg->_impl_.account_details_;
}
void GetAccountDetailsResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
GetAccountDetailsResponse::GetAccountDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GetAccountDetailsResponse)
}
GetAccountDetailsResponse::GetAccountDetailsResponse(const GetAccountDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountDetailsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.account_details_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_account_details()) {
    _this->_impl_.account_details_ = new ::proto::GetAccountDetailsResponse_AccountDetails(*from._impl_.account_details_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetAccountDetailsResponse)
}

inline void GetAccountDetailsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.account_details_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAccountDetailsResponse::~GetAccountDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.GetAccountDetailsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.account_details_;
}

void GetAccountDetailsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetAccountDetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.account_details_ != nullptr) {
    delete _impl_.account_details_;
  }
  _impl_.account_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDetailsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.GetAccountDetailsResponse.AccountDetails account_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAccountDetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetAccountDetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.GetAccountDetailsResponse.AccountDetails account_details = 2;
  if (this->_internal_has_account_details()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::account_details(this),
        _Internal::account_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetAccountDetailsResponse)
  return target;
}

size_t GetAccountDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetAccountDetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.GetAccountDetailsResponse.AccountDetails account_details = 2;
  if (this->_internal_has_account_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.account_details_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountDetailsResponse::GetClassData() const { return &_class_data_; }


void GetAccountDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountDetailsResponse*>(&to_msg);
  auto& from = static_cast<const GetAccountDetailsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GetAccountDetailsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_account_details()) {
    _this->_internal_mutable_account_details()->::proto::GetAccountDetailsResponse_AccountDetails::MergeFrom(
        from._internal_account_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountDetailsResponse::CopyFrom(const GetAccountDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetAccountDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDetailsResponse::IsInitialized() const {
  return true;
}

void GetAccountDetailsResponse::InternalSwap(GetAccountDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccountDetailsResponse, _impl_.account_details_)
      + sizeof(GetAccountDetailsResponse::_impl_.account_details_)
      - PROTOBUF_FIELD_OFFSET(GetAccountDetailsResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDetailsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5faccount_5fdetails_2eproto_getter, &descriptor_table_get_5faccount_5fdetails_2eproto_once,
      file_level_metadata_get_5faccount_5fdetails_2eproto[2]);
}

// ===================================================================

class GrantedCryptoAllowance::_Internal {
 public:
  static const ::proto::AccountID& spender(const GrantedCryptoAllowance* msg);
};

const ::proto::AccountID&
GrantedCryptoAllowance::_Internal::spender(const GrantedCryptoAllowance* msg) {
  return *msg->_impl_.spender_;
}
void GrantedCryptoAllowance::clear_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
}
GrantedCryptoAllowance::GrantedCryptoAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GrantedCryptoAllowance)
}
GrantedCryptoAllowance::GrantedCryptoAllowance(const GrantedCryptoAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantedCryptoAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spender()) {
    _this->_impl_.spender_ = new ::proto::AccountID(*from._impl_.spender_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.GrantedCryptoAllowance)
}

inline void GrantedCryptoAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrantedCryptoAllowance::~GrantedCryptoAllowance() {
  // @@protoc_insertion_point(destructor:proto.GrantedCryptoAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantedCryptoAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spender_;
}

void GrantedCryptoAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantedCryptoAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GrantedCryptoAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantedCryptoAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID spender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrantedCryptoAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GrantedCryptoAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID spender = 1;
  if (this->_internal_has_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spender(this),
        _Internal::spender(this).GetCachedSize(), target, stream);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GrantedCryptoAllowance)
  return target;
}

size_t GrantedCryptoAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GrantedCryptoAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.AccountID spender = 1;
  if (this->_internal_has_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantedCryptoAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantedCryptoAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantedCryptoAllowance::GetClassData() const { return &_class_data_; }


void GrantedCryptoAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantedCryptoAllowance*>(&to_msg);
  auto& from = static_cast<const GrantedCryptoAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GrantedCryptoAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spender()) {
    _this->_internal_mutable_spender()->::proto::AccountID::MergeFrom(
        from._internal_spender());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantedCryptoAllowance::CopyFrom(const GrantedCryptoAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GrantedCryptoAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantedCryptoAllowance::IsInitialized() const {
  return true;
}

void GrantedCryptoAllowance::InternalSwap(GrantedCryptoAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantedCryptoAllowance, _impl_.amount_)
      + sizeof(GrantedCryptoAllowance::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(GrantedCryptoAllowance, _impl_.spender_)>(
          reinterpret_cast<char*>(&_impl_.spender_),
          reinterpret_cast<char*>(&other->_impl_.spender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantedCryptoAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5faccount_5fdetails_2eproto_getter, &descriptor_table_get_5faccount_5fdetails_2eproto_once,
      file_level_metadata_get_5faccount_5fdetails_2eproto[3]);
}

// ===================================================================

class GrantedNftAllowance::_Internal {
 public:
  static const ::proto::TokenID& token_id(const GrantedNftAllowance* msg);
  static const ::proto::AccountID& spender(const GrantedNftAllowance* msg);
};

const ::proto::TokenID&
GrantedNftAllowance::_Internal::token_id(const GrantedNftAllowance* msg) {
  return *msg->_impl_.token_id_;
}
const ::proto::AccountID&
GrantedNftAllowance::_Internal::spender(const GrantedNftAllowance* msg) {
  return *msg->_impl_.spender_;
}
void GrantedNftAllowance::clear_token_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
}
void GrantedNftAllowance::clear_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
}
GrantedNftAllowance::GrantedNftAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GrantedNftAllowance)
}
GrantedNftAllowance::GrantedNftAllowance(const GrantedNftAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantedNftAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token_id()) {
    _this->_impl_.token_id_ = new ::proto::TokenID(*from._impl_.token_id_);
  }
  if (from._internal_has_spender()) {
    _this->_impl_.spender_ = new ::proto::AccountID(*from._impl_.spender_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.GrantedNftAllowance)
}

inline void GrantedNftAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrantedNftAllowance::~GrantedNftAllowance() {
  // @@protoc_insertion_point(destructor:proto.GrantedNftAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantedNftAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.token_id_;
  if (this != internal_default_instance()) delete _impl_.spender_;
}

void GrantedNftAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantedNftAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GrantedNftAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantedNftAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID token_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID spender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrantedNftAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GrantedNftAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID token_id = 1;
  if (this->_internal_has_token_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::token_id(this),
        _Internal::token_id(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID spender = 2;
  if (this->_internal_has_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spender(this),
        _Internal::spender(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GrantedNftAllowance)
  return target;
}

size_t GrantedNftAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GrantedNftAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TokenID token_id = 1;
  if (this->_internal_has_token_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_id_);
  }

  // .proto.AccountID spender = 2;
  if (this->_internal_has_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantedNftAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantedNftAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantedNftAllowance::GetClassData() const { return &_class_data_; }


void GrantedNftAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantedNftAllowance*>(&to_msg);
  auto& from = static_cast<const GrantedNftAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GrantedNftAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token_id()) {
    _this->_internal_mutable_token_id()->::proto::TokenID::MergeFrom(
        from._internal_token_id());
  }
  if (from._internal_has_spender()) {
    _this->_internal_mutable_spender()->::proto::AccountID::MergeFrom(
        from._internal_spender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantedNftAllowance::CopyFrom(const GrantedNftAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GrantedNftAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantedNftAllowance::IsInitialized() const {
  return true;
}

void GrantedNftAllowance::InternalSwap(GrantedNftAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantedNftAllowance, _impl_.spender_)
      + sizeof(GrantedNftAllowance::_impl_.spender_)
      - PROTOBUF_FIELD_OFFSET(GrantedNftAllowance, _impl_.token_id_)>(
          reinterpret_cast<char*>(&_impl_.token_id_),
          reinterpret_cast<char*>(&other->_impl_.token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantedNftAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5faccount_5fdetails_2eproto_getter, &descriptor_table_get_5faccount_5fdetails_2eproto_once,
      file_level_metadata_get_5faccount_5fdetails_2eproto[4]);
}

// ===================================================================

class GrantedTokenAllowance::_Internal {
 public:
  static const ::proto::TokenID& token_id(const GrantedTokenAllowance* msg);
  static const ::proto::AccountID& spender(const GrantedTokenAllowance* msg);
};

const ::proto::TokenID&
GrantedTokenAllowance::_Internal::token_id(const GrantedTokenAllowance* msg) {
  return *msg->_impl_.token_id_;
}
const ::proto::AccountID&
GrantedTokenAllowance::_Internal::spender(const GrantedTokenAllowance* msg) {
  return *msg->_impl_.spender_;
}
void GrantedTokenAllowance::clear_token_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
}
void GrantedTokenAllowance::clear_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
}
GrantedTokenAllowance::GrantedTokenAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GrantedTokenAllowance)
}
GrantedTokenAllowance::GrantedTokenAllowance(const GrantedTokenAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrantedTokenAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token_id()) {
    _this->_impl_.token_id_ = new ::proto::TokenID(*from._impl_.token_id_);
  }
  if (from._internal_has_spender()) {
    _this->_impl_.spender_ = new ::proto::AccountID(*from._impl_.spender_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.GrantedTokenAllowance)
}

inline void GrantedTokenAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_id_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrantedTokenAllowance::~GrantedTokenAllowance() {
  // @@protoc_insertion_point(destructor:proto.GrantedTokenAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrantedTokenAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.token_id_;
  if (this != internal_default_instance()) delete _impl_.spender_;
}

void GrantedTokenAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrantedTokenAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GrantedTokenAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.token_id_ != nullptr) {
    delete _impl_.token_id_;
  }
  _impl_.token_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantedTokenAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID token_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID spender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrantedTokenAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GrantedTokenAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID token_id = 1;
  if (this->_internal_has_token_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::token_id(this),
        _Internal::token_id(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID spender = 2;
  if (this->_internal_has_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spender(this),
        _Internal::spender(this).GetCachedSize(), target, stream);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GrantedTokenAllowance)
  return target;
}

size_t GrantedTokenAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GrantedTokenAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TokenID token_id = 1;
  if (this->_internal_has_token_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_id_);
  }

  // .proto.AccountID spender = 2;
  if (this->_internal_has_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrantedTokenAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrantedTokenAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrantedTokenAllowance::GetClassData() const { return &_class_data_; }


void GrantedTokenAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrantedTokenAllowance*>(&to_msg);
  auto& from = static_cast<const GrantedTokenAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GrantedTokenAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token_id()) {
    _this->_internal_mutable_token_id()->::proto::TokenID::MergeFrom(
        from._internal_token_id());
  }
  if (from._internal_has_spender()) {
    _this->_internal_mutable_spender()->::proto::AccountID::MergeFrom(
        from._internal_spender());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrantedTokenAllowance::CopyFrom(const GrantedTokenAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GrantedTokenAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantedTokenAllowance::IsInitialized() const {
  return true;
}

void GrantedTokenAllowance::InternalSwap(GrantedTokenAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrantedTokenAllowance, _impl_.amount_)
      + sizeof(GrantedTokenAllowance::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(GrantedTokenAllowance, _impl_.token_id_)>(
          reinterpret_cast<char*>(&_impl_.token_id_),
          reinterpret_cast<char*>(&other->_impl_.token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantedTokenAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_get_5faccount_5fdetails_2eproto_getter, &descriptor_table_get_5faccount_5fdetails_2eproto_once,
      file_level_metadata_get_5faccount_5fdetails_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::GetAccountDetailsQuery*
Arena::CreateMaybeMessage< ::proto::GetAccountDetailsQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetAccountDetailsQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GetAccountDetailsResponse_AccountDetails*
Arena::CreateMaybeMessage< ::proto::GetAccountDetailsResponse_AccountDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetAccountDetailsResponse_AccountDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GetAccountDetailsResponse*
Arena::CreateMaybeMessage< ::proto::GetAccountDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetAccountDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GrantedCryptoAllowance*
Arena::CreateMaybeMessage< ::proto::GrantedCryptoAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GrantedCryptoAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GrantedNftAllowance*
Arena::CreateMaybeMessage< ::proto::GrantedNftAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GrantedNftAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GrantedTokenAllowance*
Arena::CreateMaybeMessage< ::proto::GrantedTokenAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GrantedTokenAllowance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

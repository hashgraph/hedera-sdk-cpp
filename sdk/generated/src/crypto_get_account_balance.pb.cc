// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_get_account_balance.proto

#include "crypto_get_account_balance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoGetAccountBalanceQuery::CryptoGetAccountBalanceQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.balanceSource_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CryptoGetAccountBalanceQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetAccountBalanceQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetAccountBalanceQueryDefaultTypeInternal() {}
  union {
    CryptoGetAccountBalanceQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetAccountBalanceQueryDefaultTypeInternal _CryptoGetAccountBalanceQuery_default_instance_;
PROTOBUF_CONSTEXPR CryptoGetAccountBalanceResponse::CryptoGetAccountBalanceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokenbalances_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.balance_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoGetAccountBalanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoGetAccountBalanceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoGetAccountBalanceResponseDefaultTypeInternal() {}
  union {
    CryptoGetAccountBalanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoGetAccountBalanceResponseDefaultTypeInternal _CryptoGetAccountBalanceResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fget_5faccount_5fbalance_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fget_5faccount_5fbalance_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fget_5faccount_5fbalance_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fget_5faccount_5fbalance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceQuery, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceQuery, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceQuery, _impl_.balanceSource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceResponse, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceResponse, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoGetAccountBalanceResponse, _impl_.tokenbalances_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoGetAccountBalanceQuery)},
  { 10, -1, -1, sizeof(::proto::CryptoGetAccountBalanceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoGetAccountBalanceQuery_default_instance_._instance,
  &::proto::_CryptoGetAccountBalanceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fget_5faccount_5fbalance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n crypto_get_account_balance.proto\022\005prot"
  "o\032\021basic_types.proto\032\022query_header.proto"
  "\032\025response_header.proto\032\017timestamp.proto"
  "\"\243\001\n\034CryptoGetAccountBalanceQuery\022\"\n\006hea"
  "der\030\001 \001(\0132\022.proto.QueryHeader\022%\n\taccount"
  "ID\030\002 \001(\0132\020.proto.AccountIDH\000\022\'\n\ncontract"
  "ID\030\003 \001(\0132\021.proto.ContractIDH\000B\017\n\rbalance"
  "Source\"\256\001\n\037CryptoGetAccountBalanceRespon"
  "se\022%\n\006header\030\001 \001(\0132\025.proto.ResponseHeade"
  "r\022#\n\taccountID\030\002 \001(\0132\020.proto.AccountID\022\017"
  "\n\007balance\030\003 \001(\004\022.\n\rtokenBalances\030\004 \003(\0132\023"
  ".proto.TokenBalanceB\002\030\001B&\n\"com.hederahas"
  "hgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto = {
    false, false, 511, descriptor_table_protodef_crypto_5fget_5faccount_5fbalance_2eproto,
    "crypto_get_account_balance.proto",
    &descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_once, descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_deps, 4, 2,
    schemas, file_default_instances, TableStruct_crypto_5fget_5faccount_5fbalance_2eproto::offsets,
    file_level_metadata_crypto_5fget_5faccount_5fbalance_2eproto, file_level_enum_descriptors_crypto_5fget_5faccount_5fbalance_2eproto,
    file_level_service_descriptors_crypto_5fget_5faccount_5fbalance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_getter() {
  return &descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fget_5faccount_5fbalance_2eproto(&descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto);
namespace proto {

// ===================================================================

class CryptoGetAccountBalanceQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const CryptoGetAccountBalanceQuery* msg);
  static const ::proto::AccountID& accountid(const CryptoGetAccountBalanceQuery* msg);
  static const ::proto::ContractID& contractid(const CryptoGetAccountBalanceQuery* msg);
};

const ::proto::QueryHeader&
CryptoGetAccountBalanceQuery::_Internal::header(const CryptoGetAccountBalanceQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AccountID&
CryptoGetAccountBalanceQuery::_Internal::accountid(const CryptoGetAccountBalanceQuery* msg) {
  return *msg->_impl_.balanceSource_.accountid_;
}
const ::proto::ContractID&
CryptoGetAccountBalanceQuery::_Internal::contractid(const CryptoGetAccountBalanceQuery* msg) {
  return *msg->_impl_.balanceSource_.contractid_;
}
void CryptoGetAccountBalanceQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void CryptoGetAccountBalanceQuery::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_balanceSource();
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    set_has_accountid();
    _impl_.balanceSource_.accountid_ = accountid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetAccountBalanceQuery.accountID)
}
void CryptoGetAccountBalanceQuery::clear_accountid() {
  if (_internal_has_accountid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.balanceSource_.accountid_;
    }
    clear_has_balanceSource();
  }
}
void CryptoGetAccountBalanceQuery::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_balanceSource();
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    set_has_contractid();
    _impl_.balanceSource_.contractid_ = contractid;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetAccountBalanceQuery.contractID)
}
void CryptoGetAccountBalanceQuery::clear_contractid() {
  if (_internal_has_contractid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.balanceSource_.contractid_;
    }
    clear_has_balanceSource();
  }
}
CryptoGetAccountBalanceQuery::CryptoGetAccountBalanceQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetAccountBalanceQuery)
}
CryptoGetAccountBalanceQuery::CryptoGetAccountBalanceQuery(const CryptoGetAccountBalanceQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetAccountBalanceQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.balanceSource_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  clear_has_balanceSource();
  switch (from.balanceSource_case()) {
    case kAccountID: {
      _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
          from._internal_accountid());
      break;
    }
    case kContractID: {
      _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
          from._internal_contractid());
      break;
    }
    case BALANCESOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetAccountBalanceQuery)
}

inline void CryptoGetAccountBalanceQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.balanceSource_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_balanceSource();
}

CryptoGetAccountBalanceQuery::~CryptoGetAccountBalanceQuery() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetAccountBalanceQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetAccountBalanceQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_balanceSource()) {
    clear_balanceSource();
  }
}

void CryptoGetAccountBalanceQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetAccountBalanceQuery::clear_balanceSource() {
// @@protoc_insertion_point(one_of_clear_start:proto.CryptoGetAccountBalanceQuery)
  switch (balanceSource_case()) {
    case kAccountID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.balanceSource_.accountid_;
      }
      break;
    }
    case kContractID: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.balanceSource_.contractid_;
      }
      break;
    }
    case BALANCESOURCE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BALANCESOURCE_NOT_SET;
}


void CryptoGetAccountBalanceQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetAccountBalanceQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_balanceSource();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetAccountBalanceQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ContractID contractID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contractid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetAccountBalanceQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetAccountBalanceQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // .proto.ContractID contractID = 3;
  if (_internal_has_contractid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contractid(this),
        _Internal::contractid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetAccountBalanceQuery)
  return target;
}

size_t CryptoGetAccountBalanceQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetAccountBalanceQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (balanceSource_case()) {
    // .proto.AccountID accountID = 2;
    case kAccountID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.balanceSource_.accountid_);
      break;
    }
    // .proto.ContractID contractID = 3;
    case kContractID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.balanceSource_.contractid_);
      break;
    }
    case BALANCESOURCE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetAccountBalanceQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetAccountBalanceQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetAccountBalanceQuery::GetClassData() const { return &_class_data_; }


void CryptoGetAccountBalanceQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetAccountBalanceQuery*>(&to_msg);
  auto& from = static_cast<const CryptoGetAccountBalanceQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetAccountBalanceQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  switch (from.balanceSource_case()) {
    case kAccountID: {
      _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
          from._internal_accountid());
      break;
    }
    case kContractID: {
      _this->_internal_mutable_contractid()->::proto::ContractID::MergeFrom(
          from._internal_contractid());
      break;
    }
    case BALANCESOURCE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetAccountBalanceQuery::CopyFrom(const CryptoGetAccountBalanceQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetAccountBalanceQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetAccountBalanceQuery::IsInitialized() const {
  return true;
}

void CryptoGetAccountBalanceQuery::InternalSwap(CryptoGetAccountBalanceQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.balanceSource_, other->_impl_.balanceSource_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetAccountBalanceQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_getter, &descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_once,
      file_level_metadata_crypto_5fget_5faccount_5fbalance_2eproto[0]);
}

// ===================================================================

class CryptoGetAccountBalanceResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const CryptoGetAccountBalanceResponse* msg);
  static const ::proto::AccountID& accountid(const CryptoGetAccountBalanceResponse* msg);
};

const ::proto::ResponseHeader&
CryptoGetAccountBalanceResponse::_Internal::header(const CryptoGetAccountBalanceResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::AccountID&
CryptoGetAccountBalanceResponse::_Internal::accountid(const CryptoGetAccountBalanceResponse* msg) {
  return *msg->_impl_.accountid_;
}
void CryptoGetAccountBalanceResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void CryptoGetAccountBalanceResponse::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
void CryptoGetAccountBalanceResponse::clear_tokenbalances() {
  _impl_.tokenbalances_.Clear();
}
CryptoGetAccountBalanceResponse::CryptoGetAccountBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoGetAccountBalanceResponse)
}
CryptoGetAccountBalanceResponse::CryptoGetAccountBalanceResponse(const CryptoGetAccountBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoGetAccountBalanceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenbalances_){from._impl_.tokenbalances_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  _this->_impl_.balance_ = from._impl_.balance_;
  // @@protoc_insertion_point(copy_constructor:proto.CryptoGetAccountBalanceResponse)
}

inline void CryptoGetAccountBalanceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenbalances_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.balance_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoGetAccountBalanceResponse::~CryptoGetAccountBalanceResponse() {
  // @@protoc_insertion_point(destructor:proto.CryptoGetAccountBalanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoGetAccountBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tokenbalances_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.accountid_;
}

void CryptoGetAccountBalanceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoGetAccountBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoGetAccountBalanceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tokenbalances_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  _impl_.balance_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoGetAccountBalanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenBalance tokenBalances = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokenbalances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoGetAccountBalanceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoGetAccountBalanceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // uint64 balance = 3;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_balance(), target);
  }

  // repeated .proto.TokenBalance tokenBalances = 4 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokenbalances_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokenbalances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoGetAccountBalanceResponse)
  return target;
}

size_t CryptoGetAccountBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoGetAccountBalanceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TokenBalance tokenBalances = 4 [deprecated = true];
  total_size += 1UL * this->_internal_tokenbalances_size();
  for (const auto& msg : this->_impl_.tokenbalances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // uint64 balance = 3;
  if (this->_internal_balance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoGetAccountBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoGetAccountBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoGetAccountBalanceResponse::GetClassData() const { return &_class_data_; }


void CryptoGetAccountBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoGetAccountBalanceResponse*>(&to_msg);
  auto& from = static_cast<const CryptoGetAccountBalanceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoGetAccountBalanceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tokenbalances_.MergeFrom(from._impl_.tokenbalances_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_balance() != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoGetAccountBalanceResponse::CopyFrom(const CryptoGetAccountBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoGetAccountBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoGetAccountBalanceResponse::IsInitialized() const {
  return true;
}

void CryptoGetAccountBalanceResponse::InternalSwap(CryptoGetAccountBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tokenbalances_.InternalSwap(&other->_impl_.tokenbalances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoGetAccountBalanceResponse, _impl_.balance_)
      + sizeof(CryptoGetAccountBalanceResponse::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(CryptoGetAccountBalanceResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoGetAccountBalanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_getter, &descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto_once,
      file_level_metadata_crypto_5fget_5faccount_5fbalance_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoGetAccountBalanceQuery*
Arena::CreateMaybeMessage< ::proto::CryptoGetAccountBalanceQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetAccountBalanceQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CryptoGetAccountBalanceResponse*
Arena::CreateMaybeMessage< ::proto::CryptoGetAccountBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoGetAccountBalanceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

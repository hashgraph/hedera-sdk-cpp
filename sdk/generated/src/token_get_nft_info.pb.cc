// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_get_nft_info.proto

#include "token_get_nft_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR NftID::NftID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokenid_)*/nullptr
  , /*decltype(_impl_.serialnumber_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NftIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NftIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NftIDDefaultTypeInternal() {}
  union {
    NftID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NftIDDefaultTypeInternal _NftID_default_instance_;
PROTOBUF_CONSTEXPR TokenGetNftInfoQuery::TokenGetNftInfoQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.nftid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenGetNftInfoQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenGetNftInfoQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenGetNftInfoQueryDefaultTypeInternal() {}
  union {
    TokenGetNftInfoQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenGetNftInfoQueryDefaultTypeInternal _TokenGetNftInfoQuery_default_instance_;
PROTOBUF_CONSTEXPR TokenNftInfo::TokenNftInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nftid_)*/nullptr
  , /*decltype(_impl_.accountid_)*/nullptr
  , /*decltype(_impl_.creationtime_)*/nullptr
  , /*decltype(_impl_.spender_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenNftInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenNftInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenNftInfoDefaultTypeInternal() {}
  union {
    TokenNftInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenNftInfoDefaultTypeInternal _TokenNftInfo_default_instance_;
PROTOBUF_CONSTEXPR TokenGetNftInfoResponse::TokenGetNftInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.nft_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenGetNftInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenGetNftInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenGetNftInfoResponseDefaultTypeInternal() {}
  union {
    TokenGetNftInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenGetNftInfoResponseDefaultTypeInternal _TokenGetNftInfoResponse_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_token_5fget_5fnft_5finfo_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_token_5fget_5fnft_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_token_5fget_5fnft_5finfo_2eproto = nullptr;

const uint32_t TableStruct_token_5fget_5fnft_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::NftID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NftID, _impl_.tokenid_),
  PROTOBUF_FIELD_OFFSET(::proto::NftID, _impl_.serialnumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetNftInfoQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetNftInfoQuery, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetNftInfoQuery, _impl_.nftid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _impl_.nftid_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _impl_.creationtime_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _impl_.ledger_id_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenNftInfo, _impl_.spender_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetNftInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetNftInfoResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenGetNftInfoResponse, _impl_.nft_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::NftID)},
  { 8, -1, -1, sizeof(::proto::TokenGetNftInfoQuery)},
  { 16, -1, -1, sizeof(::proto::TokenNftInfo)},
  { 28, -1, -1, sizeof(::proto::TokenGetNftInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_NftID_default_instance_._instance,
  &::proto::_TokenGetNftInfoQuery_default_instance_._instance,
  &::proto::_TokenNftInfo_default_instance_._instance,
  &::proto::_TokenGetNftInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_token_5fget_5fnft_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030token_get_nft_info.proto\022\005proto\032\021basic"
  "_types.proto\032\022query_header.proto\032\025respon"
  "se_header.proto\032\017timestamp.proto\">\n\005NftI"
  "D\022\037\n\007tokenID\030\001 \001(\0132\016.proto.TokenID\022\024\n\014se"
  "rialNumber\030\002 \001(\003\"W\n\024TokenGetNftInfoQuery"
  "\022\"\n\006header\030\001 \001(\0132\022.proto.QueryHeader\022\033\n\005"
  "nftID\030\002 \001(\0132\014.proto.NftID\"\303\001\n\014TokenNftIn"
  "fo\022\033\n\005nftID\030\001 \001(\0132\014.proto.NftID\022#\n\taccou"
  "ntID\030\002 \001(\0132\020.proto.AccountID\022&\n\014creation"
  "Time\030\003 \001(\0132\020.proto.Timestamp\022\020\n\010metadata"
  "\030\004 \001(\014\022\021\n\tledger_id\030\005 \001(\014\022$\n\nspender_id\030"
  "\006 \001(\0132\020.proto.AccountID\"b\n\027TokenGetNftIn"
  "foResponse\022%\n\006header\030\001 \001(\0132\025.proto.Respo"
  "nseHeader\022 \n\003nft\030\002 \001(\0132\023.proto.TokenNftI"
  "nfoB&\n\"com.hederahashgraph.api.proto.jav"
  "aP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_token_5fget_5fnft_5finfo_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_query_5fheader_2eproto,
  &::descriptor_table_response_5fheader_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_token_5fget_5fnft_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_token_5fget_5fnft_5finfo_2eproto = {
    false, false, 611, descriptor_table_protodef_token_5fget_5fnft_5finfo_2eproto,
    "token_get_nft_info.proto",
    &descriptor_table_token_5fget_5fnft_5finfo_2eproto_once, descriptor_table_token_5fget_5fnft_5finfo_2eproto_deps, 4, 4,
    schemas, file_default_instances, TableStruct_token_5fget_5fnft_5finfo_2eproto::offsets,
    file_level_metadata_token_5fget_5fnft_5finfo_2eproto, file_level_enum_descriptors_token_5fget_5fnft_5finfo_2eproto,
    file_level_service_descriptors_token_5fget_5fnft_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_token_5fget_5fnft_5finfo_2eproto_getter() {
  return &descriptor_table_token_5fget_5fnft_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_token_5fget_5fnft_5finfo_2eproto(&descriptor_table_token_5fget_5fnft_5finfo_2eproto);
namespace proto {

// ===================================================================

class NftID::_Internal {
 public:
  static const ::proto::TokenID& tokenid(const NftID* msg);
};

const ::proto::TokenID&
NftID::_Internal::tokenid(const NftID* msg) {
  return *msg->_impl_.tokenid_;
}
void NftID::clear_tokenid() {
  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
}
NftID::NftID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NftID)
}
NftID::NftID(const NftID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NftID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.serialnumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tokenid()) {
    _this->_impl_.tokenid_ = new ::proto::TokenID(*from._impl_.tokenid_);
  }
  _this->_impl_.serialnumber_ = from._impl_.serialnumber_;
  // @@protoc_insertion_point(copy_constructor:proto.NftID)
}

inline void NftID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.serialnumber_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NftID::~NftID() {
  // @@protoc_insertion_point(destructor:proto.NftID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NftID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tokenid_;
}

void NftID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NftID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NftID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
  _impl_.serialnumber_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NftID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID tokenID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 serialNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NftID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NftID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID tokenID = 1;
  if (this->_internal_has_tokenid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tokenid(this),
        _Internal::tokenid(this).GetCachedSize(), target, stream);
  }

  // int64 serialNumber = 2;
  if (this->_internal_serialnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_serialnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NftID)
  return target;
}

size_t NftID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NftID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TokenID tokenID = 1;
  if (this->_internal_has_tokenid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tokenid_);
  }

  // int64 serialNumber = 2;
  if (this->_internal_serialnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_serialnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NftID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NftID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NftID::GetClassData() const { return &_class_data_; }


void NftID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NftID*>(&to_msg);
  auto& from = static_cast<const NftID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NftID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tokenid()) {
    _this->_internal_mutable_tokenid()->::proto::TokenID::MergeFrom(
        from._internal_tokenid());
  }
  if (from._internal_serialnumber() != 0) {
    _this->_internal_set_serialnumber(from._internal_serialnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NftID::CopyFrom(const NftID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NftID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NftID::IsInitialized() const {
  return true;
}

void NftID::InternalSwap(NftID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NftID, _impl_.serialnumber_)
      + sizeof(NftID::_impl_.serialnumber_)
      - PROTOBUF_FIELD_OFFSET(NftID, _impl_.tokenid_)>(
          reinterpret_cast<char*>(&_impl_.tokenid_),
          reinterpret_cast<char*>(&other->_impl_.tokenid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NftID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fget_5fnft_5finfo_2eproto_getter, &descriptor_table_token_5fget_5fnft_5finfo_2eproto_once,
      file_level_metadata_token_5fget_5fnft_5finfo_2eproto[0]);
}

// ===================================================================

class TokenGetNftInfoQuery::_Internal {
 public:
  static const ::proto::QueryHeader& header(const TokenGetNftInfoQuery* msg);
  static const ::proto::NftID& nftid(const TokenGetNftInfoQuery* msg);
};

const ::proto::QueryHeader&
TokenGetNftInfoQuery::_Internal::header(const TokenGetNftInfoQuery* msg) {
  return *msg->_impl_.header_;
}
const ::proto::NftID&
TokenGetNftInfoQuery::_Internal::nftid(const TokenGetNftInfoQuery* msg) {
  return *msg->_impl_.nftid_;
}
void TokenGetNftInfoQuery::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
TokenGetNftInfoQuery::TokenGetNftInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenGetNftInfoQuery)
}
TokenGetNftInfoQuery::TokenGetNftInfoQuery(const TokenGetNftInfoQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenGetNftInfoQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.nftid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::QueryHeader(*from._impl_.header_);
  }
  if (from._internal_has_nftid()) {
    _this->_impl_.nftid_ = new ::proto::NftID(*from._impl_.nftid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TokenGetNftInfoQuery)
}

inline void TokenGetNftInfoQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.nftid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenGetNftInfoQuery::~TokenGetNftInfoQuery() {
  // @@protoc_insertion_point(destructor:proto.TokenGetNftInfoQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenGetNftInfoQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.nftid_;
}

void TokenGetNftInfoQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenGetNftInfoQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenGetNftInfoQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nftid_ != nullptr) {
    delete _impl_.nftid_;
  }
  _impl_.nftid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenGetNftInfoQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.QueryHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.NftID nftID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nftid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenGetNftInfoQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenGetNftInfoQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.NftID nftID = 2;
  if (this->_internal_has_nftid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nftid(this),
        _Internal::nftid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenGetNftInfoQuery)
  return target;
}

size_t TokenGetNftInfoQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenGetNftInfoQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.QueryHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.NftID nftID = 2;
  if (this->_internal_has_nftid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nftid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenGetNftInfoQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenGetNftInfoQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenGetNftInfoQuery::GetClassData() const { return &_class_data_; }


void TokenGetNftInfoQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenGetNftInfoQuery*>(&to_msg);
  auto& from = static_cast<const TokenGetNftInfoQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenGetNftInfoQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::QueryHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_nftid()) {
    _this->_internal_mutable_nftid()->::proto::NftID::MergeFrom(
        from._internal_nftid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenGetNftInfoQuery::CopyFrom(const TokenGetNftInfoQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenGetNftInfoQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenGetNftInfoQuery::IsInitialized() const {
  return true;
}

void TokenGetNftInfoQuery::InternalSwap(TokenGetNftInfoQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenGetNftInfoQuery, _impl_.nftid_)
      + sizeof(TokenGetNftInfoQuery::_impl_.nftid_)
      - PROTOBUF_FIELD_OFFSET(TokenGetNftInfoQuery, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenGetNftInfoQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fget_5fnft_5finfo_2eproto_getter, &descriptor_table_token_5fget_5fnft_5finfo_2eproto_once,
      file_level_metadata_token_5fget_5fnft_5finfo_2eproto[1]);
}

// ===================================================================

class TokenNftInfo::_Internal {
 public:
  static const ::proto::NftID& nftid(const TokenNftInfo* msg);
  static const ::proto::AccountID& accountid(const TokenNftInfo* msg);
  static const ::proto::Timestamp& creationtime(const TokenNftInfo* msg);
  static const ::proto::AccountID& spender_id(const TokenNftInfo* msg);
};

const ::proto::NftID&
TokenNftInfo::_Internal::nftid(const TokenNftInfo* msg) {
  return *msg->_impl_.nftid_;
}
const ::proto::AccountID&
TokenNftInfo::_Internal::accountid(const TokenNftInfo* msg) {
  return *msg->_impl_.accountid_;
}
const ::proto::Timestamp&
TokenNftInfo::_Internal::creationtime(const TokenNftInfo* msg) {
  return *msg->_impl_.creationtime_;
}
const ::proto::AccountID&
TokenNftInfo::_Internal::spender_id(const TokenNftInfo* msg) {
  return *msg->_impl_.spender_id_;
}
void TokenNftInfo::clear_accountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
}
void TokenNftInfo::clear_creationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.creationtime_ != nullptr) {
    delete _impl_.creationtime_;
  }
  _impl_.creationtime_ = nullptr;
}
void TokenNftInfo::clear_spender_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_id_ != nullptr) {
    delete _impl_.spender_id_;
  }
  _impl_.spender_id_ = nullptr;
}
TokenNftInfo::TokenNftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenNftInfo)
}
TokenNftInfo::TokenNftInfo(const TokenNftInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenNftInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.nftid_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.creationtime_){nullptr}
    , decltype(_impl_.spender_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_id().empty()) {
    _this->_impl_.ledger_id_.Set(from._internal_ledger_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nftid()) {
    _this->_impl_.nftid_ = new ::proto::NftID(*from._impl_.nftid_);
  }
  if (from._internal_has_accountid()) {
    _this->_impl_.accountid_ = new ::proto::AccountID(*from._impl_.accountid_);
  }
  if (from._internal_has_creationtime()) {
    _this->_impl_.creationtime_ = new ::proto::Timestamp(*from._impl_.creationtime_);
  }
  if (from._internal_has_spender_id()) {
    _this->_impl_.spender_id_ = new ::proto::AccountID(*from._impl_.spender_id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TokenNftInfo)
}

inline void TokenNftInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.nftid_){nullptr}
    , decltype(_impl_.accountid_){nullptr}
    , decltype(_impl_.creationtime_){nullptr}
    , decltype(_impl_.spender_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ledger_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenNftInfo::~TokenNftInfo() {
  // @@protoc_insertion_point(destructor:proto.TokenNftInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenNftInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
  _impl_.ledger_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nftid_;
  if (this != internal_default_instance()) delete _impl_.accountid_;
  if (this != internal_default_instance()) delete _impl_.creationtime_;
  if (this != internal_default_instance()) delete _impl_.spender_id_;
}

void TokenNftInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenNftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenNftInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.ClearToEmpty();
  _impl_.ledger_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.nftid_ != nullptr) {
    delete _impl_.nftid_;
  }
  _impl_.nftid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.accountid_ != nullptr) {
    delete _impl_.accountid_;
  }
  _impl_.accountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.creationtime_ != nullptr) {
    delete _impl_.creationtime_;
  }
  _impl_.creationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spender_id_ != nullptr) {
    delete _impl_.spender_id_;
  }
  _impl_.spender_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenNftInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.NftID nftID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nftid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID accountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp creationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_creationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ledger_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ledger_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID spender_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenNftInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenNftInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.NftID nftID = 1;
  if (this->_internal_has_nftid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nftid(this),
        _Internal::nftid(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountid(this),
        _Internal::accountid(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp creationTime = 3;
  if (this->_internal_has_creationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::creationtime(this),
        _Internal::creationtime(this).GetCachedSize(), target, stream);
  }

  // bytes metadata = 4;
  if (!this->_internal_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_metadata(), target);
  }

  // bytes ledger_id = 5;
  if (!this->_internal_ledger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ledger_id(), target);
  }

  // .proto.AccountID spender_id = 6;
  if (this->_internal_has_spender_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::spender_id(this),
        _Internal::spender_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenNftInfo)
  return target;
}

size_t TokenNftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenNftInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes metadata = 4;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // bytes ledger_id = 5;
  if (!this->_internal_ledger_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_id());
  }

  // .proto.NftID nftID = 1;
  if (this->_internal_has_nftid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nftid_);
  }

  // .proto.AccountID accountID = 2;
  if (this->_internal_has_accountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountid_);
  }

  // .proto.Timestamp creationTime = 3;
  if (this->_internal_has_creationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.creationtime_);
  }

  // .proto.AccountID spender_id = 6;
  if (this->_internal_has_spender_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenNftInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenNftInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenNftInfo::GetClassData() const { return &_class_data_; }


void TokenNftInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenNftInfo*>(&to_msg);
  auto& from = static_cast<const TokenNftInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenNftInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_ledger_id().empty()) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_has_nftid()) {
    _this->_internal_mutable_nftid()->::proto::NftID::MergeFrom(
        from._internal_nftid());
  }
  if (from._internal_has_accountid()) {
    _this->_internal_mutable_accountid()->::proto::AccountID::MergeFrom(
        from._internal_accountid());
  }
  if (from._internal_has_creationtime()) {
    _this->_internal_mutable_creationtime()->::proto::Timestamp::MergeFrom(
        from._internal_creationtime());
  }
  if (from._internal_has_spender_id()) {
    _this->_internal_mutable_spender_id()->::proto::AccountID::MergeFrom(
        from._internal_spender_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenNftInfo::CopyFrom(const TokenNftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenNftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenNftInfo::IsInitialized() const {
  return true;
}

void TokenNftInfo::InternalSwap(TokenNftInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_id_, lhs_arena,
      &other->_impl_.ledger_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenNftInfo, _impl_.spender_id_)
      + sizeof(TokenNftInfo::_impl_.spender_id_)
      - PROTOBUF_FIELD_OFFSET(TokenNftInfo, _impl_.nftid_)>(
          reinterpret_cast<char*>(&_impl_.nftid_),
          reinterpret_cast<char*>(&other->_impl_.nftid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenNftInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fget_5fnft_5finfo_2eproto_getter, &descriptor_table_token_5fget_5fnft_5finfo_2eproto_once,
      file_level_metadata_token_5fget_5fnft_5finfo_2eproto[2]);
}

// ===================================================================

class TokenGetNftInfoResponse::_Internal {
 public:
  static const ::proto::ResponseHeader& header(const TokenGetNftInfoResponse* msg);
  static const ::proto::TokenNftInfo& nft(const TokenGetNftInfoResponse* msg);
};

const ::proto::ResponseHeader&
TokenGetNftInfoResponse::_Internal::header(const TokenGetNftInfoResponse* msg) {
  return *msg->_impl_.header_;
}
const ::proto::TokenNftInfo&
TokenGetNftInfoResponse::_Internal::nft(const TokenGetNftInfoResponse* msg) {
  return *msg->_impl_.nft_;
}
void TokenGetNftInfoResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
TokenGetNftInfoResponse::TokenGetNftInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenGetNftInfoResponse)
}
TokenGetNftInfoResponse::TokenGetNftInfoResponse(const TokenGetNftInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenGetNftInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.nft_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::proto::ResponseHeader(*from._impl_.header_);
  }
  if (from._internal_has_nft()) {
    _this->_impl_.nft_ = new ::proto::TokenNftInfo(*from._impl_.nft_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TokenGetNftInfoResponse)
}

inline void TokenGetNftInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.nft_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenGetNftInfoResponse::~TokenGetNftInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.TokenGetNftInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenGetNftInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.nft_;
}

void TokenGetNftInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenGetNftInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenGetNftInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nft_ != nullptr) {
    delete _impl_.nft_;
  }
  _impl_.nft_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenGetNftInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenNftInfo nft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenGetNftInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenGetNftInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .proto.TokenNftInfo nft = 2;
  if (this->_internal_has_nft()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nft(this),
        _Internal::nft(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenGetNftInfoResponse)
  return target;
}

size_t TokenGetNftInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenGetNftInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .proto.TokenNftInfo nft = 2;
  if (this->_internal_has_nft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nft_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenGetNftInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenGetNftInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenGetNftInfoResponse::GetClassData() const { return &_class_data_; }


void TokenGetNftInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenGetNftInfoResponse*>(&to_msg);
  auto& from = static_cast<const TokenGetNftInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenGetNftInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::proto::ResponseHeader::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_nft()) {
    _this->_internal_mutable_nft()->::proto::TokenNftInfo::MergeFrom(
        from._internal_nft());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenGetNftInfoResponse::CopyFrom(const TokenGetNftInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenGetNftInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenGetNftInfoResponse::IsInitialized() const {
  return true;
}

void TokenGetNftInfoResponse::InternalSwap(TokenGetNftInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenGetNftInfoResponse, _impl_.nft_)
      + sizeof(TokenGetNftInfoResponse::_impl_.nft_)
      - PROTOBUF_FIELD_OFFSET(TokenGetNftInfoResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenGetNftInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fget_5fnft_5finfo_2eproto_getter, &descriptor_table_token_5fget_5fnft_5finfo_2eproto_once,
      file_level_metadata_token_5fget_5fnft_5finfo_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::NftID*
Arena::CreateMaybeMessage< ::proto::NftID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NftID >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TokenGetNftInfoQuery*
Arena::CreateMaybeMessage< ::proto::TokenGetNftInfoQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenGetNftInfoQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TokenNftInfo*
Arena::CreateMaybeMessage< ::proto::TokenNftInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenNftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TokenGetNftInfoResponse*
Arena::CreateMaybeMessage< ::proto::TokenGetNftInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenGetNftInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

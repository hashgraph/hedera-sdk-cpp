// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_approve_allowance.proto

#include "crypto_approve_allowance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoApproveAllowanceTransactionBody::CryptoApproveAllowanceTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cryptoallowances_)*/{}
  , /*decltype(_impl_.nftallowances_)*/{}
  , /*decltype(_impl_.tokenallowances_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoApproveAllowanceTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoApproveAllowanceTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoApproveAllowanceTransactionBodyDefaultTypeInternal() {}
  union {
    CryptoApproveAllowanceTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoApproveAllowanceTransactionBodyDefaultTypeInternal _CryptoApproveAllowanceTransactionBody_default_instance_;
PROTOBUF_CONSTEXPR CryptoAllowance::CryptoAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.spender_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CryptoAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoAllowanceDefaultTypeInternal() {}
  union {
    CryptoAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoAllowanceDefaultTypeInternal _CryptoAllowance_default_instance_;
PROTOBUF_CONSTEXPR NftAllowance::NftAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serial_numbers_)*/{}
  , /*decltype(_impl_._serial_numbers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tokenid_)*/nullptr
  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.spender_)*/nullptr
  , /*decltype(_impl_.approved_for_all_)*/nullptr
  , /*decltype(_impl_.delegating_spender_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NftAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NftAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NftAllowanceDefaultTypeInternal() {}
  union {
    NftAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NftAllowanceDefaultTypeInternal _NftAllowance_default_instance_;
PROTOBUF_CONSTEXPR TokenAllowance::TokenAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tokenid_)*/nullptr
  , /*decltype(_impl_.owner_)*/nullptr
  , /*decltype(_impl_.spender_)*/nullptr
  , /*decltype(_impl_.amount_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenAllowanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenAllowanceDefaultTypeInternal() {}
  union {
    TokenAllowance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenAllowanceDefaultTypeInternal _TokenAllowance_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fapprove_5fallowance_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fapprove_5fallowance_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fapprove_5fallowance_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fapprove_5fallowance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoApproveAllowanceTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoApproveAllowanceTransactionBody, _impl_.cryptoallowances_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoApproveAllowanceTransactionBody, _impl_.nftallowances_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoApproveAllowanceTransactionBody, _impl_.tokenallowances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoAllowance, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoAllowance, _impl_.spender_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoAllowance, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _impl_.tokenid_),
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _impl_.spender_),
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _impl_.serial_numbers_),
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _impl_.approved_for_all_),
  PROTOBUF_FIELD_OFFSET(::proto::NftAllowance, _impl_.delegating_spender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenAllowance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenAllowance, _impl_.tokenid_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenAllowance, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenAllowance, _impl_.spender_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenAllowance, _impl_.amount_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoApproveAllowanceTransactionBody)},
  { 9, -1, -1, sizeof(::proto::CryptoAllowance)},
  { 18, -1, -1, sizeof(::proto::NftAllowance)},
  { 30, -1, -1, sizeof(::proto::TokenAllowance)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoApproveAllowanceTransactionBody_default_instance_._instance,
  &::proto::_CryptoAllowance_default_instance_._instance,
  &::proto::_NftAllowance_default_instance_._instance,
  &::proto::_TokenAllowance_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fapprove_5fallowance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036crypto_approve_allowance.proto\022\005proto\032"
  "\021basic_types.proto\032\036google/protobuf/wrap"
  "pers.proto\"\265\001\n%CryptoApproveAllowanceTra"
  "nsactionBody\0220\n\020cryptoAllowances\030\001 \003(\0132\026"
  ".proto.CryptoAllowance\022*\n\rnftAllowances\030"
  "\002 \003(\0132\023.proto.NftAllowance\022.\n\017tokenAllow"
  "ances\030\003 \003(\0132\025.proto.TokenAllowance\"e\n\017Cr"
  "yptoAllowance\022\037\n\005owner\030\001 \001(\0132\020.proto.Acc"
  "ountID\022!\n\007spender\030\002 \001(\0132\020.proto.AccountI"
  "D\022\016\n\006amount\030\003 \001(\003\"\357\001\n\014NftAllowance\022\037\n\007to"
  "kenId\030\001 \001(\0132\016.proto.TokenID\022\037\n\005owner\030\002 \001"
  "(\0132\020.proto.AccountID\022!\n\007spender\030\003 \001(\0132\020."
  "proto.AccountID\022\026\n\016serial_numbers\030\004 \003(\003\022"
  "4\n\020approved_for_all\030\005 \001(\0132\032.google.proto"
  "buf.BoolValue\022,\n\022delegating_spender\030\006 \001("
  "\0132\020.proto.AccountID\"\205\001\n\016TokenAllowance\022\037"
  "\n\007tokenId\030\001 \001(\0132\016.proto.TokenID\022\037\n\005owner"
  "\030\002 \001(\0132\020.proto.AccountID\022!\n\007spender\030\003 \001("
  "\0132\020.proto.AccountID\022\016\n\006amount\030\004 \001(\003B&\n\"c"
  "om.hederahashgraph.api.proto.javaP\001b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fapprove_5fallowance_2eproto_deps[2] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fapprove_5fallowance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fapprove_5fallowance_2eproto = {
    false, false, 803, descriptor_table_protodef_crypto_5fapprove_5fallowance_2eproto,
    "crypto_approve_allowance.proto",
    &descriptor_table_crypto_5fapprove_5fallowance_2eproto_once, descriptor_table_crypto_5fapprove_5fallowance_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_crypto_5fapprove_5fallowance_2eproto::offsets,
    file_level_metadata_crypto_5fapprove_5fallowance_2eproto, file_level_enum_descriptors_crypto_5fapprove_5fallowance_2eproto,
    file_level_service_descriptors_crypto_5fapprove_5fallowance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fapprove_5fallowance_2eproto_getter() {
  return &descriptor_table_crypto_5fapprove_5fallowance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fapprove_5fallowance_2eproto(&descriptor_table_crypto_5fapprove_5fallowance_2eproto);
namespace proto {

// ===================================================================

class CryptoApproveAllowanceTransactionBody::_Internal {
 public:
};

CryptoApproveAllowanceTransactionBody::CryptoApproveAllowanceTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoApproveAllowanceTransactionBody)
}
CryptoApproveAllowanceTransactionBody::CryptoApproveAllowanceTransactionBody(const CryptoApproveAllowanceTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoApproveAllowanceTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cryptoallowances_){from._impl_.cryptoallowances_}
    , decltype(_impl_.nftallowances_){from._impl_.nftallowances_}
    , decltype(_impl_.tokenallowances_){from._impl_.tokenallowances_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CryptoApproveAllowanceTransactionBody)
}

inline void CryptoApproveAllowanceTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cryptoallowances_){arena}
    , decltype(_impl_.nftallowances_){arena}
    , decltype(_impl_.tokenallowances_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoApproveAllowanceTransactionBody::~CryptoApproveAllowanceTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.CryptoApproveAllowanceTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoApproveAllowanceTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cryptoallowances_.~RepeatedPtrField();
  _impl_.nftallowances_.~RepeatedPtrField();
  _impl_.tokenallowances_.~RepeatedPtrField();
}

void CryptoApproveAllowanceTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoApproveAllowanceTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoApproveAllowanceTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cryptoallowances_.Clear();
  _impl_.nftallowances_.Clear();
  _impl_.tokenallowances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoApproveAllowanceTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.CryptoAllowance cryptoAllowances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cryptoallowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.NftAllowance nftAllowances = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nftallowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.TokenAllowance tokenAllowances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokenallowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoApproveAllowanceTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoApproveAllowanceTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.CryptoAllowance cryptoAllowances = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cryptoallowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_cryptoallowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.NftAllowance nftAllowances = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nftallowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_nftallowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.TokenAllowance tokenAllowances = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokenallowances_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokenallowances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoApproveAllowanceTransactionBody)
  return target;
}

size_t CryptoApproveAllowanceTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoApproveAllowanceTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.CryptoAllowance cryptoAllowances = 1;
  total_size += 1UL * this->_internal_cryptoallowances_size();
  for (const auto& msg : this->_impl_.cryptoallowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.NftAllowance nftAllowances = 2;
  total_size += 1UL * this->_internal_nftallowances_size();
  for (const auto& msg : this->_impl_.nftallowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.TokenAllowance tokenAllowances = 3;
  total_size += 1UL * this->_internal_tokenallowances_size();
  for (const auto& msg : this->_impl_.tokenallowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoApproveAllowanceTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoApproveAllowanceTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoApproveAllowanceTransactionBody::GetClassData() const { return &_class_data_; }


void CryptoApproveAllowanceTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoApproveAllowanceTransactionBody*>(&to_msg);
  auto& from = static_cast<const CryptoApproveAllowanceTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoApproveAllowanceTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cryptoallowances_.MergeFrom(from._impl_.cryptoallowances_);
  _this->_impl_.nftallowances_.MergeFrom(from._impl_.nftallowances_);
  _this->_impl_.tokenallowances_.MergeFrom(from._impl_.tokenallowances_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoApproveAllowanceTransactionBody::CopyFrom(const CryptoApproveAllowanceTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoApproveAllowanceTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoApproveAllowanceTransactionBody::IsInitialized() const {
  return true;
}

void CryptoApproveAllowanceTransactionBody::InternalSwap(CryptoApproveAllowanceTransactionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cryptoallowances_.InternalSwap(&other->_impl_.cryptoallowances_);
  _impl_.nftallowances_.InternalSwap(&other->_impl_.nftallowances_);
  _impl_.tokenallowances_.InternalSwap(&other->_impl_.tokenallowances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoApproveAllowanceTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fapprove_5fallowance_2eproto_getter, &descriptor_table_crypto_5fapprove_5fallowance_2eproto_once,
      file_level_metadata_crypto_5fapprove_5fallowance_2eproto[0]);
}

// ===================================================================

class CryptoAllowance::_Internal {
 public:
  static const ::proto::AccountID& owner(const CryptoAllowance* msg);
  static const ::proto::AccountID& spender(const CryptoAllowance* msg);
};

const ::proto::AccountID&
CryptoAllowance::_Internal::owner(const CryptoAllowance* msg) {
  return *msg->_impl_.owner_;
}
const ::proto::AccountID&
CryptoAllowance::_Internal::spender(const CryptoAllowance* msg) {
  return *msg->_impl_.spender_;
}
void CryptoAllowance::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
void CryptoAllowance::clear_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
}
CryptoAllowance::CryptoAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoAllowance)
}
CryptoAllowance::CryptoAllowance(const CryptoAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner()) {
    _this->_impl_.owner_ = new ::proto::AccountID(*from._impl_.owner_);
  }
  if (from._internal_has_spender()) {
    _this->_impl_.spender_ = new ::proto::AccountID(*from._impl_.spender_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.CryptoAllowance)
}

inline void CryptoAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CryptoAllowance::~CryptoAllowance() {
  // @@protoc_insertion_point(destructor:proto.CryptoAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_;
  if (this != internal_default_instance()) delete _impl_.spender_;
}

void CryptoAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID spender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID owner = 1;
  if (this->_internal_has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID spender = 2;
  if (this->_internal_has_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spender(this),
        _Internal::spender(this).GetCachedSize(), target, stream);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoAllowance)
  return target;
}

size_t CryptoAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.AccountID owner = 1;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  // .proto.AccountID spender = 2;
  if (this->_internal_has_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_);
  }

  // int64 amount = 3;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoAllowance::GetClassData() const { return &_class_data_; }


void CryptoAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoAllowance*>(&to_msg);
  auto& from = static_cast<const CryptoAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner()) {
    _this->_internal_mutable_owner()->::proto::AccountID::MergeFrom(
        from._internal_owner());
  }
  if (from._internal_has_spender()) {
    _this->_internal_mutable_spender()->::proto::AccountID::MergeFrom(
        from._internal_spender());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoAllowance::CopyFrom(const CryptoAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoAllowance::IsInitialized() const {
  return true;
}

void CryptoAllowance::InternalSwap(CryptoAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoAllowance, _impl_.amount_)
      + sizeof(CryptoAllowance::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(CryptoAllowance, _impl_.owner_)>(
          reinterpret_cast<char*>(&_impl_.owner_),
          reinterpret_cast<char*>(&other->_impl_.owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fapprove_5fallowance_2eproto_getter, &descriptor_table_crypto_5fapprove_5fallowance_2eproto_once,
      file_level_metadata_crypto_5fapprove_5fallowance_2eproto[1]);
}

// ===================================================================

class NftAllowance::_Internal {
 public:
  static const ::proto::TokenID& tokenid(const NftAllowance* msg);
  static const ::proto::AccountID& owner(const NftAllowance* msg);
  static const ::proto::AccountID& spender(const NftAllowance* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& approved_for_all(const NftAllowance* msg);
  static const ::proto::AccountID& delegating_spender(const NftAllowance* msg);
};

const ::proto::TokenID&
NftAllowance::_Internal::tokenid(const NftAllowance* msg) {
  return *msg->_impl_.tokenid_;
}
const ::proto::AccountID&
NftAllowance::_Internal::owner(const NftAllowance* msg) {
  return *msg->_impl_.owner_;
}
const ::proto::AccountID&
NftAllowance::_Internal::spender(const NftAllowance* msg) {
  return *msg->_impl_.spender_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
NftAllowance::_Internal::approved_for_all(const NftAllowance* msg) {
  return *msg->_impl_.approved_for_all_;
}
const ::proto::AccountID&
NftAllowance::_Internal::delegating_spender(const NftAllowance* msg) {
  return *msg->_impl_.delegating_spender_;
}
void NftAllowance::clear_tokenid() {
  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
}
void NftAllowance::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
void NftAllowance::clear_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
}
void NftAllowance::clear_approved_for_all() {
  if (GetArenaForAllocation() == nullptr && _impl_.approved_for_all_ != nullptr) {
    delete _impl_.approved_for_all_;
  }
  _impl_.approved_for_all_ = nullptr;
}
void NftAllowance::clear_delegating_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.delegating_spender_ != nullptr) {
    delete _impl_.delegating_spender_;
  }
  _impl_.delegating_spender_ = nullptr;
}
NftAllowance::NftAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NftAllowance)
}
NftAllowance::NftAllowance(const NftAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NftAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_numbers_){from._impl_.serial_numbers_}
    , /*decltype(_impl_._serial_numbers_cached_byte_size_)*/{0}
    , decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.approved_for_all_){nullptr}
    , decltype(_impl_.delegating_spender_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tokenid()) {
    _this->_impl_.tokenid_ = new ::proto::TokenID(*from._impl_.tokenid_);
  }
  if (from._internal_has_owner()) {
    _this->_impl_.owner_ = new ::proto::AccountID(*from._impl_.owner_);
  }
  if (from._internal_has_spender()) {
    _this->_impl_.spender_ = new ::proto::AccountID(*from._impl_.spender_);
  }
  if (from._internal_has_approved_for_all()) {
    _this->_impl_.approved_for_all_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.approved_for_all_);
  }
  if (from._internal_has_delegating_spender()) {
    _this->_impl_.delegating_spender_ = new ::proto::AccountID(*from._impl_.delegating_spender_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.NftAllowance)
}

inline void NftAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_numbers_){arena}
    , /*decltype(_impl_._serial_numbers_cached_byte_size_)*/{0}
    , decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.approved_for_all_){nullptr}
    , decltype(_impl_.delegating_spender_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NftAllowance::~NftAllowance() {
  // @@protoc_insertion_point(destructor:proto.NftAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NftAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serial_numbers_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.tokenid_;
  if (this != internal_default_instance()) delete _impl_.owner_;
  if (this != internal_default_instance()) delete _impl_.spender_;
  if (this != internal_default_instance()) delete _impl_.approved_for_all_;
  if (this != internal_default_instance()) delete _impl_.delegating_spender_;
}

void NftAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NftAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NftAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_numbers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.approved_for_all_ != nullptr) {
    delete _impl_.approved_for_all_;
  }
  _impl_.approved_for_all_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delegating_spender_ != nullptr) {
    delete _impl_.delegating_spender_;
  }
  _impl_.delegating_spender_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NftAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID tokenId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID spender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 serial_numbers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_serial_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_serial_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue approved_for_all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_approved_for_all(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID delegating_spender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegating_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NftAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NftAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID tokenId = 1;
  if (this->_internal_has_tokenid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tokenid(this),
        _Internal::tokenid(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID owner = 2;
  if (this->_internal_has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID spender = 3;
  if (this->_internal_has_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spender(this),
        _Internal::spender(this).GetCachedSize(), target, stream);
  }

  // repeated int64 serial_numbers = 4;
  {
    int byte_size = _impl_._serial_numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_serial_numbers(), byte_size, target);
    }
  }

  // .google.protobuf.BoolValue approved_for_all = 5;
  if (this->_internal_has_approved_for_all()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::approved_for_all(this),
        _Internal::approved_for_all(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID delegating_spender = 6;
  if (this->_internal_has_delegating_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::delegating_spender(this),
        _Internal::delegating_spender(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NftAllowance)
  return target;
}

size_t NftAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NftAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 serial_numbers = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.serial_numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._serial_numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .proto.TokenID tokenId = 1;
  if (this->_internal_has_tokenid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tokenid_);
  }

  // .proto.AccountID owner = 2;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  // .proto.AccountID spender = 3;
  if (this->_internal_has_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_);
  }

  // .google.protobuf.BoolValue approved_for_all = 5;
  if (this->_internal_has_approved_for_all()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.approved_for_all_);
  }

  // .proto.AccountID delegating_spender = 6;
  if (this->_internal_has_delegating_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delegating_spender_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NftAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NftAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NftAllowance::GetClassData() const { return &_class_data_; }


void NftAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NftAllowance*>(&to_msg);
  auto& from = static_cast<const NftAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NftAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.serial_numbers_.MergeFrom(from._impl_.serial_numbers_);
  if (from._internal_has_tokenid()) {
    _this->_internal_mutable_tokenid()->::proto::TokenID::MergeFrom(
        from._internal_tokenid());
  }
  if (from._internal_has_owner()) {
    _this->_internal_mutable_owner()->::proto::AccountID::MergeFrom(
        from._internal_owner());
  }
  if (from._internal_has_spender()) {
    _this->_internal_mutable_spender()->::proto::AccountID::MergeFrom(
        from._internal_spender());
  }
  if (from._internal_has_approved_for_all()) {
    _this->_internal_mutable_approved_for_all()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_approved_for_all());
  }
  if (from._internal_has_delegating_spender()) {
    _this->_internal_mutable_delegating_spender()->::proto::AccountID::MergeFrom(
        from._internal_delegating_spender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NftAllowance::CopyFrom(const NftAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NftAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NftAllowance::IsInitialized() const {
  return true;
}

void NftAllowance::InternalSwap(NftAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.serial_numbers_.InternalSwap(&other->_impl_.serial_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NftAllowance, _impl_.delegating_spender_)
      + sizeof(NftAllowance::_impl_.delegating_spender_)
      - PROTOBUF_FIELD_OFFSET(NftAllowance, _impl_.tokenid_)>(
          reinterpret_cast<char*>(&_impl_.tokenid_),
          reinterpret_cast<char*>(&other->_impl_.tokenid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NftAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fapprove_5fallowance_2eproto_getter, &descriptor_table_crypto_5fapprove_5fallowance_2eproto_once,
      file_level_metadata_crypto_5fapprove_5fallowance_2eproto[2]);
}

// ===================================================================

class TokenAllowance::_Internal {
 public:
  static const ::proto::TokenID& tokenid(const TokenAllowance* msg);
  static const ::proto::AccountID& owner(const TokenAllowance* msg);
  static const ::proto::AccountID& spender(const TokenAllowance* msg);
};

const ::proto::TokenID&
TokenAllowance::_Internal::tokenid(const TokenAllowance* msg) {
  return *msg->_impl_.tokenid_;
}
const ::proto::AccountID&
TokenAllowance::_Internal::owner(const TokenAllowance* msg) {
  return *msg->_impl_.owner_;
}
const ::proto::AccountID&
TokenAllowance::_Internal::spender(const TokenAllowance* msg) {
  return *msg->_impl_.spender_;
}
void TokenAllowance::clear_tokenid() {
  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
}
void TokenAllowance::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
void TokenAllowance::clear_spender() {
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
}
TokenAllowance::TokenAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenAllowance)
}
TokenAllowance::TokenAllowance(const TokenAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tokenid()) {
    _this->_impl_.tokenid_ = new ::proto::TokenID(*from._impl_.tokenid_);
  }
  if (from._internal_has_owner()) {
    _this->_impl_.owner_ = new ::proto::AccountID(*from._impl_.owner_);
  }
  if (from._internal_has_spender()) {
    _this->_impl_.spender_ = new ::proto::AccountID(*from._impl_.spender_);
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:proto.TokenAllowance)
}

inline void TokenAllowance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tokenid_){nullptr}
    , decltype(_impl_.owner_){nullptr}
    , decltype(_impl_.spender_){nullptr}
    , decltype(_impl_.amount_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TokenAllowance::~TokenAllowance() {
  // @@protoc_insertion_point(destructor:proto.TokenAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenAllowance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tokenid_;
  if (this != internal_default_instance()) delete _impl_.owner_;
  if (this != internal_default_instance()) delete _impl_.spender_;
}

void TokenAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenAllowance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tokenid_ != nullptr) {
    delete _impl_.tokenid_;
  }
  _impl_.tokenid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spender_ != nullptr) {
    delete _impl_.spender_;
  }
  _impl_.spender_ = nullptr;
  _impl_.amount_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.TokenID tokenId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokenid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID spender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenAllowance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenAllowance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.TokenID tokenId = 1;
  if (this->_internal_has_tokenid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tokenid(this),
        _Internal::tokenid(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID owner = 2;
  if (this->_internal_has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID spender = 3;
  if (this->_internal_has_spender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spender(this),
        _Internal::spender(this).GetCachedSize(), target, stream);
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenAllowance)
  return target;
}

size_t TokenAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenAllowance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TokenID tokenId = 1;
  if (this->_internal_has_tokenid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tokenid_);
  }

  // .proto.AccountID owner = 2;
  if (this->_internal_has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_);
  }

  // .proto.AccountID spender = 3;
  if (this->_internal_has_spender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spender_);
  }

  // int64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenAllowance::GetClassData() const { return &_class_data_; }


void TokenAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenAllowance*>(&to_msg);
  auto& from = static_cast<const TokenAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenAllowance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tokenid()) {
    _this->_internal_mutable_tokenid()->::proto::TokenID::MergeFrom(
        from._internal_tokenid());
  }
  if (from._internal_has_owner()) {
    _this->_internal_mutable_owner()->::proto::AccountID::MergeFrom(
        from._internal_owner());
  }
  if (from._internal_has_spender()) {
    _this->_internal_mutable_spender()->::proto::AccountID::MergeFrom(
        from._internal_spender());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenAllowance::CopyFrom(const TokenAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenAllowance::IsInitialized() const {
  return true;
}

void TokenAllowance::InternalSwap(TokenAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenAllowance, _impl_.amount_)
      + sizeof(TokenAllowance::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(TokenAllowance, _impl_.tokenid_)>(
          reinterpret_cast<char*>(&_impl_.tokenid_),
          reinterpret_cast<char*>(&other->_impl_.tokenid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fapprove_5fallowance_2eproto_getter, &descriptor_table_crypto_5fapprove_5fallowance_2eproto_once,
      file_level_metadata_crypto_5fapprove_5fallowance_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoApproveAllowanceTransactionBody*
Arena::CreateMaybeMessage< ::proto::CryptoApproveAllowanceTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoApproveAllowanceTransactionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CryptoAllowance*
Arena::CreateMaybeMessage< ::proto::CryptoAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NftAllowance*
Arena::CreateMaybeMessage< ::proto::NftAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NftAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TokenAllowance*
Arena::CreateMaybeMessage< ::proto::TokenAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenAllowance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_update.proto

#include "crypto_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR CryptoUpdateTransactionBody::CryptoUpdateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountidtoupdate_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.proxyaccountid_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.expirationtime_)*/nullptr
  , /*decltype(_impl_.memo_)*/nullptr
  , /*decltype(_impl_.max_automatic_token_associations_)*/nullptr
  , /*decltype(_impl_.decline_reward_)*/nullptr
  , /*decltype(_impl_.proxyfraction_)*/0
  , /*decltype(_impl_.sendRecordThresholdField_)*/{}
  , /*decltype(_impl_.receiveRecordThresholdField_)*/{}
  , /*decltype(_impl_.receiverSigRequiredField_)*/{}
  , /*decltype(_impl_.staked_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CryptoUpdateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoUpdateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoUpdateTransactionBodyDefaultTypeInternal() {}
  union {
    CryptoUpdateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoUpdateTransactionBodyDefaultTypeInternal _CryptoUpdateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_crypto_5fupdate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_crypto_5fupdate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_crypto_5fupdate_2eproto = nullptr;

const uint32_t TableStruct_crypto_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.accountidtoupdate_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.proxyaccountid_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.proxyfraction_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.expirationtime_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.max_automatic_token_associations_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.decline_reward_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.sendRecordThresholdField_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.receiveRecordThresholdField_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.receiverSigRequiredField_),
  PROTOBUF_FIELD_OFFSET(::proto::CryptoUpdateTransactionBody, _impl_.staked_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::CryptoUpdateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_CryptoUpdateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_crypto_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023crypto_update.proto\022\005proto\032\021basic_type"
  "s.proto\032\016duration.proto\032\017timestamp.proto"
  "\032\036google/protobuf/wrappers.proto\"\225\007\n\033Cry"
  "ptoUpdateTransactionBody\022+\n\021accountIDToU"
  "pdate\030\002 \001(\0132\020.proto.AccountID\022\027\n\003key\030\003 \001"
  "(\0132\n.proto.Key\022,\n\016proxyAccountID\030\004 \001(\0132\020"
  ".proto.AccountIDB\002\030\001\022\031\n\rproxyFraction\030\005 "
  "\001(\005B\002\030\001\022!\n\023sendRecordThreshold\030\006 \001(\004B\002\030\001"
  "H\000\022F\n\032sendRecordThresholdWrapper\030\013 \001(\0132\034"
  ".google.protobuf.UInt64ValueB\002\030\001H\000\022$\n\026re"
  "ceiveRecordThreshold\030\007 \001(\004B\002\030\001H\001\022I\n\035rece"
  "iveRecordThresholdWrapper\030\014 \001(\0132\034.google"
  ".protobuf.UInt64ValueB\002\030\001H\001\022(\n\017autoRenew"
  "Period\030\010 \001(\0132\017.proto.Duration\022(\n\016expirat"
  "ionTime\030\t \001(\0132\020.proto.Timestamp\022!\n\023recei"
  "verSigRequired\030\n \001(\010B\002\030\001H\002\022@\n\032receiverSi"
  "gRequiredWrapper\030\r \001(\0132\032.google.protobuf"
  ".BoolValueH\002\022*\n\004memo\030\016 \001(\0132\034.google.prot"
  "obuf.StringValue\022E\n max_automatic_token_"
  "associations\030\017 \001(\0132\033.google.protobuf.Int"
  "32Value\022-\n\021staked_account_id\030\020 \001(\0132\020.pro"
  "to.AccountIDH\003\022\030\n\016staked_node_id\030\021 \001(\003H\003"
  "\0222\n\016decline_reward\030\022 \001(\0132\032.google.protob"
  "uf.BoolValueB\032\n\030sendRecordThresholdField"
  "B\035\n\033receiveRecordThresholdFieldB\032\n\030recei"
  "verSigRequiredFieldB\013\n\tstaked_idB&\n\"com."
  "hederahashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_crypto_5fupdate_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_crypto_5fupdate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_crypto_5fupdate_2eproto = {
    false, false, 1080, descriptor_table_protodef_crypto_5fupdate_2eproto,
    "crypto_update.proto",
    &descriptor_table_crypto_5fupdate_2eproto_once, descriptor_table_crypto_5fupdate_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_crypto_5fupdate_2eproto::offsets,
    file_level_metadata_crypto_5fupdate_2eproto, file_level_enum_descriptors_crypto_5fupdate_2eproto,
    file_level_service_descriptors_crypto_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_crypto_5fupdate_2eproto_getter() {
  return &descriptor_table_crypto_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_crypto_5fupdate_2eproto(&descriptor_table_crypto_5fupdate_2eproto);
namespace proto {

// ===================================================================

class CryptoUpdateTransactionBody::_Internal {
 public:
  static const ::proto::AccountID& accountidtoupdate(const CryptoUpdateTransactionBody* msg);
  static const ::proto::Key& key(const CryptoUpdateTransactionBody* msg);
  static const ::proto::AccountID& proxyaccountid(const CryptoUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& sendrecordthresholdwrapper(const CryptoUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& receiverecordthresholdwrapper(const CryptoUpdateTransactionBody* msg);
  static const ::proto::Duration& autorenewperiod(const CryptoUpdateTransactionBody* msg);
  static const ::proto::Timestamp& expirationtime(const CryptoUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& receiversigrequiredwrapper(const CryptoUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& memo(const CryptoUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_automatic_token_associations(const CryptoUpdateTransactionBody* msg);
  static const ::proto::AccountID& staked_account_id(const CryptoUpdateTransactionBody* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& decline_reward(const CryptoUpdateTransactionBody* msg);
};

const ::proto::AccountID&
CryptoUpdateTransactionBody::_Internal::accountidtoupdate(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.accountidtoupdate_;
}
const ::proto::Key&
CryptoUpdateTransactionBody::_Internal::key(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.key_;
}
const ::proto::AccountID&
CryptoUpdateTransactionBody::_Internal::proxyaccountid(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.proxyaccountid_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
CryptoUpdateTransactionBody::_Internal::sendrecordthresholdwrapper(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
CryptoUpdateTransactionBody::_Internal::receiverecordthresholdwrapper(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_;
}
const ::proto::Duration&
CryptoUpdateTransactionBody::_Internal::autorenewperiod(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::Timestamp&
CryptoUpdateTransactionBody::_Internal::expirationtime(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.expirationtime_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
CryptoUpdateTransactionBody::_Internal::receiversigrequiredwrapper(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.receiverSigRequiredField_.receiversigrequiredwrapper_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
CryptoUpdateTransactionBody::_Internal::memo(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.memo_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
CryptoUpdateTransactionBody::_Internal::max_automatic_token_associations(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.max_automatic_token_associations_;
}
const ::proto::AccountID&
CryptoUpdateTransactionBody::_Internal::staked_account_id(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.staked_id_.staked_account_id_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
CryptoUpdateTransactionBody::_Internal::decline_reward(const CryptoUpdateTransactionBody* msg) {
  return *msg->_impl_.decline_reward_;
}
void CryptoUpdateTransactionBody::clear_accountidtoupdate() {
  if (GetArenaForAllocation() == nullptr && _impl_.accountidtoupdate_ != nullptr) {
    delete _impl_.accountidtoupdate_;
  }
  _impl_.accountidtoupdate_ = nullptr;
}
void CryptoUpdateTransactionBody::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
void CryptoUpdateTransactionBody::clear_proxyaccountid() {
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
}
void CryptoUpdateTransactionBody::set_allocated_sendrecordthresholdwrapper(::PROTOBUF_NAMESPACE_ID::UInt64Value* sendrecordthresholdwrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sendRecordThresholdField();
  if (sendrecordthresholdwrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendrecordthresholdwrapper));
    if (message_arena != submessage_arena) {
      sendrecordthresholdwrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendrecordthresholdwrapper, submessage_arena);
    }
    set_has_sendrecordthresholdwrapper();
    _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_ = sendrecordthresholdwrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.sendRecordThresholdWrapper)
}
void CryptoUpdateTransactionBody::clear_sendrecordthresholdwrapper() {
  if (_internal_has_sendrecordthresholdwrapper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_;
    }
    clear_has_sendRecordThresholdField();
  }
}
void CryptoUpdateTransactionBody::set_allocated_receiverecordthresholdwrapper(::PROTOBUF_NAMESPACE_ID::UInt64Value* receiverecordthresholdwrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_receiveRecordThresholdField();
  if (receiverecordthresholdwrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiverecordthresholdwrapper));
    if (message_arena != submessage_arena) {
      receiverecordthresholdwrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiverecordthresholdwrapper, submessage_arena);
    }
    set_has_receiverecordthresholdwrapper();
    _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_ = receiverecordthresholdwrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.receiveRecordThresholdWrapper)
}
void CryptoUpdateTransactionBody::clear_receiverecordthresholdwrapper() {
  if (_internal_has_receiverecordthresholdwrapper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_;
    }
    clear_has_receiveRecordThresholdField();
  }
}
void CryptoUpdateTransactionBody::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void CryptoUpdateTransactionBody::clear_expirationtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
}
void CryptoUpdateTransactionBody::set_allocated_receiversigrequiredwrapper(::PROTOBUF_NAMESPACE_ID::BoolValue* receiversigrequiredwrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_receiverSigRequiredField();
  if (receiversigrequiredwrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiversigrequiredwrapper));
    if (message_arena != submessage_arena) {
      receiversigrequiredwrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiversigrequiredwrapper, submessage_arena);
    }
    set_has_receiversigrequiredwrapper();
    _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_ = receiversigrequiredwrapper;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.receiverSigRequiredWrapper)
}
void CryptoUpdateTransactionBody::clear_receiversigrequiredwrapper() {
  if (_internal_has_receiversigrequiredwrapper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_;
    }
    clear_has_receiverSigRequiredField();
  }
}
void CryptoUpdateTransactionBody::clear_memo() {
  if (GetArenaForAllocation() == nullptr && _impl_.memo_ != nullptr) {
    delete _impl_.memo_;
  }
  _impl_.memo_ = nullptr;
}
void CryptoUpdateTransactionBody::clear_max_automatic_token_associations() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_automatic_token_associations_ != nullptr) {
    delete _impl_.max_automatic_token_associations_;
  }
  _impl_.max_automatic_token_associations_ = nullptr;
}
void CryptoUpdateTransactionBody::set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_staked_id();
  if (staked_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staked_account_id));
    if (message_arena != submessage_arena) {
      staked_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staked_account_id, submessage_arena);
    }
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.staked_account_id)
}
void CryptoUpdateTransactionBody::clear_staked_account_id() {
  if (_internal_has_staked_account_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.staked_id_.staked_account_id_;
    }
    clear_has_staked_id();
  }
}
void CryptoUpdateTransactionBody::clear_decline_reward() {
  if (GetArenaForAllocation() == nullptr && _impl_.decline_reward_ != nullptr) {
    delete _impl_.decline_reward_;
  }
  _impl_.decline_reward_ = nullptr;
}
CryptoUpdateTransactionBody::CryptoUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CryptoUpdateTransactionBody)
}
CryptoUpdateTransactionBody::CryptoUpdateTransactionBody(const CryptoUpdateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoUpdateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountidtoupdate_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.memo_){nullptr}
    , decltype(_impl_.max_automatic_token_associations_){nullptr}
    , decltype(_impl_.decline_reward_){nullptr}
    , decltype(_impl_.proxyfraction_){}
    , decltype(_impl_.sendRecordThresholdField_){}
    , decltype(_impl_.receiveRecordThresholdField_){}
    , decltype(_impl_.receiverSigRequiredField_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_accountidtoupdate()) {
    _this->_impl_.accountidtoupdate_ = new ::proto::AccountID(*from._impl_.accountidtoupdate_);
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::Key(*from._impl_.key_);
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_impl_.proxyaccountid_ = new ::proto::AccountID(*from._impl_.proxyaccountid_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_expirationtime()) {
    _this->_impl_.expirationtime_ = new ::proto::Timestamp(*from._impl_.expirationtime_);
  }
  if (from._internal_has_memo()) {
    _this->_impl_.memo_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from._impl_.memo_);
  }
  if (from._internal_has_max_automatic_token_associations()) {
    _this->_impl_.max_automatic_token_associations_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.max_automatic_token_associations_);
  }
  if (from._internal_has_decline_reward()) {
    _this->_impl_.decline_reward_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.decline_reward_);
  }
  _this->_impl_.proxyfraction_ = from._impl_.proxyfraction_;
  clear_has_sendRecordThresholdField();
  switch (from.sendRecordThresholdField_case()) {
    case kSendRecordThreshold: {
      _this->_internal_set_sendrecordthreshold(from._internal_sendrecordthreshold());
      break;
    }
    case kSendRecordThresholdWrapper: {
      _this->_internal_mutable_sendrecordthresholdwrapper()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
          from._internal_sendrecordthresholdwrapper());
      break;
    }
    case SENDRECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  clear_has_receiveRecordThresholdField();
  switch (from.receiveRecordThresholdField_case()) {
    case kReceiveRecordThreshold: {
      _this->_internal_set_receiverecordthreshold(from._internal_receiverecordthreshold());
      break;
    }
    case kReceiveRecordThresholdWrapper: {
      _this->_internal_mutable_receiverecordthresholdwrapper()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
          from._internal_receiverecordthresholdwrapper());
      break;
    }
    case RECEIVERECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  clear_has_receiverSigRequiredField();
  switch (from.receiverSigRequiredField_case()) {
    case kReceiverSigRequired: {
      _this->_internal_set_receiversigrequired(from._internal_receiversigrequired());
      break;
    }
    case kReceiverSigRequiredWrapper: {
      _this->_internal_mutable_receiversigrequiredwrapper()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_receiversigrequiredwrapper());
      break;
    }
    case RECEIVERSIGREQUIREDFIELD_NOT_SET: {
      break;
    }
  }
  clear_has_staked_id();
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.CryptoUpdateTransactionBody)
}

inline void CryptoUpdateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountidtoupdate_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.proxyaccountid_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.expirationtime_){nullptr}
    , decltype(_impl_.memo_){nullptr}
    , decltype(_impl_.max_automatic_token_associations_){nullptr}
    , decltype(_impl_.decline_reward_){nullptr}
    , decltype(_impl_.proxyfraction_){0}
    , decltype(_impl_.sendRecordThresholdField_){}
    , decltype(_impl_.receiveRecordThresholdField_){}
    , decltype(_impl_.receiverSigRequiredField_){}
    , decltype(_impl_.staked_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sendRecordThresholdField();
  clear_has_receiveRecordThresholdField();
  clear_has_receiverSigRequiredField();
  clear_has_staked_id();
}

CryptoUpdateTransactionBody::~CryptoUpdateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.CryptoUpdateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoUpdateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.accountidtoupdate_;
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.proxyaccountid_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.expirationtime_;
  if (this != internal_default_instance()) delete _impl_.memo_;
  if (this != internal_default_instance()) delete _impl_.max_automatic_token_associations_;
  if (this != internal_default_instance()) delete _impl_.decline_reward_;
  if (has_sendRecordThresholdField()) {
    clear_sendRecordThresholdField();
  }
  if (has_receiveRecordThresholdField()) {
    clear_receiveRecordThresholdField();
  }
  if (has_receiverSigRequiredField()) {
    clear_receiverSigRequiredField();
  }
  if (has_staked_id()) {
    clear_staked_id();
  }
}

void CryptoUpdateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoUpdateTransactionBody::clear_sendRecordThresholdField() {
// @@protoc_insertion_point(one_of_clear_start:proto.CryptoUpdateTransactionBody)
  switch (sendRecordThresholdField_case()) {
    case kSendRecordThreshold: {
      // No need to clear
      break;
    }
    case kSendRecordThresholdWrapper: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_;
      }
      break;
    }
    case SENDRECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SENDRECORDTHRESHOLDFIELD_NOT_SET;
}

void CryptoUpdateTransactionBody::clear_receiveRecordThresholdField() {
// @@protoc_insertion_point(one_of_clear_start:proto.CryptoUpdateTransactionBody)
  switch (receiveRecordThresholdField_case()) {
    case kReceiveRecordThreshold: {
      // No need to clear
      break;
    }
    case kReceiveRecordThresholdWrapper: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_;
      }
      break;
    }
    case RECEIVERECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = RECEIVERECORDTHRESHOLDFIELD_NOT_SET;
}

void CryptoUpdateTransactionBody::clear_receiverSigRequiredField() {
// @@protoc_insertion_point(one_of_clear_start:proto.CryptoUpdateTransactionBody)
  switch (receiverSigRequiredField_case()) {
    case kReceiverSigRequired: {
      // No need to clear
      break;
    }
    case kReceiverSigRequiredWrapper: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_;
      }
      break;
    }
    case RECEIVERSIGREQUIREDFIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = RECEIVERSIGREQUIREDFIELD_NOT_SET;
}

void CryptoUpdateTransactionBody::clear_staked_id() {
// @@protoc_insertion_point(one_of_clear_start:proto.CryptoUpdateTransactionBody)
  switch (staked_id_case()) {
    case kStakedAccountId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.staked_id_.staked_account_id_;
      }
      break;
    }
    case kStakedNodeId: {
      // No need to clear
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = STAKED_ID_NOT_SET;
}


void CryptoUpdateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CryptoUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.accountidtoupdate_ != nullptr) {
    delete _impl_.accountidtoupdate_;
  }
  _impl_.accountidtoupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.proxyaccountid_ != nullptr) {
    delete _impl_.proxyaccountid_;
  }
  _impl_.proxyaccountid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expirationtime_ != nullptr) {
    delete _impl_.expirationtime_;
  }
  _impl_.expirationtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.memo_ != nullptr) {
    delete _impl_.memo_;
  }
  _impl_.memo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_automatic_token_associations_ != nullptr) {
    delete _impl_.max_automatic_token_associations_;
  }
  _impl_.max_automatic_token_associations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.decline_reward_ != nullptr) {
    delete _impl_.decline_reward_;
  }
  _impl_.decline_reward_ = nullptr;
  _impl_.proxyfraction_ = 0;
  clear_sendRecordThresholdField();
  clear_receiveRecordThresholdField();
  clear_receiverSigRequiredField();
  clear_staked_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoUpdateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.AccountID accountIDToUpdate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountidtoupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID proxyAccountID = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proxyaccountid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 proxyFraction = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.proxyfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sendRecordThreshold = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_sendrecordthreshold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 receiveRecordThreshold = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_receiverecordthreshold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expirationTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool receiverSigRequired = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_receiversigrequired(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendrecordthresholdwrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiverecordthresholdwrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue receiverSigRequiredWrapper = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_receiversigrequiredwrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue memo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_memo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value max_automatic_token_associations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_automatic_token_associations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID staked_account_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_staked_account_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staked_node_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_staked_node_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue decline_reward = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_decline_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CryptoUpdateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CryptoUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.AccountID accountIDToUpdate = 2;
  if (this->_internal_has_accountidtoupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accountidtoupdate(this),
        _Internal::accountidtoupdate(this).GetCachedSize(), target, stream);
  }

  // .proto.Key key = 3;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID proxyAccountID = 4 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proxyaccountid(this),
        _Internal::proxyaccountid(this).GetCachedSize(), target, stream);
  }

  // int32 proxyFraction = 5 [deprecated = true];
  if (this->_internal_proxyfraction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_proxyfraction(), target);
  }

  // uint64 sendRecordThreshold = 6 [deprecated = true];
  if (_internal_has_sendrecordthreshold()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sendrecordthreshold(), target);
  }

  // uint64 receiveRecordThreshold = 7 [deprecated = true];
  if (_internal_has_receiverecordthreshold()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_receiverecordthreshold(), target);
  }

  // .proto.Duration autoRenewPeriod = 8;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // .proto.Timestamp expirationTime = 9;
  if (this->_internal_has_expirationtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::expirationtime(this),
        _Internal::expirationtime(this).GetCachedSize(), target, stream);
  }

  // bool receiverSigRequired = 10 [deprecated = true];
  if (_internal_has_receiversigrequired()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_receiversigrequired(), target);
  }

  // .google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];
  if (_internal_has_sendrecordthresholdwrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::sendrecordthresholdwrapper(this),
        _Internal::sendrecordthresholdwrapper(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];
  if (_internal_has_receiverecordthresholdwrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::receiverecordthresholdwrapper(this),
        _Internal::receiverecordthresholdwrapper(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue receiverSigRequiredWrapper = 13;
  if (_internal_has_receiversigrequiredwrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::receiversigrequiredwrapper(this),
        _Internal::receiversigrequiredwrapper(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue memo = 14;
  if (this->_internal_has_memo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::memo(this),
        _Internal::memo(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value max_automatic_token_associations = 15;
  if (this->_internal_has_max_automatic_token_associations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::max_automatic_token_associations(this),
        _Internal::max_automatic_token_associations(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID staked_account_id = 16;
  if (_internal_has_staked_account_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::staked_account_id(this),
        _Internal::staked_account_id(this).GetCachedSize(), target, stream);
  }

  // int64 staked_node_id = 17;
  if (_internal_has_staked_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_staked_node_id(), target);
  }

  // .google.protobuf.BoolValue decline_reward = 18;
  if (this->_internal_has_decline_reward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::decline_reward(this),
        _Internal::decline_reward(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CryptoUpdateTransactionBody)
  return target;
}

size_t CryptoUpdateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CryptoUpdateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.AccountID accountIDToUpdate = 2;
  if (this->_internal_has_accountidtoupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accountidtoupdate_);
  }

  // .proto.Key key = 3;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // .proto.AccountID proxyAccountID = 4 [deprecated = true];
  if (this->_internal_has_proxyaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proxyaccountid_);
  }

  // .proto.Duration autoRenewPeriod = 8;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.Timestamp expirationTime = 9;
  if (this->_internal_has_expirationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expirationtime_);
  }

  // .google.protobuf.StringValue memo = 14;
  if (this->_internal_has_memo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.memo_);
  }

  // .google.protobuf.Int32Value max_automatic_token_associations = 15;
  if (this->_internal_has_max_automatic_token_associations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_automatic_token_associations_);
  }

  // .google.protobuf.BoolValue decline_reward = 18;
  if (this->_internal_has_decline_reward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.decline_reward_);
  }

  // int32 proxyFraction = 5 [deprecated = true];
  if (this->_internal_proxyfraction() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proxyfraction());
  }

  switch (sendRecordThresholdField_case()) {
    // uint64 sendRecordThreshold = 6 [deprecated = true];
    case kSendRecordThreshold: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sendrecordthreshold());
      break;
    }
    // .google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];
    case kSendRecordThresholdWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_);
      break;
    }
    case SENDRECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  switch (receiveRecordThresholdField_case()) {
    // uint64 receiveRecordThreshold = 7 [deprecated = true];
    case kReceiveRecordThreshold: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_receiverecordthreshold());
      break;
    }
    // .google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];
    case kReceiveRecordThresholdWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_);
      break;
    }
    case RECEIVERECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  switch (receiverSigRequiredField_case()) {
    // bool receiverSigRequired = 10 [deprecated = true];
    case kReceiverSigRequired: {
      total_size += 1 + 1;
      break;
    }
    // .google.protobuf.BoolValue receiverSigRequiredWrapper = 13;
    case kReceiverSigRequiredWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.receiverSigRequiredField_.receiversigrequiredwrapper_);
      break;
    }
    case RECEIVERSIGREQUIREDFIELD_NOT_SET: {
      break;
    }
  }
  switch (staked_id_case()) {
    // .proto.AccountID staked_account_id = 16;
    case kStakedAccountId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.staked_id_.staked_account_id_);
      break;
    }
    // int64 staked_node_id = 17;
    case kStakedNodeId: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoUpdateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoUpdateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoUpdateTransactionBody::GetClassData() const { return &_class_data_; }


void CryptoUpdateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoUpdateTransactionBody*>(&to_msg);
  auto& from = static_cast<const CryptoUpdateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CryptoUpdateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountidtoupdate()) {
    _this->_internal_mutable_accountidtoupdate()->::proto::AccountID::MergeFrom(
        from._internal_accountidtoupdate());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::Key::MergeFrom(
        from._internal_key());
  }
  if (from._internal_has_proxyaccountid()) {
    _this->_internal_mutable_proxyaccountid()->::proto::AccountID::MergeFrom(
        from._internal_proxyaccountid());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_expirationtime()) {
    _this->_internal_mutable_expirationtime()->::proto::Timestamp::MergeFrom(
        from._internal_expirationtime());
  }
  if (from._internal_has_memo()) {
    _this->_internal_mutable_memo()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
        from._internal_memo());
  }
  if (from._internal_has_max_automatic_token_associations()) {
    _this->_internal_mutable_max_automatic_token_associations()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_max_automatic_token_associations());
  }
  if (from._internal_has_decline_reward()) {
    _this->_internal_mutable_decline_reward()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_decline_reward());
  }
  if (from._internal_proxyfraction() != 0) {
    _this->_internal_set_proxyfraction(from._internal_proxyfraction());
  }
  switch (from.sendRecordThresholdField_case()) {
    case kSendRecordThreshold: {
      _this->_internal_set_sendrecordthreshold(from._internal_sendrecordthreshold());
      break;
    }
    case kSendRecordThresholdWrapper: {
      _this->_internal_mutable_sendrecordthresholdwrapper()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
          from._internal_sendrecordthresholdwrapper());
      break;
    }
    case SENDRECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  switch (from.receiveRecordThresholdField_case()) {
    case kReceiveRecordThreshold: {
      _this->_internal_set_receiverecordthreshold(from._internal_receiverecordthreshold());
      break;
    }
    case kReceiveRecordThresholdWrapper: {
      _this->_internal_mutable_receiverecordthresholdwrapper()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
          from._internal_receiverecordthresholdwrapper());
      break;
    }
    case RECEIVERECORDTHRESHOLDFIELD_NOT_SET: {
      break;
    }
  }
  switch (from.receiverSigRequiredField_case()) {
    case kReceiverSigRequired: {
      _this->_internal_set_receiversigrequired(from._internal_receiversigrequired());
      break;
    }
    case kReceiverSigRequiredWrapper: {
      _this->_internal_mutable_receiversigrequiredwrapper()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
          from._internal_receiversigrequiredwrapper());
      break;
    }
    case RECEIVERSIGREQUIREDFIELD_NOT_SET: {
      break;
    }
  }
  switch (from.staked_id_case()) {
    case kStakedAccountId: {
      _this->_internal_mutable_staked_account_id()->::proto::AccountID::MergeFrom(
          from._internal_staked_account_id());
      break;
    }
    case kStakedNodeId: {
      _this->_internal_set_staked_node_id(from._internal_staked_node_id());
      break;
    }
    case STAKED_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoUpdateTransactionBody::CopyFrom(const CryptoUpdateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CryptoUpdateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoUpdateTransactionBody::IsInitialized() const {
  return true;
}

void CryptoUpdateTransactionBody::InternalSwap(CryptoUpdateTransactionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CryptoUpdateTransactionBody, _impl_.proxyfraction_)
      + sizeof(CryptoUpdateTransactionBody::_impl_.proxyfraction_)
      - PROTOBUF_FIELD_OFFSET(CryptoUpdateTransactionBody, _impl_.accountidtoupdate_)>(
          reinterpret_cast<char*>(&_impl_.accountidtoupdate_),
          reinterpret_cast<char*>(&other->_impl_.accountidtoupdate_));
  swap(_impl_.sendRecordThresholdField_, other->_impl_.sendRecordThresholdField_);
  swap(_impl_.receiveRecordThresholdField_, other->_impl_.receiveRecordThresholdField_);
  swap(_impl_.receiverSigRequiredField_, other->_impl_.receiverSigRequiredField_);
  swap(_impl_.staked_id_, other->_impl_.staked_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoUpdateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_crypto_5fupdate_2eproto_getter, &descriptor_table_crypto_5fupdate_2eproto_once,
      file_level_metadata_crypto_5fupdate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::CryptoUpdateTransactionBody*
Arena::CreateMaybeMessage< ::proto::CryptoUpdateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CryptoUpdateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_stake_update.proto

#include "node_stake_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR NodeStakeUpdateTransactionBody::NodeStakeUpdateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_stake_)*/{}
  , /*decltype(_impl_.end_of_staking_period_)*/nullptr
  , /*decltype(_impl_.node_reward_fee_fraction_)*/nullptr
  , /*decltype(_impl_.staking_reward_fee_fraction_)*/nullptr
  , /*decltype(_impl_.max_staking_reward_rate_per_hbar_)*/int64_t{0}
  , /*decltype(_impl_.staking_periods_stored_)*/int64_t{0}
  , /*decltype(_impl_.staking_period_)*/int64_t{0}
  , /*decltype(_impl_.staking_start_threshold_)*/int64_t{0}
  , /*decltype(_impl_.staking_reward_rate_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeStakeUpdateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeStakeUpdateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeStakeUpdateTransactionBodyDefaultTypeInternal() {}
  union {
    NodeStakeUpdateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeStakeUpdateTransactionBodyDefaultTypeInternal _NodeStakeUpdateTransactionBody_default_instance_;
PROTOBUF_CONSTEXPR NodeStake::NodeStake(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_stake_)*/int64_t{0}
  , /*decltype(_impl_.min_stake_)*/int64_t{0}
  , /*decltype(_impl_.node_id_)*/int64_t{0}
  , /*decltype(_impl_.reward_rate_)*/int64_t{0}
  , /*decltype(_impl_.stake_)*/int64_t{0}
  , /*decltype(_impl_.stake_not_rewarded_)*/int64_t{0}
  , /*decltype(_impl_.stake_rewarded_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeStakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeStakeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeStakeDefaultTypeInternal() {}
  union {
    NodeStake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeStakeDefaultTypeInternal _NodeStake_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_node_5fstake_5fupdate_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_node_5fstake_5fupdate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_node_5fstake_5fupdate_2eproto = nullptr;

const uint32_t TableStruct_node_5fstake_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.end_of_staking_period_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.node_stake_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.max_staking_reward_rate_per_hbar_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.node_reward_fee_fraction_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.staking_periods_stored_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.staking_period_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.staking_reward_fee_fraction_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.staking_start_threshold_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStakeUpdateTransactionBody, _impl_.staking_reward_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.max_stake_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.min_stake_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.reward_rate_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.stake_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.stake_not_rewarded_),
  PROTOBUF_FIELD_OFFSET(::proto::NodeStake, _impl_.stake_rewarded_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::NodeStakeUpdateTransactionBody)},
  { 15, -1, -1, sizeof(::proto::NodeStake)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_NodeStakeUpdateTransactionBody_default_instance_._instance,
  &::proto::_NodeStake_default_instance_._instance,
};

const char descriptor_table_protodef_node_5fstake_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027node_stake_update.proto\022\005proto\032\021basic_"
  "types.proto\032\017timestamp.proto\"\200\003\n\036NodeSta"
  "keUpdateTransactionBody\022/\n\025end_of_stakin"
  "g_period\030\001 \001(\0132\020.proto.Timestamp\022$\n\nnode"
  "_stake\030\002 \003(\0132\020.proto.NodeStake\022(\n max_st"
  "aking_reward_rate_per_hbar\030\003 \001(\003\0221\n\030node"
  "_reward_fee_fraction\030\004 \001(\0132\017.proto.Fract"
  "ion\022\036\n\026staking_periods_stored\030\005 \001(\003\022\026\n\016s"
  "taking_period\030\006 \001(\003\0224\n\033staking_reward_fe"
  "e_fraction\030\007 \001(\0132\017.proto.Fraction\022\037\n\027sta"
  "king_start_threshold\030\010 \001(\003\022\033\n\023staking_re"
  "ward_rate\030\t \001(\003\"\232\001\n\tNodeStake\022\021\n\tmax_sta"
  "ke\030\001 \001(\003\022\021\n\tmin_stake\030\002 \001(\003\022\017\n\007node_id\030\003"
  " \001(\003\022\023\n\013reward_rate\030\004 \001(\003\022\r\n\005stake\030\005 \001(\003"
  "\022\032\n\022stake_not_rewarded\030\006 \001(\003\022\026\n\016stake_re"
  "warded\030\007 \001(\003B&\n\"com.hederahashgraph.api."
  "proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_node_5fstake_5fupdate_2eproto_deps[2] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_node_5fstake_5fupdate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_node_5fstake_5fupdate_2eproto = {
    false, false, 660, descriptor_table_protodef_node_5fstake_5fupdate_2eproto,
    "node_stake_update.proto",
    &descriptor_table_node_5fstake_5fupdate_2eproto_once, descriptor_table_node_5fstake_5fupdate_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_node_5fstake_5fupdate_2eproto::offsets,
    file_level_metadata_node_5fstake_5fupdate_2eproto, file_level_enum_descriptors_node_5fstake_5fupdate_2eproto,
    file_level_service_descriptors_node_5fstake_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_node_5fstake_5fupdate_2eproto_getter() {
  return &descriptor_table_node_5fstake_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_node_5fstake_5fupdate_2eproto(&descriptor_table_node_5fstake_5fupdate_2eproto);
namespace proto {

// ===================================================================

class NodeStakeUpdateTransactionBody::_Internal {
 public:
  static const ::proto::Timestamp& end_of_staking_period(const NodeStakeUpdateTransactionBody* msg);
  static const ::proto::Fraction& node_reward_fee_fraction(const NodeStakeUpdateTransactionBody* msg);
  static const ::proto::Fraction& staking_reward_fee_fraction(const NodeStakeUpdateTransactionBody* msg);
};

const ::proto::Timestamp&
NodeStakeUpdateTransactionBody::_Internal::end_of_staking_period(const NodeStakeUpdateTransactionBody* msg) {
  return *msg->_impl_.end_of_staking_period_;
}
const ::proto::Fraction&
NodeStakeUpdateTransactionBody::_Internal::node_reward_fee_fraction(const NodeStakeUpdateTransactionBody* msg) {
  return *msg->_impl_.node_reward_fee_fraction_;
}
const ::proto::Fraction&
NodeStakeUpdateTransactionBody::_Internal::staking_reward_fee_fraction(const NodeStakeUpdateTransactionBody* msg) {
  return *msg->_impl_.staking_reward_fee_fraction_;
}
void NodeStakeUpdateTransactionBody::clear_end_of_staking_period() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_of_staking_period_ != nullptr) {
    delete _impl_.end_of_staking_period_;
  }
  _impl_.end_of_staking_period_ = nullptr;
}
void NodeStakeUpdateTransactionBody::clear_node_reward_fee_fraction() {
  if (GetArenaForAllocation() == nullptr && _impl_.node_reward_fee_fraction_ != nullptr) {
    delete _impl_.node_reward_fee_fraction_;
  }
  _impl_.node_reward_fee_fraction_ = nullptr;
}
void NodeStakeUpdateTransactionBody::clear_staking_reward_fee_fraction() {
  if (GetArenaForAllocation() == nullptr && _impl_.staking_reward_fee_fraction_ != nullptr) {
    delete _impl_.staking_reward_fee_fraction_;
  }
  _impl_.staking_reward_fee_fraction_ = nullptr;
}
NodeStakeUpdateTransactionBody::NodeStakeUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NodeStakeUpdateTransactionBody)
}
NodeStakeUpdateTransactionBody::NodeStakeUpdateTransactionBody(const NodeStakeUpdateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeStakeUpdateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_stake_){from._impl_.node_stake_}
    , decltype(_impl_.end_of_staking_period_){nullptr}
    , decltype(_impl_.node_reward_fee_fraction_){nullptr}
    , decltype(_impl_.staking_reward_fee_fraction_){nullptr}
    , decltype(_impl_.max_staking_reward_rate_per_hbar_){}
    , decltype(_impl_.staking_periods_stored_){}
    , decltype(_impl_.staking_period_){}
    , decltype(_impl_.staking_start_threshold_){}
    , decltype(_impl_.staking_reward_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_of_staking_period()) {
    _this->_impl_.end_of_staking_period_ = new ::proto::Timestamp(*from._impl_.end_of_staking_period_);
  }
  if (from._internal_has_node_reward_fee_fraction()) {
    _this->_impl_.node_reward_fee_fraction_ = new ::proto::Fraction(*from._impl_.node_reward_fee_fraction_);
  }
  if (from._internal_has_staking_reward_fee_fraction()) {
    _this->_impl_.staking_reward_fee_fraction_ = new ::proto::Fraction(*from._impl_.staking_reward_fee_fraction_);
  }
  ::memcpy(&_impl_.max_staking_reward_rate_per_hbar_, &from._impl_.max_staking_reward_rate_per_hbar_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.staking_reward_rate_) -
    reinterpret_cast<char*>(&_impl_.max_staking_reward_rate_per_hbar_)) + sizeof(_impl_.staking_reward_rate_));
  // @@protoc_insertion_point(copy_constructor:proto.NodeStakeUpdateTransactionBody)
}

inline void NodeStakeUpdateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_stake_){arena}
    , decltype(_impl_.end_of_staking_period_){nullptr}
    , decltype(_impl_.node_reward_fee_fraction_){nullptr}
    , decltype(_impl_.staking_reward_fee_fraction_){nullptr}
    , decltype(_impl_.max_staking_reward_rate_per_hbar_){int64_t{0}}
    , decltype(_impl_.staking_periods_stored_){int64_t{0}}
    , decltype(_impl_.staking_period_){int64_t{0}}
    , decltype(_impl_.staking_start_threshold_){int64_t{0}}
    , decltype(_impl_.staking_reward_rate_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeStakeUpdateTransactionBody::~NodeStakeUpdateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.NodeStakeUpdateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeStakeUpdateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_stake_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.end_of_staking_period_;
  if (this != internal_default_instance()) delete _impl_.node_reward_fee_fraction_;
  if (this != internal_default_instance()) delete _impl_.staking_reward_fee_fraction_;
}

void NodeStakeUpdateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeStakeUpdateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NodeStakeUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_stake_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.end_of_staking_period_ != nullptr) {
    delete _impl_.end_of_staking_period_;
  }
  _impl_.end_of_staking_period_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.node_reward_fee_fraction_ != nullptr) {
    delete _impl_.node_reward_fee_fraction_;
  }
  _impl_.node_reward_fee_fraction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.staking_reward_fee_fraction_ != nullptr) {
    delete _impl_.staking_reward_fee_fraction_;
  }
  _impl_.staking_reward_fee_fraction_ = nullptr;
  ::memset(&_impl_.max_staking_reward_rate_per_hbar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.staking_reward_rate_) -
      reinterpret_cast<char*>(&_impl_.max_staking_reward_rate_per_hbar_)) + sizeof(_impl_.staking_reward_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStakeUpdateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Timestamp end_of_staking_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_of_staking_period(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.NodeStake node_stake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_stake(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 max_staking_reward_rate_per_hbar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_staking_reward_rate_per_hbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Fraction node_reward_fee_fraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_reward_fee_fraction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staking_periods_stored = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.staking_periods_stored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staking_period = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.staking_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Fraction staking_reward_fee_fraction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_staking_reward_fee_fraction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staking_start_threshold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.staking_start_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 staking_reward_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.staking_reward_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeStakeUpdateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NodeStakeUpdateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Timestamp end_of_staking_period = 1;
  if (this->_internal_has_end_of_staking_period()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::end_of_staking_period(this),
        _Internal::end_of_staking_period(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.NodeStake node_stake = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_stake_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_stake(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 max_staking_reward_rate_per_hbar = 3;
  if (this->_internal_max_staking_reward_rate_per_hbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_staking_reward_rate_per_hbar(), target);
  }

  // .proto.Fraction node_reward_fee_fraction = 4;
  if (this->_internal_has_node_reward_fee_fraction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::node_reward_fee_fraction(this),
        _Internal::node_reward_fee_fraction(this).GetCachedSize(), target, stream);
  }

  // int64 staking_periods_stored = 5;
  if (this->_internal_staking_periods_stored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_staking_periods_stored(), target);
  }

  // int64 staking_period = 6;
  if (this->_internal_staking_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_staking_period(), target);
  }

  // .proto.Fraction staking_reward_fee_fraction = 7;
  if (this->_internal_has_staking_reward_fee_fraction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::staking_reward_fee_fraction(this),
        _Internal::staking_reward_fee_fraction(this).GetCachedSize(), target, stream);
  }

  // int64 staking_start_threshold = 8;
  if (this->_internal_staking_start_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_staking_start_threshold(), target);
  }

  // int64 staking_reward_rate = 9;
  if (this->_internal_staking_reward_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_staking_reward_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NodeStakeUpdateTransactionBody)
  return target;
}

size_t NodeStakeUpdateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NodeStakeUpdateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.NodeStake node_stake = 2;
  total_size += 1UL * this->_internal_node_stake_size();
  for (const auto& msg : this->_impl_.node_stake_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.Timestamp end_of_staking_period = 1;
  if (this->_internal_has_end_of_staking_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_of_staking_period_);
  }

  // .proto.Fraction node_reward_fee_fraction = 4;
  if (this->_internal_has_node_reward_fee_fraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.node_reward_fee_fraction_);
  }

  // .proto.Fraction staking_reward_fee_fraction = 7;
  if (this->_internal_has_staking_reward_fee_fraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.staking_reward_fee_fraction_);
  }

  // int64 max_staking_reward_rate_per_hbar = 3;
  if (this->_internal_max_staking_reward_rate_per_hbar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_staking_reward_rate_per_hbar());
  }

  // int64 staking_periods_stored = 5;
  if (this->_internal_staking_periods_stored() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_staking_periods_stored());
  }

  // int64 staking_period = 6;
  if (this->_internal_staking_period() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_staking_period());
  }

  // int64 staking_start_threshold = 8;
  if (this->_internal_staking_start_threshold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_staking_start_threshold());
  }

  // int64 staking_reward_rate = 9;
  if (this->_internal_staking_reward_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_staking_reward_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeStakeUpdateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeStakeUpdateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeStakeUpdateTransactionBody::GetClassData() const { return &_class_data_; }


void NodeStakeUpdateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeStakeUpdateTransactionBody*>(&to_msg);
  auto& from = static_cast<const NodeStakeUpdateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NodeStakeUpdateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_stake_.MergeFrom(from._impl_.node_stake_);
  if (from._internal_has_end_of_staking_period()) {
    _this->_internal_mutable_end_of_staking_period()->::proto::Timestamp::MergeFrom(
        from._internal_end_of_staking_period());
  }
  if (from._internal_has_node_reward_fee_fraction()) {
    _this->_internal_mutable_node_reward_fee_fraction()->::proto::Fraction::MergeFrom(
        from._internal_node_reward_fee_fraction());
  }
  if (from._internal_has_staking_reward_fee_fraction()) {
    _this->_internal_mutable_staking_reward_fee_fraction()->::proto::Fraction::MergeFrom(
        from._internal_staking_reward_fee_fraction());
  }
  if (from._internal_max_staking_reward_rate_per_hbar() != 0) {
    _this->_internal_set_max_staking_reward_rate_per_hbar(from._internal_max_staking_reward_rate_per_hbar());
  }
  if (from._internal_staking_periods_stored() != 0) {
    _this->_internal_set_staking_periods_stored(from._internal_staking_periods_stored());
  }
  if (from._internal_staking_period() != 0) {
    _this->_internal_set_staking_period(from._internal_staking_period());
  }
  if (from._internal_staking_start_threshold() != 0) {
    _this->_internal_set_staking_start_threshold(from._internal_staking_start_threshold());
  }
  if (from._internal_staking_reward_rate() != 0) {
    _this->_internal_set_staking_reward_rate(from._internal_staking_reward_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeStakeUpdateTransactionBody::CopyFrom(const NodeStakeUpdateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NodeStakeUpdateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStakeUpdateTransactionBody::IsInitialized() const {
  return true;
}

void NodeStakeUpdateTransactionBody::InternalSwap(NodeStakeUpdateTransactionBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_stake_.InternalSwap(&other->_impl_.node_stake_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeStakeUpdateTransactionBody, _impl_.staking_reward_rate_)
      + sizeof(NodeStakeUpdateTransactionBody::_impl_.staking_reward_rate_)
      - PROTOBUF_FIELD_OFFSET(NodeStakeUpdateTransactionBody, _impl_.end_of_staking_period_)>(
          reinterpret_cast<char*>(&_impl_.end_of_staking_period_),
          reinterpret_cast<char*>(&other->_impl_.end_of_staking_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStakeUpdateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_5fstake_5fupdate_2eproto_getter, &descriptor_table_node_5fstake_5fupdate_2eproto_once,
      file_level_metadata_node_5fstake_5fupdate_2eproto[0]);
}

// ===================================================================

class NodeStake::_Internal {
 public:
};

NodeStake::NodeStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.NodeStake)
}
NodeStake::NodeStake(const NodeStake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeStake* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_stake_){}
    , decltype(_impl_.min_stake_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.reward_rate_){}
    , decltype(_impl_.stake_){}
    , decltype(_impl_.stake_not_rewarded_){}
    , decltype(_impl_.stake_rewarded_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_stake_, &from._impl_.max_stake_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stake_rewarded_) -
    reinterpret_cast<char*>(&_impl_.max_stake_)) + sizeof(_impl_.stake_rewarded_));
  // @@protoc_insertion_point(copy_constructor:proto.NodeStake)
}

inline void NodeStake::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_stake_){int64_t{0}}
    , decltype(_impl_.min_stake_){int64_t{0}}
    , decltype(_impl_.node_id_){int64_t{0}}
    , decltype(_impl_.reward_rate_){int64_t{0}}
    , decltype(_impl_.stake_){int64_t{0}}
    , decltype(_impl_.stake_not_rewarded_){int64_t{0}}
    , decltype(_impl_.stake_rewarded_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeStake::~NodeStake() {
  // @@protoc_insertion_point(destructor:proto.NodeStake)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeStake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeStake::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeStake::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.NodeStake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_stake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stake_rewarded_) -
      reinterpret_cast<char*>(&_impl_.max_stake_)) + sizeof(_impl_.stake_rewarded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStake::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_stake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_stake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 min_stake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.min_stake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 reward_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.reward_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.stake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stake_not_rewarded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.stake_not_rewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 stake_rewarded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.stake_rewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeStake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.NodeStake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_stake = 1;
  if (this->_internal_max_stake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_stake(), target);
  }

  // int64 min_stake = 2;
  if (this->_internal_min_stake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_min_stake(), target);
  }

  // int64 node_id = 3;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_node_id(), target);
  }

  // int64 reward_rate = 4;
  if (this->_internal_reward_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_reward_rate(), target);
  }

  // int64 stake = 5;
  if (this->_internal_stake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_stake(), target);
  }

  // int64 stake_not_rewarded = 6;
  if (this->_internal_stake_not_rewarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_stake_not_rewarded(), target);
  }

  // int64 stake_rewarded = 7;
  if (this->_internal_stake_rewarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_stake_rewarded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.NodeStake)
  return target;
}

size_t NodeStake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.NodeStake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_stake = 1;
  if (this->_internal_max_stake() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_stake());
  }

  // int64 min_stake = 2;
  if (this->_internal_min_stake() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_stake());
  }

  // int64 node_id = 3;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_node_id());
  }

  // int64 reward_rate = 4;
  if (this->_internal_reward_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reward_rate());
  }

  // int64 stake = 5;
  if (this->_internal_stake() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stake());
  }

  // int64 stake_not_rewarded = 6;
  if (this->_internal_stake_not_rewarded() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stake_not_rewarded());
  }

  // int64 stake_rewarded = 7;
  if (this->_internal_stake_rewarded() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stake_rewarded());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeStake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeStake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeStake::GetClassData() const { return &_class_data_; }


void NodeStake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeStake*>(&to_msg);
  auto& from = static_cast<const NodeStake&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.NodeStake)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_stake() != 0) {
    _this->_internal_set_max_stake(from._internal_max_stake());
  }
  if (from._internal_min_stake() != 0) {
    _this->_internal_set_min_stake(from._internal_min_stake());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_reward_rate() != 0) {
    _this->_internal_set_reward_rate(from._internal_reward_rate());
  }
  if (from._internal_stake() != 0) {
    _this->_internal_set_stake(from._internal_stake());
  }
  if (from._internal_stake_not_rewarded() != 0) {
    _this->_internal_set_stake_not_rewarded(from._internal_stake_not_rewarded());
  }
  if (from._internal_stake_rewarded() != 0) {
    _this->_internal_set_stake_rewarded(from._internal_stake_rewarded());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeStake::CopyFrom(const NodeStake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.NodeStake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStake::IsInitialized() const {
  return true;
}

void NodeStake::InternalSwap(NodeStake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeStake, _impl_.stake_rewarded_)
      + sizeof(NodeStake::_impl_.stake_rewarded_)
      - PROTOBUF_FIELD_OFFSET(NodeStake, _impl_.max_stake_)>(
          reinterpret_cast<char*>(&_impl_.max_stake_),
          reinterpret_cast<char*>(&other->_impl_.max_stake_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_5fstake_5fupdate_2eproto_getter, &descriptor_table_node_5fstake_5fupdate_2eproto_once,
      file_level_metadata_node_5fstake_5fupdate_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::NodeStakeUpdateTransactionBody*
Arena::CreateMaybeMessage< ::proto::NodeStakeUpdateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NodeStakeUpdateTransactionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::NodeStake*
Arena::CreateMaybeMessage< ::proto::NodeStake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::NodeStake >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_create.proto

#include "token_create.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR TokenCreateTransactionBody::TokenCreateTransactionBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.custom_fees_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.treasury_)*/nullptr
  , /*decltype(_impl_.adminkey_)*/nullptr
  , /*decltype(_impl_.kyckey_)*/nullptr
  , /*decltype(_impl_.freezekey_)*/nullptr
  , /*decltype(_impl_.wipekey_)*/nullptr
  , /*decltype(_impl_.supplykey_)*/nullptr
  , /*decltype(_impl_.expiry_)*/nullptr
  , /*decltype(_impl_.autorenewaccount_)*/nullptr
  , /*decltype(_impl_.autorenewperiod_)*/nullptr
  , /*decltype(_impl_.fee_schedule_key_)*/nullptr
  , /*decltype(_impl_.pause_key_)*/nullptr
  , /*decltype(_impl_.initialsupply_)*/uint64_t{0u}
  , /*decltype(_impl_.decimals_)*/0u
  , /*decltype(_impl_.freezedefault_)*/false
  , /*decltype(_impl_.tokentype_)*/0
  , /*decltype(_impl_.supplytype_)*/0
  , /*decltype(_impl_.maxsupply_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenCreateTransactionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenCreateTransactionBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenCreateTransactionBodyDefaultTypeInternal() {}
  union {
    TokenCreateTransactionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenCreateTransactionBodyDefaultTypeInternal _TokenCreateTransactionBody_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_token_5fcreate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_token_5fcreate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_token_5fcreate_2eproto = nullptr;

const uint32_t TableStruct_token_5fcreate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.decimals_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.initialsupply_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.treasury_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.adminkey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.kyckey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.freezekey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.wipekey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.supplykey_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.freezedefault_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.expiry_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.autorenewaccount_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.autorenewperiod_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.memo_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.tokentype_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.supplytype_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.maxsupply_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.fee_schedule_key_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.custom_fees_),
  PROTOBUF_FIELD_OFFSET(::proto::TokenCreateTransactionBody, _impl_.pause_key_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::TokenCreateTransactionBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_TokenCreateTransactionBody_default_instance_._instance,
};

const char descriptor_table_protodef_token_5fcreate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022token_create.proto\022\005proto\032\016duration.pr"
  "oto\032\021basic_types.proto\032\021custom_fees.prot"
  "o\032\017timestamp.proto\"\211\005\n\032TokenCreateTransa"
  "ctionBody\022\014\n\004name\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022"
  "\020\n\010decimals\030\003 \001(\r\022\025\n\rinitialSupply\030\004 \001(\004"
  "\022\"\n\010treasury\030\005 \001(\0132\020.proto.AccountID\022\034\n\010"
  "adminKey\030\006 \001(\0132\n.proto.Key\022\032\n\006kycKey\030\007 \001"
  "(\0132\n.proto.Key\022\035\n\tfreezeKey\030\010 \001(\0132\n.prot"
  "o.Key\022\033\n\007wipeKey\030\t \001(\0132\n.proto.Key\022\035\n\tsu"
  "pplyKey\030\n \001(\0132\n.proto.Key\022\025\n\rfreezeDefau"
  "lt\030\013 \001(\010\022 \n\006expiry\030\r \001(\0132\020.proto.Timesta"
  "mp\022*\n\020autoRenewAccount\030\016 \001(\0132\020.proto.Acc"
  "ountID\022(\n\017autoRenewPeriod\030\017 \001(\0132\017.proto."
  "Duration\022\014\n\004memo\030\020 \001(\t\022#\n\ttokenType\030\021 \001("
  "\0162\020.proto.TokenType\022*\n\nsupplyType\030\022 \001(\0162"
  "\026.proto.TokenSupplyType\022\021\n\tmaxSupply\030\023 \001"
  "(\003\022$\n\020fee_schedule_key\030\024 \001(\0132\n.proto.Key"
  "\022%\n\013custom_fees\030\025 \003(\0132\020.proto.CustomFee\022"
  "\035\n\tpause_key\030\026 \001(\0132\n.proto.KeyB&\n\"com.he"
  "derahashgraph.api.proto.javaP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_token_5fcreate_2eproto_deps[4] = {
  &::descriptor_table_basic_5ftypes_2eproto,
  &::descriptor_table_custom_5ffees_2eproto,
  &::descriptor_table_duration_2eproto,
  &::descriptor_table_timestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_token_5fcreate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_token_5fcreate_2eproto = {
    false, false, 798, descriptor_table_protodef_token_5fcreate_2eproto,
    "token_create.proto",
    &descriptor_table_token_5fcreate_2eproto_once, descriptor_table_token_5fcreate_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_token_5fcreate_2eproto::offsets,
    file_level_metadata_token_5fcreate_2eproto, file_level_enum_descriptors_token_5fcreate_2eproto,
    file_level_service_descriptors_token_5fcreate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_token_5fcreate_2eproto_getter() {
  return &descriptor_table_token_5fcreate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_token_5fcreate_2eproto(&descriptor_table_token_5fcreate_2eproto);
namespace proto {

// ===================================================================

class TokenCreateTransactionBody::_Internal {
 public:
  static const ::proto::AccountID& treasury(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& adminkey(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& kyckey(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& freezekey(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& wipekey(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& supplykey(const TokenCreateTransactionBody* msg);
  static const ::proto::Timestamp& expiry(const TokenCreateTransactionBody* msg);
  static const ::proto::AccountID& autorenewaccount(const TokenCreateTransactionBody* msg);
  static const ::proto::Duration& autorenewperiod(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& fee_schedule_key(const TokenCreateTransactionBody* msg);
  static const ::proto::Key& pause_key(const TokenCreateTransactionBody* msg);
};

const ::proto::AccountID&
TokenCreateTransactionBody::_Internal::treasury(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.treasury_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::adminkey(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.adminkey_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::kyckey(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.kyckey_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::freezekey(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.freezekey_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::wipekey(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.wipekey_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::supplykey(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.supplykey_;
}
const ::proto::Timestamp&
TokenCreateTransactionBody::_Internal::expiry(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.expiry_;
}
const ::proto::AccountID&
TokenCreateTransactionBody::_Internal::autorenewaccount(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.autorenewaccount_;
}
const ::proto::Duration&
TokenCreateTransactionBody::_Internal::autorenewperiod(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.autorenewperiod_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::fee_schedule_key(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.fee_schedule_key_;
}
const ::proto::Key&
TokenCreateTransactionBody::_Internal::pause_key(const TokenCreateTransactionBody* msg) {
  return *msg->_impl_.pause_key_;
}
void TokenCreateTransactionBody::clear_treasury() {
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_ != nullptr) {
    delete _impl_.treasury_;
  }
  _impl_.treasury_ = nullptr;
}
void TokenCreateTransactionBody::clear_adminkey() {
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
}
void TokenCreateTransactionBody::clear_kyckey() {
  if (GetArenaForAllocation() == nullptr && _impl_.kyckey_ != nullptr) {
    delete _impl_.kyckey_;
  }
  _impl_.kyckey_ = nullptr;
}
void TokenCreateTransactionBody::clear_freezekey() {
  if (GetArenaForAllocation() == nullptr && _impl_.freezekey_ != nullptr) {
    delete _impl_.freezekey_;
  }
  _impl_.freezekey_ = nullptr;
}
void TokenCreateTransactionBody::clear_wipekey() {
  if (GetArenaForAllocation() == nullptr && _impl_.wipekey_ != nullptr) {
    delete _impl_.wipekey_;
  }
  _impl_.wipekey_ = nullptr;
}
void TokenCreateTransactionBody::clear_supplykey() {
  if (GetArenaForAllocation() == nullptr && _impl_.supplykey_ != nullptr) {
    delete _impl_.supplykey_;
  }
  _impl_.supplykey_ = nullptr;
}
void TokenCreateTransactionBody::clear_expiry() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_ != nullptr) {
    delete _impl_.expiry_;
  }
  _impl_.expiry_ = nullptr;
}
void TokenCreateTransactionBody::clear_autorenewaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewaccount_ != nullptr) {
    delete _impl_.autorenewaccount_;
  }
  _impl_.autorenewaccount_ = nullptr;
}
void TokenCreateTransactionBody::clear_autorenewperiod() {
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
}
void TokenCreateTransactionBody::clear_fee_schedule_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.fee_schedule_key_ != nullptr) {
    delete _impl_.fee_schedule_key_;
  }
  _impl_.fee_schedule_key_ = nullptr;
}
void TokenCreateTransactionBody::clear_custom_fees() {
  _impl_.custom_fees_.Clear();
}
void TokenCreateTransactionBody::clear_pause_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.pause_key_ != nullptr) {
    delete _impl_.pause_key_;
  }
  _impl_.pause_key_ = nullptr;
}
TokenCreateTransactionBody::TokenCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TokenCreateTransactionBody)
}
TokenCreateTransactionBody::TokenCreateTransactionBody(const TokenCreateTransactionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenCreateTransactionBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.custom_fees_){from._impl_.custom_fees_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.treasury_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.kyckey_){nullptr}
    , decltype(_impl_.freezekey_){nullptr}
    , decltype(_impl_.wipekey_){nullptr}
    , decltype(_impl_.supplykey_){nullptr}
    , decltype(_impl_.expiry_){nullptr}
    , decltype(_impl_.autorenewaccount_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.fee_schedule_key_){nullptr}
    , decltype(_impl_.pause_key_){nullptr}
    , decltype(_impl_.initialsupply_){}
    , decltype(_impl_.decimals_){}
    , decltype(_impl_.freezedefault_){}
    , decltype(_impl_.tokentype_){}
    , decltype(_impl_.supplytype_){}
    , decltype(_impl_.maxsupply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_treasury()) {
    _this->_impl_.treasury_ = new ::proto::AccountID(*from._impl_.treasury_);
  }
  if (from._internal_has_adminkey()) {
    _this->_impl_.adminkey_ = new ::proto::Key(*from._impl_.adminkey_);
  }
  if (from._internal_has_kyckey()) {
    _this->_impl_.kyckey_ = new ::proto::Key(*from._impl_.kyckey_);
  }
  if (from._internal_has_freezekey()) {
    _this->_impl_.freezekey_ = new ::proto::Key(*from._impl_.freezekey_);
  }
  if (from._internal_has_wipekey()) {
    _this->_impl_.wipekey_ = new ::proto::Key(*from._impl_.wipekey_);
  }
  if (from._internal_has_supplykey()) {
    _this->_impl_.supplykey_ = new ::proto::Key(*from._impl_.supplykey_);
  }
  if (from._internal_has_expiry()) {
    _this->_impl_.expiry_ = new ::proto::Timestamp(*from._impl_.expiry_);
  }
  if (from._internal_has_autorenewaccount()) {
    _this->_impl_.autorenewaccount_ = new ::proto::AccountID(*from._impl_.autorenewaccount_);
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_impl_.autorenewperiod_ = new ::proto::Duration(*from._impl_.autorenewperiod_);
  }
  if (from._internal_has_fee_schedule_key()) {
    _this->_impl_.fee_schedule_key_ = new ::proto::Key(*from._impl_.fee_schedule_key_);
  }
  if (from._internal_has_pause_key()) {
    _this->_impl_.pause_key_ = new ::proto::Key(*from._impl_.pause_key_);
  }
  ::memcpy(&_impl_.initialsupply_, &from._impl_.initialsupply_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxsupply_) -
    reinterpret_cast<char*>(&_impl_.initialsupply_)) + sizeof(_impl_.maxsupply_));
  // @@protoc_insertion_point(copy_constructor:proto.TokenCreateTransactionBody)
}

inline void TokenCreateTransactionBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.custom_fees_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.memo_){}
    , decltype(_impl_.treasury_){nullptr}
    , decltype(_impl_.adminkey_){nullptr}
    , decltype(_impl_.kyckey_){nullptr}
    , decltype(_impl_.freezekey_){nullptr}
    , decltype(_impl_.wipekey_){nullptr}
    , decltype(_impl_.supplykey_){nullptr}
    , decltype(_impl_.expiry_){nullptr}
    , decltype(_impl_.autorenewaccount_){nullptr}
    , decltype(_impl_.autorenewperiod_){nullptr}
    , decltype(_impl_.fee_schedule_key_){nullptr}
    , decltype(_impl_.pause_key_){nullptr}
    , decltype(_impl_.initialsupply_){uint64_t{0u}}
    , decltype(_impl_.decimals_){0u}
    , decltype(_impl_.freezedefault_){false}
    , decltype(_impl_.tokentype_){0}
    , decltype(_impl_.supplytype_){0}
    , decltype(_impl_.maxsupply_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenCreateTransactionBody::~TokenCreateTransactionBody() {
  // @@protoc_insertion_point(destructor:proto.TokenCreateTransactionBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenCreateTransactionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_fees_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.memo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.treasury_;
  if (this != internal_default_instance()) delete _impl_.adminkey_;
  if (this != internal_default_instance()) delete _impl_.kyckey_;
  if (this != internal_default_instance()) delete _impl_.freezekey_;
  if (this != internal_default_instance()) delete _impl_.wipekey_;
  if (this != internal_default_instance()) delete _impl_.supplykey_;
  if (this != internal_default_instance()) delete _impl_.expiry_;
  if (this != internal_default_instance()) delete _impl_.autorenewaccount_;
  if (this != internal_default_instance()) delete _impl_.autorenewperiod_;
  if (this != internal_default_instance()) delete _impl_.fee_schedule_key_;
  if (this != internal_default_instance()) delete _impl_.pause_key_;
}

void TokenCreateTransactionBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenCreateTransactionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TokenCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_fees_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.treasury_ != nullptr) {
    delete _impl_.treasury_;
  }
  _impl_.treasury_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adminkey_ != nullptr) {
    delete _impl_.adminkey_;
  }
  _impl_.adminkey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kyckey_ != nullptr) {
    delete _impl_.kyckey_;
  }
  _impl_.kyckey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.freezekey_ != nullptr) {
    delete _impl_.freezekey_;
  }
  _impl_.freezekey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wipekey_ != nullptr) {
    delete _impl_.wipekey_;
  }
  _impl_.wipekey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.supplykey_ != nullptr) {
    delete _impl_.supplykey_;
  }
  _impl_.supplykey_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_ != nullptr) {
    delete _impl_.expiry_;
  }
  _impl_.expiry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewaccount_ != nullptr) {
    delete _impl_.autorenewaccount_;
  }
  _impl_.autorenewaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autorenewperiod_ != nullptr) {
    delete _impl_.autorenewperiod_;
  }
  _impl_.autorenewperiod_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fee_schedule_key_ != nullptr) {
    delete _impl_.fee_schedule_key_;
  }
  _impl_.fee_schedule_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pause_key_ != nullptr) {
    delete _impl_.pause_key_;
  }
  _impl_.pause_key_ = nullptr;
  ::memset(&_impl_.initialsupply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxsupply_) -
      reinterpret_cast<char*>(&_impl_.initialsupply_)) + sizeof(_impl_.maxsupply_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenCreateTransactionBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TokenCreateTransactionBody.name"));
        } else
          goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TokenCreateTransactionBody.symbol"));
        } else
          goto handle_unusual;
        continue;
      // uint32 decimals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 initialSupply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.initialsupply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID treasury = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasury(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key adminKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_adminkey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key kycKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kyckey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key freezeKey = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_freezekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key wipeKey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_wipekey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key supplyKey = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_supplykey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool freezeDefault = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.freezedefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp expiry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AccountID autoRenewAccount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Duration autoRenewPeriod = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_autorenewperiod(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TokenCreateTransactionBody.memo"));
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenType tokenType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tokentype(static_cast<::proto::TokenType>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto.TokenSupplyType supplyType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_supplytype(static_cast<::proto::TokenSupplyType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 maxSupply = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.maxsupply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Key fee_schedule_key = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_schedule_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.CustomFee custom_fees = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_custom_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Key pause_key = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenCreateTransactionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TokenCreateTransactionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TokenCreateTransactionBody.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TokenCreateTransactionBody.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // uint32 decimals = 3;
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_decimals(), target);
  }

  // uint64 initialSupply = 4;
  if (this->_internal_initialsupply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_initialsupply(), target);
  }

  // .proto.AccountID treasury = 5;
  if (this->_internal_has_treasury()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::treasury(this),
        _Internal::treasury(this).GetCachedSize(), target, stream);
  }

  // .proto.Key adminKey = 6;
  if (this->_internal_has_adminkey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::adminkey(this),
        _Internal::adminkey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key kycKey = 7;
  if (this->_internal_has_kyckey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::kyckey(this),
        _Internal::kyckey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key freezeKey = 8;
  if (this->_internal_has_freezekey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::freezekey(this),
        _Internal::freezekey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key wipeKey = 9;
  if (this->_internal_has_wipekey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::wipekey(this),
        _Internal::wipekey(this).GetCachedSize(), target, stream);
  }

  // .proto.Key supplyKey = 10;
  if (this->_internal_has_supplykey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::supplykey(this),
        _Internal::supplykey(this).GetCachedSize(), target, stream);
  }

  // bool freezeDefault = 11;
  if (this->_internal_freezedefault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_freezedefault(), target);
  }

  // .proto.Timestamp expiry = 13;
  if (this->_internal_has_expiry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::expiry(this),
        _Internal::expiry(this).GetCachedSize(), target, stream);
  }

  // .proto.AccountID autoRenewAccount = 14;
  if (this->_internal_has_autorenewaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::autorenewaccount(this),
        _Internal::autorenewaccount(this).GetCachedSize(), target, stream);
  }

  // .proto.Duration autoRenewPeriod = 15;
  if (this->_internal_has_autorenewperiod()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::autorenewperiod(this),
        _Internal::autorenewperiod(this).GetCachedSize(), target, stream);
  }

  // string memo = 16;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TokenCreateTransactionBody.memo");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_memo(), target);
  }

  // .proto.TokenType tokenType = 17;
  if (this->_internal_tokentype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_tokentype(), target);
  }

  // .proto.TokenSupplyType supplyType = 18;
  if (this->_internal_supplytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_supplytype(), target);
  }

  // int64 maxSupply = 19;
  if (this->_internal_maxsupply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_maxsupply(), target);
  }

  // .proto.Key fee_schedule_key = 20;
  if (this->_internal_has_fee_schedule_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::fee_schedule_key(this),
        _Internal::fee_schedule_key(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.CustomFee custom_fees = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto.Key pause_key = 22;
  if (this->_internal_has_pause_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::pause_key(this),
        _Internal::pause_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TokenCreateTransactionBody)
  return target;
}

size_t TokenCreateTransactionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TokenCreateTransactionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.CustomFee custom_fees = 21;
  total_size += 2UL * this->_internal_custom_fees_size();
  for (const auto& msg : this->_impl_.custom_fees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string memo = 16;
  if (!this->_internal_memo().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .proto.AccountID treasury = 5;
  if (this->_internal_has_treasury()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.treasury_);
  }

  // .proto.Key adminKey = 6;
  if (this->_internal_has_adminkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adminkey_);
  }

  // .proto.Key kycKey = 7;
  if (this->_internal_has_kyckey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kyckey_);
  }

  // .proto.Key freezeKey = 8;
  if (this->_internal_has_freezekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.freezekey_);
  }

  // .proto.Key wipeKey = 9;
  if (this->_internal_has_wipekey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wipekey_);
  }

  // .proto.Key supplyKey = 10;
  if (this->_internal_has_supplykey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.supplykey_);
  }

  // .proto.Timestamp expiry = 13;
  if (this->_internal_has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiry_);
  }

  // .proto.AccountID autoRenewAccount = 14;
  if (this->_internal_has_autorenewaccount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewaccount_);
  }

  // .proto.Duration autoRenewPeriod = 15;
  if (this->_internal_has_autorenewperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autorenewperiod_);
  }

  // .proto.Key fee_schedule_key = 20;
  if (this->_internal_has_fee_schedule_key()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_schedule_key_);
  }

  // .proto.Key pause_key = 22;
  if (this->_internal_has_pause_key()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pause_key_);
  }

  // uint64 initialSupply = 4;
  if (this->_internal_initialsupply() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_initialsupply());
  }

  // uint32 decimals = 3;
  if (this->_internal_decimals() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimals());
  }

  // bool freezeDefault = 11;
  if (this->_internal_freezedefault() != 0) {
    total_size += 1 + 1;
  }

  // .proto.TokenType tokenType = 17;
  if (this->_internal_tokentype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tokentype());
  }

  // .proto.TokenSupplyType supplyType = 18;
  if (this->_internal_supplytype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_supplytype());
  }

  // int64 maxSupply = 19;
  if (this->_internal_maxsupply() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_maxsupply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenCreateTransactionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenCreateTransactionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenCreateTransactionBody::GetClassData() const { return &_class_data_; }


void TokenCreateTransactionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenCreateTransactionBody*>(&to_msg);
  auto& from = static_cast<const TokenCreateTransactionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TokenCreateTransactionBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_fees_.MergeFrom(from._impl_.custom_fees_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_treasury()) {
    _this->_internal_mutable_treasury()->::proto::AccountID::MergeFrom(
        from._internal_treasury());
  }
  if (from._internal_has_adminkey()) {
    _this->_internal_mutable_adminkey()->::proto::Key::MergeFrom(
        from._internal_adminkey());
  }
  if (from._internal_has_kyckey()) {
    _this->_internal_mutable_kyckey()->::proto::Key::MergeFrom(
        from._internal_kyckey());
  }
  if (from._internal_has_freezekey()) {
    _this->_internal_mutable_freezekey()->::proto::Key::MergeFrom(
        from._internal_freezekey());
  }
  if (from._internal_has_wipekey()) {
    _this->_internal_mutable_wipekey()->::proto::Key::MergeFrom(
        from._internal_wipekey());
  }
  if (from._internal_has_supplykey()) {
    _this->_internal_mutable_supplykey()->::proto::Key::MergeFrom(
        from._internal_supplykey());
  }
  if (from._internal_has_expiry()) {
    _this->_internal_mutable_expiry()->::proto::Timestamp::MergeFrom(
        from._internal_expiry());
  }
  if (from._internal_has_autorenewaccount()) {
    _this->_internal_mutable_autorenewaccount()->::proto::AccountID::MergeFrom(
        from._internal_autorenewaccount());
  }
  if (from._internal_has_autorenewperiod()) {
    _this->_internal_mutable_autorenewperiod()->::proto::Duration::MergeFrom(
        from._internal_autorenewperiod());
  }
  if (from._internal_has_fee_schedule_key()) {
    _this->_internal_mutable_fee_schedule_key()->::proto::Key::MergeFrom(
        from._internal_fee_schedule_key());
  }
  if (from._internal_has_pause_key()) {
    _this->_internal_mutable_pause_key()->::proto::Key::MergeFrom(
        from._internal_pause_key());
  }
  if (from._internal_initialsupply() != 0) {
    _this->_internal_set_initialsupply(from._internal_initialsupply());
  }
  if (from._internal_decimals() != 0) {
    _this->_internal_set_decimals(from._internal_decimals());
  }
  if (from._internal_freezedefault() != 0) {
    _this->_internal_set_freezedefault(from._internal_freezedefault());
  }
  if (from._internal_tokentype() != 0) {
    _this->_internal_set_tokentype(from._internal_tokentype());
  }
  if (from._internal_supplytype() != 0) {
    _this->_internal_set_supplytype(from._internal_supplytype());
  }
  if (from._internal_maxsupply() != 0) {
    _this->_internal_set_maxsupply(from._internal_maxsupply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenCreateTransactionBody::CopyFrom(const TokenCreateTransactionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TokenCreateTransactionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenCreateTransactionBody::IsInitialized() const {
  return true;
}

void TokenCreateTransactionBody::InternalSwap(TokenCreateTransactionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.custom_fees_.InternalSwap(&other->_impl_.custom_fees_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memo_, lhs_arena,
      &other->_impl_.memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenCreateTransactionBody, _impl_.maxsupply_)
      + sizeof(TokenCreateTransactionBody::_impl_.maxsupply_)
      - PROTOBUF_FIELD_OFFSET(TokenCreateTransactionBody, _impl_.treasury_)>(
          reinterpret_cast<char*>(&_impl_.treasury_),
          reinterpret_cast<char*>(&other->_impl_.treasury_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenCreateTransactionBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_token_5fcreate_2eproto_getter, &descriptor_table_token_5fcreate_2eproto_once,
      file_level_metadata_token_5fcreate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TokenCreateTransactionBody*
Arena::CreateMaybeMessage< ::proto::TokenCreateTransactionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TokenCreateTransactionBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

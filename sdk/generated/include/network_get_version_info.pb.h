// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_get_version_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_5fget_5fversion_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_5fget_5fversion_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_5fget_5fversion_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5fget_5fversion_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_5fget_5fversion_5finfo_2eproto;
namespace proto {
class NetworkGetVersionInfoQuery;
struct NetworkGetVersionInfoQueryDefaultTypeInternal;
extern NetworkGetVersionInfoQueryDefaultTypeInternal _NetworkGetVersionInfoQuery_default_instance_;
class NetworkGetVersionInfoResponse;
struct NetworkGetVersionInfoResponseDefaultTypeInternal;
extern NetworkGetVersionInfoResponseDefaultTypeInternal _NetworkGetVersionInfoResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::NetworkGetVersionInfoQuery* Arena::CreateMaybeMessage<::proto::NetworkGetVersionInfoQuery>(Arena*);
template<> ::proto::NetworkGetVersionInfoResponse* Arena::CreateMaybeMessage<::proto::NetworkGetVersionInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class NetworkGetVersionInfoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NetworkGetVersionInfoQuery) */ {
 public:
  inline NetworkGetVersionInfoQuery() : NetworkGetVersionInfoQuery(nullptr) {}
  ~NetworkGetVersionInfoQuery() override;
  explicit PROTOBUF_CONSTEXPR NetworkGetVersionInfoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkGetVersionInfoQuery(const NetworkGetVersionInfoQuery& from);
  NetworkGetVersionInfoQuery(NetworkGetVersionInfoQuery&& from) noexcept
    : NetworkGetVersionInfoQuery() {
    *this = ::std::move(from);
  }

  inline NetworkGetVersionInfoQuery& operator=(const NetworkGetVersionInfoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkGetVersionInfoQuery& operator=(NetworkGetVersionInfoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkGetVersionInfoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkGetVersionInfoQuery* internal_default_instance() {
    return reinterpret_cast<const NetworkGetVersionInfoQuery*>(
               &_NetworkGetVersionInfoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkGetVersionInfoQuery& a, NetworkGetVersionInfoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkGetVersionInfoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkGetVersionInfoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkGetVersionInfoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkGetVersionInfoQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkGetVersionInfoQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkGetVersionInfoQuery& from) {
    NetworkGetVersionInfoQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkGetVersionInfoQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NetworkGetVersionInfoQuery";
  }
  protected:
  explicit NetworkGetVersionInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:proto.NetworkGetVersionInfoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fget_5fversion_5finfo_2eproto;
};
// -------------------------------------------------------------------

class NetworkGetVersionInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NetworkGetVersionInfoResponse) */ {
 public:
  inline NetworkGetVersionInfoResponse() : NetworkGetVersionInfoResponse(nullptr) {}
  ~NetworkGetVersionInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR NetworkGetVersionInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkGetVersionInfoResponse(const NetworkGetVersionInfoResponse& from);
  NetworkGetVersionInfoResponse(NetworkGetVersionInfoResponse&& from) noexcept
    : NetworkGetVersionInfoResponse() {
    *this = ::std::move(from);
  }

  inline NetworkGetVersionInfoResponse& operator=(const NetworkGetVersionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkGetVersionInfoResponse& operator=(NetworkGetVersionInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkGetVersionInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkGetVersionInfoResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkGetVersionInfoResponse*>(
               &_NetworkGetVersionInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkGetVersionInfoResponse& a, NetworkGetVersionInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkGetVersionInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkGetVersionInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkGetVersionInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkGetVersionInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkGetVersionInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkGetVersionInfoResponse& from) {
    NetworkGetVersionInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkGetVersionInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NetworkGetVersionInfoResponse";
  }
  protected:
  explicit NetworkGetVersionInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kHapiProtoVersionFieldNumber = 2,
    kHederaServicesVersionFieldNumber = 3,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.SemanticVersion hapiProtoVersion = 2;
  bool has_hapiprotoversion() const;
  private:
  bool _internal_has_hapiprotoversion() const;
  public:
  void clear_hapiprotoversion();
  const ::proto::SemanticVersion& hapiprotoversion() const;
  PROTOBUF_NODISCARD ::proto::SemanticVersion* release_hapiprotoversion();
  ::proto::SemanticVersion* mutable_hapiprotoversion();
  void set_allocated_hapiprotoversion(::proto::SemanticVersion* hapiprotoversion);
  private:
  const ::proto::SemanticVersion& _internal_hapiprotoversion() const;
  ::proto::SemanticVersion* _internal_mutable_hapiprotoversion();
  public:
  void unsafe_arena_set_allocated_hapiprotoversion(
      ::proto::SemanticVersion* hapiprotoversion);
  ::proto::SemanticVersion* unsafe_arena_release_hapiprotoversion();

  // .proto.SemanticVersion hederaServicesVersion = 3;
  bool has_hederaservicesversion() const;
  private:
  bool _internal_has_hederaservicesversion() const;
  public:
  void clear_hederaservicesversion();
  const ::proto::SemanticVersion& hederaservicesversion() const;
  PROTOBUF_NODISCARD ::proto::SemanticVersion* release_hederaservicesversion();
  ::proto::SemanticVersion* mutable_hederaservicesversion();
  void set_allocated_hederaservicesversion(::proto::SemanticVersion* hederaservicesversion);
  private:
  const ::proto::SemanticVersion& _internal_hederaservicesversion() const;
  ::proto::SemanticVersion* _internal_mutable_hederaservicesversion();
  public:
  void unsafe_arena_set_allocated_hederaservicesversion(
      ::proto::SemanticVersion* hederaservicesversion);
  ::proto::SemanticVersion* unsafe_arena_release_hederaservicesversion();

  // @@protoc_insertion_point(class_scope:proto.NetworkGetVersionInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::SemanticVersion* hapiprotoversion_;
    ::proto::SemanticVersion* hederaservicesversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_5fget_5fversion_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkGetVersionInfoQuery

// .proto.QueryHeader header = 1;
inline bool NetworkGetVersionInfoQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool NetworkGetVersionInfoQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& NetworkGetVersionInfoQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& NetworkGetVersionInfoQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.NetworkGetVersionInfoQuery.header)
  return _internal_header();
}
inline void NetworkGetVersionInfoQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NetworkGetVersionInfoQuery.header)
}
inline ::proto::QueryHeader* NetworkGetVersionInfoQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* NetworkGetVersionInfoQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.NetworkGetVersionInfoQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* NetworkGetVersionInfoQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* NetworkGetVersionInfoQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.NetworkGetVersionInfoQuery.header)
  return _msg;
}
inline void NetworkGetVersionInfoQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkGetVersionInfoQuery.header)
}

// -------------------------------------------------------------------

// NetworkGetVersionInfoResponse

// .proto.ResponseHeader header = 1;
inline bool NetworkGetVersionInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool NetworkGetVersionInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& NetworkGetVersionInfoResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& NetworkGetVersionInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.NetworkGetVersionInfoResponse.header)
  return _internal_header();
}
inline void NetworkGetVersionInfoResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NetworkGetVersionInfoResponse.header)
}
inline ::proto::ResponseHeader* NetworkGetVersionInfoResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* NetworkGetVersionInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.NetworkGetVersionInfoResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* NetworkGetVersionInfoResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* NetworkGetVersionInfoResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.NetworkGetVersionInfoResponse.header)
  return _msg;
}
inline void NetworkGetVersionInfoResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkGetVersionInfoResponse.header)
}

// .proto.SemanticVersion hapiProtoVersion = 2;
inline bool NetworkGetVersionInfoResponse::_internal_has_hapiprotoversion() const {
  return this != internal_default_instance() && _impl_.hapiprotoversion_ != nullptr;
}
inline bool NetworkGetVersionInfoResponse::has_hapiprotoversion() const {
  return _internal_has_hapiprotoversion();
}
inline const ::proto::SemanticVersion& NetworkGetVersionInfoResponse::_internal_hapiprotoversion() const {
  const ::proto::SemanticVersion* p = _impl_.hapiprotoversion_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SemanticVersion&>(
      ::proto::_SemanticVersion_default_instance_);
}
inline const ::proto::SemanticVersion& NetworkGetVersionInfoResponse::hapiprotoversion() const {
  // @@protoc_insertion_point(field_get:proto.NetworkGetVersionInfoResponse.hapiProtoVersion)
  return _internal_hapiprotoversion();
}
inline void NetworkGetVersionInfoResponse::unsafe_arena_set_allocated_hapiprotoversion(
    ::proto::SemanticVersion* hapiprotoversion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hapiprotoversion_);
  }
  _impl_.hapiprotoversion_ = hapiprotoversion;
  if (hapiprotoversion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NetworkGetVersionInfoResponse.hapiProtoVersion)
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::release_hapiprotoversion() {
  
  ::proto::SemanticVersion* temp = _impl_.hapiprotoversion_;
  _impl_.hapiprotoversion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::unsafe_arena_release_hapiprotoversion() {
  // @@protoc_insertion_point(field_release:proto.NetworkGetVersionInfoResponse.hapiProtoVersion)
  
  ::proto::SemanticVersion* temp = _impl_.hapiprotoversion_;
  _impl_.hapiprotoversion_ = nullptr;
  return temp;
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::_internal_mutable_hapiprotoversion() {
  
  if (_impl_.hapiprotoversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SemanticVersion>(GetArenaForAllocation());
    _impl_.hapiprotoversion_ = p;
  }
  return _impl_.hapiprotoversion_;
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::mutable_hapiprotoversion() {
  ::proto::SemanticVersion* _msg = _internal_mutable_hapiprotoversion();
  // @@protoc_insertion_point(field_mutable:proto.NetworkGetVersionInfoResponse.hapiProtoVersion)
  return _msg;
}
inline void NetworkGetVersionInfoResponse::set_allocated_hapiprotoversion(::proto::SemanticVersion* hapiprotoversion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hapiprotoversion_);
  }
  if (hapiprotoversion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hapiprotoversion));
    if (message_arena != submessage_arena) {
      hapiprotoversion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hapiprotoversion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hapiprotoversion_ = hapiprotoversion;
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkGetVersionInfoResponse.hapiProtoVersion)
}

// .proto.SemanticVersion hederaServicesVersion = 3;
inline bool NetworkGetVersionInfoResponse::_internal_has_hederaservicesversion() const {
  return this != internal_default_instance() && _impl_.hederaservicesversion_ != nullptr;
}
inline bool NetworkGetVersionInfoResponse::has_hederaservicesversion() const {
  return _internal_has_hederaservicesversion();
}
inline const ::proto::SemanticVersion& NetworkGetVersionInfoResponse::_internal_hederaservicesversion() const {
  const ::proto::SemanticVersion* p = _impl_.hederaservicesversion_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SemanticVersion&>(
      ::proto::_SemanticVersion_default_instance_);
}
inline const ::proto::SemanticVersion& NetworkGetVersionInfoResponse::hederaservicesversion() const {
  // @@protoc_insertion_point(field_get:proto.NetworkGetVersionInfoResponse.hederaServicesVersion)
  return _internal_hederaservicesversion();
}
inline void NetworkGetVersionInfoResponse::unsafe_arena_set_allocated_hederaservicesversion(
    ::proto::SemanticVersion* hederaservicesversion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hederaservicesversion_);
  }
  _impl_.hederaservicesversion_ = hederaservicesversion;
  if (hederaservicesversion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NetworkGetVersionInfoResponse.hederaServicesVersion)
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::release_hederaservicesversion() {
  
  ::proto::SemanticVersion* temp = _impl_.hederaservicesversion_;
  _impl_.hederaservicesversion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::unsafe_arena_release_hederaservicesversion() {
  // @@protoc_insertion_point(field_release:proto.NetworkGetVersionInfoResponse.hederaServicesVersion)
  
  ::proto::SemanticVersion* temp = _impl_.hederaservicesversion_;
  _impl_.hederaservicesversion_ = nullptr;
  return temp;
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::_internal_mutable_hederaservicesversion() {
  
  if (_impl_.hederaservicesversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SemanticVersion>(GetArenaForAllocation());
    _impl_.hederaservicesversion_ = p;
  }
  return _impl_.hederaservicesversion_;
}
inline ::proto::SemanticVersion* NetworkGetVersionInfoResponse::mutable_hederaservicesversion() {
  ::proto::SemanticVersion* _msg = _internal_mutable_hederaservicesversion();
  // @@protoc_insertion_point(field_mutable:proto.NetworkGetVersionInfoResponse.hederaServicesVersion)
  return _msg;
}
inline void NetworkGetVersionInfoResponse::set_allocated_hederaservicesversion(::proto::SemanticVersion* hederaservicesversion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hederaservicesversion_);
  }
  if (hederaservicesversion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hederaservicesversion));
    if (message_arena != submessage_arena) {
      hederaservicesversion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hederaservicesversion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hederaservicesversion_ = hederaservicesversion;
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkGetVersionInfoResponse.hederaServicesVersion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_5fget_5fversion_5finfo_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "get_by_key.pb.h"
#include "get_by_solidity_id.pb.h"
#include "contract_call_local.pb.h"
#include "contract_get_info.pb.h"
#include "contract_get_bytecode.pb.h"
#include "contract_get_records.pb.h"
#include "crypto_get_account_balance.pb.h"
#include "crypto_get_account_records.pb.h"
#include "crypto_get_info.pb.h"
#include "crypto_get_live_hash.pb.h"
#include "crypto_get_stakers.pb.h"
#include "file_get_contents.pb.h"
#include "file_get_info.pb.h"
#include "transaction_get_receipt.pb.h"
#include "transaction_get_record.pb.h"
#include "transaction_get_fast_record.pb.h"
#include "consensus_get_topic_info.pb.h"
#include "network_get_version_info.pb.h"
#include "network_get_execution_time.pb.h"
#include "token_get_info.pb.h"
#include "schedule_get_info.pb.h"
#include "token_get_account_nft_infos.pb.h"
#include "token_get_nft_info.pb.h"
#include "token_get_nft_infos.pb.h"
#include "get_account_details.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_2eproto;
namespace proto {
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Query* Arena::CreateMaybeMessage<::proto::Query>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  explicit PROTOBUF_CONSTEXPR Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  enum QueryCase {
    kGetByKey = 1,
    kGetBySolidityID = 2,
    kContractCallLocal = 3,
    kContractGetInfo = 4,
    kContractGetBytecode = 5,
    kContractGetRecords = 6,
    kCryptogetAccountBalance = 7,
    kCryptoGetAccountRecords = 8,
    kCryptoGetInfo = 9,
    kCryptoGetLiveHash = 10,
    kCryptoGetProxyStakers = 11,
    kFileGetContents = 12,
    kFileGetInfo = 13,
    kTransactionGetReceipt = 14,
    kTransactionGetRecord = 15,
    kTransactionGetFastRecord = 16,
    kConsensusGetTopicInfo = 50,
    kNetworkGetVersionInfo = 51,
    kTokenGetInfo = 52,
    kScheduleGetInfo = 53,
    kTokenGetAccountNftInfos = 54,
    kTokenGetNftInfo = 55,
    kTokenGetNftInfos = 56,
    kNetworkGetExecutionTime = 57,
    kAccountDetails = 58,
    QUERY_NOT_SET = 0,
  };

  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query& from) {
    Query::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetByKeyFieldNumber = 1,
    kGetBySolidityIDFieldNumber = 2,
    kContractCallLocalFieldNumber = 3,
    kContractGetInfoFieldNumber = 4,
    kContractGetBytecodeFieldNumber = 5,
    kContractGetRecordsFieldNumber = 6,
    kCryptogetAccountBalanceFieldNumber = 7,
    kCryptoGetAccountRecordsFieldNumber = 8,
    kCryptoGetInfoFieldNumber = 9,
    kCryptoGetLiveHashFieldNumber = 10,
    kCryptoGetProxyStakersFieldNumber = 11,
    kFileGetContentsFieldNumber = 12,
    kFileGetInfoFieldNumber = 13,
    kTransactionGetReceiptFieldNumber = 14,
    kTransactionGetRecordFieldNumber = 15,
    kTransactionGetFastRecordFieldNumber = 16,
    kConsensusGetTopicInfoFieldNumber = 50,
    kNetworkGetVersionInfoFieldNumber = 51,
    kTokenGetInfoFieldNumber = 52,
    kScheduleGetInfoFieldNumber = 53,
    kTokenGetAccountNftInfosFieldNumber = 54,
    kTokenGetNftInfoFieldNumber = 55,
    kTokenGetNftInfosFieldNumber = 56,
    kNetworkGetExecutionTimeFieldNumber = 57,
    kAccountDetailsFieldNumber = 58,
  };
  // .proto.GetByKeyQuery getByKey = 1;
  bool has_getbykey() const;
  private:
  bool _internal_has_getbykey() const;
  public:
  void clear_getbykey();
  const ::proto::GetByKeyQuery& getbykey() const;
  PROTOBUF_NODISCARD ::proto::GetByKeyQuery* release_getbykey();
  ::proto::GetByKeyQuery* mutable_getbykey();
  void set_allocated_getbykey(::proto::GetByKeyQuery* getbykey);
  private:
  const ::proto::GetByKeyQuery& _internal_getbykey() const;
  ::proto::GetByKeyQuery* _internal_mutable_getbykey();
  public:
  void unsafe_arena_set_allocated_getbykey(
      ::proto::GetByKeyQuery* getbykey);
  ::proto::GetByKeyQuery* unsafe_arena_release_getbykey();

  // .proto.GetBySolidityIDQuery getBySolidityID = 2;
  bool has_getbysolidityid() const;
  private:
  bool _internal_has_getbysolidityid() const;
  public:
  void clear_getbysolidityid();
  const ::proto::GetBySolidityIDQuery& getbysolidityid() const;
  PROTOBUF_NODISCARD ::proto::GetBySolidityIDQuery* release_getbysolidityid();
  ::proto::GetBySolidityIDQuery* mutable_getbysolidityid();
  void set_allocated_getbysolidityid(::proto::GetBySolidityIDQuery* getbysolidityid);
  private:
  const ::proto::GetBySolidityIDQuery& _internal_getbysolidityid() const;
  ::proto::GetBySolidityIDQuery* _internal_mutable_getbysolidityid();
  public:
  void unsafe_arena_set_allocated_getbysolidityid(
      ::proto::GetBySolidityIDQuery* getbysolidityid);
  ::proto::GetBySolidityIDQuery* unsafe_arena_release_getbysolidityid();

  // .proto.ContractCallLocalQuery contractCallLocal = 3;
  bool has_contractcalllocal() const;
  private:
  bool _internal_has_contractcalllocal() const;
  public:
  void clear_contractcalllocal();
  const ::proto::ContractCallLocalQuery& contractcalllocal() const;
  PROTOBUF_NODISCARD ::proto::ContractCallLocalQuery* release_contractcalllocal();
  ::proto::ContractCallLocalQuery* mutable_contractcalllocal();
  void set_allocated_contractcalllocal(::proto::ContractCallLocalQuery* contractcalllocal);
  private:
  const ::proto::ContractCallLocalQuery& _internal_contractcalllocal() const;
  ::proto::ContractCallLocalQuery* _internal_mutable_contractcalllocal();
  public:
  void unsafe_arena_set_allocated_contractcalllocal(
      ::proto::ContractCallLocalQuery* contractcalllocal);
  ::proto::ContractCallLocalQuery* unsafe_arena_release_contractcalllocal();

  // .proto.ContractGetInfoQuery contractGetInfo = 4;
  bool has_contractgetinfo() const;
  private:
  bool _internal_has_contractgetinfo() const;
  public:
  void clear_contractgetinfo();
  const ::proto::ContractGetInfoQuery& contractgetinfo() const;
  PROTOBUF_NODISCARD ::proto::ContractGetInfoQuery* release_contractgetinfo();
  ::proto::ContractGetInfoQuery* mutable_contractgetinfo();
  void set_allocated_contractgetinfo(::proto::ContractGetInfoQuery* contractgetinfo);
  private:
  const ::proto::ContractGetInfoQuery& _internal_contractgetinfo() const;
  ::proto::ContractGetInfoQuery* _internal_mutable_contractgetinfo();
  public:
  void unsafe_arena_set_allocated_contractgetinfo(
      ::proto::ContractGetInfoQuery* contractgetinfo);
  ::proto::ContractGetInfoQuery* unsafe_arena_release_contractgetinfo();

  // .proto.ContractGetBytecodeQuery contractGetBytecode = 5;
  bool has_contractgetbytecode() const;
  private:
  bool _internal_has_contractgetbytecode() const;
  public:
  void clear_contractgetbytecode();
  const ::proto::ContractGetBytecodeQuery& contractgetbytecode() const;
  PROTOBUF_NODISCARD ::proto::ContractGetBytecodeQuery* release_contractgetbytecode();
  ::proto::ContractGetBytecodeQuery* mutable_contractgetbytecode();
  void set_allocated_contractgetbytecode(::proto::ContractGetBytecodeQuery* contractgetbytecode);
  private:
  const ::proto::ContractGetBytecodeQuery& _internal_contractgetbytecode() const;
  ::proto::ContractGetBytecodeQuery* _internal_mutable_contractgetbytecode();
  public:
  void unsafe_arena_set_allocated_contractgetbytecode(
      ::proto::ContractGetBytecodeQuery* contractgetbytecode);
  ::proto::ContractGetBytecodeQuery* unsafe_arena_release_contractgetbytecode();

  // .proto.ContractGetRecordsQuery ContractGetRecords = 6;
  bool has_contractgetrecords() const;
  private:
  bool _internal_has_contractgetrecords() const;
  public:
  void clear_contractgetrecords();
  const ::proto::ContractGetRecordsQuery& contractgetrecords() const;
  PROTOBUF_NODISCARD ::proto::ContractGetRecordsQuery* release_contractgetrecords();
  ::proto::ContractGetRecordsQuery* mutable_contractgetrecords();
  void set_allocated_contractgetrecords(::proto::ContractGetRecordsQuery* contractgetrecords);
  private:
  const ::proto::ContractGetRecordsQuery& _internal_contractgetrecords() const;
  ::proto::ContractGetRecordsQuery* _internal_mutable_contractgetrecords();
  public:
  void unsafe_arena_set_allocated_contractgetrecords(
      ::proto::ContractGetRecordsQuery* contractgetrecords);
  ::proto::ContractGetRecordsQuery* unsafe_arena_release_contractgetrecords();

  // .proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;
  bool has_cryptogetaccountbalance() const;
  private:
  bool _internal_has_cryptogetaccountbalance() const;
  public:
  void clear_cryptogetaccountbalance();
  const ::proto::CryptoGetAccountBalanceQuery& cryptogetaccountbalance() const;
  PROTOBUF_NODISCARD ::proto::CryptoGetAccountBalanceQuery* release_cryptogetaccountbalance();
  ::proto::CryptoGetAccountBalanceQuery* mutable_cryptogetaccountbalance();
  void set_allocated_cryptogetaccountbalance(::proto::CryptoGetAccountBalanceQuery* cryptogetaccountbalance);
  private:
  const ::proto::CryptoGetAccountBalanceQuery& _internal_cryptogetaccountbalance() const;
  ::proto::CryptoGetAccountBalanceQuery* _internal_mutable_cryptogetaccountbalance();
  public:
  void unsafe_arena_set_allocated_cryptogetaccountbalance(
      ::proto::CryptoGetAccountBalanceQuery* cryptogetaccountbalance);
  ::proto::CryptoGetAccountBalanceQuery* unsafe_arena_release_cryptogetaccountbalance();

  // .proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;
  bool has_cryptogetaccountrecords() const;
  private:
  bool _internal_has_cryptogetaccountrecords() const;
  public:
  void clear_cryptogetaccountrecords();
  const ::proto::CryptoGetAccountRecordsQuery& cryptogetaccountrecords() const;
  PROTOBUF_NODISCARD ::proto::CryptoGetAccountRecordsQuery* release_cryptogetaccountrecords();
  ::proto::CryptoGetAccountRecordsQuery* mutable_cryptogetaccountrecords();
  void set_allocated_cryptogetaccountrecords(::proto::CryptoGetAccountRecordsQuery* cryptogetaccountrecords);
  private:
  const ::proto::CryptoGetAccountRecordsQuery& _internal_cryptogetaccountrecords() const;
  ::proto::CryptoGetAccountRecordsQuery* _internal_mutable_cryptogetaccountrecords();
  public:
  void unsafe_arena_set_allocated_cryptogetaccountrecords(
      ::proto::CryptoGetAccountRecordsQuery* cryptogetaccountrecords);
  ::proto::CryptoGetAccountRecordsQuery* unsafe_arena_release_cryptogetaccountrecords();

  // .proto.CryptoGetInfoQuery cryptoGetInfo = 9;
  bool has_cryptogetinfo() const;
  private:
  bool _internal_has_cryptogetinfo() const;
  public:
  void clear_cryptogetinfo();
  const ::proto::CryptoGetInfoQuery& cryptogetinfo() const;
  PROTOBUF_NODISCARD ::proto::CryptoGetInfoQuery* release_cryptogetinfo();
  ::proto::CryptoGetInfoQuery* mutable_cryptogetinfo();
  void set_allocated_cryptogetinfo(::proto::CryptoGetInfoQuery* cryptogetinfo);
  private:
  const ::proto::CryptoGetInfoQuery& _internal_cryptogetinfo() const;
  ::proto::CryptoGetInfoQuery* _internal_mutable_cryptogetinfo();
  public:
  void unsafe_arena_set_allocated_cryptogetinfo(
      ::proto::CryptoGetInfoQuery* cryptogetinfo);
  ::proto::CryptoGetInfoQuery* unsafe_arena_release_cryptogetinfo();

  // .proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10;
  bool has_cryptogetlivehash() const;
  private:
  bool _internal_has_cryptogetlivehash() const;
  public:
  void clear_cryptogetlivehash();
  const ::proto::CryptoGetLiveHashQuery& cryptogetlivehash() const;
  PROTOBUF_NODISCARD ::proto::CryptoGetLiveHashQuery* release_cryptogetlivehash();
  ::proto::CryptoGetLiveHashQuery* mutable_cryptogetlivehash();
  void set_allocated_cryptogetlivehash(::proto::CryptoGetLiveHashQuery* cryptogetlivehash);
  private:
  const ::proto::CryptoGetLiveHashQuery& _internal_cryptogetlivehash() const;
  ::proto::CryptoGetLiveHashQuery* _internal_mutable_cryptogetlivehash();
  public:
  void unsafe_arena_set_allocated_cryptogetlivehash(
      ::proto::CryptoGetLiveHashQuery* cryptogetlivehash);
  ::proto::CryptoGetLiveHashQuery* unsafe_arena_release_cryptogetlivehash();

  // .proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11;
  bool has_cryptogetproxystakers() const;
  private:
  bool _internal_has_cryptogetproxystakers() const;
  public:
  void clear_cryptogetproxystakers();
  const ::proto::CryptoGetStakersQuery& cryptogetproxystakers() const;
  PROTOBUF_NODISCARD ::proto::CryptoGetStakersQuery* release_cryptogetproxystakers();
  ::proto::CryptoGetStakersQuery* mutable_cryptogetproxystakers();
  void set_allocated_cryptogetproxystakers(::proto::CryptoGetStakersQuery* cryptogetproxystakers);
  private:
  const ::proto::CryptoGetStakersQuery& _internal_cryptogetproxystakers() const;
  ::proto::CryptoGetStakersQuery* _internal_mutable_cryptogetproxystakers();
  public:
  void unsafe_arena_set_allocated_cryptogetproxystakers(
      ::proto::CryptoGetStakersQuery* cryptogetproxystakers);
  ::proto::CryptoGetStakersQuery* unsafe_arena_release_cryptogetproxystakers();

  // .proto.FileGetContentsQuery fileGetContents = 12;
  bool has_filegetcontents() const;
  private:
  bool _internal_has_filegetcontents() const;
  public:
  void clear_filegetcontents();
  const ::proto::FileGetContentsQuery& filegetcontents() const;
  PROTOBUF_NODISCARD ::proto::FileGetContentsQuery* release_filegetcontents();
  ::proto::FileGetContentsQuery* mutable_filegetcontents();
  void set_allocated_filegetcontents(::proto::FileGetContentsQuery* filegetcontents);
  private:
  const ::proto::FileGetContentsQuery& _internal_filegetcontents() const;
  ::proto::FileGetContentsQuery* _internal_mutable_filegetcontents();
  public:
  void unsafe_arena_set_allocated_filegetcontents(
      ::proto::FileGetContentsQuery* filegetcontents);
  ::proto::FileGetContentsQuery* unsafe_arena_release_filegetcontents();

  // .proto.FileGetInfoQuery fileGetInfo = 13;
  bool has_filegetinfo() const;
  private:
  bool _internal_has_filegetinfo() const;
  public:
  void clear_filegetinfo();
  const ::proto::FileGetInfoQuery& filegetinfo() const;
  PROTOBUF_NODISCARD ::proto::FileGetInfoQuery* release_filegetinfo();
  ::proto::FileGetInfoQuery* mutable_filegetinfo();
  void set_allocated_filegetinfo(::proto::FileGetInfoQuery* filegetinfo);
  private:
  const ::proto::FileGetInfoQuery& _internal_filegetinfo() const;
  ::proto::FileGetInfoQuery* _internal_mutable_filegetinfo();
  public:
  void unsafe_arena_set_allocated_filegetinfo(
      ::proto::FileGetInfoQuery* filegetinfo);
  ::proto::FileGetInfoQuery* unsafe_arena_release_filegetinfo();

  // .proto.TransactionGetReceiptQuery transactionGetReceipt = 14;
  bool has_transactiongetreceipt() const;
  private:
  bool _internal_has_transactiongetreceipt() const;
  public:
  void clear_transactiongetreceipt();
  const ::proto::TransactionGetReceiptQuery& transactiongetreceipt() const;
  PROTOBUF_NODISCARD ::proto::TransactionGetReceiptQuery* release_transactiongetreceipt();
  ::proto::TransactionGetReceiptQuery* mutable_transactiongetreceipt();
  void set_allocated_transactiongetreceipt(::proto::TransactionGetReceiptQuery* transactiongetreceipt);
  private:
  const ::proto::TransactionGetReceiptQuery& _internal_transactiongetreceipt() const;
  ::proto::TransactionGetReceiptQuery* _internal_mutable_transactiongetreceipt();
  public:
  void unsafe_arena_set_allocated_transactiongetreceipt(
      ::proto::TransactionGetReceiptQuery* transactiongetreceipt);
  ::proto::TransactionGetReceiptQuery* unsafe_arena_release_transactiongetreceipt();

  // .proto.TransactionGetRecordQuery transactionGetRecord = 15;
  bool has_transactiongetrecord() const;
  private:
  bool _internal_has_transactiongetrecord() const;
  public:
  void clear_transactiongetrecord();
  const ::proto::TransactionGetRecordQuery& transactiongetrecord() const;
  PROTOBUF_NODISCARD ::proto::TransactionGetRecordQuery* release_transactiongetrecord();
  ::proto::TransactionGetRecordQuery* mutable_transactiongetrecord();
  void set_allocated_transactiongetrecord(::proto::TransactionGetRecordQuery* transactiongetrecord);
  private:
  const ::proto::TransactionGetRecordQuery& _internal_transactiongetrecord() const;
  ::proto::TransactionGetRecordQuery* _internal_mutable_transactiongetrecord();
  public:
  void unsafe_arena_set_allocated_transactiongetrecord(
      ::proto::TransactionGetRecordQuery* transactiongetrecord);
  ::proto::TransactionGetRecordQuery* unsafe_arena_release_transactiongetrecord();

  // .proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;
  bool has_transactiongetfastrecord() const;
  private:
  bool _internal_has_transactiongetfastrecord() const;
  public:
  void clear_transactiongetfastrecord();
  const ::proto::TransactionGetFastRecordQuery& transactiongetfastrecord() const;
  PROTOBUF_NODISCARD ::proto::TransactionGetFastRecordQuery* release_transactiongetfastrecord();
  ::proto::TransactionGetFastRecordQuery* mutable_transactiongetfastrecord();
  void set_allocated_transactiongetfastrecord(::proto::TransactionGetFastRecordQuery* transactiongetfastrecord);
  private:
  const ::proto::TransactionGetFastRecordQuery& _internal_transactiongetfastrecord() const;
  ::proto::TransactionGetFastRecordQuery* _internal_mutable_transactiongetfastrecord();
  public:
  void unsafe_arena_set_allocated_transactiongetfastrecord(
      ::proto::TransactionGetFastRecordQuery* transactiongetfastrecord);
  ::proto::TransactionGetFastRecordQuery* unsafe_arena_release_transactiongetfastrecord();

  // .proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;
  bool has_consensusgettopicinfo() const;
  private:
  bool _internal_has_consensusgettopicinfo() const;
  public:
  void clear_consensusgettopicinfo();
  const ::proto::ConsensusGetTopicInfoQuery& consensusgettopicinfo() const;
  PROTOBUF_NODISCARD ::proto::ConsensusGetTopicInfoQuery* release_consensusgettopicinfo();
  ::proto::ConsensusGetTopicInfoQuery* mutable_consensusgettopicinfo();
  void set_allocated_consensusgettopicinfo(::proto::ConsensusGetTopicInfoQuery* consensusgettopicinfo);
  private:
  const ::proto::ConsensusGetTopicInfoQuery& _internal_consensusgettopicinfo() const;
  ::proto::ConsensusGetTopicInfoQuery* _internal_mutable_consensusgettopicinfo();
  public:
  void unsafe_arena_set_allocated_consensusgettopicinfo(
      ::proto::ConsensusGetTopicInfoQuery* consensusgettopicinfo);
  ::proto::ConsensusGetTopicInfoQuery* unsafe_arena_release_consensusgettopicinfo();

  // .proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;
  bool has_networkgetversioninfo() const;
  private:
  bool _internal_has_networkgetversioninfo() const;
  public:
  void clear_networkgetversioninfo();
  const ::proto::NetworkGetVersionInfoQuery& networkgetversioninfo() const;
  PROTOBUF_NODISCARD ::proto::NetworkGetVersionInfoQuery* release_networkgetversioninfo();
  ::proto::NetworkGetVersionInfoQuery* mutable_networkgetversioninfo();
  void set_allocated_networkgetversioninfo(::proto::NetworkGetVersionInfoQuery* networkgetversioninfo);
  private:
  const ::proto::NetworkGetVersionInfoQuery& _internal_networkgetversioninfo() const;
  ::proto::NetworkGetVersionInfoQuery* _internal_mutable_networkgetversioninfo();
  public:
  void unsafe_arena_set_allocated_networkgetversioninfo(
      ::proto::NetworkGetVersionInfoQuery* networkgetversioninfo);
  ::proto::NetworkGetVersionInfoQuery* unsafe_arena_release_networkgetversioninfo();

  // .proto.TokenGetInfoQuery tokenGetInfo = 52;
  bool has_tokengetinfo() const;
  private:
  bool _internal_has_tokengetinfo() const;
  public:
  void clear_tokengetinfo();
  const ::proto::TokenGetInfoQuery& tokengetinfo() const;
  PROTOBUF_NODISCARD ::proto::TokenGetInfoQuery* release_tokengetinfo();
  ::proto::TokenGetInfoQuery* mutable_tokengetinfo();
  void set_allocated_tokengetinfo(::proto::TokenGetInfoQuery* tokengetinfo);
  private:
  const ::proto::TokenGetInfoQuery& _internal_tokengetinfo() const;
  ::proto::TokenGetInfoQuery* _internal_mutable_tokengetinfo();
  public:
  void unsafe_arena_set_allocated_tokengetinfo(
      ::proto::TokenGetInfoQuery* tokengetinfo);
  ::proto::TokenGetInfoQuery* unsafe_arena_release_tokengetinfo();

  // .proto.ScheduleGetInfoQuery scheduleGetInfo = 53;
  bool has_schedulegetinfo() const;
  private:
  bool _internal_has_schedulegetinfo() const;
  public:
  void clear_schedulegetinfo();
  const ::proto::ScheduleGetInfoQuery& schedulegetinfo() const;
  PROTOBUF_NODISCARD ::proto::ScheduleGetInfoQuery* release_schedulegetinfo();
  ::proto::ScheduleGetInfoQuery* mutable_schedulegetinfo();
  void set_allocated_schedulegetinfo(::proto::ScheduleGetInfoQuery* schedulegetinfo);
  private:
  const ::proto::ScheduleGetInfoQuery& _internal_schedulegetinfo() const;
  ::proto::ScheduleGetInfoQuery* _internal_mutable_schedulegetinfo();
  public:
  void unsafe_arena_set_allocated_schedulegetinfo(
      ::proto::ScheduleGetInfoQuery* schedulegetinfo);
  ::proto::ScheduleGetInfoQuery* unsafe_arena_release_schedulegetinfo();

  // .proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54;
  bool has_tokengetaccountnftinfos() const;
  private:
  bool _internal_has_tokengetaccountnftinfos() const;
  public:
  void clear_tokengetaccountnftinfos();
  const ::proto::TokenGetAccountNftInfosQuery& tokengetaccountnftinfos() const;
  PROTOBUF_NODISCARD ::proto::TokenGetAccountNftInfosQuery* release_tokengetaccountnftinfos();
  ::proto::TokenGetAccountNftInfosQuery* mutable_tokengetaccountnftinfos();
  void set_allocated_tokengetaccountnftinfos(::proto::TokenGetAccountNftInfosQuery* tokengetaccountnftinfos);
  private:
  const ::proto::TokenGetAccountNftInfosQuery& _internal_tokengetaccountnftinfos() const;
  ::proto::TokenGetAccountNftInfosQuery* _internal_mutable_tokengetaccountnftinfos();
  public:
  void unsafe_arena_set_allocated_tokengetaccountnftinfos(
      ::proto::TokenGetAccountNftInfosQuery* tokengetaccountnftinfos);
  ::proto::TokenGetAccountNftInfosQuery* unsafe_arena_release_tokengetaccountnftinfos();

  // .proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;
  bool has_tokengetnftinfo() const;
  private:
  bool _internal_has_tokengetnftinfo() const;
  public:
  void clear_tokengetnftinfo();
  const ::proto::TokenGetNftInfoQuery& tokengetnftinfo() const;
  PROTOBUF_NODISCARD ::proto::TokenGetNftInfoQuery* release_tokengetnftinfo();
  ::proto::TokenGetNftInfoQuery* mutable_tokengetnftinfo();
  void set_allocated_tokengetnftinfo(::proto::TokenGetNftInfoQuery* tokengetnftinfo);
  private:
  const ::proto::TokenGetNftInfoQuery& _internal_tokengetnftinfo() const;
  ::proto::TokenGetNftInfoQuery* _internal_mutable_tokengetnftinfo();
  public:
  void unsafe_arena_set_allocated_tokengetnftinfo(
      ::proto::TokenGetNftInfoQuery* tokengetnftinfo);
  ::proto::TokenGetNftInfoQuery* unsafe_arena_release_tokengetnftinfo();

  // .proto.TokenGetNftInfosQuery tokenGetNftInfos = 56;
  bool has_tokengetnftinfos() const;
  private:
  bool _internal_has_tokengetnftinfos() const;
  public:
  void clear_tokengetnftinfos();
  const ::proto::TokenGetNftInfosQuery& tokengetnftinfos() const;
  PROTOBUF_NODISCARD ::proto::TokenGetNftInfosQuery* release_tokengetnftinfos();
  ::proto::TokenGetNftInfosQuery* mutable_tokengetnftinfos();
  void set_allocated_tokengetnftinfos(::proto::TokenGetNftInfosQuery* tokengetnftinfos);
  private:
  const ::proto::TokenGetNftInfosQuery& _internal_tokengetnftinfos() const;
  ::proto::TokenGetNftInfosQuery* _internal_mutable_tokengetnftinfos();
  public:
  void unsafe_arena_set_allocated_tokengetnftinfos(
      ::proto::TokenGetNftInfosQuery* tokengetnftinfos);
  ::proto::TokenGetNftInfosQuery* unsafe_arena_release_tokengetnftinfos();

  // .proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57;
  bool has_networkgetexecutiontime() const;
  private:
  bool _internal_has_networkgetexecutiontime() const;
  public:
  void clear_networkgetexecutiontime();
  const ::proto::NetworkGetExecutionTimeQuery& networkgetexecutiontime() const;
  PROTOBUF_NODISCARD ::proto::NetworkGetExecutionTimeQuery* release_networkgetexecutiontime();
  ::proto::NetworkGetExecutionTimeQuery* mutable_networkgetexecutiontime();
  void set_allocated_networkgetexecutiontime(::proto::NetworkGetExecutionTimeQuery* networkgetexecutiontime);
  private:
  const ::proto::NetworkGetExecutionTimeQuery& _internal_networkgetexecutiontime() const;
  ::proto::NetworkGetExecutionTimeQuery* _internal_mutable_networkgetexecutiontime();
  public:
  void unsafe_arena_set_allocated_networkgetexecutiontime(
      ::proto::NetworkGetExecutionTimeQuery* networkgetexecutiontime);
  ::proto::NetworkGetExecutionTimeQuery* unsafe_arena_release_networkgetexecutiontime();

  // .proto.GetAccountDetailsQuery accountDetails = 58;
  bool has_accountdetails() const;
  private:
  bool _internal_has_accountdetails() const;
  public:
  void clear_accountdetails();
  const ::proto::GetAccountDetailsQuery& accountdetails() const;
  PROTOBUF_NODISCARD ::proto::GetAccountDetailsQuery* release_accountdetails();
  ::proto::GetAccountDetailsQuery* mutable_accountdetails();
  void set_allocated_accountdetails(::proto::GetAccountDetailsQuery* accountdetails);
  private:
  const ::proto::GetAccountDetailsQuery& _internal_accountdetails() const;
  ::proto::GetAccountDetailsQuery* _internal_mutable_accountdetails();
  public:
  void unsafe_arena_set_allocated_accountdetails(
      ::proto::GetAccountDetailsQuery* accountdetails);
  ::proto::GetAccountDetailsQuery* unsafe_arena_release_accountdetails();

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:proto.Query)
 private:
  class _Internal;
  void set_has_getbykey();
  void set_has_getbysolidityid();
  void set_has_contractcalllocal();
  void set_has_contractgetinfo();
  void set_has_contractgetbytecode();
  void set_has_contractgetrecords();
  void set_has_cryptogetaccountbalance();
  void set_has_cryptogetaccountrecords();
  void set_has_cryptogetinfo();
  void set_has_cryptogetlivehash();
  void set_has_cryptogetproxystakers();
  void set_has_filegetcontents();
  void set_has_filegetinfo();
  void set_has_transactiongetreceipt();
  void set_has_transactiongetrecord();
  void set_has_transactiongetfastrecord();
  void set_has_consensusgettopicinfo();
  void set_has_networkgetversioninfo();
  void set_has_tokengetinfo();
  void set_has_schedulegetinfo();
  void set_has_tokengetaccountnftinfos();
  void set_has_tokengetnftinfo();
  void set_has_tokengetnftinfos();
  void set_has_networkgetexecutiontime();
  void set_has_accountdetails();

  inline bool has_query() const;
  inline void clear_has_query();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union QueryUnion {
      constexpr QueryUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::GetByKeyQuery* getbykey_;
      ::proto::GetBySolidityIDQuery* getbysolidityid_;
      ::proto::ContractCallLocalQuery* contractcalllocal_;
      ::proto::ContractGetInfoQuery* contractgetinfo_;
      ::proto::ContractGetBytecodeQuery* contractgetbytecode_;
      ::proto::ContractGetRecordsQuery* contractgetrecords_;
      ::proto::CryptoGetAccountBalanceQuery* cryptogetaccountbalance_;
      ::proto::CryptoGetAccountRecordsQuery* cryptogetaccountrecords_;
      ::proto::CryptoGetInfoQuery* cryptogetinfo_;
      ::proto::CryptoGetLiveHashQuery* cryptogetlivehash_;
      ::proto::CryptoGetStakersQuery* cryptogetproxystakers_;
      ::proto::FileGetContentsQuery* filegetcontents_;
      ::proto::FileGetInfoQuery* filegetinfo_;
      ::proto::TransactionGetReceiptQuery* transactiongetreceipt_;
      ::proto::TransactionGetRecordQuery* transactiongetrecord_;
      ::proto::TransactionGetFastRecordQuery* transactiongetfastrecord_;
      ::proto::ConsensusGetTopicInfoQuery* consensusgettopicinfo_;
      ::proto::NetworkGetVersionInfoQuery* networkgetversioninfo_;
      ::proto::TokenGetInfoQuery* tokengetinfo_;
      ::proto::ScheduleGetInfoQuery* schedulegetinfo_;
      ::proto::TokenGetAccountNftInfosQuery* tokengetaccountnftinfos_;
      ::proto::TokenGetNftInfoQuery* tokengetnftinfo_;
      ::proto::TokenGetNftInfosQuery* tokengetnftinfos_;
      ::proto::NetworkGetExecutionTimeQuery* networkgetexecutiontime_;
      ::proto::GetAccountDetailsQuery* accountdetails_;
    } query_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_query_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Query

// .proto.GetByKeyQuery getByKey = 1;
inline bool Query::_internal_has_getbykey() const {
  return query_case() == kGetByKey;
}
inline bool Query::has_getbykey() const {
  return _internal_has_getbykey();
}
inline void Query::set_has_getbykey() {
  _impl_._oneof_case_[0] = kGetByKey;
}
inline ::proto::GetByKeyQuery* Query::release_getbykey() {
  // @@protoc_insertion_point(field_release:proto.Query.getByKey)
  if (_internal_has_getbykey()) {
    clear_has_query();
    ::proto::GetByKeyQuery* temp = _impl_.query_.getbykey_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.getbykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::GetByKeyQuery& Query::_internal_getbykey() const {
  return _internal_has_getbykey()
      ? *_impl_.query_.getbykey_
      : reinterpret_cast< ::proto::GetByKeyQuery&>(::proto::_GetByKeyQuery_default_instance_);
}
inline const ::proto::GetByKeyQuery& Query::getbykey() const {
  // @@protoc_insertion_point(field_get:proto.Query.getByKey)
  return _internal_getbykey();
}
inline ::proto::GetByKeyQuery* Query::unsafe_arena_release_getbykey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.getByKey)
  if (_internal_has_getbykey()) {
    clear_has_query();
    ::proto::GetByKeyQuery* temp = _impl_.query_.getbykey_;
    _impl_.query_.getbykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_getbykey(::proto::GetByKeyQuery* getbykey) {
  clear_query();
  if (getbykey) {
    set_has_getbykey();
    _impl_.query_.getbykey_ = getbykey;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.getByKey)
}
inline ::proto::GetByKeyQuery* Query::_internal_mutable_getbykey() {
  if (!_internal_has_getbykey()) {
    clear_query();
    set_has_getbykey();
    _impl_.query_.getbykey_ = CreateMaybeMessage< ::proto::GetByKeyQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.getbykey_;
}
inline ::proto::GetByKeyQuery* Query::mutable_getbykey() {
  ::proto::GetByKeyQuery* _msg = _internal_mutable_getbykey();
  // @@protoc_insertion_point(field_mutable:proto.Query.getByKey)
  return _msg;
}

// .proto.GetBySolidityIDQuery getBySolidityID = 2;
inline bool Query::_internal_has_getbysolidityid() const {
  return query_case() == kGetBySolidityID;
}
inline bool Query::has_getbysolidityid() const {
  return _internal_has_getbysolidityid();
}
inline void Query::set_has_getbysolidityid() {
  _impl_._oneof_case_[0] = kGetBySolidityID;
}
inline ::proto::GetBySolidityIDQuery* Query::release_getbysolidityid() {
  // @@protoc_insertion_point(field_release:proto.Query.getBySolidityID)
  if (_internal_has_getbysolidityid()) {
    clear_has_query();
    ::proto::GetBySolidityIDQuery* temp = _impl_.query_.getbysolidityid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.getbysolidityid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::GetBySolidityIDQuery& Query::_internal_getbysolidityid() const {
  return _internal_has_getbysolidityid()
      ? *_impl_.query_.getbysolidityid_
      : reinterpret_cast< ::proto::GetBySolidityIDQuery&>(::proto::_GetBySolidityIDQuery_default_instance_);
}
inline const ::proto::GetBySolidityIDQuery& Query::getbysolidityid() const {
  // @@protoc_insertion_point(field_get:proto.Query.getBySolidityID)
  return _internal_getbysolidityid();
}
inline ::proto::GetBySolidityIDQuery* Query::unsafe_arena_release_getbysolidityid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.getBySolidityID)
  if (_internal_has_getbysolidityid()) {
    clear_has_query();
    ::proto::GetBySolidityIDQuery* temp = _impl_.query_.getbysolidityid_;
    _impl_.query_.getbysolidityid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_getbysolidityid(::proto::GetBySolidityIDQuery* getbysolidityid) {
  clear_query();
  if (getbysolidityid) {
    set_has_getbysolidityid();
    _impl_.query_.getbysolidityid_ = getbysolidityid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.getBySolidityID)
}
inline ::proto::GetBySolidityIDQuery* Query::_internal_mutable_getbysolidityid() {
  if (!_internal_has_getbysolidityid()) {
    clear_query();
    set_has_getbysolidityid();
    _impl_.query_.getbysolidityid_ = CreateMaybeMessage< ::proto::GetBySolidityIDQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.getbysolidityid_;
}
inline ::proto::GetBySolidityIDQuery* Query::mutable_getbysolidityid() {
  ::proto::GetBySolidityIDQuery* _msg = _internal_mutable_getbysolidityid();
  // @@protoc_insertion_point(field_mutable:proto.Query.getBySolidityID)
  return _msg;
}

// .proto.ContractCallLocalQuery contractCallLocal = 3;
inline bool Query::_internal_has_contractcalllocal() const {
  return query_case() == kContractCallLocal;
}
inline bool Query::has_contractcalllocal() const {
  return _internal_has_contractcalllocal();
}
inline void Query::set_has_contractcalllocal() {
  _impl_._oneof_case_[0] = kContractCallLocal;
}
inline ::proto::ContractCallLocalQuery* Query::release_contractcalllocal() {
  // @@protoc_insertion_point(field_release:proto.Query.contractCallLocal)
  if (_internal_has_contractcalllocal()) {
    clear_has_query();
    ::proto::ContractCallLocalQuery* temp = _impl_.query_.contractcalllocal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.contractcalllocal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractCallLocalQuery& Query::_internal_contractcalllocal() const {
  return _internal_has_contractcalllocal()
      ? *_impl_.query_.contractcalllocal_
      : reinterpret_cast< ::proto::ContractCallLocalQuery&>(::proto::_ContractCallLocalQuery_default_instance_);
}
inline const ::proto::ContractCallLocalQuery& Query::contractcalllocal() const {
  // @@protoc_insertion_point(field_get:proto.Query.contractCallLocal)
  return _internal_contractcalllocal();
}
inline ::proto::ContractCallLocalQuery* Query::unsafe_arena_release_contractcalllocal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.contractCallLocal)
  if (_internal_has_contractcalllocal()) {
    clear_has_query();
    ::proto::ContractCallLocalQuery* temp = _impl_.query_.contractcalllocal_;
    _impl_.query_.contractcalllocal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_contractcalllocal(::proto::ContractCallLocalQuery* contractcalllocal) {
  clear_query();
  if (contractcalllocal) {
    set_has_contractcalllocal();
    _impl_.query_.contractcalllocal_ = contractcalllocal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.contractCallLocal)
}
inline ::proto::ContractCallLocalQuery* Query::_internal_mutable_contractcalllocal() {
  if (!_internal_has_contractcalllocal()) {
    clear_query();
    set_has_contractcalllocal();
    _impl_.query_.contractcalllocal_ = CreateMaybeMessage< ::proto::ContractCallLocalQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.contractcalllocal_;
}
inline ::proto::ContractCallLocalQuery* Query::mutable_contractcalllocal() {
  ::proto::ContractCallLocalQuery* _msg = _internal_mutable_contractcalllocal();
  // @@protoc_insertion_point(field_mutable:proto.Query.contractCallLocal)
  return _msg;
}

// .proto.ContractGetInfoQuery contractGetInfo = 4;
inline bool Query::_internal_has_contractgetinfo() const {
  return query_case() == kContractGetInfo;
}
inline bool Query::has_contractgetinfo() const {
  return _internal_has_contractgetinfo();
}
inline void Query::set_has_contractgetinfo() {
  _impl_._oneof_case_[0] = kContractGetInfo;
}
inline ::proto::ContractGetInfoQuery* Query::release_contractgetinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.contractGetInfo)
  if (_internal_has_contractgetinfo()) {
    clear_has_query();
    ::proto::ContractGetInfoQuery* temp = _impl_.query_.contractgetinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.contractgetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractGetInfoQuery& Query::_internal_contractgetinfo() const {
  return _internal_has_contractgetinfo()
      ? *_impl_.query_.contractgetinfo_
      : reinterpret_cast< ::proto::ContractGetInfoQuery&>(::proto::_ContractGetInfoQuery_default_instance_);
}
inline const ::proto::ContractGetInfoQuery& Query::contractgetinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.contractGetInfo)
  return _internal_contractgetinfo();
}
inline ::proto::ContractGetInfoQuery* Query::unsafe_arena_release_contractgetinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.contractGetInfo)
  if (_internal_has_contractgetinfo()) {
    clear_has_query();
    ::proto::ContractGetInfoQuery* temp = _impl_.query_.contractgetinfo_;
    _impl_.query_.contractgetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_contractgetinfo(::proto::ContractGetInfoQuery* contractgetinfo) {
  clear_query();
  if (contractgetinfo) {
    set_has_contractgetinfo();
    _impl_.query_.contractgetinfo_ = contractgetinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.contractGetInfo)
}
inline ::proto::ContractGetInfoQuery* Query::_internal_mutable_contractgetinfo() {
  if (!_internal_has_contractgetinfo()) {
    clear_query();
    set_has_contractgetinfo();
    _impl_.query_.contractgetinfo_ = CreateMaybeMessage< ::proto::ContractGetInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.contractgetinfo_;
}
inline ::proto::ContractGetInfoQuery* Query::mutable_contractgetinfo() {
  ::proto::ContractGetInfoQuery* _msg = _internal_mutable_contractgetinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.contractGetInfo)
  return _msg;
}

// .proto.ContractGetBytecodeQuery contractGetBytecode = 5;
inline bool Query::_internal_has_contractgetbytecode() const {
  return query_case() == kContractGetBytecode;
}
inline bool Query::has_contractgetbytecode() const {
  return _internal_has_contractgetbytecode();
}
inline void Query::set_has_contractgetbytecode() {
  _impl_._oneof_case_[0] = kContractGetBytecode;
}
inline ::proto::ContractGetBytecodeQuery* Query::release_contractgetbytecode() {
  // @@protoc_insertion_point(field_release:proto.Query.contractGetBytecode)
  if (_internal_has_contractgetbytecode()) {
    clear_has_query();
    ::proto::ContractGetBytecodeQuery* temp = _impl_.query_.contractgetbytecode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.contractgetbytecode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractGetBytecodeQuery& Query::_internal_contractgetbytecode() const {
  return _internal_has_contractgetbytecode()
      ? *_impl_.query_.contractgetbytecode_
      : reinterpret_cast< ::proto::ContractGetBytecodeQuery&>(::proto::_ContractGetBytecodeQuery_default_instance_);
}
inline const ::proto::ContractGetBytecodeQuery& Query::contractgetbytecode() const {
  // @@protoc_insertion_point(field_get:proto.Query.contractGetBytecode)
  return _internal_contractgetbytecode();
}
inline ::proto::ContractGetBytecodeQuery* Query::unsafe_arena_release_contractgetbytecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.contractGetBytecode)
  if (_internal_has_contractgetbytecode()) {
    clear_has_query();
    ::proto::ContractGetBytecodeQuery* temp = _impl_.query_.contractgetbytecode_;
    _impl_.query_.contractgetbytecode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_contractgetbytecode(::proto::ContractGetBytecodeQuery* contractgetbytecode) {
  clear_query();
  if (contractgetbytecode) {
    set_has_contractgetbytecode();
    _impl_.query_.contractgetbytecode_ = contractgetbytecode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.contractGetBytecode)
}
inline ::proto::ContractGetBytecodeQuery* Query::_internal_mutable_contractgetbytecode() {
  if (!_internal_has_contractgetbytecode()) {
    clear_query();
    set_has_contractgetbytecode();
    _impl_.query_.contractgetbytecode_ = CreateMaybeMessage< ::proto::ContractGetBytecodeQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.contractgetbytecode_;
}
inline ::proto::ContractGetBytecodeQuery* Query::mutable_contractgetbytecode() {
  ::proto::ContractGetBytecodeQuery* _msg = _internal_mutable_contractgetbytecode();
  // @@protoc_insertion_point(field_mutable:proto.Query.contractGetBytecode)
  return _msg;
}

// .proto.ContractGetRecordsQuery ContractGetRecords = 6;
inline bool Query::_internal_has_contractgetrecords() const {
  return query_case() == kContractGetRecords;
}
inline bool Query::has_contractgetrecords() const {
  return _internal_has_contractgetrecords();
}
inline void Query::set_has_contractgetrecords() {
  _impl_._oneof_case_[0] = kContractGetRecords;
}
inline ::proto::ContractGetRecordsQuery* Query::release_contractgetrecords() {
  // @@protoc_insertion_point(field_release:proto.Query.ContractGetRecords)
  if (_internal_has_contractgetrecords()) {
    clear_has_query();
    ::proto::ContractGetRecordsQuery* temp = _impl_.query_.contractgetrecords_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.contractgetrecords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractGetRecordsQuery& Query::_internal_contractgetrecords() const {
  return _internal_has_contractgetrecords()
      ? *_impl_.query_.contractgetrecords_
      : reinterpret_cast< ::proto::ContractGetRecordsQuery&>(::proto::_ContractGetRecordsQuery_default_instance_);
}
inline const ::proto::ContractGetRecordsQuery& Query::contractgetrecords() const {
  // @@protoc_insertion_point(field_get:proto.Query.ContractGetRecords)
  return _internal_contractgetrecords();
}
inline ::proto::ContractGetRecordsQuery* Query::unsafe_arena_release_contractgetrecords() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.ContractGetRecords)
  if (_internal_has_contractgetrecords()) {
    clear_has_query();
    ::proto::ContractGetRecordsQuery* temp = _impl_.query_.contractgetrecords_;
    _impl_.query_.contractgetrecords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_contractgetrecords(::proto::ContractGetRecordsQuery* contractgetrecords) {
  clear_query();
  if (contractgetrecords) {
    set_has_contractgetrecords();
    _impl_.query_.contractgetrecords_ = contractgetrecords;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.ContractGetRecords)
}
inline ::proto::ContractGetRecordsQuery* Query::_internal_mutable_contractgetrecords() {
  if (!_internal_has_contractgetrecords()) {
    clear_query();
    set_has_contractgetrecords();
    _impl_.query_.contractgetrecords_ = CreateMaybeMessage< ::proto::ContractGetRecordsQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.contractgetrecords_;
}
inline ::proto::ContractGetRecordsQuery* Query::mutable_contractgetrecords() {
  ::proto::ContractGetRecordsQuery* _msg = _internal_mutable_contractgetrecords();
  // @@protoc_insertion_point(field_mutable:proto.Query.ContractGetRecords)
  return _msg;
}

// .proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;
inline bool Query::_internal_has_cryptogetaccountbalance() const {
  return query_case() == kCryptogetAccountBalance;
}
inline bool Query::has_cryptogetaccountbalance() const {
  return _internal_has_cryptogetaccountbalance();
}
inline void Query::set_has_cryptogetaccountbalance() {
  _impl_._oneof_case_[0] = kCryptogetAccountBalance;
}
inline ::proto::CryptoGetAccountBalanceQuery* Query::release_cryptogetaccountbalance() {
  // @@protoc_insertion_point(field_release:proto.Query.cryptogetAccountBalance)
  if (_internal_has_cryptogetaccountbalance()) {
    clear_has_query();
    ::proto::CryptoGetAccountBalanceQuery* temp = _impl_.query_.cryptogetaccountbalance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.cryptogetaccountbalance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::CryptoGetAccountBalanceQuery& Query::_internal_cryptogetaccountbalance() const {
  return _internal_has_cryptogetaccountbalance()
      ? *_impl_.query_.cryptogetaccountbalance_
      : reinterpret_cast< ::proto::CryptoGetAccountBalanceQuery&>(::proto::_CryptoGetAccountBalanceQuery_default_instance_);
}
inline const ::proto::CryptoGetAccountBalanceQuery& Query::cryptogetaccountbalance() const {
  // @@protoc_insertion_point(field_get:proto.Query.cryptogetAccountBalance)
  return _internal_cryptogetaccountbalance();
}
inline ::proto::CryptoGetAccountBalanceQuery* Query::unsafe_arena_release_cryptogetaccountbalance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.cryptogetAccountBalance)
  if (_internal_has_cryptogetaccountbalance()) {
    clear_has_query();
    ::proto::CryptoGetAccountBalanceQuery* temp = _impl_.query_.cryptogetaccountbalance_;
    _impl_.query_.cryptogetaccountbalance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_cryptogetaccountbalance(::proto::CryptoGetAccountBalanceQuery* cryptogetaccountbalance) {
  clear_query();
  if (cryptogetaccountbalance) {
    set_has_cryptogetaccountbalance();
    _impl_.query_.cryptogetaccountbalance_ = cryptogetaccountbalance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.cryptogetAccountBalance)
}
inline ::proto::CryptoGetAccountBalanceQuery* Query::_internal_mutable_cryptogetaccountbalance() {
  if (!_internal_has_cryptogetaccountbalance()) {
    clear_query();
    set_has_cryptogetaccountbalance();
    _impl_.query_.cryptogetaccountbalance_ = CreateMaybeMessage< ::proto::CryptoGetAccountBalanceQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.cryptogetaccountbalance_;
}
inline ::proto::CryptoGetAccountBalanceQuery* Query::mutable_cryptogetaccountbalance() {
  ::proto::CryptoGetAccountBalanceQuery* _msg = _internal_mutable_cryptogetaccountbalance();
  // @@protoc_insertion_point(field_mutable:proto.Query.cryptogetAccountBalance)
  return _msg;
}

// .proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;
inline bool Query::_internal_has_cryptogetaccountrecords() const {
  return query_case() == kCryptoGetAccountRecords;
}
inline bool Query::has_cryptogetaccountrecords() const {
  return _internal_has_cryptogetaccountrecords();
}
inline void Query::set_has_cryptogetaccountrecords() {
  _impl_._oneof_case_[0] = kCryptoGetAccountRecords;
}
inline ::proto::CryptoGetAccountRecordsQuery* Query::release_cryptogetaccountrecords() {
  // @@protoc_insertion_point(field_release:proto.Query.cryptoGetAccountRecords)
  if (_internal_has_cryptogetaccountrecords()) {
    clear_has_query();
    ::proto::CryptoGetAccountRecordsQuery* temp = _impl_.query_.cryptogetaccountrecords_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.cryptogetaccountrecords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::CryptoGetAccountRecordsQuery& Query::_internal_cryptogetaccountrecords() const {
  return _internal_has_cryptogetaccountrecords()
      ? *_impl_.query_.cryptogetaccountrecords_
      : reinterpret_cast< ::proto::CryptoGetAccountRecordsQuery&>(::proto::_CryptoGetAccountRecordsQuery_default_instance_);
}
inline const ::proto::CryptoGetAccountRecordsQuery& Query::cryptogetaccountrecords() const {
  // @@protoc_insertion_point(field_get:proto.Query.cryptoGetAccountRecords)
  return _internal_cryptogetaccountrecords();
}
inline ::proto::CryptoGetAccountRecordsQuery* Query::unsafe_arena_release_cryptogetaccountrecords() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.cryptoGetAccountRecords)
  if (_internal_has_cryptogetaccountrecords()) {
    clear_has_query();
    ::proto::CryptoGetAccountRecordsQuery* temp = _impl_.query_.cryptogetaccountrecords_;
    _impl_.query_.cryptogetaccountrecords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_cryptogetaccountrecords(::proto::CryptoGetAccountRecordsQuery* cryptogetaccountrecords) {
  clear_query();
  if (cryptogetaccountrecords) {
    set_has_cryptogetaccountrecords();
    _impl_.query_.cryptogetaccountrecords_ = cryptogetaccountrecords;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.cryptoGetAccountRecords)
}
inline ::proto::CryptoGetAccountRecordsQuery* Query::_internal_mutable_cryptogetaccountrecords() {
  if (!_internal_has_cryptogetaccountrecords()) {
    clear_query();
    set_has_cryptogetaccountrecords();
    _impl_.query_.cryptogetaccountrecords_ = CreateMaybeMessage< ::proto::CryptoGetAccountRecordsQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.cryptogetaccountrecords_;
}
inline ::proto::CryptoGetAccountRecordsQuery* Query::mutable_cryptogetaccountrecords() {
  ::proto::CryptoGetAccountRecordsQuery* _msg = _internal_mutable_cryptogetaccountrecords();
  // @@protoc_insertion_point(field_mutable:proto.Query.cryptoGetAccountRecords)
  return _msg;
}

// .proto.CryptoGetInfoQuery cryptoGetInfo = 9;
inline bool Query::_internal_has_cryptogetinfo() const {
  return query_case() == kCryptoGetInfo;
}
inline bool Query::has_cryptogetinfo() const {
  return _internal_has_cryptogetinfo();
}
inline void Query::set_has_cryptogetinfo() {
  _impl_._oneof_case_[0] = kCryptoGetInfo;
}
inline ::proto::CryptoGetInfoQuery* Query::release_cryptogetinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.cryptoGetInfo)
  if (_internal_has_cryptogetinfo()) {
    clear_has_query();
    ::proto::CryptoGetInfoQuery* temp = _impl_.query_.cryptogetinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.cryptogetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::CryptoGetInfoQuery& Query::_internal_cryptogetinfo() const {
  return _internal_has_cryptogetinfo()
      ? *_impl_.query_.cryptogetinfo_
      : reinterpret_cast< ::proto::CryptoGetInfoQuery&>(::proto::_CryptoGetInfoQuery_default_instance_);
}
inline const ::proto::CryptoGetInfoQuery& Query::cryptogetinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.cryptoGetInfo)
  return _internal_cryptogetinfo();
}
inline ::proto::CryptoGetInfoQuery* Query::unsafe_arena_release_cryptogetinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.cryptoGetInfo)
  if (_internal_has_cryptogetinfo()) {
    clear_has_query();
    ::proto::CryptoGetInfoQuery* temp = _impl_.query_.cryptogetinfo_;
    _impl_.query_.cryptogetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_cryptogetinfo(::proto::CryptoGetInfoQuery* cryptogetinfo) {
  clear_query();
  if (cryptogetinfo) {
    set_has_cryptogetinfo();
    _impl_.query_.cryptogetinfo_ = cryptogetinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.cryptoGetInfo)
}
inline ::proto::CryptoGetInfoQuery* Query::_internal_mutable_cryptogetinfo() {
  if (!_internal_has_cryptogetinfo()) {
    clear_query();
    set_has_cryptogetinfo();
    _impl_.query_.cryptogetinfo_ = CreateMaybeMessage< ::proto::CryptoGetInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.cryptogetinfo_;
}
inline ::proto::CryptoGetInfoQuery* Query::mutable_cryptogetinfo() {
  ::proto::CryptoGetInfoQuery* _msg = _internal_mutable_cryptogetinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.cryptoGetInfo)
  return _msg;
}

// .proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10;
inline bool Query::_internal_has_cryptogetlivehash() const {
  return query_case() == kCryptoGetLiveHash;
}
inline bool Query::has_cryptogetlivehash() const {
  return _internal_has_cryptogetlivehash();
}
inline void Query::set_has_cryptogetlivehash() {
  _impl_._oneof_case_[0] = kCryptoGetLiveHash;
}
inline ::proto::CryptoGetLiveHashQuery* Query::release_cryptogetlivehash() {
  // @@protoc_insertion_point(field_release:proto.Query.cryptoGetLiveHash)
  if (_internal_has_cryptogetlivehash()) {
    clear_has_query();
    ::proto::CryptoGetLiveHashQuery* temp = _impl_.query_.cryptogetlivehash_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.cryptogetlivehash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::CryptoGetLiveHashQuery& Query::_internal_cryptogetlivehash() const {
  return _internal_has_cryptogetlivehash()
      ? *_impl_.query_.cryptogetlivehash_
      : reinterpret_cast< ::proto::CryptoGetLiveHashQuery&>(::proto::_CryptoGetLiveHashQuery_default_instance_);
}
inline const ::proto::CryptoGetLiveHashQuery& Query::cryptogetlivehash() const {
  // @@protoc_insertion_point(field_get:proto.Query.cryptoGetLiveHash)
  return _internal_cryptogetlivehash();
}
inline ::proto::CryptoGetLiveHashQuery* Query::unsafe_arena_release_cryptogetlivehash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.cryptoGetLiveHash)
  if (_internal_has_cryptogetlivehash()) {
    clear_has_query();
    ::proto::CryptoGetLiveHashQuery* temp = _impl_.query_.cryptogetlivehash_;
    _impl_.query_.cryptogetlivehash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_cryptogetlivehash(::proto::CryptoGetLiveHashQuery* cryptogetlivehash) {
  clear_query();
  if (cryptogetlivehash) {
    set_has_cryptogetlivehash();
    _impl_.query_.cryptogetlivehash_ = cryptogetlivehash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.cryptoGetLiveHash)
}
inline ::proto::CryptoGetLiveHashQuery* Query::_internal_mutable_cryptogetlivehash() {
  if (!_internal_has_cryptogetlivehash()) {
    clear_query();
    set_has_cryptogetlivehash();
    _impl_.query_.cryptogetlivehash_ = CreateMaybeMessage< ::proto::CryptoGetLiveHashQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.cryptogetlivehash_;
}
inline ::proto::CryptoGetLiveHashQuery* Query::mutable_cryptogetlivehash() {
  ::proto::CryptoGetLiveHashQuery* _msg = _internal_mutable_cryptogetlivehash();
  // @@protoc_insertion_point(field_mutable:proto.Query.cryptoGetLiveHash)
  return _msg;
}

// .proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11;
inline bool Query::_internal_has_cryptogetproxystakers() const {
  return query_case() == kCryptoGetProxyStakers;
}
inline bool Query::has_cryptogetproxystakers() const {
  return _internal_has_cryptogetproxystakers();
}
inline void Query::set_has_cryptogetproxystakers() {
  _impl_._oneof_case_[0] = kCryptoGetProxyStakers;
}
inline ::proto::CryptoGetStakersQuery* Query::release_cryptogetproxystakers() {
  // @@protoc_insertion_point(field_release:proto.Query.cryptoGetProxyStakers)
  if (_internal_has_cryptogetproxystakers()) {
    clear_has_query();
    ::proto::CryptoGetStakersQuery* temp = _impl_.query_.cryptogetproxystakers_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.cryptogetproxystakers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::CryptoGetStakersQuery& Query::_internal_cryptogetproxystakers() const {
  return _internal_has_cryptogetproxystakers()
      ? *_impl_.query_.cryptogetproxystakers_
      : reinterpret_cast< ::proto::CryptoGetStakersQuery&>(::proto::_CryptoGetStakersQuery_default_instance_);
}
inline const ::proto::CryptoGetStakersQuery& Query::cryptogetproxystakers() const {
  // @@protoc_insertion_point(field_get:proto.Query.cryptoGetProxyStakers)
  return _internal_cryptogetproxystakers();
}
inline ::proto::CryptoGetStakersQuery* Query::unsafe_arena_release_cryptogetproxystakers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.cryptoGetProxyStakers)
  if (_internal_has_cryptogetproxystakers()) {
    clear_has_query();
    ::proto::CryptoGetStakersQuery* temp = _impl_.query_.cryptogetproxystakers_;
    _impl_.query_.cryptogetproxystakers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_cryptogetproxystakers(::proto::CryptoGetStakersQuery* cryptogetproxystakers) {
  clear_query();
  if (cryptogetproxystakers) {
    set_has_cryptogetproxystakers();
    _impl_.query_.cryptogetproxystakers_ = cryptogetproxystakers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.cryptoGetProxyStakers)
}
inline ::proto::CryptoGetStakersQuery* Query::_internal_mutable_cryptogetproxystakers() {
  if (!_internal_has_cryptogetproxystakers()) {
    clear_query();
    set_has_cryptogetproxystakers();
    _impl_.query_.cryptogetproxystakers_ = CreateMaybeMessage< ::proto::CryptoGetStakersQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.cryptogetproxystakers_;
}
inline ::proto::CryptoGetStakersQuery* Query::mutable_cryptogetproxystakers() {
  ::proto::CryptoGetStakersQuery* _msg = _internal_mutable_cryptogetproxystakers();
  // @@protoc_insertion_point(field_mutable:proto.Query.cryptoGetProxyStakers)
  return _msg;
}

// .proto.FileGetContentsQuery fileGetContents = 12;
inline bool Query::_internal_has_filegetcontents() const {
  return query_case() == kFileGetContents;
}
inline bool Query::has_filegetcontents() const {
  return _internal_has_filegetcontents();
}
inline void Query::set_has_filegetcontents() {
  _impl_._oneof_case_[0] = kFileGetContents;
}
inline ::proto::FileGetContentsQuery* Query::release_filegetcontents() {
  // @@protoc_insertion_point(field_release:proto.Query.fileGetContents)
  if (_internal_has_filegetcontents()) {
    clear_has_query();
    ::proto::FileGetContentsQuery* temp = _impl_.query_.filegetcontents_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.filegetcontents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FileGetContentsQuery& Query::_internal_filegetcontents() const {
  return _internal_has_filegetcontents()
      ? *_impl_.query_.filegetcontents_
      : reinterpret_cast< ::proto::FileGetContentsQuery&>(::proto::_FileGetContentsQuery_default_instance_);
}
inline const ::proto::FileGetContentsQuery& Query::filegetcontents() const {
  // @@protoc_insertion_point(field_get:proto.Query.fileGetContents)
  return _internal_filegetcontents();
}
inline ::proto::FileGetContentsQuery* Query::unsafe_arena_release_filegetcontents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.fileGetContents)
  if (_internal_has_filegetcontents()) {
    clear_has_query();
    ::proto::FileGetContentsQuery* temp = _impl_.query_.filegetcontents_;
    _impl_.query_.filegetcontents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_filegetcontents(::proto::FileGetContentsQuery* filegetcontents) {
  clear_query();
  if (filegetcontents) {
    set_has_filegetcontents();
    _impl_.query_.filegetcontents_ = filegetcontents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.fileGetContents)
}
inline ::proto::FileGetContentsQuery* Query::_internal_mutable_filegetcontents() {
  if (!_internal_has_filegetcontents()) {
    clear_query();
    set_has_filegetcontents();
    _impl_.query_.filegetcontents_ = CreateMaybeMessage< ::proto::FileGetContentsQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.filegetcontents_;
}
inline ::proto::FileGetContentsQuery* Query::mutable_filegetcontents() {
  ::proto::FileGetContentsQuery* _msg = _internal_mutable_filegetcontents();
  // @@protoc_insertion_point(field_mutable:proto.Query.fileGetContents)
  return _msg;
}

// .proto.FileGetInfoQuery fileGetInfo = 13;
inline bool Query::_internal_has_filegetinfo() const {
  return query_case() == kFileGetInfo;
}
inline bool Query::has_filegetinfo() const {
  return _internal_has_filegetinfo();
}
inline void Query::set_has_filegetinfo() {
  _impl_._oneof_case_[0] = kFileGetInfo;
}
inline ::proto::FileGetInfoQuery* Query::release_filegetinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.fileGetInfo)
  if (_internal_has_filegetinfo()) {
    clear_has_query();
    ::proto::FileGetInfoQuery* temp = _impl_.query_.filegetinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.filegetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FileGetInfoQuery& Query::_internal_filegetinfo() const {
  return _internal_has_filegetinfo()
      ? *_impl_.query_.filegetinfo_
      : reinterpret_cast< ::proto::FileGetInfoQuery&>(::proto::_FileGetInfoQuery_default_instance_);
}
inline const ::proto::FileGetInfoQuery& Query::filegetinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.fileGetInfo)
  return _internal_filegetinfo();
}
inline ::proto::FileGetInfoQuery* Query::unsafe_arena_release_filegetinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.fileGetInfo)
  if (_internal_has_filegetinfo()) {
    clear_has_query();
    ::proto::FileGetInfoQuery* temp = _impl_.query_.filegetinfo_;
    _impl_.query_.filegetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_filegetinfo(::proto::FileGetInfoQuery* filegetinfo) {
  clear_query();
  if (filegetinfo) {
    set_has_filegetinfo();
    _impl_.query_.filegetinfo_ = filegetinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.fileGetInfo)
}
inline ::proto::FileGetInfoQuery* Query::_internal_mutable_filegetinfo() {
  if (!_internal_has_filegetinfo()) {
    clear_query();
    set_has_filegetinfo();
    _impl_.query_.filegetinfo_ = CreateMaybeMessage< ::proto::FileGetInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.filegetinfo_;
}
inline ::proto::FileGetInfoQuery* Query::mutable_filegetinfo() {
  ::proto::FileGetInfoQuery* _msg = _internal_mutable_filegetinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.fileGetInfo)
  return _msg;
}

// .proto.TransactionGetReceiptQuery transactionGetReceipt = 14;
inline bool Query::_internal_has_transactiongetreceipt() const {
  return query_case() == kTransactionGetReceipt;
}
inline bool Query::has_transactiongetreceipt() const {
  return _internal_has_transactiongetreceipt();
}
inline void Query::set_has_transactiongetreceipt() {
  _impl_._oneof_case_[0] = kTransactionGetReceipt;
}
inline ::proto::TransactionGetReceiptQuery* Query::release_transactiongetreceipt() {
  // @@protoc_insertion_point(field_release:proto.Query.transactionGetReceipt)
  if (_internal_has_transactiongetreceipt()) {
    clear_has_query();
    ::proto::TransactionGetReceiptQuery* temp = _impl_.query_.transactiongetreceipt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.transactiongetreceipt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TransactionGetReceiptQuery& Query::_internal_transactiongetreceipt() const {
  return _internal_has_transactiongetreceipt()
      ? *_impl_.query_.transactiongetreceipt_
      : reinterpret_cast< ::proto::TransactionGetReceiptQuery&>(::proto::_TransactionGetReceiptQuery_default_instance_);
}
inline const ::proto::TransactionGetReceiptQuery& Query::transactiongetreceipt() const {
  // @@protoc_insertion_point(field_get:proto.Query.transactionGetReceipt)
  return _internal_transactiongetreceipt();
}
inline ::proto::TransactionGetReceiptQuery* Query::unsafe_arena_release_transactiongetreceipt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.transactionGetReceipt)
  if (_internal_has_transactiongetreceipt()) {
    clear_has_query();
    ::proto::TransactionGetReceiptQuery* temp = _impl_.query_.transactiongetreceipt_;
    _impl_.query_.transactiongetreceipt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_transactiongetreceipt(::proto::TransactionGetReceiptQuery* transactiongetreceipt) {
  clear_query();
  if (transactiongetreceipt) {
    set_has_transactiongetreceipt();
    _impl_.query_.transactiongetreceipt_ = transactiongetreceipt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.transactionGetReceipt)
}
inline ::proto::TransactionGetReceiptQuery* Query::_internal_mutable_transactiongetreceipt() {
  if (!_internal_has_transactiongetreceipt()) {
    clear_query();
    set_has_transactiongetreceipt();
    _impl_.query_.transactiongetreceipt_ = CreateMaybeMessage< ::proto::TransactionGetReceiptQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.transactiongetreceipt_;
}
inline ::proto::TransactionGetReceiptQuery* Query::mutable_transactiongetreceipt() {
  ::proto::TransactionGetReceiptQuery* _msg = _internal_mutable_transactiongetreceipt();
  // @@protoc_insertion_point(field_mutable:proto.Query.transactionGetReceipt)
  return _msg;
}

// .proto.TransactionGetRecordQuery transactionGetRecord = 15;
inline bool Query::_internal_has_transactiongetrecord() const {
  return query_case() == kTransactionGetRecord;
}
inline bool Query::has_transactiongetrecord() const {
  return _internal_has_transactiongetrecord();
}
inline void Query::set_has_transactiongetrecord() {
  _impl_._oneof_case_[0] = kTransactionGetRecord;
}
inline ::proto::TransactionGetRecordQuery* Query::release_transactiongetrecord() {
  // @@protoc_insertion_point(field_release:proto.Query.transactionGetRecord)
  if (_internal_has_transactiongetrecord()) {
    clear_has_query();
    ::proto::TransactionGetRecordQuery* temp = _impl_.query_.transactiongetrecord_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.transactiongetrecord_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TransactionGetRecordQuery& Query::_internal_transactiongetrecord() const {
  return _internal_has_transactiongetrecord()
      ? *_impl_.query_.transactiongetrecord_
      : reinterpret_cast< ::proto::TransactionGetRecordQuery&>(::proto::_TransactionGetRecordQuery_default_instance_);
}
inline const ::proto::TransactionGetRecordQuery& Query::transactiongetrecord() const {
  // @@protoc_insertion_point(field_get:proto.Query.transactionGetRecord)
  return _internal_transactiongetrecord();
}
inline ::proto::TransactionGetRecordQuery* Query::unsafe_arena_release_transactiongetrecord() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.transactionGetRecord)
  if (_internal_has_transactiongetrecord()) {
    clear_has_query();
    ::proto::TransactionGetRecordQuery* temp = _impl_.query_.transactiongetrecord_;
    _impl_.query_.transactiongetrecord_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_transactiongetrecord(::proto::TransactionGetRecordQuery* transactiongetrecord) {
  clear_query();
  if (transactiongetrecord) {
    set_has_transactiongetrecord();
    _impl_.query_.transactiongetrecord_ = transactiongetrecord;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.transactionGetRecord)
}
inline ::proto::TransactionGetRecordQuery* Query::_internal_mutable_transactiongetrecord() {
  if (!_internal_has_transactiongetrecord()) {
    clear_query();
    set_has_transactiongetrecord();
    _impl_.query_.transactiongetrecord_ = CreateMaybeMessage< ::proto::TransactionGetRecordQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.transactiongetrecord_;
}
inline ::proto::TransactionGetRecordQuery* Query::mutable_transactiongetrecord() {
  ::proto::TransactionGetRecordQuery* _msg = _internal_mutable_transactiongetrecord();
  // @@protoc_insertion_point(field_mutable:proto.Query.transactionGetRecord)
  return _msg;
}

// .proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;
inline bool Query::_internal_has_transactiongetfastrecord() const {
  return query_case() == kTransactionGetFastRecord;
}
inline bool Query::has_transactiongetfastrecord() const {
  return _internal_has_transactiongetfastrecord();
}
inline void Query::set_has_transactiongetfastrecord() {
  _impl_._oneof_case_[0] = kTransactionGetFastRecord;
}
inline ::proto::TransactionGetFastRecordQuery* Query::release_transactiongetfastrecord() {
  // @@protoc_insertion_point(field_release:proto.Query.transactionGetFastRecord)
  if (_internal_has_transactiongetfastrecord()) {
    clear_has_query();
    ::proto::TransactionGetFastRecordQuery* temp = _impl_.query_.transactiongetfastrecord_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.transactiongetfastrecord_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TransactionGetFastRecordQuery& Query::_internal_transactiongetfastrecord() const {
  return _internal_has_transactiongetfastrecord()
      ? *_impl_.query_.transactiongetfastrecord_
      : reinterpret_cast< ::proto::TransactionGetFastRecordQuery&>(::proto::_TransactionGetFastRecordQuery_default_instance_);
}
inline const ::proto::TransactionGetFastRecordQuery& Query::transactiongetfastrecord() const {
  // @@protoc_insertion_point(field_get:proto.Query.transactionGetFastRecord)
  return _internal_transactiongetfastrecord();
}
inline ::proto::TransactionGetFastRecordQuery* Query::unsafe_arena_release_transactiongetfastrecord() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.transactionGetFastRecord)
  if (_internal_has_transactiongetfastrecord()) {
    clear_has_query();
    ::proto::TransactionGetFastRecordQuery* temp = _impl_.query_.transactiongetfastrecord_;
    _impl_.query_.transactiongetfastrecord_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_transactiongetfastrecord(::proto::TransactionGetFastRecordQuery* transactiongetfastrecord) {
  clear_query();
  if (transactiongetfastrecord) {
    set_has_transactiongetfastrecord();
    _impl_.query_.transactiongetfastrecord_ = transactiongetfastrecord;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.transactionGetFastRecord)
}
inline ::proto::TransactionGetFastRecordQuery* Query::_internal_mutable_transactiongetfastrecord() {
  if (!_internal_has_transactiongetfastrecord()) {
    clear_query();
    set_has_transactiongetfastrecord();
    _impl_.query_.transactiongetfastrecord_ = CreateMaybeMessage< ::proto::TransactionGetFastRecordQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.transactiongetfastrecord_;
}
inline ::proto::TransactionGetFastRecordQuery* Query::mutable_transactiongetfastrecord() {
  ::proto::TransactionGetFastRecordQuery* _msg = _internal_mutable_transactiongetfastrecord();
  // @@protoc_insertion_point(field_mutable:proto.Query.transactionGetFastRecord)
  return _msg;
}

// .proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;
inline bool Query::_internal_has_consensusgettopicinfo() const {
  return query_case() == kConsensusGetTopicInfo;
}
inline bool Query::has_consensusgettopicinfo() const {
  return _internal_has_consensusgettopicinfo();
}
inline void Query::set_has_consensusgettopicinfo() {
  _impl_._oneof_case_[0] = kConsensusGetTopicInfo;
}
inline ::proto::ConsensusGetTopicInfoQuery* Query::release_consensusgettopicinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.consensusGetTopicInfo)
  if (_internal_has_consensusgettopicinfo()) {
    clear_has_query();
    ::proto::ConsensusGetTopicInfoQuery* temp = _impl_.query_.consensusgettopicinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.consensusgettopicinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ConsensusGetTopicInfoQuery& Query::_internal_consensusgettopicinfo() const {
  return _internal_has_consensusgettopicinfo()
      ? *_impl_.query_.consensusgettopicinfo_
      : reinterpret_cast< ::proto::ConsensusGetTopicInfoQuery&>(::proto::_ConsensusGetTopicInfoQuery_default_instance_);
}
inline const ::proto::ConsensusGetTopicInfoQuery& Query::consensusgettopicinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.consensusGetTopicInfo)
  return _internal_consensusgettopicinfo();
}
inline ::proto::ConsensusGetTopicInfoQuery* Query::unsafe_arena_release_consensusgettopicinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.consensusGetTopicInfo)
  if (_internal_has_consensusgettopicinfo()) {
    clear_has_query();
    ::proto::ConsensusGetTopicInfoQuery* temp = _impl_.query_.consensusgettopicinfo_;
    _impl_.query_.consensusgettopicinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_consensusgettopicinfo(::proto::ConsensusGetTopicInfoQuery* consensusgettopicinfo) {
  clear_query();
  if (consensusgettopicinfo) {
    set_has_consensusgettopicinfo();
    _impl_.query_.consensusgettopicinfo_ = consensusgettopicinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.consensusGetTopicInfo)
}
inline ::proto::ConsensusGetTopicInfoQuery* Query::_internal_mutable_consensusgettopicinfo() {
  if (!_internal_has_consensusgettopicinfo()) {
    clear_query();
    set_has_consensusgettopicinfo();
    _impl_.query_.consensusgettopicinfo_ = CreateMaybeMessage< ::proto::ConsensusGetTopicInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.consensusgettopicinfo_;
}
inline ::proto::ConsensusGetTopicInfoQuery* Query::mutable_consensusgettopicinfo() {
  ::proto::ConsensusGetTopicInfoQuery* _msg = _internal_mutable_consensusgettopicinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.consensusGetTopicInfo)
  return _msg;
}

// .proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;
inline bool Query::_internal_has_networkgetversioninfo() const {
  return query_case() == kNetworkGetVersionInfo;
}
inline bool Query::has_networkgetversioninfo() const {
  return _internal_has_networkgetversioninfo();
}
inline void Query::set_has_networkgetversioninfo() {
  _impl_._oneof_case_[0] = kNetworkGetVersionInfo;
}
inline ::proto::NetworkGetVersionInfoQuery* Query::release_networkgetversioninfo() {
  // @@protoc_insertion_point(field_release:proto.Query.networkGetVersionInfo)
  if (_internal_has_networkgetversioninfo()) {
    clear_has_query();
    ::proto::NetworkGetVersionInfoQuery* temp = _impl_.query_.networkgetversioninfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.networkgetversioninfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::NetworkGetVersionInfoQuery& Query::_internal_networkgetversioninfo() const {
  return _internal_has_networkgetversioninfo()
      ? *_impl_.query_.networkgetversioninfo_
      : reinterpret_cast< ::proto::NetworkGetVersionInfoQuery&>(::proto::_NetworkGetVersionInfoQuery_default_instance_);
}
inline const ::proto::NetworkGetVersionInfoQuery& Query::networkgetversioninfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.networkGetVersionInfo)
  return _internal_networkgetversioninfo();
}
inline ::proto::NetworkGetVersionInfoQuery* Query::unsafe_arena_release_networkgetversioninfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.networkGetVersionInfo)
  if (_internal_has_networkgetversioninfo()) {
    clear_has_query();
    ::proto::NetworkGetVersionInfoQuery* temp = _impl_.query_.networkgetversioninfo_;
    _impl_.query_.networkgetversioninfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_networkgetversioninfo(::proto::NetworkGetVersionInfoQuery* networkgetversioninfo) {
  clear_query();
  if (networkgetversioninfo) {
    set_has_networkgetversioninfo();
    _impl_.query_.networkgetversioninfo_ = networkgetversioninfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.networkGetVersionInfo)
}
inline ::proto::NetworkGetVersionInfoQuery* Query::_internal_mutable_networkgetversioninfo() {
  if (!_internal_has_networkgetversioninfo()) {
    clear_query();
    set_has_networkgetversioninfo();
    _impl_.query_.networkgetversioninfo_ = CreateMaybeMessage< ::proto::NetworkGetVersionInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.networkgetversioninfo_;
}
inline ::proto::NetworkGetVersionInfoQuery* Query::mutable_networkgetversioninfo() {
  ::proto::NetworkGetVersionInfoQuery* _msg = _internal_mutable_networkgetversioninfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.networkGetVersionInfo)
  return _msg;
}

// .proto.TokenGetInfoQuery tokenGetInfo = 52;
inline bool Query::_internal_has_tokengetinfo() const {
  return query_case() == kTokenGetInfo;
}
inline bool Query::has_tokengetinfo() const {
  return _internal_has_tokengetinfo();
}
inline void Query::set_has_tokengetinfo() {
  _impl_._oneof_case_[0] = kTokenGetInfo;
}
inline ::proto::TokenGetInfoQuery* Query::release_tokengetinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.tokenGetInfo)
  if (_internal_has_tokengetinfo()) {
    clear_has_query();
    ::proto::TokenGetInfoQuery* temp = _impl_.query_.tokengetinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.tokengetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TokenGetInfoQuery& Query::_internal_tokengetinfo() const {
  return _internal_has_tokengetinfo()
      ? *_impl_.query_.tokengetinfo_
      : reinterpret_cast< ::proto::TokenGetInfoQuery&>(::proto::_TokenGetInfoQuery_default_instance_);
}
inline const ::proto::TokenGetInfoQuery& Query::tokengetinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.tokenGetInfo)
  return _internal_tokengetinfo();
}
inline ::proto::TokenGetInfoQuery* Query::unsafe_arena_release_tokengetinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.tokenGetInfo)
  if (_internal_has_tokengetinfo()) {
    clear_has_query();
    ::proto::TokenGetInfoQuery* temp = _impl_.query_.tokengetinfo_;
    _impl_.query_.tokengetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_tokengetinfo(::proto::TokenGetInfoQuery* tokengetinfo) {
  clear_query();
  if (tokengetinfo) {
    set_has_tokengetinfo();
    _impl_.query_.tokengetinfo_ = tokengetinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.tokenGetInfo)
}
inline ::proto::TokenGetInfoQuery* Query::_internal_mutable_tokengetinfo() {
  if (!_internal_has_tokengetinfo()) {
    clear_query();
    set_has_tokengetinfo();
    _impl_.query_.tokengetinfo_ = CreateMaybeMessage< ::proto::TokenGetInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.tokengetinfo_;
}
inline ::proto::TokenGetInfoQuery* Query::mutable_tokengetinfo() {
  ::proto::TokenGetInfoQuery* _msg = _internal_mutable_tokengetinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.tokenGetInfo)
  return _msg;
}

// .proto.ScheduleGetInfoQuery scheduleGetInfo = 53;
inline bool Query::_internal_has_schedulegetinfo() const {
  return query_case() == kScheduleGetInfo;
}
inline bool Query::has_schedulegetinfo() const {
  return _internal_has_schedulegetinfo();
}
inline void Query::set_has_schedulegetinfo() {
  _impl_._oneof_case_[0] = kScheduleGetInfo;
}
inline ::proto::ScheduleGetInfoQuery* Query::release_schedulegetinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.scheduleGetInfo)
  if (_internal_has_schedulegetinfo()) {
    clear_has_query();
    ::proto::ScheduleGetInfoQuery* temp = _impl_.query_.schedulegetinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.schedulegetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ScheduleGetInfoQuery& Query::_internal_schedulegetinfo() const {
  return _internal_has_schedulegetinfo()
      ? *_impl_.query_.schedulegetinfo_
      : reinterpret_cast< ::proto::ScheduleGetInfoQuery&>(::proto::_ScheduleGetInfoQuery_default_instance_);
}
inline const ::proto::ScheduleGetInfoQuery& Query::schedulegetinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.scheduleGetInfo)
  return _internal_schedulegetinfo();
}
inline ::proto::ScheduleGetInfoQuery* Query::unsafe_arena_release_schedulegetinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.scheduleGetInfo)
  if (_internal_has_schedulegetinfo()) {
    clear_has_query();
    ::proto::ScheduleGetInfoQuery* temp = _impl_.query_.schedulegetinfo_;
    _impl_.query_.schedulegetinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_schedulegetinfo(::proto::ScheduleGetInfoQuery* schedulegetinfo) {
  clear_query();
  if (schedulegetinfo) {
    set_has_schedulegetinfo();
    _impl_.query_.schedulegetinfo_ = schedulegetinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.scheduleGetInfo)
}
inline ::proto::ScheduleGetInfoQuery* Query::_internal_mutable_schedulegetinfo() {
  if (!_internal_has_schedulegetinfo()) {
    clear_query();
    set_has_schedulegetinfo();
    _impl_.query_.schedulegetinfo_ = CreateMaybeMessage< ::proto::ScheduleGetInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.schedulegetinfo_;
}
inline ::proto::ScheduleGetInfoQuery* Query::mutable_schedulegetinfo() {
  ::proto::ScheduleGetInfoQuery* _msg = _internal_mutable_schedulegetinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.scheduleGetInfo)
  return _msg;
}

// .proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54;
inline bool Query::_internal_has_tokengetaccountnftinfos() const {
  return query_case() == kTokenGetAccountNftInfos;
}
inline bool Query::has_tokengetaccountnftinfos() const {
  return _internal_has_tokengetaccountnftinfos();
}
inline void Query::set_has_tokengetaccountnftinfos() {
  _impl_._oneof_case_[0] = kTokenGetAccountNftInfos;
}
inline ::proto::TokenGetAccountNftInfosQuery* Query::release_tokengetaccountnftinfos() {
  // @@protoc_insertion_point(field_release:proto.Query.tokenGetAccountNftInfos)
  if (_internal_has_tokengetaccountnftinfos()) {
    clear_has_query();
    ::proto::TokenGetAccountNftInfosQuery* temp = _impl_.query_.tokengetaccountnftinfos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.tokengetaccountnftinfos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TokenGetAccountNftInfosQuery& Query::_internal_tokengetaccountnftinfos() const {
  return _internal_has_tokengetaccountnftinfos()
      ? *_impl_.query_.tokengetaccountnftinfos_
      : reinterpret_cast< ::proto::TokenGetAccountNftInfosQuery&>(::proto::_TokenGetAccountNftInfosQuery_default_instance_);
}
inline const ::proto::TokenGetAccountNftInfosQuery& Query::tokengetaccountnftinfos() const {
  // @@protoc_insertion_point(field_get:proto.Query.tokenGetAccountNftInfos)
  return _internal_tokengetaccountnftinfos();
}
inline ::proto::TokenGetAccountNftInfosQuery* Query::unsafe_arena_release_tokengetaccountnftinfos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.tokenGetAccountNftInfos)
  if (_internal_has_tokengetaccountnftinfos()) {
    clear_has_query();
    ::proto::TokenGetAccountNftInfosQuery* temp = _impl_.query_.tokengetaccountnftinfos_;
    _impl_.query_.tokengetaccountnftinfos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_tokengetaccountnftinfos(::proto::TokenGetAccountNftInfosQuery* tokengetaccountnftinfos) {
  clear_query();
  if (tokengetaccountnftinfos) {
    set_has_tokengetaccountnftinfos();
    _impl_.query_.tokengetaccountnftinfos_ = tokengetaccountnftinfos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.tokenGetAccountNftInfos)
}
inline ::proto::TokenGetAccountNftInfosQuery* Query::_internal_mutable_tokengetaccountnftinfos() {
  if (!_internal_has_tokengetaccountnftinfos()) {
    clear_query();
    set_has_tokengetaccountnftinfos();
    _impl_.query_.tokengetaccountnftinfos_ = CreateMaybeMessage< ::proto::TokenGetAccountNftInfosQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.tokengetaccountnftinfos_;
}
inline ::proto::TokenGetAccountNftInfosQuery* Query::mutable_tokengetaccountnftinfos() {
  ::proto::TokenGetAccountNftInfosQuery* _msg = _internal_mutable_tokengetaccountnftinfos();
  // @@protoc_insertion_point(field_mutable:proto.Query.tokenGetAccountNftInfos)
  return _msg;
}

// .proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;
inline bool Query::_internal_has_tokengetnftinfo() const {
  return query_case() == kTokenGetNftInfo;
}
inline bool Query::has_tokengetnftinfo() const {
  return _internal_has_tokengetnftinfo();
}
inline void Query::set_has_tokengetnftinfo() {
  _impl_._oneof_case_[0] = kTokenGetNftInfo;
}
inline ::proto::TokenGetNftInfoQuery* Query::release_tokengetnftinfo() {
  // @@protoc_insertion_point(field_release:proto.Query.tokenGetNftInfo)
  if (_internal_has_tokengetnftinfo()) {
    clear_has_query();
    ::proto::TokenGetNftInfoQuery* temp = _impl_.query_.tokengetnftinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.tokengetnftinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TokenGetNftInfoQuery& Query::_internal_tokengetnftinfo() const {
  return _internal_has_tokengetnftinfo()
      ? *_impl_.query_.tokengetnftinfo_
      : reinterpret_cast< ::proto::TokenGetNftInfoQuery&>(::proto::_TokenGetNftInfoQuery_default_instance_);
}
inline const ::proto::TokenGetNftInfoQuery& Query::tokengetnftinfo() const {
  // @@protoc_insertion_point(field_get:proto.Query.tokenGetNftInfo)
  return _internal_tokengetnftinfo();
}
inline ::proto::TokenGetNftInfoQuery* Query::unsafe_arena_release_tokengetnftinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.tokenGetNftInfo)
  if (_internal_has_tokengetnftinfo()) {
    clear_has_query();
    ::proto::TokenGetNftInfoQuery* temp = _impl_.query_.tokengetnftinfo_;
    _impl_.query_.tokengetnftinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_tokengetnftinfo(::proto::TokenGetNftInfoQuery* tokengetnftinfo) {
  clear_query();
  if (tokengetnftinfo) {
    set_has_tokengetnftinfo();
    _impl_.query_.tokengetnftinfo_ = tokengetnftinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.tokenGetNftInfo)
}
inline ::proto::TokenGetNftInfoQuery* Query::_internal_mutable_tokengetnftinfo() {
  if (!_internal_has_tokengetnftinfo()) {
    clear_query();
    set_has_tokengetnftinfo();
    _impl_.query_.tokengetnftinfo_ = CreateMaybeMessage< ::proto::TokenGetNftInfoQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.tokengetnftinfo_;
}
inline ::proto::TokenGetNftInfoQuery* Query::mutable_tokengetnftinfo() {
  ::proto::TokenGetNftInfoQuery* _msg = _internal_mutable_tokengetnftinfo();
  // @@protoc_insertion_point(field_mutable:proto.Query.tokenGetNftInfo)
  return _msg;
}

// .proto.TokenGetNftInfosQuery tokenGetNftInfos = 56;
inline bool Query::_internal_has_tokengetnftinfos() const {
  return query_case() == kTokenGetNftInfos;
}
inline bool Query::has_tokengetnftinfos() const {
  return _internal_has_tokengetnftinfos();
}
inline void Query::set_has_tokengetnftinfos() {
  _impl_._oneof_case_[0] = kTokenGetNftInfos;
}
inline ::proto::TokenGetNftInfosQuery* Query::release_tokengetnftinfos() {
  // @@protoc_insertion_point(field_release:proto.Query.tokenGetNftInfos)
  if (_internal_has_tokengetnftinfos()) {
    clear_has_query();
    ::proto::TokenGetNftInfosQuery* temp = _impl_.query_.tokengetnftinfos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.tokengetnftinfos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::TokenGetNftInfosQuery& Query::_internal_tokengetnftinfos() const {
  return _internal_has_tokengetnftinfos()
      ? *_impl_.query_.tokengetnftinfos_
      : reinterpret_cast< ::proto::TokenGetNftInfosQuery&>(::proto::_TokenGetNftInfosQuery_default_instance_);
}
inline const ::proto::TokenGetNftInfosQuery& Query::tokengetnftinfos() const {
  // @@protoc_insertion_point(field_get:proto.Query.tokenGetNftInfos)
  return _internal_tokengetnftinfos();
}
inline ::proto::TokenGetNftInfosQuery* Query::unsafe_arena_release_tokengetnftinfos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.tokenGetNftInfos)
  if (_internal_has_tokengetnftinfos()) {
    clear_has_query();
    ::proto::TokenGetNftInfosQuery* temp = _impl_.query_.tokengetnftinfos_;
    _impl_.query_.tokengetnftinfos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_tokengetnftinfos(::proto::TokenGetNftInfosQuery* tokengetnftinfos) {
  clear_query();
  if (tokengetnftinfos) {
    set_has_tokengetnftinfos();
    _impl_.query_.tokengetnftinfos_ = tokengetnftinfos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.tokenGetNftInfos)
}
inline ::proto::TokenGetNftInfosQuery* Query::_internal_mutable_tokengetnftinfos() {
  if (!_internal_has_tokengetnftinfos()) {
    clear_query();
    set_has_tokengetnftinfos();
    _impl_.query_.tokengetnftinfos_ = CreateMaybeMessage< ::proto::TokenGetNftInfosQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.tokengetnftinfos_;
}
inline ::proto::TokenGetNftInfosQuery* Query::mutable_tokengetnftinfos() {
  ::proto::TokenGetNftInfosQuery* _msg = _internal_mutable_tokengetnftinfos();
  // @@protoc_insertion_point(field_mutable:proto.Query.tokenGetNftInfos)
  return _msg;
}

// .proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57;
inline bool Query::_internal_has_networkgetexecutiontime() const {
  return query_case() == kNetworkGetExecutionTime;
}
inline bool Query::has_networkgetexecutiontime() const {
  return _internal_has_networkgetexecutiontime();
}
inline void Query::set_has_networkgetexecutiontime() {
  _impl_._oneof_case_[0] = kNetworkGetExecutionTime;
}
inline ::proto::NetworkGetExecutionTimeQuery* Query::release_networkgetexecutiontime() {
  // @@protoc_insertion_point(field_release:proto.Query.networkGetExecutionTime)
  if (_internal_has_networkgetexecutiontime()) {
    clear_has_query();
    ::proto::NetworkGetExecutionTimeQuery* temp = _impl_.query_.networkgetexecutiontime_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.networkgetexecutiontime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::NetworkGetExecutionTimeQuery& Query::_internal_networkgetexecutiontime() const {
  return _internal_has_networkgetexecutiontime()
      ? *_impl_.query_.networkgetexecutiontime_
      : reinterpret_cast< ::proto::NetworkGetExecutionTimeQuery&>(::proto::_NetworkGetExecutionTimeQuery_default_instance_);
}
inline const ::proto::NetworkGetExecutionTimeQuery& Query::networkgetexecutiontime() const {
  // @@protoc_insertion_point(field_get:proto.Query.networkGetExecutionTime)
  return _internal_networkgetexecutiontime();
}
inline ::proto::NetworkGetExecutionTimeQuery* Query::unsafe_arena_release_networkgetexecutiontime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.networkGetExecutionTime)
  if (_internal_has_networkgetexecutiontime()) {
    clear_has_query();
    ::proto::NetworkGetExecutionTimeQuery* temp = _impl_.query_.networkgetexecutiontime_;
    _impl_.query_.networkgetexecutiontime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_networkgetexecutiontime(::proto::NetworkGetExecutionTimeQuery* networkgetexecutiontime) {
  clear_query();
  if (networkgetexecutiontime) {
    set_has_networkgetexecutiontime();
    _impl_.query_.networkgetexecutiontime_ = networkgetexecutiontime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.networkGetExecutionTime)
}
inline ::proto::NetworkGetExecutionTimeQuery* Query::_internal_mutable_networkgetexecutiontime() {
  if (!_internal_has_networkgetexecutiontime()) {
    clear_query();
    set_has_networkgetexecutiontime();
    _impl_.query_.networkgetexecutiontime_ = CreateMaybeMessage< ::proto::NetworkGetExecutionTimeQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.networkgetexecutiontime_;
}
inline ::proto::NetworkGetExecutionTimeQuery* Query::mutable_networkgetexecutiontime() {
  ::proto::NetworkGetExecutionTimeQuery* _msg = _internal_mutable_networkgetexecutiontime();
  // @@protoc_insertion_point(field_mutable:proto.Query.networkGetExecutionTime)
  return _msg;
}

// .proto.GetAccountDetailsQuery accountDetails = 58;
inline bool Query::_internal_has_accountdetails() const {
  return query_case() == kAccountDetails;
}
inline bool Query::has_accountdetails() const {
  return _internal_has_accountdetails();
}
inline void Query::set_has_accountdetails() {
  _impl_._oneof_case_[0] = kAccountDetails;
}
inline ::proto::GetAccountDetailsQuery* Query::release_accountdetails() {
  // @@protoc_insertion_point(field_release:proto.Query.accountDetails)
  if (_internal_has_accountdetails()) {
    clear_has_query();
    ::proto::GetAccountDetailsQuery* temp = _impl_.query_.accountdetails_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.accountdetails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::GetAccountDetailsQuery& Query::_internal_accountdetails() const {
  return _internal_has_accountdetails()
      ? *_impl_.query_.accountdetails_
      : reinterpret_cast< ::proto::GetAccountDetailsQuery&>(::proto::_GetAccountDetailsQuery_default_instance_);
}
inline const ::proto::GetAccountDetailsQuery& Query::accountdetails() const {
  // @@protoc_insertion_point(field_get:proto.Query.accountDetails)
  return _internal_accountdetails();
}
inline ::proto::GetAccountDetailsQuery* Query::unsafe_arena_release_accountdetails() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Query.accountDetails)
  if (_internal_has_accountdetails()) {
    clear_has_query();
    ::proto::GetAccountDetailsQuery* temp = _impl_.query_.accountdetails_;
    _impl_.query_.accountdetails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query::unsafe_arena_set_allocated_accountdetails(::proto::GetAccountDetailsQuery* accountdetails) {
  clear_query();
  if (accountdetails) {
    set_has_accountdetails();
    _impl_.query_.accountdetails_ = accountdetails;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Query.accountDetails)
}
inline ::proto::GetAccountDetailsQuery* Query::_internal_mutable_accountdetails() {
  if (!_internal_has_accountdetails()) {
    clear_query();
    set_has_accountdetails();
    _impl_.query_.accountdetails_ = CreateMaybeMessage< ::proto::GetAccountDetailsQuery >(GetArenaForAllocation());
  }
  return _impl_.query_.accountdetails_;
}
inline ::proto::GetAccountDetailsQuery* Query::mutable_accountdetails() {
  ::proto::GetAccountDetailsQuery* _msg = _internal_mutable_accountdetails();
  // @@protoc_insertion_point(field_mutable:proto.Query.accountDetails)
  return _msg;
}

inline bool Query::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void Query::clear_has_query() {
  _impl_._oneof_case_[0] = QUERY_NOT_SET;
}
inline Query::QueryCase Query::query_case() const {
  return Query::QueryCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_2eproto

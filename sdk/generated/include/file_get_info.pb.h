// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_get_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fget_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fget_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "timestamp.pb.h"
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fget_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fget_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fget_5finfo_2eproto;
namespace proto {
class FileGetInfoQuery;
struct FileGetInfoQueryDefaultTypeInternal;
extern FileGetInfoQueryDefaultTypeInternal _FileGetInfoQuery_default_instance_;
class FileGetInfoResponse;
struct FileGetInfoResponseDefaultTypeInternal;
extern FileGetInfoResponseDefaultTypeInternal _FileGetInfoResponse_default_instance_;
class FileGetInfoResponse_FileInfo;
struct FileGetInfoResponse_FileInfoDefaultTypeInternal;
extern FileGetInfoResponse_FileInfoDefaultTypeInternal _FileGetInfoResponse_FileInfo_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::FileGetInfoQuery* Arena::CreateMaybeMessage<::proto::FileGetInfoQuery>(Arena*);
template<> ::proto::FileGetInfoResponse* Arena::CreateMaybeMessage<::proto::FileGetInfoResponse>(Arena*);
template<> ::proto::FileGetInfoResponse_FileInfo* Arena::CreateMaybeMessage<::proto::FileGetInfoResponse_FileInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class FileGetInfoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileGetInfoQuery) */ {
 public:
  inline FileGetInfoQuery() : FileGetInfoQuery(nullptr) {}
  ~FileGetInfoQuery() override;
  explicit PROTOBUF_CONSTEXPR FileGetInfoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileGetInfoQuery(const FileGetInfoQuery& from);
  FileGetInfoQuery(FileGetInfoQuery&& from) noexcept
    : FileGetInfoQuery() {
    *this = ::std::move(from);
  }

  inline FileGetInfoQuery& operator=(const FileGetInfoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileGetInfoQuery& operator=(FileGetInfoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileGetInfoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileGetInfoQuery* internal_default_instance() {
    return reinterpret_cast<const FileGetInfoQuery*>(
               &_FileGetInfoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileGetInfoQuery& a, FileGetInfoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(FileGetInfoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileGetInfoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileGetInfoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileGetInfoQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileGetInfoQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileGetInfoQuery& from) {
    FileGetInfoQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileGetInfoQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileGetInfoQuery";
  }
  protected:
  explicit FileGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFileIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.FileID fileID = 2;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // @@protoc_insertion_point(class_scope:proto.FileGetInfoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::FileID* fileid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fget_5finfo_2eproto;
};
// -------------------------------------------------------------------

class FileGetInfoResponse_FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileGetInfoResponse.FileInfo) */ {
 public:
  inline FileGetInfoResponse_FileInfo() : FileGetInfoResponse_FileInfo(nullptr) {}
  ~FileGetInfoResponse_FileInfo() override;
  explicit PROTOBUF_CONSTEXPR FileGetInfoResponse_FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileGetInfoResponse_FileInfo(const FileGetInfoResponse_FileInfo& from);
  FileGetInfoResponse_FileInfo(FileGetInfoResponse_FileInfo&& from) noexcept
    : FileGetInfoResponse_FileInfo() {
    *this = ::std::move(from);
  }

  inline FileGetInfoResponse_FileInfo& operator=(const FileGetInfoResponse_FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileGetInfoResponse_FileInfo& operator=(FileGetInfoResponse_FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileGetInfoResponse_FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileGetInfoResponse_FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileGetInfoResponse_FileInfo*>(
               &_FileGetInfoResponse_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileGetInfoResponse_FileInfo& a, FileGetInfoResponse_FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileGetInfoResponse_FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileGetInfoResponse_FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileGetInfoResponse_FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileGetInfoResponse_FileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileGetInfoResponse_FileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileGetInfoResponse_FileInfo& from) {
    FileGetInfoResponse_FileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileGetInfoResponse_FileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileGetInfoResponse.FileInfo";
  }
  protected:
  explicit FileGetInfoResponse_FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 6,
    kLedgerIdFieldNumber = 7,
    kFileIDFieldNumber = 1,
    kExpirationTimeFieldNumber = 3,
    kKeysFieldNumber = 5,
    kSizeFieldNumber = 2,
    kDeletedFieldNumber = 4,
  };
  // string memo = 6;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes ledger_id = 7;
  void clear_ledger_id();
  const std::string& ledger_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_id();
  PROTOBUF_NODISCARD std::string* release_ledger_id();
  void set_allocated_ledger_id(std::string* ledger_id);
  private:
  const std::string& _internal_ledger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_id(const std::string& value);
  std::string* _internal_mutable_ledger_id();
  public:

  // .proto.FileID fileID = 1;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // .proto.Timestamp expirationTime = 3;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.KeyList keys = 5;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::proto::KeyList& keys() const;
  PROTOBUF_NODISCARD ::proto::KeyList* release_keys();
  ::proto::KeyList* mutable_keys();
  void set_allocated_keys(::proto::KeyList* keys);
  private:
  const ::proto::KeyList& _internal_keys() const;
  ::proto::KeyList* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::proto::KeyList* keys);
  ::proto::KeyList* unsafe_arena_release_keys();

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // bool deleted = 4;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.FileGetInfoResponse.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_id_;
    ::proto::FileID* fileid_;
    ::proto::Timestamp* expirationtime_;
    ::proto::KeyList* keys_;
    int64_t size_;
    bool deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fget_5finfo_2eproto;
};
// -------------------------------------------------------------------

class FileGetInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileGetInfoResponse) */ {
 public:
  inline FileGetInfoResponse() : FileGetInfoResponse(nullptr) {}
  ~FileGetInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR FileGetInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileGetInfoResponse(const FileGetInfoResponse& from);
  FileGetInfoResponse(FileGetInfoResponse&& from) noexcept
    : FileGetInfoResponse() {
    *this = ::std::move(from);
  }

  inline FileGetInfoResponse& operator=(const FileGetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileGetInfoResponse& operator=(FileGetInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileGetInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileGetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const FileGetInfoResponse*>(
               &_FileGetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileGetInfoResponse& a, FileGetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileGetInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileGetInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileGetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileGetInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileGetInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileGetInfoResponse& from) {
    FileGetInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileGetInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileGetInfoResponse";
  }
  protected:
  explicit FileGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileGetInfoResponse_FileInfo FileInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFileInfoFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.FileGetInfoResponse.FileInfo fileInfo = 2;
  bool has_fileinfo() const;
  private:
  bool _internal_has_fileinfo() const;
  public:
  void clear_fileinfo();
  const ::proto::FileGetInfoResponse_FileInfo& fileinfo() const;
  PROTOBUF_NODISCARD ::proto::FileGetInfoResponse_FileInfo* release_fileinfo();
  ::proto::FileGetInfoResponse_FileInfo* mutable_fileinfo();
  void set_allocated_fileinfo(::proto::FileGetInfoResponse_FileInfo* fileinfo);
  private:
  const ::proto::FileGetInfoResponse_FileInfo& _internal_fileinfo() const;
  ::proto::FileGetInfoResponse_FileInfo* _internal_mutable_fileinfo();
  public:
  void unsafe_arena_set_allocated_fileinfo(
      ::proto::FileGetInfoResponse_FileInfo* fileinfo);
  ::proto::FileGetInfoResponse_FileInfo* unsafe_arena_release_fileinfo();

  // @@protoc_insertion_point(class_scope:proto.FileGetInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::FileGetInfoResponse_FileInfo* fileinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fget_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileGetInfoQuery

// .proto.QueryHeader header = 1;
inline bool FileGetInfoQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool FileGetInfoQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& FileGetInfoQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& FileGetInfoQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoQuery.header)
  return _internal_header();
}
inline void FileGetInfoQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoQuery.header)
}
inline ::proto::QueryHeader* FileGetInfoQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* FileGetInfoQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* FileGetInfoQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* FileGetInfoQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoQuery.header)
  return _msg;
}
inline void FileGetInfoQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoQuery.header)
}

// .proto.FileID fileID = 2;
inline bool FileGetInfoQuery::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool FileGetInfoQuery::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& FileGetInfoQuery::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& FileGetInfoQuery::fileid() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoQuery.fileID)
  return _internal_fileid();
}
inline void FileGetInfoQuery::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoQuery.fileID)
}
inline ::proto::FileID* FileGetInfoQuery::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* FileGetInfoQuery::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoQuery.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* FileGetInfoQuery::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* FileGetInfoQuery::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoQuery.fileID)
  return _msg;
}
inline void FileGetInfoQuery::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoQuery.fileID)
}

// -------------------------------------------------------------------

// FileGetInfoResponse_FileInfo

// .proto.FileID fileID = 1;
inline bool FileGetInfoResponse_FileInfo::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool FileGetInfoResponse_FileInfo::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& FileGetInfoResponse_FileInfo::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& FileGetInfoResponse_FileInfo::fileid() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.fileID)
  return _internal_fileid();
}
inline void FileGetInfoResponse_FileInfo::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoResponse.FileInfo.fileID)
}
inline ::proto::FileID* FileGetInfoResponse_FileInfo::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* FileGetInfoResponse_FileInfo::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.FileInfo.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* FileGetInfoResponse_FileInfo::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* FileGetInfoResponse_FileInfo::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.FileInfo.fileID)
  return _msg;
}
inline void FileGetInfoResponse_FileInfo::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.FileInfo.fileID)
}

// int64 size = 2;
inline void FileGetInfoResponse_FileInfo::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t FileGetInfoResponse_FileInfo::_internal_size() const {
  return _impl_.size_;
}
inline int64_t FileGetInfoResponse_FileInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.size)
  return _internal_size();
}
inline void FileGetInfoResponse_FileInfo::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void FileGetInfoResponse_FileInfo::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:proto.FileGetInfoResponse.FileInfo.size)
}

// .proto.Timestamp expirationTime = 3;
inline bool FileGetInfoResponse_FileInfo::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool FileGetInfoResponse_FileInfo::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& FileGetInfoResponse_FileInfo::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& FileGetInfoResponse_FileInfo::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.expirationTime)
  return _internal_expirationtime();
}
inline void FileGetInfoResponse_FileInfo::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoResponse.FileInfo.expirationTime)
}
inline ::proto::Timestamp* FileGetInfoResponse_FileInfo::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* FileGetInfoResponse_FileInfo::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.FileInfo.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* FileGetInfoResponse_FileInfo::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* FileGetInfoResponse_FileInfo::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.FileInfo.expirationTime)
  return _msg;
}
inline void FileGetInfoResponse_FileInfo::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.FileInfo.expirationTime)
}

// bool deleted = 4;
inline void FileGetInfoResponse_FileInfo::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool FileGetInfoResponse_FileInfo::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool FileGetInfoResponse_FileInfo::deleted() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.deleted)
  return _internal_deleted();
}
inline void FileGetInfoResponse_FileInfo::_internal_set_deleted(bool value) {
  
  _impl_.deleted_ = value;
}
inline void FileGetInfoResponse_FileInfo::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:proto.FileGetInfoResponse.FileInfo.deleted)
}

// .proto.KeyList keys = 5;
inline bool FileGetInfoResponse_FileInfo::_internal_has_keys() const {
  return this != internal_default_instance() && _impl_.keys_ != nullptr;
}
inline bool FileGetInfoResponse_FileInfo::has_keys() const {
  return _internal_has_keys();
}
inline const ::proto::KeyList& FileGetInfoResponse_FileInfo::_internal_keys() const {
  const ::proto::KeyList* p = _impl_.keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::KeyList&>(
      ::proto::_KeyList_default_instance_);
}
inline const ::proto::KeyList& FileGetInfoResponse_FileInfo::keys() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.keys)
  return _internal_keys();
}
inline void FileGetInfoResponse_FileInfo::unsafe_arena_set_allocated_keys(
    ::proto::KeyList* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  _impl_.keys_ = keys;
  if (keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoResponse.FileInfo.keys)
}
inline ::proto::KeyList* FileGetInfoResponse_FileInfo::release_keys() {
  
  ::proto::KeyList* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::KeyList* FileGetInfoResponse_FileInfo::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.FileInfo.keys)
  
  ::proto::KeyList* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
  return temp;
}
inline ::proto::KeyList* FileGetInfoResponse_FileInfo::_internal_mutable_keys() {
  
  if (_impl_.keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::KeyList>(GetArenaForAllocation());
    _impl_.keys_ = p;
  }
  return _impl_.keys_;
}
inline ::proto::KeyList* FileGetInfoResponse_FileInfo::mutable_keys() {
  ::proto::KeyList* _msg = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.FileInfo.keys)
  return _msg;
}
inline void FileGetInfoResponse_FileInfo::set_allocated_keys(::proto::KeyList* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys));
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.FileInfo.keys)
}

// string memo = 6;
inline void FileGetInfoResponse_FileInfo::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& FileGetInfoResponse_FileInfo::memo() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileGetInfoResponse_FileInfo::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FileGetInfoResponse.FileInfo.memo)
}
inline std::string* FileGetInfoResponse_FileInfo::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.FileInfo.memo)
  return _s;
}
inline const std::string& FileGetInfoResponse_FileInfo::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void FileGetInfoResponse_FileInfo::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* FileGetInfoResponse_FileInfo::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* FileGetInfoResponse_FileInfo::release_memo() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.FileInfo.memo)
  return _impl_.memo_.Release();
}
inline void FileGetInfoResponse_FileInfo::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.FileInfo.memo)
}

// bytes ledger_id = 7;
inline void FileGetInfoResponse_FileInfo::clear_ledger_id() {
  _impl_.ledger_id_.ClearToEmpty();
}
inline const std::string& FileGetInfoResponse_FileInfo::ledger_id() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.FileInfo.ledger_id)
  return _internal_ledger_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileGetInfoResponse_FileInfo::set_ledger_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ledger_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FileGetInfoResponse.FileInfo.ledger_id)
}
inline std::string* FileGetInfoResponse_FileInfo::mutable_ledger_id() {
  std::string* _s = _internal_mutable_ledger_id();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.FileInfo.ledger_id)
  return _s;
}
inline const std::string& FileGetInfoResponse_FileInfo::_internal_ledger_id() const {
  return _impl_.ledger_id_.Get();
}
inline void FileGetInfoResponse_FileInfo::_internal_set_ledger_id(const std::string& value) {
  
  _impl_.ledger_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileGetInfoResponse_FileInfo::_internal_mutable_ledger_id() {
  
  return _impl_.ledger_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileGetInfoResponse_FileInfo::release_ledger_id() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.FileInfo.ledger_id)
  return _impl_.ledger_id_.Release();
}
inline void FileGetInfoResponse_FileInfo::set_allocated_ledger_id(std::string* ledger_id) {
  if (ledger_id != nullptr) {
    
  } else {
    
  }
  _impl_.ledger_id_.SetAllocated(ledger_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ledger_id_.IsDefault()) {
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.FileInfo.ledger_id)
}

// -------------------------------------------------------------------

// FileGetInfoResponse

// .proto.ResponseHeader header = 1;
inline bool FileGetInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool FileGetInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& FileGetInfoResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& FileGetInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.header)
  return _internal_header();
}
inline void FileGetInfoResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoResponse.header)
}
inline ::proto::ResponseHeader* FileGetInfoResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* FileGetInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* FileGetInfoResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* FileGetInfoResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.header)
  return _msg;
}
inline void FileGetInfoResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.header)
}

// .proto.FileGetInfoResponse.FileInfo fileInfo = 2;
inline bool FileGetInfoResponse::_internal_has_fileinfo() const {
  return this != internal_default_instance() && _impl_.fileinfo_ != nullptr;
}
inline bool FileGetInfoResponse::has_fileinfo() const {
  return _internal_has_fileinfo();
}
inline void FileGetInfoResponse::clear_fileinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileinfo_ != nullptr) {
    delete _impl_.fileinfo_;
  }
  _impl_.fileinfo_ = nullptr;
}
inline const ::proto::FileGetInfoResponse_FileInfo& FileGetInfoResponse::_internal_fileinfo() const {
  const ::proto::FileGetInfoResponse_FileInfo* p = _impl_.fileinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileGetInfoResponse_FileInfo&>(
      ::proto::_FileGetInfoResponse_FileInfo_default_instance_);
}
inline const ::proto::FileGetInfoResponse_FileInfo& FileGetInfoResponse::fileinfo() const {
  // @@protoc_insertion_point(field_get:proto.FileGetInfoResponse.fileInfo)
  return _internal_fileinfo();
}
inline void FileGetInfoResponse::unsafe_arena_set_allocated_fileinfo(
    ::proto::FileGetInfoResponse_FileInfo* fileinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileinfo_);
  }
  _impl_.fileinfo_ = fileinfo;
  if (fileinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetInfoResponse.fileInfo)
}
inline ::proto::FileGetInfoResponse_FileInfo* FileGetInfoResponse::release_fileinfo() {
  
  ::proto::FileGetInfoResponse_FileInfo* temp = _impl_.fileinfo_;
  _impl_.fileinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileGetInfoResponse_FileInfo* FileGetInfoResponse::unsafe_arena_release_fileinfo() {
  // @@protoc_insertion_point(field_release:proto.FileGetInfoResponse.fileInfo)
  
  ::proto::FileGetInfoResponse_FileInfo* temp = _impl_.fileinfo_;
  _impl_.fileinfo_ = nullptr;
  return temp;
}
inline ::proto::FileGetInfoResponse_FileInfo* FileGetInfoResponse::_internal_mutable_fileinfo() {
  
  if (_impl_.fileinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileGetInfoResponse_FileInfo>(GetArenaForAllocation());
    _impl_.fileinfo_ = p;
  }
  return _impl_.fileinfo_;
}
inline ::proto::FileGetInfoResponse_FileInfo* FileGetInfoResponse::mutable_fileinfo() {
  ::proto::FileGetInfoResponse_FileInfo* _msg = _internal_mutable_fileinfo();
  // @@protoc_insertion_point(field_mutable:proto.FileGetInfoResponse.fileInfo)
  return _msg;
}
inline void FileGetInfoResponse::set_allocated_fileinfo(::proto::FileGetInfoResponse_FileInfo* fileinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fileinfo_;
  }
  if (fileinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fileinfo);
    if (message_arena != submessage_arena) {
      fileinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileinfo_ = fileinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetInfoResponse.fileInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fget_5finfo_2eproto

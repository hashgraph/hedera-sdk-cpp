// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_get_account_balance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fget_5faccount_5fbalance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fget_5faccount_5fbalance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fget_5faccount_5fbalance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fget_5faccount_5fbalance_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fget_5faccount_5fbalance_2eproto;
namespace proto {
class CryptoGetAccountBalanceQuery;
struct CryptoGetAccountBalanceQueryDefaultTypeInternal;
extern CryptoGetAccountBalanceQueryDefaultTypeInternal _CryptoGetAccountBalanceQuery_default_instance_;
class CryptoGetAccountBalanceResponse;
struct CryptoGetAccountBalanceResponseDefaultTypeInternal;
extern CryptoGetAccountBalanceResponseDefaultTypeInternal _CryptoGetAccountBalanceResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoGetAccountBalanceQuery* Arena::CreateMaybeMessage<::proto::CryptoGetAccountBalanceQuery>(Arena*);
template<> ::proto::CryptoGetAccountBalanceResponse* Arena::CreateMaybeMessage<::proto::CryptoGetAccountBalanceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoGetAccountBalanceQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoGetAccountBalanceQuery) */ {
 public:
  inline CryptoGetAccountBalanceQuery() : CryptoGetAccountBalanceQuery(nullptr) {}
  ~CryptoGetAccountBalanceQuery() override;
  explicit PROTOBUF_CONSTEXPR CryptoGetAccountBalanceQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoGetAccountBalanceQuery(const CryptoGetAccountBalanceQuery& from);
  CryptoGetAccountBalanceQuery(CryptoGetAccountBalanceQuery&& from) noexcept
    : CryptoGetAccountBalanceQuery() {
    *this = ::std::move(from);
  }

  inline CryptoGetAccountBalanceQuery& operator=(const CryptoGetAccountBalanceQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoGetAccountBalanceQuery& operator=(CryptoGetAccountBalanceQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoGetAccountBalanceQuery& default_instance() {
    return *internal_default_instance();
  }
  enum BalanceSourceCase {
    kAccountID = 2,
    kContractID = 3,
    BALANCESOURCE_NOT_SET = 0,
  };

  static inline const CryptoGetAccountBalanceQuery* internal_default_instance() {
    return reinterpret_cast<const CryptoGetAccountBalanceQuery*>(
               &_CryptoGetAccountBalanceQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoGetAccountBalanceQuery& a, CryptoGetAccountBalanceQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoGetAccountBalanceQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoGetAccountBalanceQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoGetAccountBalanceQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoGetAccountBalanceQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoGetAccountBalanceQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoGetAccountBalanceQuery& from) {
    CryptoGetAccountBalanceQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoGetAccountBalanceQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoGetAccountBalanceQuery";
  }
  protected:
  explicit CryptoGetAccountBalanceQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAccountIDFieldNumber = 2,
    kContractIDFieldNumber = 3,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.AccountID accountID = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // .proto.ContractID contractID = 3;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  void clear_balanceSource();
  BalanceSourceCase balanceSource_case() const;
  // @@protoc_insertion_point(class_scope:proto.CryptoGetAccountBalanceQuery)
 private:
  class _Internal;
  void set_has_accountid();
  void set_has_contractid();

  inline bool has_balanceSource() const;
  inline void clear_has_balanceSource();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    union BalanceSourceUnion {
      constexpr BalanceSourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::AccountID* accountid_;
      ::proto::ContractID* contractid_;
    } balanceSource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fget_5faccount_5fbalance_2eproto;
};
// -------------------------------------------------------------------

class CryptoGetAccountBalanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoGetAccountBalanceResponse) */ {
 public:
  inline CryptoGetAccountBalanceResponse() : CryptoGetAccountBalanceResponse(nullptr) {}
  ~CryptoGetAccountBalanceResponse() override;
  explicit PROTOBUF_CONSTEXPR CryptoGetAccountBalanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoGetAccountBalanceResponse(const CryptoGetAccountBalanceResponse& from);
  CryptoGetAccountBalanceResponse(CryptoGetAccountBalanceResponse&& from) noexcept
    : CryptoGetAccountBalanceResponse() {
    *this = ::std::move(from);
  }

  inline CryptoGetAccountBalanceResponse& operator=(const CryptoGetAccountBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoGetAccountBalanceResponse& operator=(CryptoGetAccountBalanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoGetAccountBalanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoGetAccountBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const CryptoGetAccountBalanceResponse*>(
               &_CryptoGetAccountBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CryptoGetAccountBalanceResponse& a, CryptoGetAccountBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoGetAccountBalanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoGetAccountBalanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoGetAccountBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoGetAccountBalanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoGetAccountBalanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoGetAccountBalanceResponse& from) {
    CryptoGetAccountBalanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoGetAccountBalanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoGetAccountBalanceResponse";
  }
  protected:
  explicit CryptoGetAccountBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenBalancesFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kAccountIDFieldNumber = 2,
    kBalanceFieldNumber = 3,
  };
  // repeated .proto.TokenBalance tokenBalances = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int tokenbalances_size() const;
  private:
  int _internal_tokenbalances_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_tokenbalances();
  PROTOBUF_DEPRECATED ::proto::TokenBalance* mutable_tokenbalances(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenBalance >*
      mutable_tokenbalances();
  private:
  const ::proto::TokenBalance& _internal_tokenbalances(int index) const;
  ::proto::TokenBalance* _internal_add_tokenbalances();
  public:
  PROTOBUF_DEPRECATED const ::proto::TokenBalance& tokenbalances(int index) const;
  PROTOBUF_DEPRECATED ::proto::TokenBalance* add_tokenbalances();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenBalance >&
      tokenbalances() const;

  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.AccountID accountID = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // uint64 balance = 3;
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CryptoGetAccountBalanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenBalance > tokenbalances_;
    ::proto::ResponseHeader* header_;
    ::proto::AccountID* accountid_;
    uint64_t balance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fget_5faccount_5fbalance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoGetAccountBalanceQuery

// .proto.QueryHeader header = 1;
inline bool CryptoGetAccountBalanceQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool CryptoGetAccountBalanceQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& CryptoGetAccountBalanceQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& CryptoGetAccountBalanceQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceQuery.header)
  return _internal_header();
}
inline void CryptoGetAccountBalanceQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetAccountBalanceQuery.header)
}
inline ::proto::QueryHeader* CryptoGetAccountBalanceQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* CryptoGetAccountBalanceQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetAccountBalanceQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* CryptoGetAccountBalanceQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* CryptoGetAccountBalanceQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetAccountBalanceQuery.header)
  return _msg;
}
inline void CryptoGetAccountBalanceQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetAccountBalanceQuery.header)
}

// .proto.AccountID accountID = 2;
inline bool CryptoGetAccountBalanceQuery::_internal_has_accountid() const {
  return balanceSource_case() == kAccountID;
}
inline bool CryptoGetAccountBalanceQuery::has_accountid() const {
  return _internal_has_accountid();
}
inline void CryptoGetAccountBalanceQuery::set_has_accountid() {
  _impl_._oneof_case_[0] = kAccountID;
}
inline ::proto::AccountID* CryptoGetAccountBalanceQuery::release_accountid() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetAccountBalanceQuery.accountID)
  if (_internal_has_accountid()) {
    clear_has_balanceSource();
    ::proto::AccountID* temp = _impl_.balanceSource_.accountid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.balanceSource_.accountid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::AccountID& CryptoGetAccountBalanceQuery::_internal_accountid() const {
  return _internal_has_accountid()
      ? *_impl_.balanceSource_.accountid_
      : reinterpret_cast< ::proto::AccountID&>(::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoGetAccountBalanceQuery::accountid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceQuery.accountID)
  return _internal_accountid();
}
inline ::proto::AccountID* CryptoGetAccountBalanceQuery::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoGetAccountBalanceQuery.accountID)
  if (_internal_has_accountid()) {
    clear_has_balanceSource();
    ::proto::AccountID* temp = _impl_.balanceSource_.accountid_;
    _impl_.balanceSource_.accountid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoGetAccountBalanceQuery::unsafe_arena_set_allocated_accountid(::proto::AccountID* accountid) {
  clear_balanceSource();
  if (accountid) {
    set_has_accountid();
    _impl_.balanceSource_.accountid_ = accountid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetAccountBalanceQuery.accountID)
}
inline ::proto::AccountID* CryptoGetAccountBalanceQuery::_internal_mutable_accountid() {
  if (!_internal_has_accountid()) {
    clear_balanceSource();
    set_has_accountid();
    _impl_.balanceSource_.accountid_ = CreateMaybeMessage< ::proto::AccountID >(GetArenaForAllocation());
  }
  return _impl_.balanceSource_.accountid_;
}
inline ::proto::AccountID* CryptoGetAccountBalanceQuery::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetAccountBalanceQuery.accountID)
  return _msg;
}

// .proto.ContractID contractID = 3;
inline bool CryptoGetAccountBalanceQuery::_internal_has_contractid() const {
  return balanceSource_case() == kContractID;
}
inline bool CryptoGetAccountBalanceQuery::has_contractid() const {
  return _internal_has_contractid();
}
inline void CryptoGetAccountBalanceQuery::set_has_contractid() {
  _impl_._oneof_case_[0] = kContractID;
}
inline ::proto::ContractID* CryptoGetAccountBalanceQuery::release_contractid() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetAccountBalanceQuery.contractID)
  if (_internal_has_contractid()) {
    clear_has_balanceSource();
    ::proto::ContractID* temp = _impl_.balanceSource_.contractid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.balanceSource_.contractid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractID& CryptoGetAccountBalanceQuery::_internal_contractid() const {
  return _internal_has_contractid()
      ? *_impl_.balanceSource_.contractid_
      : reinterpret_cast< ::proto::ContractID&>(::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& CryptoGetAccountBalanceQuery::contractid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceQuery.contractID)
  return _internal_contractid();
}
inline ::proto::ContractID* CryptoGetAccountBalanceQuery::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoGetAccountBalanceQuery.contractID)
  if (_internal_has_contractid()) {
    clear_has_balanceSource();
    ::proto::ContractID* temp = _impl_.balanceSource_.contractid_;
    _impl_.balanceSource_.contractid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoGetAccountBalanceQuery::unsafe_arena_set_allocated_contractid(::proto::ContractID* contractid) {
  clear_balanceSource();
  if (contractid) {
    set_has_contractid();
    _impl_.balanceSource_.contractid_ = contractid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetAccountBalanceQuery.contractID)
}
inline ::proto::ContractID* CryptoGetAccountBalanceQuery::_internal_mutable_contractid() {
  if (!_internal_has_contractid()) {
    clear_balanceSource();
    set_has_contractid();
    _impl_.balanceSource_.contractid_ = CreateMaybeMessage< ::proto::ContractID >(GetArenaForAllocation());
  }
  return _impl_.balanceSource_.contractid_;
}
inline ::proto::ContractID* CryptoGetAccountBalanceQuery::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetAccountBalanceQuery.contractID)
  return _msg;
}

inline bool CryptoGetAccountBalanceQuery::has_balanceSource() const {
  return balanceSource_case() != BALANCESOURCE_NOT_SET;
}
inline void CryptoGetAccountBalanceQuery::clear_has_balanceSource() {
  _impl_._oneof_case_[0] = BALANCESOURCE_NOT_SET;
}
inline CryptoGetAccountBalanceQuery::BalanceSourceCase CryptoGetAccountBalanceQuery::balanceSource_case() const {
  return CryptoGetAccountBalanceQuery::BalanceSourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CryptoGetAccountBalanceResponse

// .proto.ResponseHeader header = 1;
inline bool CryptoGetAccountBalanceResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool CryptoGetAccountBalanceResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& CryptoGetAccountBalanceResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& CryptoGetAccountBalanceResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceResponse.header)
  return _internal_header();
}
inline void CryptoGetAccountBalanceResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetAccountBalanceResponse.header)
}
inline ::proto::ResponseHeader* CryptoGetAccountBalanceResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* CryptoGetAccountBalanceResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetAccountBalanceResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* CryptoGetAccountBalanceResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* CryptoGetAccountBalanceResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetAccountBalanceResponse.header)
  return _msg;
}
inline void CryptoGetAccountBalanceResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetAccountBalanceResponse.header)
}

// .proto.AccountID accountID = 2;
inline bool CryptoGetAccountBalanceResponse::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool CryptoGetAccountBalanceResponse::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& CryptoGetAccountBalanceResponse::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoGetAccountBalanceResponse::accountid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceResponse.accountID)
  return _internal_accountid();
}
inline void CryptoGetAccountBalanceResponse::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetAccountBalanceResponse.accountID)
}
inline ::proto::AccountID* CryptoGetAccountBalanceResponse::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoGetAccountBalanceResponse::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetAccountBalanceResponse.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoGetAccountBalanceResponse::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* CryptoGetAccountBalanceResponse::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetAccountBalanceResponse.accountID)
  return _msg;
}
inline void CryptoGetAccountBalanceResponse::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetAccountBalanceResponse.accountID)
}

// uint64 balance = 3;
inline void CryptoGetAccountBalanceResponse::clear_balance() {
  _impl_.balance_ = uint64_t{0u};
}
inline uint64_t CryptoGetAccountBalanceResponse::_internal_balance() const {
  return _impl_.balance_;
}
inline uint64_t CryptoGetAccountBalanceResponse::balance() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceResponse.balance)
  return _internal_balance();
}
inline void CryptoGetAccountBalanceResponse::_internal_set_balance(uint64_t value) {
  
  _impl_.balance_ = value;
}
inline void CryptoGetAccountBalanceResponse::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:proto.CryptoGetAccountBalanceResponse.balance)
}

// repeated .proto.TokenBalance tokenBalances = 4 [deprecated = true];
inline int CryptoGetAccountBalanceResponse::_internal_tokenbalances_size() const {
  return _impl_.tokenbalances_.size();
}
inline int CryptoGetAccountBalanceResponse::tokenbalances_size() const {
  return _internal_tokenbalances_size();
}
inline ::proto::TokenBalance* CryptoGetAccountBalanceResponse::mutable_tokenbalances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetAccountBalanceResponse.tokenBalances)
  return _impl_.tokenbalances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenBalance >*
CryptoGetAccountBalanceResponse::mutable_tokenbalances() {
  // @@protoc_insertion_point(field_mutable_list:proto.CryptoGetAccountBalanceResponse.tokenBalances)
  return &_impl_.tokenbalances_;
}
inline const ::proto::TokenBalance& CryptoGetAccountBalanceResponse::_internal_tokenbalances(int index) const {
  return _impl_.tokenbalances_.Get(index);
}
inline const ::proto::TokenBalance& CryptoGetAccountBalanceResponse::tokenbalances(int index) const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetAccountBalanceResponse.tokenBalances)
  return _internal_tokenbalances(index);
}
inline ::proto::TokenBalance* CryptoGetAccountBalanceResponse::_internal_add_tokenbalances() {
  return _impl_.tokenbalances_.Add();
}
inline ::proto::TokenBalance* CryptoGetAccountBalanceResponse::add_tokenbalances() {
  ::proto::TokenBalance* _add = _internal_add_tokenbalances();
  // @@protoc_insertion_point(field_add:proto.CryptoGetAccountBalanceResponse.tokenBalances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenBalance >&
CryptoGetAccountBalanceResponse::tokenbalances() const {
  // @@protoc_insertion_point(field_list:proto.CryptoGetAccountBalanceResponse.tokenBalances)
  return _impl_.tokenbalances_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fget_5faccount_5fbalance_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_get_stakers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fget_5fstakers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fget_5fstakers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fget_5fstakers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fget_5fstakers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fget_5fstakers_2eproto;
namespace proto {
class AllProxyStakers;
struct AllProxyStakersDefaultTypeInternal;
extern AllProxyStakersDefaultTypeInternal _AllProxyStakers_default_instance_;
class CryptoGetStakersQuery;
struct CryptoGetStakersQueryDefaultTypeInternal;
extern CryptoGetStakersQueryDefaultTypeInternal _CryptoGetStakersQuery_default_instance_;
class CryptoGetStakersResponse;
struct CryptoGetStakersResponseDefaultTypeInternal;
extern CryptoGetStakersResponseDefaultTypeInternal _CryptoGetStakersResponse_default_instance_;
class ProxyStaker;
struct ProxyStakerDefaultTypeInternal;
extern ProxyStakerDefaultTypeInternal _ProxyStaker_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AllProxyStakers* Arena::CreateMaybeMessage<::proto::AllProxyStakers>(Arena*);
template<> ::proto::CryptoGetStakersQuery* Arena::CreateMaybeMessage<::proto::CryptoGetStakersQuery>(Arena*);
template<> ::proto::CryptoGetStakersResponse* Arena::CreateMaybeMessage<::proto::CryptoGetStakersResponse>(Arena*);
template<> ::proto::ProxyStaker* Arena::CreateMaybeMessage<::proto::ProxyStaker>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoGetStakersQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoGetStakersQuery) */ {
 public:
  inline CryptoGetStakersQuery() : CryptoGetStakersQuery(nullptr) {}
  ~CryptoGetStakersQuery() override;
  explicit PROTOBUF_CONSTEXPR CryptoGetStakersQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoGetStakersQuery(const CryptoGetStakersQuery& from);
  CryptoGetStakersQuery(CryptoGetStakersQuery&& from) noexcept
    : CryptoGetStakersQuery() {
    *this = ::std::move(from);
  }

  inline CryptoGetStakersQuery& operator=(const CryptoGetStakersQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoGetStakersQuery& operator=(CryptoGetStakersQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoGetStakersQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoGetStakersQuery* internal_default_instance() {
    return reinterpret_cast<const CryptoGetStakersQuery*>(
               &_CryptoGetStakersQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoGetStakersQuery& a, CryptoGetStakersQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoGetStakersQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoGetStakersQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoGetStakersQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoGetStakersQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoGetStakersQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoGetStakersQuery& from) {
    CryptoGetStakersQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoGetStakersQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoGetStakersQuery";
  }
  protected:
  explicit CryptoGetStakersQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAccountIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.AccountID accountID = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // @@protoc_insertion_point(class_scope:proto.CryptoGetStakersQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::AccountID* accountid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fget_5fstakers_2eproto;
};
// -------------------------------------------------------------------

class ProxyStaker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ProxyStaker) */ {
 public:
  inline ProxyStaker() : ProxyStaker(nullptr) {}
  ~ProxyStaker() override;
  explicit PROTOBUF_CONSTEXPR ProxyStaker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProxyStaker(const ProxyStaker& from);
  ProxyStaker(ProxyStaker&& from) noexcept
    : ProxyStaker() {
    *this = ::std::move(from);
  }

  inline ProxyStaker& operator=(const ProxyStaker& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyStaker& operator=(ProxyStaker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProxyStaker& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProxyStaker* internal_default_instance() {
    return reinterpret_cast<const ProxyStaker*>(
               &_ProxyStaker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProxyStaker& a, ProxyStaker& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyStaker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyStaker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProxyStaker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProxyStaker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProxyStaker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProxyStaker& from) {
    ProxyStaker::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyStaker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ProxyStaker";
  }
  protected:
  explicit ProxyStaker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // .proto.AccountID accountID = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // int64 amount = 2;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ProxyStaker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::AccountID* accountid_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fget_5fstakers_2eproto;
};
// -------------------------------------------------------------------

class AllProxyStakers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AllProxyStakers) */ {
 public:
  inline AllProxyStakers() : AllProxyStakers(nullptr) {}
  ~AllProxyStakers() override;
  explicit PROTOBUF_CONSTEXPR AllProxyStakers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllProxyStakers(const AllProxyStakers& from);
  AllProxyStakers(AllProxyStakers&& from) noexcept
    : AllProxyStakers() {
    *this = ::std::move(from);
  }

  inline AllProxyStakers& operator=(const AllProxyStakers& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllProxyStakers& operator=(AllProxyStakers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllProxyStakers& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllProxyStakers* internal_default_instance() {
    return reinterpret_cast<const AllProxyStakers*>(
               &_AllProxyStakers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AllProxyStakers& a, AllProxyStakers& b) {
    a.Swap(&b);
  }
  inline void Swap(AllProxyStakers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllProxyStakers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllProxyStakers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllProxyStakers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllProxyStakers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllProxyStakers& from) {
    AllProxyStakers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllProxyStakers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AllProxyStakers";
  }
  protected:
  explicit AllProxyStakers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProxyStakerFieldNumber = 2,
    kAccountIDFieldNumber = 1,
  };
  // repeated .proto.ProxyStaker proxyStaker = 2;
  int proxystaker_size() const;
  private:
  int _internal_proxystaker_size() const;
  public:
  void clear_proxystaker();
  ::proto::ProxyStaker* mutable_proxystaker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProxyStaker >*
      mutable_proxystaker();
  private:
  const ::proto::ProxyStaker& _internal_proxystaker(int index) const;
  ::proto::ProxyStaker* _internal_add_proxystaker();
  public:
  const ::proto::ProxyStaker& proxystaker(int index) const;
  ::proto::ProxyStaker* add_proxystaker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProxyStaker >&
      proxystaker() const;

  // .proto.AccountID accountID = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // @@protoc_insertion_point(class_scope:proto.AllProxyStakers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProxyStaker > proxystaker_;
    ::proto::AccountID* accountid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fget_5fstakers_2eproto;
};
// -------------------------------------------------------------------

class CryptoGetStakersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoGetStakersResponse) */ {
 public:
  inline CryptoGetStakersResponse() : CryptoGetStakersResponse(nullptr) {}
  ~CryptoGetStakersResponse() override;
  explicit PROTOBUF_CONSTEXPR CryptoGetStakersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoGetStakersResponse(const CryptoGetStakersResponse& from);
  CryptoGetStakersResponse(CryptoGetStakersResponse&& from) noexcept
    : CryptoGetStakersResponse() {
    *this = ::std::move(from);
  }

  inline CryptoGetStakersResponse& operator=(const CryptoGetStakersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoGetStakersResponse& operator=(CryptoGetStakersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoGetStakersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoGetStakersResponse* internal_default_instance() {
    return reinterpret_cast<const CryptoGetStakersResponse*>(
               &_CryptoGetStakersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CryptoGetStakersResponse& a, CryptoGetStakersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoGetStakersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoGetStakersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoGetStakersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoGetStakersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoGetStakersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoGetStakersResponse& from) {
    CryptoGetStakersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoGetStakersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoGetStakersResponse";
  }
  protected:
  explicit CryptoGetStakersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStakersFieldNumber = 3,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.AllProxyStakers stakers = 3;
  bool has_stakers() const;
  private:
  bool _internal_has_stakers() const;
  public:
  void clear_stakers();
  const ::proto::AllProxyStakers& stakers() const;
  PROTOBUF_NODISCARD ::proto::AllProxyStakers* release_stakers();
  ::proto::AllProxyStakers* mutable_stakers();
  void set_allocated_stakers(::proto::AllProxyStakers* stakers);
  private:
  const ::proto::AllProxyStakers& _internal_stakers() const;
  ::proto::AllProxyStakers* _internal_mutable_stakers();
  public:
  void unsafe_arena_set_allocated_stakers(
      ::proto::AllProxyStakers* stakers);
  ::proto::AllProxyStakers* unsafe_arena_release_stakers();

  // @@protoc_insertion_point(class_scope:proto.CryptoGetStakersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::AllProxyStakers* stakers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fget_5fstakers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoGetStakersQuery

// .proto.QueryHeader header = 1;
inline bool CryptoGetStakersQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool CryptoGetStakersQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& CryptoGetStakersQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& CryptoGetStakersQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetStakersQuery.header)
  return _internal_header();
}
inline void CryptoGetStakersQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetStakersQuery.header)
}
inline ::proto::QueryHeader* CryptoGetStakersQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* CryptoGetStakersQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetStakersQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* CryptoGetStakersQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* CryptoGetStakersQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetStakersQuery.header)
  return _msg;
}
inline void CryptoGetStakersQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetStakersQuery.header)
}

// .proto.AccountID accountID = 2;
inline bool CryptoGetStakersQuery::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool CryptoGetStakersQuery::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& CryptoGetStakersQuery::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoGetStakersQuery::accountid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetStakersQuery.accountID)
  return _internal_accountid();
}
inline void CryptoGetStakersQuery::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetStakersQuery.accountID)
}
inline ::proto::AccountID* CryptoGetStakersQuery::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoGetStakersQuery::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetStakersQuery.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoGetStakersQuery::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* CryptoGetStakersQuery::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetStakersQuery.accountID)
  return _msg;
}
inline void CryptoGetStakersQuery::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetStakersQuery.accountID)
}

// -------------------------------------------------------------------

// ProxyStaker

// .proto.AccountID accountID = 1;
inline bool ProxyStaker::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool ProxyStaker::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& ProxyStaker::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ProxyStaker::accountid() const {
  // @@protoc_insertion_point(field_get:proto.ProxyStaker.accountID)
  return _internal_accountid();
}
inline void ProxyStaker::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProxyStaker.accountID)
}
inline ::proto::AccountID* ProxyStaker::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ProxyStaker::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.ProxyStaker.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ProxyStaker::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* ProxyStaker::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.ProxyStaker.accountID)
  return _msg;
}
inline void ProxyStaker::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ProxyStaker.accountID)
}

// int64 amount = 2;
inline void ProxyStaker::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t ProxyStaker::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t ProxyStaker::amount() const {
  // @@protoc_insertion_point(field_get:proto.ProxyStaker.amount)
  return _internal_amount();
}
inline void ProxyStaker::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void ProxyStaker::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.ProxyStaker.amount)
}

// -------------------------------------------------------------------

// AllProxyStakers

// .proto.AccountID accountID = 1;
inline bool AllProxyStakers::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool AllProxyStakers::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& AllProxyStakers::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& AllProxyStakers::accountid() const {
  // @@protoc_insertion_point(field_get:proto.AllProxyStakers.accountID)
  return _internal_accountid();
}
inline void AllProxyStakers::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AllProxyStakers.accountID)
}
inline ::proto::AccountID* AllProxyStakers::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* AllProxyStakers::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.AllProxyStakers.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* AllProxyStakers::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* AllProxyStakers::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.AllProxyStakers.accountID)
  return _msg;
}
inline void AllProxyStakers::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.AllProxyStakers.accountID)
}

// repeated .proto.ProxyStaker proxyStaker = 2;
inline int AllProxyStakers::_internal_proxystaker_size() const {
  return _impl_.proxystaker_.size();
}
inline int AllProxyStakers::proxystaker_size() const {
  return _internal_proxystaker_size();
}
inline void AllProxyStakers::clear_proxystaker() {
  _impl_.proxystaker_.Clear();
}
inline ::proto::ProxyStaker* AllProxyStakers::mutable_proxystaker(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AllProxyStakers.proxyStaker)
  return _impl_.proxystaker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProxyStaker >*
AllProxyStakers::mutable_proxystaker() {
  // @@protoc_insertion_point(field_mutable_list:proto.AllProxyStakers.proxyStaker)
  return &_impl_.proxystaker_;
}
inline const ::proto::ProxyStaker& AllProxyStakers::_internal_proxystaker(int index) const {
  return _impl_.proxystaker_.Get(index);
}
inline const ::proto::ProxyStaker& AllProxyStakers::proxystaker(int index) const {
  // @@protoc_insertion_point(field_get:proto.AllProxyStakers.proxyStaker)
  return _internal_proxystaker(index);
}
inline ::proto::ProxyStaker* AllProxyStakers::_internal_add_proxystaker() {
  return _impl_.proxystaker_.Add();
}
inline ::proto::ProxyStaker* AllProxyStakers::add_proxystaker() {
  ::proto::ProxyStaker* _add = _internal_add_proxystaker();
  // @@protoc_insertion_point(field_add:proto.AllProxyStakers.proxyStaker)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProxyStaker >&
AllProxyStakers::proxystaker() const {
  // @@protoc_insertion_point(field_list:proto.AllProxyStakers.proxyStaker)
  return _impl_.proxystaker_;
}

// -------------------------------------------------------------------

// CryptoGetStakersResponse

// .proto.ResponseHeader header = 1;
inline bool CryptoGetStakersResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool CryptoGetStakersResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& CryptoGetStakersResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& CryptoGetStakersResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetStakersResponse.header)
  return _internal_header();
}
inline void CryptoGetStakersResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetStakersResponse.header)
}
inline ::proto::ResponseHeader* CryptoGetStakersResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* CryptoGetStakersResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetStakersResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* CryptoGetStakersResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* CryptoGetStakersResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetStakersResponse.header)
  return _msg;
}
inline void CryptoGetStakersResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetStakersResponse.header)
}

// .proto.AllProxyStakers stakers = 3;
inline bool CryptoGetStakersResponse::_internal_has_stakers() const {
  return this != internal_default_instance() && _impl_.stakers_ != nullptr;
}
inline bool CryptoGetStakersResponse::has_stakers() const {
  return _internal_has_stakers();
}
inline void CryptoGetStakersResponse::clear_stakers() {
  if (GetArenaForAllocation() == nullptr && _impl_.stakers_ != nullptr) {
    delete _impl_.stakers_;
  }
  _impl_.stakers_ = nullptr;
}
inline const ::proto::AllProxyStakers& CryptoGetStakersResponse::_internal_stakers() const {
  const ::proto::AllProxyStakers* p = _impl_.stakers_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AllProxyStakers&>(
      ::proto::_AllProxyStakers_default_instance_);
}
inline const ::proto::AllProxyStakers& CryptoGetStakersResponse::stakers() const {
  // @@protoc_insertion_point(field_get:proto.CryptoGetStakersResponse.stakers)
  return _internal_stakers();
}
inline void CryptoGetStakersResponse::unsafe_arena_set_allocated_stakers(
    ::proto::AllProxyStakers* stakers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stakers_);
  }
  _impl_.stakers_ = stakers;
  if (stakers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoGetStakersResponse.stakers)
}
inline ::proto::AllProxyStakers* CryptoGetStakersResponse::release_stakers() {
  
  ::proto::AllProxyStakers* temp = _impl_.stakers_;
  _impl_.stakers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AllProxyStakers* CryptoGetStakersResponse::unsafe_arena_release_stakers() {
  // @@protoc_insertion_point(field_release:proto.CryptoGetStakersResponse.stakers)
  
  ::proto::AllProxyStakers* temp = _impl_.stakers_;
  _impl_.stakers_ = nullptr;
  return temp;
}
inline ::proto::AllProxyStakers* CryptoGetStakersResponse::_internal_mutable_stakers() {
  
  if (_impl_.stakers_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AllProxyStakers>(GetArenaForAllocation());
    _impl_.stakers_ = p;
  }
  return _impl_.stakers_;
}
inline ::proto::AllProxyStakers* CryptoGetStakersResponse::mutable_stakers() {
  ::proto::AllProxyStakers* _msg = _internal_mutable_stakers();
  // @@protoc_insertion_point(field_mutable:proto.CryptoGetStakersResponse.stakers)
  return _msg;
}
inline void CryptoGetStakersResponse::set_allocated_stakers(::proto::AllProxyStakers* stakers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stakers_;
  }
  if (stakers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stakers);
    if (message_arena != submessage_arena) {
      stakers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stakers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stakers_ = stakers;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoGetStakersResponse.stakers)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fget_5fstakers_2eproto

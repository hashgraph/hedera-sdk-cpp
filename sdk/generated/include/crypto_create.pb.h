// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_create.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fcreate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fcreate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "duration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fcreate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fcreate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fcreate_2eproto;
namespace proto {
class CryptoCreateTransactionBody;
struct CryptoCreateTransactionBodyDefaultTypeInternal;
extern CryptoCreateTransactionBodyDefaultTypeInternal _CryptoCreateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoCreateTransactionBody* Arena::CreateMaybeMessage<::proto::CryptoCreateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoCreateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoCreateTransactionBody) */ {
 public:
  inline CryptoCreateTransactionBody() : CryptoCreateTransactionBody(nullptr) {}
  ~CryptoCreateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR CryptoCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoCreateTransactionBody(const CryptoCreateTransactionBody& from);
  CryptoCreateTransactionBody(CryptoCreateTransactionBody&& from) noexcept
    : CryptoCreateTransactionBody() {
    *this = ::std::move(from);
  }

  inline CryptoCreateTransactionBody& operator=(const CryptoCreateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoCreateTransactionBody& operator=(CryptoCreateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoCreateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  enum StakedIdCase {
    kStakedAccountId = 15,
    kStakedNodeId = 16,
    STAKED_ID_NOT_SET = 0,
  };

  static inline const CryptoCreateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const CryptoCreateTransactionBody*>(
               &_CryptoCreateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoCreateTransactionBody& a, CryptoCreateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoCreateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoCreateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoCreateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoCreateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoCreateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoCreateTransactionBody& from) {
    CryptoCreateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoCreateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoCreateTransactionBody";
  }
  protected:
  explicit CryptoCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 13,
    kAliasFieldNumber = 18,
    kKeyFieldNumber = 1,
    kProxyAccountIDFieldNumber = 3,
    kAutoRenewPeriodFieldNumber = 9,
    kShardIDFieldNumber = 10,
    kRealmIDFieldNumber = 11,
    kNewRealmAdminKeyFieldNumber = 12,
    kInitialBalanceFieldNumber = 2,
    kSendRecordThresholdFieldNumber = 6,
    kReceiveRecordThresholdFieldNumber = 7,
    kReceiverSigRequiredFieldNumber = 8,
    kDeclineRewardFieldNumber = 17,
    kMaxAutomaticTokenAssociationsFieldNumber = 14,
    kStakedAccountIdFieldNumber = 15,
    kStakedNodeIdFieldNumber = 16,
  };
  // string memo = 13;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes alias = 18;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .proto.Key key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::proto::Key& key() const;
  PROTOBUF_NODISCARD ::proto::Key* release_key();
  ::proto::Key* mutable_key();
  void set_allocated_key(::proto::Key* key);
  private:
  const ::proto::Key& _internal_key() const;
  ::proto::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::proto::Key* key);
  ::proto::Key* unsafe_arena_release_key();

  // .proto.AccountID proxyAccountID = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_proxyaccountid() const;
  private:
  bool _internal_has_proxyaccountid() const;
  public:
  PROTOBUF_DEPRECATED void clear_proxyaccountid();
  PROTOBUF_DEPRECATED const ::proto::AccountID& proxyaccountid() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::AccountID* release_proxyaccountid();
  PROTOBUF_DEPRECATED ::proto::AccountID* mutable_proxyaccountid();
  PROTOBUF_DEPRECATED void set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid);
  private:
  const ::proto::AccountID& _internal_proxyaccountid() const;
  ::proto::AccountID* _internal_mutable_proxyaccountid();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_proxyaccountid(
      ::proto::AccountID* proxyaccountid);
  PROTOBUF_DEPRECATED ::proto::AccountID* unsafe_arena_release_proxyaccountid();

  // .proto.Duration autoRenewPeriod = 9;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.ShardID shardID = 10;
  bool has_shardid() const;
  private:
  bool _internal_has_shardid() const;
  public:
  void clear_shardid();
  const ::proto::ShardID& shardid() const;
  PROTOBUF_NODISCARD ::proto::ShardID* release_shardid();
  ::proto::ShardID* mutable_shardid();
  void set_allocated_shardid(::proto::ShardID* shardid);
  private:
  const ::proto::ShardID& _internal_shardid() const;
  ::proto::ShardID* _internal_mutable_shardid();
  public:
  void unsafe_arena_set_allocated_shardid(
      ::proto::ShardID* shardid);
  ::proto::ShardID* unsafe_arena_release_shardid();

  // .proto.RealmID realmID = 11;
  bool has_realmid() const;
  private:
  bool _internal_has_realmid() const;
  public:
  void clear_realmid();
  const ::proto::RealmID& realmid() const;
  PROTOBUF_NODISCARD ::proto::RealmID* release_realmid();
  ::proto::RealmID* mutable_realmid();
  void set_allocated_realmid(::proto::RealmID* realmid);
  private:
  const ::proto::RealmID& _internal_realmid() const;
  ::proto::RealmID* _internal_mutable_realmid();
  public:
  void unsafe_arena_set_allocated_realmid(
      ::proto::RealmID* realmid);
  ::proto::RealmID* unsafe_arena_release_realmid();

  // .proto.Key newRealmAdminKey = 12;
  bool has_newrealmadminkey() const;
  private:
  bool _internal_has_newrealmadminkey() const;
  public:
  void clear_newrealmadminkey();
  const ::proto::Key& newrealmadminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_newrealmadminkey();
  ::proto::Key* mutable_newrealmadminkey();
  void set_allocated_newrealmadminkey(::proto::Key* newrealmadminkey);
  private:
  const ::proto::Key& _internal_newrealmadminkey() const;
  ::proto::Key* _internal_mutable_newrealmadminkey();
  public:
  void unsafe_arena_set_allocated_newrealmadminkey(
      ::proto::Key* newrealmadminkey);
  ::proto::Key* unsafe_arena_release_newrealmadminkey();

  // uint64 initialBalance = 2;
  void clear_initialbalance();
  uint64_t initialbalance() const;
  void set_initialbalance(uint64_t value);
  private:
  uint64_t _internal_initialbalance() const;
  void _internal_set_initialbalance(uint64_t value);
  public:

  // uint64 sendRecordThreshold = 6 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sendrecordthreshold();
  PROTOBUF_DEPRECATED uint64_t sendrecordthreshold() const;
  PROTOBUF_DEPRECATED void set_sendrecordthreshold(uint64_t value);
  private:
  uint64_t _internal_sendrecordthreshold() const;
  void _internal_set_sendrecordthreshold(uint64_t value);
  public:

  // uint64 receiveRecordThreshold = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_receiverecordthreshold();
  PROTOBUF_DEPRECATED uint64_t receiverecordthreshold() const;
  PROTOBUF_DEPRECATED void set_receiverecordthreshold(uint64_t value);
  private:
  uint64_t _internal_receiverecordthreshold() const;
  void _internal_set_receiverecordthreshold(uint64_t value);
  public:

  // bool receiverSigRequired = 8;
  void clear_receiversigrequired();
  bool receiversigrequired() const;
  void set_receiversigrequired(bool value);
  private:
  bool _internal_receiversigrequired() const;
  void _internal_set_receiversigrequired(bool value);
  public:

  // bool decline_reward = 17;
  void clear_decline_reward();
  bool decline_reward() const;
  void set_decline_reward(bool value);
  private:
  bool _internal_decline_reward() const;
  void _internal_set_decline_reward(bool value);
  public:

  // int32 max_automatic_token_associations = 14;
  void clear_max_automatic_token_associations();
  int32_t max_automatic_token_associations() const;
  void set_max_automatic_token_associations(int32_t value);
  private:
  int32_t _internal_max_automatic_token_associations() const;
  void _internal_set_max_automatic_token_associations(int32_t value);
  public:

  // .proto.AccountID staked_account_id = 15;
  bool has_staked_account_id() const;
  private:
  bool _internal_has_staked_account_id() const;
  public:
  void clear_staked_account_id();
  const ::proto::AccountID& staked_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_staked_account_id();
  ::proto::AccountID* mutable_staked_account_id();
  void set_allocated_staked_account_id(::proto::AccountID* staked_account_id);
  private:
  const ::proto::AccountID& _internal_staked_account_id() const;
  ::proto::AccountID* _internal_mutable_staked_account_id();
  public:
  void unsafe_arena_set_allocated_staked_account_id(
      ::proto::AccountID* staked_account_id);
  ::proto::AccountID* unsafe_arena_release_staked_account_id();

  // int64 staked_node_id = 16;
  bool has_staked_node_id() const;
  private:
  bool _internal_has_staked_node_id() const;
  public:
  void clear_staked_node_id();
  int64_t staked_node_id() const;
  void set_staked_node_id(int64_t value);
  private:
  int64_t _internal_staked_node_id() const;
  void _internal_set_staked_node_id(int64_t value);
  public:

  void clear_staked_id();
  StakedIdCase staked_id_case() const;
  // @@protoc_insertion_point(class_scope:proto.CryptoCreateTransactionBody)
 private:
  class _Internal;
  void set_has_staked_account_id();
  void set_has_staked_node_id();

  inline bool has_staked_id() const;
  inline void clear_has_staked_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::proto::Key* key_;
    ::proto::AccountID* proxyaccountid_;
    ::proto::Duration* autorenewperiod_;
    ::proto::ShardID* shardid_;
    ::proto::RealmID* realmid_;
    ::proto::Key* newrealmadminkey_;
    uint64_t initialbalance_;
    uint64_t sendrecordthreshold_;
    uint64_t receiverecordthreshold_;
    bool receiversigrequired_;
    bool decline_reward_;
    int32_t max_automatic_token_associations_;
    union StakedIdUnion {
      constexpr StakedIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::AccountID* staked_account_id_;
      int64_t staked_node_id_;
    } staked_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fcreate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoCreateTransactionBody

// .proto.Key key = 1;
inline bool CryptoCreateTransactionBody::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool CryptoCreateTransactionBody::has_key() const {
  return _internal_has_key();
}
inline const ::proto::Key& CryptoCreateTransactionBody::_internal_key() const {
  const ::proto::Key* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& CryptoCreateTransactionBody::key() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.key)
  return _internal_key();
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_key(
    ::proto::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.key)
}
inline ::proto::Key* CryptoCreateTransactionBody::release_key() {
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* CryptoCreateTransactionBody::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.key)
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::proto::Key* CryptoCreateTransactionBody::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::proto::Key* CryptoCreateTransactionBody::mutable_key() {
  ::proto::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.key)
  return _msg;
}
inline void CryptoCreateTransactionBody::set_allocated_key(::proto::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.key)
}

// uint64 initialBalance = 2;
inline void CryptoCreateTransactionBody::clear_initialbalance() {
  _impl_.initialbalance_ = uint64_t{0u};
}
inline uint64_t CryptoCreateTransactionBody::_internal_initialbalance() const {
  return _impl_.initialbalance_;
}
inline uint64_t CryptoCreateTransactionBody::initialbalance() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.initialBalance)
  return _internal_initialbalance();
}
inline void CryptoCreateTransactionBody::_internal_set_initialbalance(uint64_t value) {
  
  _impl_.initialbalance_ = value;
}
inline void CryptoCreateTransactionBody::set_initialbalance(uint64_t value) {
  _internal_set_initialbalance(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.initialBalance)
}

// .proto.AccountID proxyAccountID = 3 [deprecated = true];
inline bool CryptoCreateTransactionBody::_internal_has_proxyaccountid() const {
  return this != internal_default_instance() && _impl_.proxyaccountid_ != nullptr;
}
inline bool CryptoCreateTransactionBody::has_proxyaccountid() const {
  return _internal_has_proxyaccountid();
}
inline const ::proto::AccountID& CryptoCreateTransactionBody::_internal_proxyaccountid() const {
  const ::proto::AccountID* p = _impl_.proxyaccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoCreateTransactionBody::proxyaccountid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.proxyAccountID)
  return _internal_proxyaccountid();
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_proxyaccountid(
    ::proto::AccountID* proxyaccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  if (proxyaccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.proxyAccountID)
}
inline ::proto::AccountID* CryptoCreateTransactionBody::release_proxyaccountid() {
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoCreateTransactionBody::unsafe_arena_release_proxyaccountid() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.proxyAccountID)
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoCreateTransactionBody::_internal_mutable_proxyaccountid() {
  
  if (_impl_.proxyaccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.proxyaccountid_ = p;
  }
  return _impl_.proxyaccountid_;
}
inline ::proto::AccountID* CryptoCreateTransactionBody::mutable_proxyaccountid() {
  ::proto::AccountID* _msg = _internal_mutable_proxyaccountid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.proxyAccountID)
  return _msg;
}
inline void CryptoCreateTransactionBody::set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  if (proxyaccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxyaccountid));
    if (message_arena != submessage_arena) {
      proxyaccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxyaccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.proxyAccountID)
}

// uint64 sendRecordThreshold = 6 [deprecated = true];
inline void CryptoCreateTransactionBody::clear_sendrecordthreshold() {
  _impl_.sendrecordthreshold_ = uint64_t{0u};
}
inline uint64_t CryptoCreateTransactionBody::_internal_sendrecordthreshold() const {
  return _impl_.sendrecordthreshold_;
}
inline uint64_t CryptoCreateTransactionBody::sendrecordthreshold() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.sendRecordThreshold)
  return _internal_sendrecordthreshold();
}
inline void CryptoCreateTransactionBody::_internal_set_sendrecordthreshold(uint64_t value) {
  
  _impl_.sendrecordthreshold_ = value;
}
inline void CryptoCreateTransactionBody::set_sendrecordthreshold(uint64_t value) {
  _internal_set_sendrecordthreshold(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.sendRecordThreshold)
}

// uint64 receiveRecordThreshold = 7 [deprecated = true];
inline void CryptoCreateTransactionBody::clear_receiverecordthreshold() {
  _impl_.receiverecordthreshold_ = uint64_t{0u};
}
inline uint64_t CryptoCreateTransactionBody::_internal_receiverecordthreshold() const {
  return _impl_.receiverecordthreshold_;
}
inline uint64_t CryptoCreateTransactionBody::receiverecordthreshold() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.receiveRecordThreshold)
  return _internal_receiverecordthreshold();
}
inline void CryptoCreateTransactionBody::_internal_set_receiverecordthreshold(uint64_t value) {
  
  _impl_.receiverecordthreshold_ = value;
}
inline void CryptoCreateTransactionBody::set_receiverecordthreshold(uint64_t value) {
  _internal_set_receiverecordthreshold(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.receiveRecordThreshold)
}

// bool receiverSigRequired = 8;
inline void CryptoCreateTransactionBody::clear_receiversigrequired() {
  _impl_.receiversigrequired_ = false;
}
inline bool CryptoCreateTransactionBody::_internal_receiversigrequired() const {
  return _impl_.receiversigrequired_;
}
inline bool CryptoCreateTransactionBody::receiversigrequired() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.receiverSigRequired)
  return _internal_receiversigrequired();
}
inline void CryptoCreateTransactionBody::_internal_set_receiversigrequired(bool value) {
  
  _impl_.receiversigrequired_ = value;
}
inline void CryptoCreateTransactionBody::set_receiversigrequired(bool value) {
  _internal_set_receiversigrequired(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.receiverSigRequired)
}

// .proto.Duration autoRenewPeriod = 9;
inline bool CryptoCreateTransactionBody::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool CryptoCreateTransactionBody::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& CryptoCreateTransactionBody::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& CryptoCreateTransactionBody::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.autoRenewPeriod)
}
inline ::proto::Duration* CryptoCreateTransactionBody::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* CryptoCreateTransactionBody::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* CryptoCreateTransactionBody::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* CryptoCreateTransactionBody::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.autoRenewPeriod)
  return _msg;
}
inline void CryptoCreateTransactionBody::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.autoRenewPeriod)
}

// .proto.ShardID shardID = 10;
inline bool CryptoCreateTransactionBody::_internal_has_shardid() const {
  return this != internal_default_instance() && _impl_.shardid_ != nullptr;
}
inline bool CryptoCreateTransactionBody::has_shardid() const {
  return _internal_has_shardid();
}
inline const ::proto::ShardID& CryptoCreateTransactionBody::_internal_shardid() const {
  const ::proto::ShardID* p = _impl_.shardid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ShardID&>(
      ::proto::_ShardID_default_instance_);
}
inline const ::proto::ShardID& CryptoCreateTransactionBody::shardid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.shardID)
  return _internal_shardid();
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_shardid(
    ::proto::ShardID* shardid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shardid_);
  }
  _impl_.shardid_ = shardid;
  if (shardid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.shardID)
}
inline ::proto::ShardID* CryptoCreateTransactionBody::release_shardid() {
  
  ::proto::ShardID* temp = _impl_.shardid_;
  _impl_.shardid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ShardID* CryptoCreateTransactionBody::unsafe_arena_release_shardid() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.shardID)
  
  ::proto::ShardID* temp = _impl_.shardid_;
  _impl_.shardid_ = nullptr;
  return temp;
}
inline ::proto::ShardID* CryptoCreateTransactionBody::_internal_mutable_shardid() {
  
  if (_impl_.shardid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ShardID>(GetArenaForAllocation());
    _impl_.shardid_ = p;
  }
  return _impl_.shardid_;
}
inline ::proto::ShardID* CryptoCreateTransactionBody::mutable_shardid() {
  ::proto::ShardID* _msg = _internal_mutable_shardid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.shardID)
  return _msg;
}
inline void CryptoCreateTransactionBody::set_allocated_shardid(::proto::ShardID* shardid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shardid_);
  }
  if (shardid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shardid));
    if (message_arena != submessage_arena) {
      shardid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shardid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shardid_ = shardid;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.shardID)
}

// .proto.RealmID realmID = 11;
inline bool CryptoCreateTransactionBody::_internal_has_realmid() const {
  return this != internal_default_instance() && _impl_.realmid_ != nullptr;
}
inline bool CryptoCreateTransactionBody::has_realmid() const {
  return _internal_has_realmid();
}
inline const ::proto::RealmID& CryptoCreateTransactionBody::_internal_realmid() const {
  const ::proto::RealmID* p = _impl_.realmid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RealmID&>(
      ::proto::_RealmID_default_instance_);
}
inline const ::proto::RealmID& CryptoCreateTransactionBody::realmid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.realmID)
  return _internal_realmid();
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_realmid(
    ::proto::RealmID* realmid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realmid_);
  }
  _impl_.realmid_ = realmid;
  if (realmid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.realmID)
}
inline ::proto::RealmID* CryptoCreateTransactionBody::release_realmid() {
  
  ::proto::RealmID* temp = _impl_.realmid_;
  _impl_.realmid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RealmID* CryptoCreateTransactionBody::unsafe_arena_release_realmid() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.realmID)
  
  ::proto::RealmID* temp = _impl_.realmid_;
  _impl_.realmid_ = nullptr;
  return temp;
}
inline ::proto::RealmID* CryptoCreateTransactionBody::_internal_mutable_realmid() {
  
  if (_impl_.realmid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RealmID>(GetArenaForAllocation());
    _impl_.realmid_ = p;
  }
  return _impl_.realmid_;
}
inline ::proto::RealmID* CryptoCreateTransactionBody::mutable_realmid() {
  ::proto::RealmID* _msg = _internal_mutable_realmid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.realmID)
  return _msg;
}
inline void CryptoCreateTransactionBody::set_allocated_realmid(::proto::RealmID* realmid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realmid_);
  }
  if (realmid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realmid));
    if (message_arena != submessage_arena) {
      realmid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realmid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.realmid_ = realmid;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.realmID)
}

// .proto.Key newRealmAdminKey = 12;
inline bool CryptoCreateTransactionBody::_internal_has_newrealmadminkey() const {
  return this != internal_default_instance() && _impl_.newrealmadminkey_ != nullptr;
}
inline bool CryptoCreateTransactionBody::has_newrealmadminkey() const {
  return _internal_has_newrealmadminkey();
}
inline const ::proto::Key& CryptoCreateTransactionBody::_internal_newrealmadminkey() const {
  const ::proto::Key* p = _impl_.newrealmadminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& CryptoCreateTransactionBody::newrealmadminkey() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.newRealmAdminKey)
  return _internal_newrealmadminkey();
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_newrealmadminkey(
    ::proto::Key* newrealmadminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrealmadminkey_);
  }
  _impl_.newrealmadminkey_ = newrealmadminkey;
  if (newrealmadminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.newRealmAdminKey)
}
inline ::proto::Key* CryptoCreateTransactionBody::release_newrealmadminkey() {
  
  ::proto::Key* temp = _impl_.newrealmadminkey_;
  _impl_.newrealmadminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* CryptoCreateTransactionBody::unsafe_arena_release_newrealmadminkey() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.newRealmAdminKey)
  
  ::proto::Key* temp = _impl_.newrealmadminkey_;
  _impl_.newrealmadminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* CryptoCreateTransactionBody::_internal_mutable_newrealmadminkey() {
  
  if (_impl_.newrealmadminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.newrealmadminkey_ = p;
  }
  return _impl_.newrealmadminkey_;
}
inline ::proto::Key* CryptoCreateTransactionBody::mutable_newrealmadminkey() {
  ::proto::Key* _msg = _internal_mutable_newrealmadminkey();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.newRealmAdminKey)
  return _msg;
}
inline void CryptoCreateTransactionBody::set_allocated_newrealmadminkey(::proto::Key* newrealmadminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrealmadminkey_);
  }
  if (newrealmadminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newrealmadminkey));
    if (message_arena != submessage_arena) {
      newrealmadminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrealmadminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrealmadminkey_ = newrealmadminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.newRealmAdminKey)
}

// string memo = 13;
inline void CryptoCreateTransactionBody::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& CryptoCreateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CryptoCreateTransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.memo)
}
inline std::string* CryptoCreateTransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.memo)
  return _s;
}
inline const std::string& CryptoCreateTransactionBody::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void CryptoCreateTransactionBody::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* CryptoCreateTransactionBody::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* CryptoCreateTransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.memo)
  return _impl_.memo_.Release();
}
inline void CryptoCreateTransactionBody::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.memo)
}

// int32 max_automatic_token_associations = 14;
inline void CryptoCreateTransactionBody::clear_max_automatic_token_associations() {
  _impl_.max_automatic_token_associations_ = 0;
}
inline int32_t CryptoCreateTransactionBody::_internal_max_automatic_token_associations() const {
  return _impl_.max_automatic_token_associations_;
}
inline int32_t CryptoCreateTransactionBody::max_automatic_token_associations() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.max_automatic_token_associations)
  return _internal_max_automatic_token_associations();
}
inline void CryptoCreateTransactionBody::_internal_set_max_automatic_token_associations(int32_t value) {
  
  _impl_.max_automatic_token_associations_ = value;
}
inline void CryptoCreateTransactionBody::set_max_automatic_token_associations(int32_t value) {
  _internal_set_max_automatic_token_associations(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.max_automatic_token_associations)
}

// .proto.AccountID staked_account_id = 15;
inline bool CryptoCreateTransactionBody::_internal_has_staked_account_id() const {
  return staked_id_case() == kStakedAccountId;
}
inline bool CryptoCreateTransactionBody::has_staked_account_id() const {
  return _internal_has_staked_account_id();
}
inline void CryptoCreateTransactionBody::set_has_staked_account_id() {
  _impl_._oneof_case_[0] = kStakedAccountId;
}
inline ::proto::AccountID* CryptoCreateTransactionBody::release_staked_account_id() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::AccountID& CryptoCreateTransactionBody::_internal_staked_account_id() const {
  return _internal_has_staked_account_id()
      ? *_impl_.staked_id_.staked_account_id_
      : reinterpret_cast< ::proto::AccountID&>(::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoCreateTransactionBody::staked_account_id() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.staked_account_id)
  return _internal_staked_account_id();
}
inline ::proto::AccountID* CryptoCreateTransactionBody::unsafe_arena_release_staked_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoCreateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoCreateTransactionBody::unsafe_arena_set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  clear_staked_id();
  if (staked_account_id) {
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoCreateTransactionBody.staked_account_id)
}
inline ::proto::AccountID* CryptoCreateTransactionBody::_internal_mutable_staked_account_id() {
  if (!_internal_has_staked_account_id()) {
    clear_staked_id();
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = CreateMaybeMessage< ::proto::AccountID >(GetArenaForAllocation());
  }
  return _impl_.staked_id_.staked_account_id_;
}
inline ::proto::AccountID* CryptoCreateTransactionBody::mutable_staked_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_staked_account_id();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.staked_account_id)
  return _msg;
}

// int64 staked_node_id = 16;
inline bool CryptoCreateTransactionBody::_internal_has_staked_node_id() const {
  return staked_id_case() == kStakedNodeId;
}
inline bool CryptoCreateTransactionBody::has_staked_node_id() const {
  return _internal_has_staked_node_id();
}
inline void CryptoCreateTransactionBody::set_has_staked_node_id() {
  _impl_._oneof_case_[0] = kStakedNodeId;
}
inline void CryptoCreateTransactionBody::clear_staked_node_id() {
  if (_internal_has_staked_node_id()) {
    _impl_.staked_id_.staked_node_id_ = int64_t{0};
    clear_has_staked_id();
  }
}
inline int64_t CryptoCreateTransactionBody::_internal_staked_node_id() const {
  if (_internal_has_staked_node_id()) {
    return _impl_.staked_id_.staked_node_id_;
  }
  return int64_t{0};
}
inline void CryptoCreateTransactionBody::_internal_set_staked_node_id(int64_t value) {
  if (!_internal_has_staked_node_id()) {
    clear_staked_id();
    set_has_staked_node_id();
  }
  _impl_.staked_id_.staked_node_id_ = value;
}
inline int64_t CryptoCreateTransactionBody::staked_node_id() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.staked_node_id)
  return _internal_staked_node_id();
}
inline void CryptoCreateTransactionBody::set_staked_node_id(int64_t value) {
  _internal_set_staked_node_id(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.staked_node_id)
}

// bool decline_reward = 17;
inline void CryptoCreateTransactionBody::clear_decline_reward() {
  _impl_.decline_reward_ = false;
}
inline bool CryptoCreateTransactionBody::_internal_decline_reward() const {
  return _impl_.decline_reward_;
}
inline bool CryptoCreateTransactionBody::decline_reward() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.decline_reward)
  return _internal_decline_reward();
}
inline void CryptoCreateTransactionBody::_internal_set_decline_reward(bool value) {
  
  _impl_.decline_reward_ = value;
}
inline void CryptoCreateTransactionBody::set_decline_reward(bool value) {
  _internal_set_decline_reward(value);
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.decline_reward)
}

// bytes alias = 18;
inline void CryptoCreateTransactionBody::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& CryptoCreateTransactionBody::alias() const {
  // @@protoc_insertion_point(field_get:proto.CryptoCreateTransactionBody.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CryptoCreateTransactionBody::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CryptoCreateTransactionBody.alias)
}
inline std::string* CryptoCreateTransactionBody::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:proto.CryptoCreateTransactionBody.alias)
  return _s;
}
inline const std::string& CryptoCreateTransactionBody::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void CryptoCreateTransactionBody::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* CryptoCreateTransactionBody::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* CryptoCreateTransactionBody::release_alias() {
  // @@protoc_insertion_point(field_release:proto.CryptoCreateTransactionBody.alias)
  return _impl_.alias_.Release();
}
inline void CryptoCreateTransactionBody::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoCreateTransactionBody.alias)
}

inline bool CryptoCreateTransactionBody::has_staked_id() const {
  return staked_id_case() != STAKED_ID_NOT_SET;
}
inline void CryptoCreateTransactionBody::clear_has_staked_id() {
  _impl_._oneof_case_[0] = STAKED_ID_NOT_SET;
}
inline CryptoCreateTransactionBody::StakedIdCase CryptoCreateTransactionBody::staked_id_case() const {
  return CryptoCreateTransactionBody::StakedIdCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fcreate_2eproto

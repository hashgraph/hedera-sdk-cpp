// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contract_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contract_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "duration.pb.h"
#include "timestamp.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_5fupdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fupdate_2eproto;
namespace proto {
class ContractUpdateTransactionBody;
struct ContractUpdateTransactionBodyDefaultTypeInternal;
extern ContractUpdateTransactionBodyDefaultTypeInternal _ContractUpdateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ContractUpdateTransactionBody* Arena::CreateMaybeMessage<::proto::ContractUpdateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ContractUpdateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractUpdateTransactionBody) */ {
 public:
  inline ContractUpdateTransactionBody() : ContractUpdateTransactionBody(nullptr) {}
  ~ContractUpdateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR ContractUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractUpdateTransactionBody(const ContractUpdateTransactionBody& from);
  ContractUpdateTransactionBody(ContractUpdateTransactionBody&& from) noexcept
    : ContractUpdateTransactionBody() {
    *this = ::std::move(from);
  }

  inline ContractUpdateTransactionBody& operator=(const ContractUpdateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractUpdateTransactionBody& operator=(ContractUpdateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractUpdateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  enum MemoFieldCase {
    kMemo = 9,
    kMemoWrapper = 10,
    MEMOFIELD_NOT_SET = 0,
  };

  enum StakedIdCase {
    kStakedAccountId = 13,
    kStakedNodeId = 14,
    STAKED_ID_NOT_SET = 0,
  };

  static inline const ContractUpdateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const ContractUpdateTransactionBody*>(
               &_ContractUpdateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractUpdateTransactionBody& a, ContractUpdateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractUpdateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractUpdateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractUpdateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractUpdateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractUpdateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractUpdateTransactionBody& from) {
    ContractUpdateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractUpdateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractUpdateTransactionBody";
  }
  protected:
  explicit ContractUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIDFieldNumber = 1,
    kExpirationTimeFieldNumber = 2,
    kAdminKeyFieldNumber = 3,
    kProxyAccountIDFieldNumber = 6,
    kAutoRenewPeriodFieldNumber = 7,
    kFileIDFieldNumber = 8,
    kMaxAutomaticTokenAssociationsFieldNumber = 11,
    kAutoRenewAccountIdFieldNumber = 12,
    kDeclineRewardFieldNumber = 15,
    kMemoFieldNumber = 9,
    kMemoWrapperFieldNumber = 10,
    kStakedAccountIdFieldNumber = 13,
    kStakedNodeIdFieldNumber = 14,
  };
  // .proto.ContractID contractID = 1;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // .proto.Timestamp expirationTime = 2;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.Key adminKey = 3;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.AccountID proxyAccountID = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_proxyaccountid() const;
  private:
  bool _internal_has_proxyaccountid() const;
  public:
  PROTOBUF_DEPRECATED void clear_proxyaccountid();
  PROTOBUF_DEPRECATED const ::proto::AccountID& proxyaccountid() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::AccountID* release_proxyaccountid();
  PROTOBUF_DEPRECATED ::proto::AccountID* mutable_proxyaccountid();
  PROTOBUF_DEPRECATED void set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid);
  private:
  const ::proto::AccountID& _internal_proxyaccountid() const;
  ::proto::AccountID* _internal_mutable_proxyaccountid();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_proxyaccountid(
      ::proto::AccountID* proxyaccountid);
  PROTOBUF_DEPRECATED ::proto::AccountID* unsafe_arena_release_proxyaccountid();

  // .proto.Duration autoRenewPeriod = 7;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.FileID fileID = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  PROTOBUF_DEPRECATED void clear_fileid();
  PROTOBUF_DEPRECATED const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::FileID* release_fileid();
  PROTOBUF_DEPRECATED ::proto::FileID* mutable_fileid();
  PROTOBUF_DEPRECATED void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  PROTOBUF_DEPRECATED ::proto::FileID* unsafe_arena_release_fileid();

  // .google.protobuf.Int32Value max_automatic_token_associations = 11;
  bool has_max_automatic_token_associations() const;
  private:
  bool _internal_has_max_automatic_token_associations() const;
  public:
  void clear_max_automatic_token_associations();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_automatic_token_associations() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_max_automatic_token_associations();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_max_automatic_token_associations();
  void set_allocated_max_automatic_token_associations(::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_max_automatic_token_associations() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_max_automatic_token_associations();
  public:
  void unsafe_arena_set_allocated_max_automatic_token_associations(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_max_automatic_token_associations();

  // .proto.AccountID auto_renew_account_id = 12;
  bool has_auto_renew_account_id() const;
  private:
  bool _internal_has_auto_renew_account_id() const;
  public:
  void clear_auto_renew_account_id();
  const ::proto::AccountID& auto_renew_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_auto_renew_account_id();
  ::proto::AccountID* mutable_auto_renew_account_id();
  void set_allocated_auto_renew_account_id(::proto::AccountID* auto_renew_account_id);
  private:
  const ::proto::AccountID& _internal_auto_renew_account_id() const;
  ::proto::AccountID* _internal_mutable_auto_renew_account_id();
  public:
  void unsafe_arena_set_allocated_auto_renew_account_id(
      ::proto::AccountID* auto_renew_account_id);
  ::proto::AccountID* unsafe_arena_release_auto_renew_account_id();

  // .google.protobuf.BoolValue decline_reward = 15;
  bool has_decline_reward() const;
  private:
  bool _internal_has_decline_reward() const;
  public:
  void clear_decline_reward();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& decline_reward() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_decline_reward();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_decline_reward();
  void set_allocated_decline_reward(::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_decline_reward() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_decline_reward();
  public:
  void unsafe_arena_set_allocated_decline_reward(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_decline_reward();

  // string memo = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  PROTOBUF_DEPRECATED void clear_memo();
  PROTOBUF_DEPRECATED const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_memo(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_memo();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_memo();
  PROTOBUF_DEPRECATED void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .google.protobuf.StringValue memoWrapper = 10;
  bool has_memowrapper() const;
  private:
  bool _internal_has_memowrapper() const;
  public:
  void clear_memowrapper();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& memowrapper() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_memowrapper();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_memowrapper();
  void set_allocated_memowrapper(::PROTOBUF_NAMESPACE_ID::StringValue* memowrapper);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_memowrapper() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_memowrapper();
  public:
  void unsafe_arena_set_allocated_memowrapper(
      ::PROTOBUF_NAMESPACE_ID::StringValue* memowrapper);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_memowrapper();

  // .proto.AccountID staked_account_id = 13;
  bool has_staked_account_id() const;
  private:
  bool _internal_has_staked_account_id() const;
  public:
  void clear_staked_account_id();
  const ::proto::AccountID& staked_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_staked_account_id();
  ::proto::AccountID* mutable_staked_account_id();
  void set_allocated_staked_account_id(::proto::AccountID* staked_account_id);
  private:
  const ::proto::AccountID& _internal_staked_account_id() const;
  ::proto::AccountID* _internal_mutable_staked_account_id();
  public:
  void unsafe_arena_set_allocated_staked_account_id(
      ::proto::AccountID* staked_account_id);
  ::proto::AccountID* unsafe_arena_release_staked_account_id();

  // int64 staked_node_id = 14;
  bool has_staked_node_id() const;
  private:
  bool _internal_has_staked_node_id() const;
  public:
  void clear_staked_node_id();
  int64_t staked_node_id() const;
  void set_staked_node_id(int64_t value);
  private:
  int64_t _internal_staked_node_id() const;
  void _internal_set_staked_node_id(int64_t value);
  public:

  void clear_memoField();
  MemoFieldCase memoField_case() const;
  void clear_staked_id();
  StakedIdCase staked_id_case() const;
  // @@protoc_insertion_point(class_scope:proto.ContractUpdateTransactionBody)
 private:
  class _Internal;
  void set_has_memo();
  void set_has_memowrapper();
  void set_has_staked_account_id();
  void set_has_staked_node_id();

  inline bool has_memoField() const;
  inline void clear_has_memoField();

  inline bool has_staked_id() const;
  inline void clear_has_staked_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ContractID* contractid_;
    ::proto::Timestamp* expirationtime_;
    ::proto::Key* adminkey_;
    ::proto::AccountID* proxyaccountid_;
    ::proto::Duration* autorenewperiod_;
    ::proto::FileID* fileid_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations_;
    ::proto::AccountID* auto_renew_account_id_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward_;
    union MemoFieldUnion {
      constexpr MemoFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
      ::PROTOBUF_NAMESPACE_ID::StringValue* memowrapper_;
    } memoField_;
    union StakedIdUnion {
      constexpr StakedIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::AccountID* staked_account_id_;
      int64_t staked_node_id_;
    } staked_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractUpdateTransactionBody

// .proto.ContractID contractID = 1;
inline bool ContractUpdateTransactionBody::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& ContractUpdateTransactionBody::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& ContractUpdateTransactionBody::contractid() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.contractID)
  return _internal_contractid();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.contractID)
}
inline ::proto::ContractID* ContractUpdateTransactionBody::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* ContractUpdateTransactionBody::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* ContractUpdateTransactionBody::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* ContractUpdateTransactionBody::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.contractID)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.contractID)
}

// .proto.Timestamp expirationTime = 2;
inline bool ContractUpdateTransactionBody::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& ContractUpdateTransactionBody::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ContractUpdateTransactionBody::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.expirationTime)
  return _internal_expirationtime();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.expirationTime)
}
inline ::proto::Timestamp* ContractUpdateTransactionBody::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ContractUpdateTransactionBody::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ContractUpdateTransactionBody::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* ContractUpdateTransactionBody::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.expirationTime)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.expirationTime)
}

// .proto.Key adminKey = 3;
inline bool ContractUpdateTransactionBody::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ContractUpdateTransactionBody::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ContractUpdateTransactionBody::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.adminKey)
  return _internal_adminkey();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.adminKey)
}
inline ::proto::Key* ContractUpdateTransactionBody::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ContractUpdateTransactionBody::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ContractUpdateTransactionBody::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ContractUpdateTransactionBody::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.adminKey)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.adminKey)
}

// .proto.AccountID proxyAccountID = 6 [deprecated = true];
inline bool ContractUpdateTransactionBody::_internal_has_proxyaccountid() const {
  return this != internal_default_instance() && _impl_.proxyaccountid_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_proxyaccountid() const {
  return _internal_has_proxyaccountid();
}
inline const ::proto::AccountID& ContractUpdateTransactionBody::_internal_proxyaccountid() const {
  const ::proto::AccountID* p = _impl_.proxyaccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractUpdateTransactionBody::proxyaccountid() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.proxyAccountID)
  return _internal_proxyaccountid();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_proxyaccountid(
    ::proto::AccountID* proxyaccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  if (proxyaccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.proxyAccountID)
}
inline ::proto::AccountID* ContractUpdateTransactionBody::release_proxyaccountid() {
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::unsafe_arena_release_proxyaccountid() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.proxyAccountID)
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::_internal_mutable_proxyaccountid() {
  
  if (_impl_.proxyaccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.proxyaccountid_ = p;
  }
  return _impl_.proxyaccountid_;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::mutable_proxyaccountid() {
  ::proto::AccountID* _msg = _internal_mutable_proxyaccountid();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.proxyAccountID)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  if (proxyaccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxyaccountid));
    if (message_arena != submessage_arena) {
      proxyaccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxyaccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.proxyAccountID)
}

// .proto.Duration autoRenewPeriod = 7;
inline bool ContractUpdateTransactionBody::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& ContractUpdateTransactionBody::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& ContractUpdateTransactionBody::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.autoRenewPeriod)
}
inline ::proto::Duration* ContractUpdateTransactionBody::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* ContractUpdateTransactionBody::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* ContractUpdateTransactionBody::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* ContractUpdateTransactionBody::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.autoRenewPeriod)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.autoRenewPeriod)
}

// .proto.FileID fileID = 8 [deprecated = true];
inline bool ContractUpdateTransactionBody::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& ContractUpdateTransactionBody::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& ContractUpdateTransactionBody::fileid() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.fileID)
  return _internal_fileid();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.fileID)
}
inline ::proto::FileID* ContractUpdateTransactionBody::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* ContractUpdateTransactionBody::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* ContractUpdateTransactionBody::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* ContractUpdateTransactionBody::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.fileID)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.fileID)
}

// string memo = 9 [deprecated = true];
inline bool ContractUpdateTransactionBody::_internal_has_memo() const {
  return memoField_case() == kMemo;
}
inline bool ContractUpdateTransactionBody::has_memo() const {
  return _internal_has_memo();
}
inline void ContractUpdateTransactionBody::set_has_memo() {
  _impl_._oneof_case_[0] = kMemo;
}
inline void ContractUpdateTransactionBody::clear_memo() {
  if (_internal_has_memo()) {
    _impl_.memoField_.memo_.Destroy();
    clear_has_memoField();
  }
}
inline const std::string& ContractUpdateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline void ContractUpdateTransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_memo()) {
    clear_memoField();
    set_has_memo();
    _impl_.memoField_.memo_.InitDefault();
  }
  _impl_.memoField_.memo_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractUpdateTransactionBody.memo)
}
inline std::string* ContractUpdateTransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.memo)
  return _s;
}
inline const std::string& ContractUpdateTransactionBody::_internal_memo() const {
  if (_internal_has_memo()) {
    return _impl_.memoField_.memo_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ContractUpdateTransactionBody::_internal_set_memo(const std::string& value) {
  if (!_internal_has_memo()) {
    clear_memoField();
    set_has_memo();
    _impl_.memoField_.memo_.InitDefault();
  }
  _impl_.memoField_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractUpdateTransactionBody::_internal_mutable_memo() {
  if (!_internal_has_memo()) {
    clear_memoField();
    set_has_memo();
    _impl_.memoField_.memo_.InitDefault();
  }
  return _impl_.memoField_.memo_.Mutable(      GetArenaForAllocation());
}
inline std::string* ContractUpdateTransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.memo)
  if (_internal_has_memo()) {
    clear_has_memoField();
    return _impl_.memoField_.memo_.Release();
  } else {
    return nullptr;
  }
}
inline void ContractUpdateTransactionBody::set_allocated_memo(std::string* memo) {
  if (has_memoField()) {
    clear_memoField();
  }
  if (memo != nullptr) {
    set_has_memo();
    _impl_.memoField_.memo_.InitAllocated(memo, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.memo)
}

// .google.protobuf.StringValue memoWrapper = 10;
inline bool ContractUpdateTransactionBody::_internal_has_memowrapper() const {
  return memoField_case() == kMemoWrapper;
}
inline bool ContractUpdateTransactionBody::has_memowrapper() const {
  return _internal_has_memowrapper();
}
inline void ContractUpdateTransactionBody::set_has_memowrapper() {
  _impl_._oneof_case_[0] = kMemoWrapper;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ContractUpdateTransactionBody::release_memowrapper() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.memoWrapper)
  if (_internal_has_memowrapper()) {
    clear_has_memoField();
    ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memoField_.memowrapper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.memoField_.memowrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ContractUpdateTransactionBody::_internal_memowrapper() const {
  return _internal_has_memowrapper()
      ? *_impl_.memoField_.memowrapper_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::StringValue&>(::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ContractUpdateTransactionBody::memowrapper() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.memoWrapper)
  return _internal_memowrapper();
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ContractUpdateTransactionBody::unsafe_arena_release_memowrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ContractUpdateTransactionBody.memoWrapper)
  if (_internal_has_memowrapper()) {
    clear_has_memoField();
    ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memoField_.memowrapper_;
    _impl_.memoField_.memowrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_memowrapper(::PROTOBUF_NAMESPACE_ID::StringValue* memowrapper) {
  clear_memoField();
  if (memowrapper) {
    set_has_memowrapper();
    _impl_.memoField_.memowrapper_ = memowrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.memoWrapper)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ContractUpdateTransactionBody::_internal_mutable_memowrapper() {
  if (!_internal_has_memowrapper()) {
    clear_memoField();
    set_has_memowrapper();
    _impl_.memoField_.memowrapper_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::StringValue >(GetArenaForAllocation());
  }
  return _impl_.memoField_.memowrapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ContractUpdateTransactionBody::mutable_memowrapper() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_memowrapper();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.memoWrapper)
  return _msg;
}

// .google.protobuf.Int32Value max_automatic_token_associations = 11;
inline bool ContractUpdateTransactionBody::_internal_has_max_automatic_token_associations() const {
  return this != internal_default_instance() && _impl_.max_automatic_token_associations_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_max_automatic_token_associations() const {
  return _internal_has_max_automatic_token_associations();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ContractUpdateTransactionBody::_internal_max_automatic_token_associations() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.max_automatic_token_associations_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& ContractUpdateTransactionBody::max_automatic_token_associations() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.max_automatic_token_associations)
  return _internal_max_automatic_token_associations();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_max_automatic_token_associations(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_automatic_token_associations_);
  }
  _impl_.max_automatic_token_associations_ = max_automatic_token_associations;
  if (max_automatic_token_associations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.max_automatic_token_associations)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ContractUpdateTransactionBody::release_max_automatic_token_associations() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_automatic_token_associations_;
  _impl_.max_automatic_token_associations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ContractUpdateTransactionBody::unsafe_arena_release_max_automatic_token_associations() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.max_automatic_token_associations)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_automatic_token_associations_;
  _impl_.max_automatic_token_associations_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ContractUpdateTransactionBody::_internal_mutable_max_automatic_token_associations() {
  
  if (_impl_.max_automatic_token_associations_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.max_automatic_token_associations_ = p;
  }
  return _impl_.max_automatic_token_associations_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* ContractUpdateTransactionBody::mutable_max_automatic_token_associations() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_max_automatic_token_associations();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.max_automatic_token_associations)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_max_automatic_token_associations(::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_automatic_token_associations_);
  }
  if (max_automatic_token_associations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_automatic_token_associations));
    if (message_arena != submessage_arena) {
      max_automatic_token_associations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_automatic_token_associations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_automatic_token_associations_ = max_automatic_token_associations;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.max_automatic_token_associations)
}

// .proto.AccountID auto_renew_account_id = 12;
inline bool ContractUpdateTransactionBody::_internal_has_auto_renew_account_id() const {
  return this != internal_default_instance() && _impl_.auto_renew_account_id_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_auto_renew_account_id() const {
  return _internal_has_auto_renew_account_id();
}
inline const ::proto::AccountID& ContractUpdateTransactionBody::_internal_auto_renew_account_id() const {
  const ::proto::AccountID* p = _impl_.auto_renew_account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractUpdateTransactionBody::auto_renew_account_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.auto_renew_account_id)
  return _internal_auto_renew_account_id();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_auto_renew_account_id(
    ::proto::AccountID* auto_renew_account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_account_id_);
  }
  _impl_.auto_renew_account_id_ = auto_renew_account_id;
  if (auto_renew_account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.auto_renew_account_id)
}
inline ::proto::AccountID* ContractUpdateTransactionBody::release_auto_renew_account_id() {
  
  ::proto::AccountID* temp = _impl_.auto_renew_account_id_;
  _impl_.auto_renew_account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::unsafe_arena_release_auto_renew_account_id() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.auto_renew_account_id)
  
  ::proto::AccountID* temp = _impl_.auto_renew_account_id_;
  _impl_.auto_renew_account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::_internal_mutable_auto_renew_account_id() {
  
  if (_impl_.auto_renew_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.auto_renew_account_id_ = p;
  }
  return _impl_.auto_renew_account_id_;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::mutable_auto_renew_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_auto_renew_account_id();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.auto_renew_account_id)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_auto_renew_account_id(::proto::AccountID* auto_renew_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_account_id_);
  }
  if (auto_renew_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_renew_account_id));
    if (message_arena != submessage_arena) {
      auto_renew_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_renew_account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_renew_account_id_ = auto_renew_account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.auto_renew_account_id)
}

// .proto.AccountID staked_account_id = 13;
inline bool ContractUpdateTransactionBody::_internal_has_staked_account_id() const {
  return staked_id_case() == kStakedAccountId;
}
inline bool ContractUpdateTransactionBody::has_staked_account_id() const {
  return _internal_has_staked_account_id();
}
inline void ContractUpdateTransactionBody::set_has_staked_account_id() {
  _impl_._oneof_case_[1] = kStakedAccountId;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::release_staked_account_id() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::AccountID& ContractUpdateTransactionBody::_internal_staked_account_id() const {
  return _internal_has_staked_account_id()
      ? *_impl_.staked_id_.staked_account_id_
      : reinterpret_cast< ::proto::AccountID&>(::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractUpdateTransactionBody::staked_account_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.staked_account_id)
  return _internal_staked_account_id();
}
inline ::proto::AccountID* ContractUpdateTransactionBody::unsafe_arena_release_staked_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ContractUpdateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  clear_staked_id();
  if (staked_account_id) {
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.staked_account_id)
}
inline ::proto::AccountID* ContractUpdateTransactionBody::_internal_mutable_staked_account_id() {
  if (!_internal_has_staked_account_id()) {
    clear_staked_id();
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = CreateMaybeMessage< ::proto::AccountID >(GetArenaForAllocation());
  }
  return _impl_.staked_id_.staked_account_id_;
}
inline ::proto::AccountID* ContractUpdateTransactionBody::mutable_staked_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_staked_account_id();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.staked_account_id)
  return _msg;
}

// int64 staked_node_id = 14;
inline bool ContractUpdateTransactionBody::_internal_has_staked_node_id() const {
  return staked_id_case() == kStakedNodeId;
}
inline bool ContractUpdateTransactionBody::has_staked_node_id() const {
  return _internal_has_staked_node_id();
}
inline void ContractUpdateTransactionBody::set_has_staked_node_id() {
  _impl_._oneof_case_[1] = kStakedNodeId;
}
inline void ContractUpdateTransactionBody::clear_staked_node_id() {
  if (_internal_has_staked_node_id()) {
    _impl_.staked_id_.staked_node_id_ = int64_t{0};
    clear_has_staked_id();
  }
}
inline int64_t ContractUpdateTransactionBody::_internal_staked_node_id() const {
  if (_internal_has_staked_node_id()) {
    return _impl_.staked_id_.staked_node_id_;
  }
  return int64_t{0};
}
inline void ContractUpdateTransactionBody::_internal_set_staked_node_id(int64_t value) {
  if (!_internal_has_staked_node_id()) {
    clear_staked_id();
    set_has_staked_node_id();
  }
  _impl_.staked_id_.staked_node_id_ = value;
}
inline int64_t ContractUpdateTransactionBody::staked_node_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.staked_node_id)
  return _internal_staked_node_id();
}
inline void ContractUpdateTransactionBody::set_staked_node_id(int64_t value) {
  _internal_set_staked_node_id(value);
  // @@protoc_insertion_point(field_set:proto.ContractUpdateTransactionBody.staked_node_id)
}

// .google.protobuf.BoolValue decline_reward = 15;
inline bool ContractUpdateTransactionBody::_internal_has_decline_reward() const {
  return this != internal_default_instance() && _impl_.decline_reward_ != nullptr;
}
inline bool ContractUpdateTransactionBody::has_decline_reward() const {
  return _internal_has_decline_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ContractUpdateTransactionBody::_internal_decline_reward() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.decline_reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& ContractUpdateTransactionBody::decline_reward() const {
  // @@protoc_insertion_point(field_get:proto.ContractUpdateTransactionBody.decline_reward)
  return _internal_decline_reward();
}
inline void ContractUpdateTransactionBody::unsafe_arena_set_allocated_decline_reward(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decline_reward_);
  }
  _impl_.decline_reward_ = decline_reward;
  if (decline_reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractUpdateTransactionBody.decline_reward)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ContractUpdateTransactionBody::release_decline_reward() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.decline_reward_;
  _impl_.decline_reward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ContractUpdateTransactionBody::unsafe_arena_release_decline_reward() {
  // @@protoc_insertion_point(field_release:proto.ContractUpdateTransactionBody.decline_reward)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.decline_reward_;
  _impl_.decline_reward_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ContractUpdateTransactionBody::_internal_mutable_decline_reward() {
  
  if (_impl_.decline_reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.decline_reward_ = p;
  }
  return _impl_.decline_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* ContractUpdateTransactionBody::mutable_decline_reward() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_decline_reward();
  // @@protoc_insertion_point(field_mutable:proto.ContractUpdateTransactionBody.decline_reward)
  return _msg;
}
inline void ContractUpdateTransactionBody::set_allocated_decline_reward(::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decline_reward_);
  }
  if (decline_reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decline_reward));
    if (message_arena != submessage_arena) {
      decline_reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decline_reward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.decline_reward_ = decline_reward;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractUpdateTransactionBody.decline_reward)
}

inline bool ContractUpdateTransactionBody::has_memoField() const {
  return memoField_case() != MEMOFIELD_NOT_SET;
}
inline void ContractUpdateTransactionBody::clear_has_memoField() {
  _impl_._oneof_case_[0] = MEMOFIELD_NOT_SET;
}
inline bool ContractUpdateTransactionBody::has_staked_id() const {
  return staked_id_case() != STAKED_ID_NOT_SET;
}
inline void ContractUpdateTransactionBody::clear_has_staked_id() {
  _impl_._oneof_case_[1] = STAKED_ID_NOT_SET;
}
inline ContractUpdateTransactionBody::MemoFieldCase ContractUpdateTransactionBody::memoField_case() const {
  return ContractUpdateTransactionBody::MemoFieldCase(_impl_._oneof_case_[0]);
}
inline ContractUpdateTransactionBody::StakedIdCase ContractUpdateTransactionBody::staked_id_case() const {
  return ContractUpdateTransactionBody::StakedIdCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contract_5fupdate_2eproto

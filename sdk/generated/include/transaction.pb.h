// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "duration.pb.h"
#include "basic_types.pb.h"
#include "transaction_body.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_2eproto;
namespace proto {
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Transaction* Arena::CreateMaybeMessage<::proto::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit PROTOBUF_CONSTEXPR Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transaction& from) {
    Transaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyBytesFieldNumber = 4,
    kSignedTransactionBytesFieldNumber = 5,
    kBodyFieldNumber = 1,
    kSigsFieldNumber = 2,
    kSigMapFieldNumber = 3,
  };
  // bytes bodyBytes = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_bodybytes();
  PROTOBUF_DEPRECATED const std::string& bodybytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_bodybytes(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_bodybytes();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_bodybytes();
  PROTOBUF_DEPRECATED void set_allocated_bodybytes(std::string* bodybytes);
  private:
  const std::string& _internal_bodybytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodybytes(const std::string& value);
  std::string* _internal_mutable_bodybytes();
  public:

  // bytes signedTransactionBytes = 5;
  void clear_signedtransactionbytes();
  const std::string& signedtransactionbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signedtransactionbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signedtransactionbytes();
  PROTOBUF_NODISCARD std::string* release_signedtransactionbytes();
  void set_allocated_signedtransactionbytes(std::string* signedtransactionbytes);
  private:
  const std::string& _internal_signedtransactionbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signedtransactionbytes(const std::string& value);
  std::string* _internal_mutable_signedtransactionbytes();
  public:

  // .proto.TransactionBody body = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  PROTOBUF_DEPRECATED void clear_body();
  PROTOBUF_DEPRECATED const ::proto::TransactionBody& body() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::TransactionBody* release_body();
  PROTOBUF_DEPRECATED ::proto::TransactionBody* mutable_body();
  PROTOBUF_DEPRECATED void set_allocated_body(::proto::TransactionBody* body);
  private:
  const ::proto::TransactionBody& _internal_body() const;
  ::proto::TransactionBody* _internal_mutable_body();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_body(
      ::proto::TransactionBody* body);
  PROTOBUF_DEPRECATED ::proto::TransactionBody* unsafe_arena_release_body();

  // .proto.SignatureList sigs = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sigs() const;
  private:
  bool _internal_has_sigs() const;
  public:
  PROTOBUF_DEPRECATED void clear_sigs();
  PROTOBUF_DEPRECATED const ::proto::SignatureList& sigs() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::SignatureList* release_sigs();
  PROTOBUF_DEPRECATED ::proto::SignatureList* mutable_sigs();
  PROTOBUF_DEPRECATED void set_allocated_sigs(::proto::SignatureList* sigs);
  private:
  const ::proto::SignatureList& _internal_sigs() const;
  ::proto::SignatureList* _internal_mutable_sigs();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_sigs(
      ::proto::SignatureList* sigs);
  PROTOBUF_DEPRECATED ::proto::SignatureList* unsafe_arena_release_sigs();

  // .proto.SignatureMap sigMap = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sigmap() const;
  private:
  bool _internal_has_sigmap() const;
  public:
  PROTOBUF_DEPRECATED void clear_sigmap();
  PROTOBUF_DEPRECATED const ::proto::SignatureMap& sigmap() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::SignatureMap* release_sigmap();
  PROTOBUF_DEPRECATED ::proto::SignatureMap* mutable_sigmap();
  PROTOBUF_DEPRECATED void set_allocated_sigmap(::proto::SignatureMap* sigmap);
  private:
  const ::proto::SignatureMap& _internal_sigmap() const;
  ::proto::SignatureMap* _internal_mutable_sigmap();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_sigmap(
      ::proto::SignatureMap* sigmap);
  PROTOBUF_DEPRECATED ::proto::SignatureMap* unsafe_arena_release_sigmap();

  // @@protoc_insertion_point(class_scope:proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodybytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signedtransactionbytes_;
    ::proto::TransactionBody* body_;
    ::proto::SignatureList* sigs_;
    ::proto::SignatureMap* sigmap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// .proto.TransactionBody body = 1 [deprecated = true];
inline bool Transaction::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool Transaction::has_body() const {
  return _internal_has_body();
}
inline const ::proto::TransactionBody& Transaction::_internal_body() const {
  const ::proto::TransactionBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionBody&>(
      ::proto::_TransactionBody_default_instance_);
}
inline const ::proto::TransactionBody& Transaction::body() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.body)
  return _internal_body();
}
inline void Transaction::unsafe_arena_set_allocated_body(
    ::proto::TransactionBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Transaction.body)
}
inline ::proto::TransactionBody* Transaction::release_body() {
  
  ::proto::TransactionBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionBody* Transaction::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:proto.Transaction.body)
  
  ::proto::TransactionBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::proto::TransactionBody* Transaction::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::proto::TransactionBody* Transaction::mutable_body() {
  ::proto::TransactionBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.body)
  return _msg;
}
inline void Transaction::set_allocated_body(::proto::TransactionBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body));
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.body)
}

// .proto.SignatureList sigs = 2 [deprecated = true];
inline bool Transaction::_internal_has_sigs() const {
  return this != internal_default_instance() && _impl_.sigs_ != nullptr;
}
inline bool Transaction::has_sigs() const {
  return _internal_has_sigs();
}
inline const ::proto::SignatureList& Transaction::_internal_sigs() const {
  const ::proto::SignatureList* p = _impl_.sigs_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SignatureList&>(
      ::proto::_SignatureList_default_instance_);
}
inline const ::proto::SignatureList& Transaction::sigs() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.sigs)
  return _internal_sigs();
}
inline void Transaction::unsafe_arena_set_allocated_sigs(
    ::proto::SignatureList* sigs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigs_);
  }
  _impl_.sigs_ = sigs;
  if (sigs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Transaction.sigs)
}
inline ::proto::SignatureList* Transaction::release_sigs() {
  
  ::proto::SignatureList* temp = _impl_.sigs_;
  _impl_.sigs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SignatureList* Transaction::unsafe_arena_release_sigs() {
  // @@protoc_insertion_point(field_release:proto.Transaction.sigs)
  
  ::proto::SignatureList* temp = _impl_.sigs_;
  _impl_.sigs_ = nullptr;
  return temp;
}
inline ::proto::SignatureList* Transaction::_internal_mutable_sigs() {
  
  if (_impl_.sigs_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SignatureList>(GetArenaForAllocation());
    _impl_.sigs_ = p;
  }
  return _impl_.sigs_;
}
inline ::proto::SignatureList* Transaction::mutable_sigs() {
  ::proto::SignatureList* _msg = _internal_mutable_sigs();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.sigs)
  return _msg;
}
inline void Transaction::set_allocated_sigs(::proto::SignatureList* sigs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigs_);
  }
  if (sigs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigs));
    if (message_arena != submessage_arena) {
      sigs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sigs_ = sigs;
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.sigs)
}

// .proto.SignatureMap sigMap = 3 [deprecated = true];
inline bool Transaction::_internal_has_sigmap() const {
  return this != internal_default_instance() && _impl_.sigmap_ != nullptr;
}
inline bool Transaction::has_sigmap() const {
  return _internal_has_sigmap();
}
inline const ::proto::SignatureMap& Transaction::_internal_sigmap() const {
  const ::proto::SignatureMap* p = _impl_.sigmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SignatureMap&>(
      ::proto::_SignatureMap_default_instance_);
}
inline const ::proto::SignatureMap& Transaction::sigmap() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.sigMap)
  return _internal_sigmap();
}
inline void Transaction::unsafe_arena_set_allocated_sigmap(
    ::proto::SignatureMap* sigmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigmap_);
  }
  _impl_.sigmap_ = sigmap;
  if (sigmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Transaction.sigMap)
}
inline ::proto::SignatureMap* Transaction::release_sigmap() {
  
  ::proto::SignatureMap* temp = _impl_.sigmap_;
  _impl_.sigmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SignatureMap* Transaction::unsafe_arena_release_sigmap() {
  // @@protoc_insertion_point(field_release:proto.Transaction.sigMap)
  
  ::proto::SignatureMap* temp = _impl_.sigmap_;
  _impl_.sigmap_ = nullptr;
  return temp;
}
inline ::proto::SignatureMap* Transaction::_internal_mutable_sigmap() {
  
  if (_impl_.sigmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SignatureMap>(GetArenaForAllocation());
    _impl_.sigmap_ = p;
  }
  return _impl_.sigmap_;
}
inline ::proto::SignatureMap* Transaction::mutable_sigmap() {
  ::proto::SignatureMap* _msg = _internal_mutable_sigmap();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.sigMap)
  return _msg;
}
inline void Transaction::set_allocated_sigmap(::proto::SignatureMap* sigmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigmap_);
  }
  if (sigmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigmap));
    if (message_arena != submessage_arena) {
      sigmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sigmap_ = sigmap;
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.sigMap)
}

// bytes bodyBytes = 4 [deprecated = true];
inline void Transaction::clear_bodybytes() {
  _impl_.bodybytes_.ClearToEmpty();
}
inline const std::string& Transaction::bodybytes() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.bodyBytes)
  return _internal_bodybytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_bodybytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bodybytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Transaction.bodyBytes)
}
inline std::string* Transaction::mutable_bodybytes() {
  std::string* _s = _internal_mutable_bodybytes();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.bodyBytes)
  return _s;
}
inline const std::string& Transaction::_internal_bodybytes() const {
  return _impl_.bodybytes_.Get();
}
inline void Transaction::_internal_set_bodybytes(const std::string& value) {
  
  _impl_.bodybytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_bodybytes() {
  
  return _impl_.bodybytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_bodybytes() {
  // @@protoc_insertion_point(field_release:proto.Transaction.bodyBytes)
  return _impl_.bodybytes_.Release();
}
inline void Transaction::set_allocated_bodybytes(std::string* bodybytes) {
  if (bodybytes != nullptr) {
    
  } else {
    
  }
  _impl_.bodybytes_.SetAllocated(bodybytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bodybytes_.IsDefault()) {
    _impl_.bodybytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.bodyBytes)
}

// bytes signedTransactionBytes = 5;
inline void Transaction::clear_signedtransactionbytes() {
  _impl_.signedtransactionbytes_.ClearToEmpty();
}
inline const std::string& Transaction::signedtransactionbytes() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.signedTransactionBytes)
  return _internal_signedtransactionbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_signedtransactionbytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signedtransactionbytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Transaction.signedTransactionBytes)
}
inline std::string* Transaction::mutable_signedtransactionbytes() {
  std::string* _s = _internal_mutable_signedtransactionbytes();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.signedTransactionBytes)
  return _s;
}
inline const std::string& Transaction::_internal_signedtransactionbytes() const {
  return _impl_.signedtransactionbytes_.Get();
}
inline void Transaction::_internal_set_signedtransactionbytes(const std::string& value) {
  
  _impl_.signedtransactionbytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_signedtransactionbytes() {
  
  return _impl_.signedtransactionbytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_signedtransactionbytes() {
  // @@protoc_insertion_point(field_release:proto.Transaction.signedTransactionBytes)
  return _impl_.signedtransactionbytes_.Release();
}
inline void Transaction::set_allocated_signedtransactionbytes(std::string* signedtransactionbytes) {
  if (signedtransactionbytes != nullptr) {
    
  } else {
    
  }
  _impl_.signedtransactionbytes_.SetAllocated(signedtransactionbytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signedtransactionbytes_.IsDefault()) {
    _impl_.signedtransactionbytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.signedTransactionBytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto

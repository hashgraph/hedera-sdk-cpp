// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "duration.pb.h"
#include "timestamp.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fupdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fupdate_2eproto;
namespace proto {
class CryptoUpdateTransactionBody;
struct CryptoUpdateTransactionBodyDefaultTypeInternal;
extern CryptoUpdateTransactionBodyDefaultTypeInternal _CryptoUpdateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoUpdateTransactionBody* Arena::CreateMaybeMessage<::proto::CryptoUpdateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoUpdateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoUpdateTransactionBody) */ {
 public:
  inline CryptoUpdateTransactionBody() : CryptoUpdateTransactionBody(nullptr) {}
  ~CryptoUpdateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR CryptoUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoUpdateTransactionBody(const CryptoUpdateTransactionBody& from);
  CryptoUpdateTransactionBody(CryptoUpdateTransactionBody&& from) noexcept
    : CryptoUpdateTransactionBody() {
    *this = ::std::move(from);
  }

  inline CryptoUpdateTransactionBody& operator=(const CryptoUpdateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoUpdateTransactionBody& operator=(CryptoUpdateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoUpdateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  enum SendRecordThresholdFieldCase {
    kSendRecordThreshold = 6,
    kSendRecordThresholdWrapper = 11,
    SENDRECORDTHRESHOLDFIELD_NOT_SET = 0,
  };

  enum ReceiveRecordThresholdFieldCase {
    kReceiveRecordThreshold = 7,
    kReceiveRecordThresholdWrapper = 12,
    RECEIVERECORDTHRESHOLDFIELD_NOT_SET = 0,
  };

  enum ReceiverSigRequiredFieldCase {
    kReceiverSigRequired = 10,
    kReceiverSigRequiredWrapper = 13,
    RECEIVERSIGREQUIREDFIELD_NOT_SET = 0,
  };

  enum StakedIdCase {
    kStakedAccountId = 16,
    kStakedNodeId = 17,
    STAKED_ID_NOT_SET = 0,
  };

  static inline const CryptoUpdateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const CryptoUpdateTransactionBody*>(
               &_CryptoUpdateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoUpdateTransactionBody& a, CryptoUpdateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoUpdateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoUpdateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoUpdateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoUpdateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoUpdateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoUpdateTransactionBody& from) {
    CryptoUpdateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoUpdateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoUpdateTransactionBody";
  }
  protected:
  explicit CryptoUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDToUpdateFieldNumber = 2,
    kKeyFieldNumber = 3,
    kProxyAccountIDFieldNumber = 4,
    kAutoRenewPeriodFieldNumber = 8,
    kExpirationTimeFieldNumber = 9,
    kMemoFieldNumber = 14,
    kMaxAutomaticTokenAssociationsFieldNumber = 15,
    kDeclineRewardFieldNumber = 18,
    kProxyFractionFieldNumber = 5,
    kSendRecordThresholdFieldNumber = 6,
    kSendRecordThresholdWrapperFieldNumber = 11,
    kReceiveRecordThresholdFieldNumber = 7,
    kReceiveRecordThresholdWrapperFieldNumber = 12,
    kReceiverSigRequiredFieldNumber = 10,
    kReceiverSigRequiredWrapperFieldNumber = 13,
    kStakedAccountIdFieldNumber = 16,
    kStakedNodeIdFieldNumber = 17,
  };
  // .proto.AccountID accountIDToUpdate = 2;
  bool has_accountidtoupdate() const;
  private:
  bool _internal_has_accountidtoupdate() const;
  public:
  void clear_accountidtoupdate();
  const ::proto::AccountID& accountidtoupdate() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountidtoupdate();
  ::proto::AccountID* mutable_accountidtoupdate();
  void set_allocated_accountidtoupdate(::proto::AccountID* accountidtoupdate);
  private:
  const ::proto::AccountID& _internal_accountidtoupdate() const;
  ::proto::AccountID* _internal_mutable_accountidtoupdate();
  public:
  void unsafe_arena_set_allocated_accountidtoupdate(
      ::proto::AccountID* accountidtoupdate);
  ::proto::AccountID* unsafe_arena_release_accountidtoupdate();

  // .proto.Key key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::proto::Key& key() const;
  PROTOBUF_NODISCARD ::proto::Key* release_key();
  ::proto::Key* mutable_key();
  void set_allocated_key(::proto::Key* key);
  private:
  const ::proto::Key& _internal_key() const;
  ::proto::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::proto::Key* key);
  ::proto::Key* unsafe_arena_release_key();

  // .proto.AccountID proxyAccountID = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_proxyaccountid() const;
  private:
  bool _internal_has_proxyaccountid() const;
  public:
  PROTOBUF_DEPRECATED void clear_proxyaccountid();
  PROTOBUF_DEPRECATED const ::proto::AccountID& proxyaccountid() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::AccountID* release_proxyaccountid();
  PROTOBUF_DEPRECATED ::proto::AccountID* mutable_proxyaccountid();
  PROTOBUF_DEPRECATED void set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid);
  private:
  const ::proto::AccountID& _internal_proxyaccountid() const;
  ::proto::AccountID* _internal_mutable_proxyaccountid();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_proxyaccountid(
      ::proto::AccountID* proxyaccountid);
  PROTOBUF_DEPRECATED ::proto::AccountID* unsafe_arena_release_proxyaccountid();

  // .proto.Duration autoRenewPeriod = 8;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.Timestamp expirationTime = 9;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .google.protobuf.StringValue memo = 14;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& memo() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_memo();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_memo();
  void set_allocated_memo(::PROTOBUF_NAMESPACE_ID::StringValue* memo);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_memo();
  public:
  void unsafe_arena_set_allocated_memo(
      ::PROTOBUF_NAMESPACE_ID::StringValue* memo);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_memo();

  // .google.protobuf.Int32Value max_automatic_token_associations = 15;
  bool has_max_automatic_token_associations() const;
  private:
  bool _internal_has_max_automatic_token_associations() const;
  public:
  void clear_max_automatic_token_associations();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& max_automatic_token_associations() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_max_automatic_token_associations();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_max_automatic_token_associations();
  void set_allocated_max_automatic_token_associations(::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_max_automatic_token_associations() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_max_automatic_token_associations();
  public:
  void unsafe_arena_set_allocated_max_automatic_token_associations(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_max_automatic_token_associations();

  // .google.protobuf.BoolValue decline_reward = 18;
  bool has_decline_reward() const;
  private:
  bool _internal_has_decline_reward() const;
  public:
  void clear_decline_reward();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& decline_reward() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_decline_reward();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_decline_reward();
  void set_allocated_decline_reward(::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_decline_reward() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_decline_reward();
  public:
  void unsafe_arena_set_allocated_decline_reward(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_decline_reward();

  // int32 proxyFraction = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_proxyfraction();
  PROTOBUF_DEPRECATED int32_t proxyfraction() const;
  PROTOBUF_DEPRECATED void set_proxyfraction(int32_t value);
  private:
  int32_t _internal_proxyfraction() const;
  void _internal_set_proxyfraction(int32_t value);
  public:

  // uint64 sendRecordThreshold = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sendrecordthreshold() const;
  private:
  bool _internal_has_sendrecordthreshold() const;
  public:
  PROTOBUF_DEPRECATED void clear_sendrecordthreshold();
  PROTOBUF_DEPRECATED uint64_t sendrecordthreshold() const;
  PROTOBUF_DEPRECATED void set_sendrecordthreshold(uint64_t value);
  private:
  uint64_t _internal_sendrecordthreshold() const;
  void _internal_set_sendrecordthreshold(uint64_t value);
  public:

  // .google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sendrecordthresholdwrapper() const;
  private:
  bool _internal_has_sendrecordthresholdwrapper() const;
  public:
  PROTOBUF_DEPRECATED void clear_sendrecordthresholdwrapper();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::UInt64Value& sendrecordthresholdwrapper() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_sendrecordthresholdwrapper();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_sendrecordthresholdwrapper();
  PROTOBUF_DEPRECATED void set_allocated_sendrecordthresholdwrapper(::PROTOBUF_NAMESPACE_ID::UInt64Value* sendrecordthresholdwrapper);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_sendrecordthresholdwrapper() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_sendrecordthresholdwrapper();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_sendrecordthresholdwrapper(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* sendrecordthresholdwrapper);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_sendrecordthresholdwrapper();

  // uint64 receiveRecordThreshold = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_receiverecordthreshold() const;
  private:
  bool _internal_has_receiverecordthreshold() const;
  public:
  PROTOBUF_DEPRECATED void clear_receiverecordthreshold();
  PROTOBUF_DEPRECATED uint64_t receiverecordthreshold() const;
  PROTOBUF_DEPRECATED void set_receiverecordthreshold(uint64_t value);
  private:
  uint64_t _internal_receiverecordthreshold() const;
  void _internal_set_receiverecordthreshold(uint64_t value);
  public:

  // .google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_receiverecordthresholdwrapper() const;
  private:
  bool _internal_has_receiverecordthresholdwrapper() const;
  public:
  PROTOBUF_DEPRECATED void clear_receiverecordthresholdwrapper();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::UInt64Value& receiverecordthresholdwrapper() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_receiverecordthresholdwrapper();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_receiverecordthresholdwrapper();
  PROTOBUF_DEPRECATED void set_allocated_receiverecordthresholdwrapper(::PROTOBUF_NAMESPACE_ID::UInt64Value* receiverecordthresholdwrapper);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_receiverecordthresholdwrapper() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_receiverecordthresholdwrapper();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_receiverecordthresholdwrapper(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* receiverecordthresholdwrapper);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_receiverecordthresholdwrapper();

  // bool receiverSigRequired = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_receiversigrequired() const;
  private:
  bool _internal_has_receiversigrequired() const;
  public:
  PROTOBUF_DEPRECATED void clear_receiversigrequired();
  PROTOBUF_DEPRECATED bool receiversigrequired() const;
  PROTOBUF_DEPRECATED void set_receiversigrequired(bool value);
  private:
  bool _internal_receiversigrequired() const;
  void _internal_set_receiversigrequired(bool value);
  public:

  // .google.protobuf.BoolValue receiverSigRequiredWrapper = 13;
  bool has_receiversigrequiredwrapper() const;
  private:
  bool _internal_has_receiversigrequiredwrapper() const;
  public:
  void clear_receiversigrequiredwrapper();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& receiversigrequiredwrapper() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_receiversigrequiredwrapper();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_receiversigrequiredwrapper();
  void set_allocated_receiversigrequiredwrapper(::PROTOBUF_NAMESPACE_ID::BoolValue* receiversigrequiredwrapper);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_receiversigrequiredwrapper() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_receiversigrequiredwrapper();
  public:
  void unsafe_arena_set_allocated_receiversigrequiredwrapper(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* receiversigrequiredwrapper);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_receiversigrequiredwrapper();

  // .proto.AccountID staked_account_id = 16;
  bool has_staked_account_id() const;
  private:
  bool _internal_has_staked_account_id() const;
  public:
  void clear_staked_account_id();
  const ::proto::AccountID& staked_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_staked_account_id();
  ::proto::AccountID* mutable_staked_account_id();
  void set_allocated_staked_account_id(::proto::AccountID* staked_account_id);
  private:
  const ::proto::AccountID& _internal_staked_account_id() const;
  ::proto::AccountID* _internal_mutable_staked_account_id();
  public:
  void unsafe_arena_set_allocated_staked_account_id(
      ::proto::AccountID* staked_account_id);
  ::proto::AccountID* unsafe_arena_release_staked_account_id();

  // int64 staked_node_id = 17;
  bool has_staked_node_id() const;
  private:
  bool _internal_has_staked_node_id() const;
  public:
  void clear_staked_node_id();
  int64_t staked_node_id() const;
  void set_staked_node_id(int64_t value);
  private:
  int64_t _internal_staked_node_id() const;
  void _internal_set_staked_node_id(int64_t value);
  public:

  void clear_sendRecordThresholdField();
  SendRecordThresholdFieldCase sendRecordThresholdField_case() const;
  void clear_receiveRecordThresholdField();
  ReceiveRecordThresholdFieldCase receiveRecordThresholdField_case() const;
  void clear_receiverSigRequiredField();
  ReceiverSigRequiredFieldCase receiverSigRequiredField_case() const;
  void clear_staked_id();
  StakedIdCase staked_id_case() const;
  // @@protoc_insertion_point(class_scope:proto.CryptoUpdateTransactionBody)
 private:
  class _Internal;
  void set_has_sendrecordthreshold();
  void set_has_sendrecordthresholdwrapper();
  void set_has_receiverecordthreshold();
  void set_has_receiverecordthresholdwrapper();
  void set_has_receiversigrequired();
  void set_has_receiversigrequiredwrapper();
  void set_has_staked_account_id();
  void set_has_staked_node_id();

  inline bool has_sendRecordThresholdField() const;
  inline void clear_has_sendRecordThresholdField();

  inline bool has_receiveRecordThresholdField() const;
  inline void clear_has_receiveRecordThresholdField();

  inline bool has_receiverSigRequiredField() const;
  inline void clear_has_receiverSigRequiredField();

  inline bool has_staked_id() const;
  inline void clear_has_staked_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::AccountID* accountidtoupdate_;
    ::proto::Key* key_;
    ::proto::AccountID* proxyaccountid_;
    ::proto::Duration* autorenewperiod_;
    ::proto::Timestamp* expirationtime_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* memo_;
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward_;
    int32_t proxyfraction_;
    union SendRecordThresholdFieldUnion {
      constexpr SendRecordThresholdFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t sendrecordthreshold_;
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* sendrecordthresholdwrapper_;
    } sendRecordThresholdField_;
    union ReceiveRecordThresholdFieldUnion {
      constexpr ReceiveRecordThresholdFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t receiverecordthreshold_;
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* receiverecordthresholdwrapper_;
    } receiveRecordThresholdField_;
    union ReceiverSigRequiredFieldUnion {
      constexpr ReceiverSigRequiredFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool receiversigrequired_;
      ::PROTOBUF_NAMESPACE_ID::BoolValue* receiversigrequiredwrapper_;
    } receiverSigRequiredField_;
    union StakedIdUnion {
      constexpr StakedIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::AccountID* staked_account_id_;
      int64_t staked_node_id_;
    } staked_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[4];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoUpdateTransactionBody

// .proto.AccountID accountIDToUpdate = 2;
inline bool CryptoUpdateTransactionBody::_internal_has_accountidtoupdate() const {
  return this != internal_default_instance() && _impl_.accountidtoupdate_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_accountidtoupdate() const {
  return _internal_has_accountidtoupdate();
}
inline const ::proto::AccountID& CryptoUpdateTransactionBody::_internal_accountidtoupdate() const {
  const ::proto::AccountID* p = _impl_.accountidtoupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoUpdateTransactionBody::accountidtoupdate() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.accountIDToUpdate)
  return _internal_accountidtoupdate();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_accountidtoupdate(
    ::proto::AccountID* accountidtoupdate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountidtoupdate_);
  }
  _impl_.accountidtoupdate_ = accountidtoupdate;
  if (accountidtoupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.accountIDToUpdate)
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::release_accountidtoupdate() {
  
  ::proto::AccountID* temp = _impl_.accountidtoupdate_;
  _impl_.accountidtoupdate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::unsafe_arena_release_accountidtoupdate() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.accountIDToUpdate)
  
  ::proto::AccountID* temp = _impl_.accountidtoupdate_;
  _impl_.accountidtoupdate_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::_internal_mutable_accountidtoupdate() {
  
  if (_impl_.accountidtoupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountidtoupdate_ = p;
  }
  return _impl_.accountidtoupdate_;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::mutable_accountidtoupdate() {
  ::proto::AccountID* _msg = _internal_mutable_accountidtoupdate();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.accountIDToUpdate)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_accountidtoupdate(::proto::AccountID* accountidtoupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountidtoupdate_);
  }
  if (accountidtoupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountidtoupdate));
    if (message_arena != submessage_arena) {
      accountidtoupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountidtoupdate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountidtoupdate_ = accountidtoupdate;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.accountIDToUpdate)
}

// .proto.Key key = 3;
inline bool CryptoUpdateTransactionBody::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_key() const {
  return _internal_has_key();
}
inline const ::proto::Key& CryptoUpdateTransactionBody::_internal_key() const {
  const ::proto::Key* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& CryptoUpdateTransactionBody::key() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.key)
  return _internal_key();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_key(
    ::proto::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.key)
}
inline ::proto::Key* CryptoUpdateTransactionBody::release_key() {
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* CryptoUpdateTransactionBody::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.key)
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::proto::Key* CryptoUpdateTransactionBody::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::proto::Key* CryptoUpdateTransactionBody::mutable_key() {
  ::proto::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.key)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_key(::proto::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.key)
}

// .proto.AccountID proxyAccountID = 4 [deprecated = true];
inline bool CryptoUpdateTransactionBody::_internal_has_proxyaccountid() const {
  return this != internal_default_instance() && _impl_.proxyaccountid_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_proxyaccountid() const {
  return _internal_has_proxyaccountid();
}
inline const ::proto::AccountID& CryptoUpdateTransactionBody::_internal_proxyaccountid() const {
  const ::proto::AccountID* p = _impl_.proxyaccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoUpdateTransactionBody::proxyaccountid() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.proxyAccountID)
  return _internal_proxyaccountid();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_proxyaccountid(
    ::proto::AccountID* proxyaccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  if (proxyaccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.proxyAccountID)
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::release_proxyaccountid() {
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::unsafe_arena_release_proxyaccountid() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.proxyAccountID)
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::_internal_mutable_proxyaccountid() {
  
  if (_impl_.proxyaccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.proxyaccountid_ = p;
  }
  return _impl_.proxyaccountid_;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::mutable_proxyaccountid() {
  ::proto::AccountID* _msg = _internal_mutable_proxyaccountid();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.proxyAccountID)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  if (proxyaccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxyaccountid));
    if (message_arena != submessage_arena) {
      proxyaccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxyaccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.proxyAccountID)
}

// int32 proxyFraction = 5 [deprecated = true];
inline void CryptoUpdateTransactionBody::clear_proxyfraction() {
  _impl_.proxyfraction_ = 0;
}
inline int32_t CryptoUpdateTransactionBody::_internal_proxyfraction() const {
  return _impl_.proxyfraction_;
}
inline int32_t CryptoUpdateTransactionBody::proxyfraction() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.proxyFraction)
  return _internal_proxyfraction();
}
inline void CryptoUpdateTransactionBody::_internal_set_proxyfraction(int32_t value) {
  
  _impl_.proxyfraction_ = value;
}
inline void CryptoUpdateTransactionBody::set_proxyfraction(int32_t value) {
  _internal_set_proxyfraction(value);
  // @@protoc_insertion_point(field_set:proto.CryptoUpdateTransactionBody.proxyFraction)
}

// uint64 sendRecordThreshold = 6 [deprecated = true];
inline bool CryptoUpdateTransactionBody::_internal_has_sendrecordthreshold() const {
  return sendRecordThresholdField_case() == kSendRecordThreshold;
}
inline bool CryptoUpdateTransactionBody::has_sendrecordthreshold() const {
  return _internal_has_sendrecordthreshold();
}
inline void CryptoUpdateTransactionBody::set_has_sendrecordthreshold() {
  _impl_._oneof_case_[0] = kSendRecordThreshold;
}
inline void CryptoUpdateTransactionBody::clear_sendrecordthreshold() {
  if (_internal_has_sendrecordthreshold()) {
    _impl_.sendRecordThresholdField_.sendrecordthreshold_ = uint64_t{0u};
    clear_has_sendRecordThresholdField();
  }
}
inline uint64_t CryptoUpdateTransactionBody::_internal_sendrecordthreshold() const {
  if (_internal_has_sendrecordthreshold()) {
    return _impl_.sendRecordThresholdField_.sendrecordthreshold_;
  }
  return uint64_t{0u};
}
inline void CryptoUpdateTransactionBody::_internal_set_sendrecordthreshold(uint64_t value) {
  if (!_internal_has_sendrecordthreshold()) {
    clear_sendRecordThresholdField();
    set_has_sendrecordthreshold();
  }
  _impl_.sendRecordThresholdField_.sendrecordthreshold_ = value;
}
inline uint64_t CryptoUpdateTransactionBody::sendrecordthreshold() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.sendRecordThreshold)
  return _internal_sendrecordthreshold();
}
inline void CryptoUpdateTransactionBody::set_sendrecordthreshold(uint64_t value) {
  _internal_set_sendrecordthreshold(value);
  // @@protoc_insertion_point(field_set:proto.CryptoUpdateTransactionBody.sendRecordThreshold)
}

// .google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];
inline bool CryptoUpdateTransactionBody::_internal_has_sendrecordthresholdwrapper() const {
  return sendRecordThresholdField_case() == kSendRecordThresholdWrapper;
}
inline bool CryptoUpdateTransactionBody::has_sendrecordthresholdwrapper() const {
  return _internal_has_sendrecordthresholdwrapper();
}
inline void CryptoUpdateTransactionBody::set_has_sendrecordthresholdwrapper() {
  _impl_._oneof_case_[0] = kSendRecordThresholdWrapper;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::release_sendrecordthresholdwrapper() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.sendRecordThresholdWrapper)
  if (_internal_has_sendrecordthresholdwrapper()) {
    clear_has_sendRecordThresholdField();
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& CryptoUpdateTransactionBody::_internal_sendrecordthresholdwrapper() const {
  return _internal_has_sendrecordthresholdwrapper()
      ? *_impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& CryptoUpdateTransactionBody::sendrecordthresholdwrapper() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.sendRecordThresholdWrapper)
  return _internal_sendrecordthresholdwrapper();
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::unsafe_arena_release_sendrecordthresholdwrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoUpdateTransactionBody.sendRecordThresholdWrapper)
  if (_internal_has_sendrecordthresholdwrapper()) {
    clear_has_sendRecordThresholdField();
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_;
    _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_sendrecordthresholdwrapper(::PROTOBUF_NAMESPACE_ID::UInt64Value* sendrecordthresholdwrapper) {
  clear_sendRecordThresholdField();
  if (sendrecordthresholdwrapper) {
    set_has_sendrecordthresholdwrapper();
    _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_ = sendrecordthresholdwrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.sendRecordThresholdWrapper)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::_internal_mutable_sendrecordthresholdwrapper() {
  if (!_internal_has_sendrecordthresholdwrapper()) {
    clear_sendRecordThresholdField();
    set_has_sendrecordthresholdwrapper();
    _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::UInt64Value >(GetArenaForAllocation());
  }
  return _impl_.sendRecordThresholdField_.sendrecordthresholdwrapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::mutable_sendrecordthresholdwrapper() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_sendrecordthresholdwrapper();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.sendRecordThresholdWrapper)
  return _msg;
}

// uint64 receiveRecordThreshold = 7 [deprecated = true];
inline bool CryptoUpdateTransactionBody::_internal_has_receiverecordthreshold() const {
  return receiveRecordThresholdField_case() == kReceiveRecordThreshold;
}
inline bool CryptoUpdateTransactionBody::has_receiverecordthreshold() const {
  return _internal_has_receiverecordthreshold();
}
inline void CryptoUpdateTransactionBody::set_has_receiverecordthreshold() {
  _impl_._oneof_case_[1] = kReceiveRecordThreshold;
}
inline void CryptoUpdateTransactionBody::clear_receiverecordthreshold() {
  if (_internal_has_receiverecordthreshold()) {
    _impl_.receiveRecordThresholdField_.receiverecordthreshold_ = uint64_t{0u};
    clear_has_receiveRecordThresholdField();
  }
}
inline uint64_t CryptoUpdateTransactionBody::_internal_receiverecordthreshold() const {
  if (_internal_has_receiverecordthreshold()) {
    return _impl_.receiveRecordThresholdField_.receiverecordthreshold_;
  }
  return uint64_t{0u};
}
inline void CryptoUpdateTransactionBody::_internal_set_receiverecordthreshold(uint64_t value) {
  if (!_internal_has_receiverecordthreshold()) {
    clear_receiveRecordThresholdField();
    set_has_receiverecordthreshold();
  }
  _impl_.receiveRecordThresholdField_.receiverecordthreshold_ = value;
}
inline uint64_t CryptoUpdateTransactionBody::receiverecordthreshold() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.receiveRecordThreshold)
  return _internal_receiverecordthreshold();
}
inline void CryptoUpdateTransactionBody::set_receiverecordthreshold(uint64_t value) {
  _internal_set_receiverecordthreshold(value);
  // @@protoc_insertion_point(field_set:proto.CryptoUpdateTransactionBody.receiveRecordThreshold)
}

// .google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];
inline bool CryptoUpdateTransactionBody::_internal_has_receiverecordthresholdwrapper() const {
  return receiveRecordThresholdField_case() == kReceiveRecordThresholdWrapper;
}
inline bool CryptoUpdateTransactionBody::has_receiverecordthresholdwrapper() const {
  return _internal_has_receiverecordthresholdwrapper();
}
inline void CryptoUpdateTransactionBody::set_has_receiverecordthresholdwrapper() {
  _impl_._oneof_case_[1] = kReceiveRecordThresholdWrapper;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::release_receiverecordthresholdwrapper() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.receiveRecordThresholdWrapper)
  if (_internal_has_receiverecordthresholdwrapper()) {
    clear_has_receiveRecordThresholdField();
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& CryptoUpdateTransactionBody::_internal_receiverecordthresholdwrapper() const {
  return _internal_has_receiverecordthresholdwrapper()
      ? *_impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& CryptoUpdateTransactionBody::receiverecordthresholdwrapper() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.receiveRecordThresholdWrapper)
  return _internal_receiverecordthresholdwrapper();
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::unsafe_arena_release_receiverecordthresholdwrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoUpdateTransactionBody.receiveRecordThresholdWrapper)
  if (_internal_has_receiverecordthresholdwrapper()) {
    clear_has_receiveRecordThresholdField();
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_;
    _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_receiverecordthresholdwrapper(::PROTOBUF_NAMESPACE_ID::UInt64Value* receiverecordthresholdwrapper) {
  clear_receiveRecordThresholdField();
  if (receiverecordthresholdwrapper) {
    set_has_receiverecordthresholdwrapper();
    _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_ = receiverecordthresholdwrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.receiveRecordThresholdWrapper)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::_internal_mutable_receiverecordthresholdwrapper() {
  if (!_internal_has_receiverecordthresholdwrapper()) {
    clear_receiveRecordThresholdField();
    set_has_receiverecordthresholdwrapper();
    _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::UInt64Value >(GetArenaForAllocation());
  }
  return _impl_.receiveRecordThresholdField_.receiverecordthresholdwrapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* CryptoUpdateTransactionBody::mutable_receiverecordthresholdwrapper() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_receiverecordthresholdwrapper();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.receiveRecordThresholdWrapper)
  return _msg;
}

// .proto.Duration autoRenewPeriod = 8;
inline bool CryptoUpdateTransactionBody::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& CryptoUpdateTransactionBody::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& CryptoUpdateTransactionBody::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.autoRenewPeriod)
}
inline ::proto::Duration* CryptoUpdateTransactionBody::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* CryptoUpdateTransactionBody::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* CryptoUpdateTransactionBody::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* CryptoUpdateTransactionBody::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.autoRenewPeriod)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.autoRenewPeriod)
}

// .proto.Timestamp expirationTime = 9;
inline bool CryptoUpdateTransactionBody::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& CryptoUpdateTransactionBody::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& CryptoUpdateTransactionBody::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.expirationTime)
  return _internal_expirationtime();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.expirationTime)
}
inline ::proto::Timestamp* CryptoUpdateTransactionBody::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* CryptoUpdateTransactionBody::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* CryptoUpdateTransactionBody::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* CryptoUpdateTransactionBody::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.expirationTime)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.expirationTime)
}

// bool receiverSigRequired = 10 [deprecated = true];
inline bool CryptoUpdateTransactionBody::_internal_has_receiversigrequired() const {
  return receiverSigRequiredField_case() == kReceiverSigRequired;
}
inline bool CryptoUpdateTransactionBody::has_receiversigrequired() const {
  return _internal_has_receiversigrequired();
}
inline void CryptoUpdateTransactionBody::set_has_receiversigrequired() {
  _impl_._oneof_case_[2] = kReceiverSigRequired;
}
inline void CryptoUpdateTransactionBody::clear_receiversigrequired() {
  if (_internal_has_receiversigrequired()) {
    _impl_.receiverSigRequiredField_.receiversigrequired_ = false;
    clear_has_receiverSigRequiredField();
  }
}
inline bool CryptoUpdateTransactionBody::_internal_receiversigrequired() const {
  if (_internal_has_receiversigrequired()) {
    return _impl_.receiverSigRequiredField_.receiversigrequired_;
  }
  return false;
}
inline void CryptoUpdateTransactionBody::_internal_set_receiversigrequired(bool value) {
  if (!_internal_has_receiversigrequired()) {
    clear_receiverSigRequiredField();
    set_has_receiversigrequired();
  }
  _impl_.receiverSigRequiredField_.receiversigrequired_ = value;
}
inline bool CryptoUpdateTransactionBody::receiversigrequired() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.receiverSigRequired)
  return _internal_receiversigrequired();
}
inline void CryptoUpdateTransactionBody::set_receiversigrequired(bool value) {
  _internal_set_receiversigrequired(value);
  // @@protoc_insertion_point(field_set:proto.CryptoUpdateTransactionBody.receiverSigRequired)
}

// .google.protobuf.BoolValue receiverSigRequiredWrapper = 13;
inline bool CryptoUpdateTransactionBody::_internal_has_receiversigrequiredwrapper() const {
  return receiverSigRequiredField_case() == kReceiverSigRequiredWrapper;
}
inline bool CryptoUpdateTransactionBody::has_receiversigrequiredwrapper() const {
  return _internal_has_receiversigrequiredwrapper();
}
inline void CryptoUpdateTransactionBody::set_has_receiversigrequiredwrapper() {
  _impl_._oneof_case_[2] = kReceiverSigRequiredWrapper;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::release_receiversigrequiredwrapper() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.receiverSigRequiredWrapper)
  if (_internal_has_receiversigrequiredwrapper()) {
    clear_has_receiverSigRequiredField();
    ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CryptoUpdateTransactionBody::_internal_receiversigrequiredwrapper() const {
  return _internal_has_receiversigrequiredwrapper()
      ? *_impl_.receiverSigRequiredField_.receiversigrequiredwrapper_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::BoolValue&>(::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CryptoUpdateTransactionBody::receiversigrequiredwrapper() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.receiverSigRequiredWrapper)
  return _internal_receiversigrequiredwrapper();
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::unsafe_arena_release_receiversigrequiredwrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoUpdateTransactionBody.receiverSigRequiredWrapper)
  if (_internal_has_receiversigrequiredwrapper()) {
    clear_has_receiverSigRequiredField();
    ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_;
    _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_receiversigrequiredwrapper(::PROTOBUF_NAMESPACE_ID::BoolValue* receiversigrequiredwrapper) {
  clear_receiverSigRequiredField();
  if (receiversigrequiredwrapper) {
    set_has_receiversigrequiredwrapper();
    _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_ = receiversigrequiredwrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.receiverSigRequiredWrapper)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::_internal_mutable_receiversigrequiredwrapper() {
  if (!_internal_has_receiversigrequiredwrapper()) {
    clear_receiverSigRequiredField();
    set_has_receiversigrequiredwrapper();
    _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::BoolValue >(GetArenaForAllocation());
  }
  return _impl_.receiverSigRequiredField_.receiversigrequiredwrapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::mutable_receiversigrequiredwrapper() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_receiversigrequiredwrapper();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.receiverSigRequiredWrapper)
  return _msg;
}

// .google.protobuf.StringValue memo = 14;
inline bool CryptoUpdateTransactionBody::_internal_has_memo() const {
  return this != internal_default_instance() && _impl_.memo_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_memo() const {
  return _internal_has_memo();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& CryptoUpdateTransactionBody::_internal_memo() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.memo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& CryptoUpdateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.memo)
  return _internal_memo();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_memo(
    ::PROTOBUF_NAMESPACE_ID::StringValue* memo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memo_);
  }
  _impl_.memo_ = memo;
  if (memo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.memo)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* CryptoUpdateTransactionBody::release_memo() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memo_;
  _impl_.memo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* CryptoUpdateTransactionBody::unsafe_arena_release_memo() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.memo)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memo_;
  _impl_.memo_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* CryptoUpdateTransactionBody::_internal_mutable_memo() {
  
  if (_impl_.memo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.memo_ = p;
  }
  return _impl_.memo_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* CryptoUpdateTransactionBody::mutable_memo() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.memo)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_memo(::PROTOBUF_NAMESPACE_ID::StringValue* memo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memo_);
  }
  if (memo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memo));
    if (message_arena != submessage_arena) {
      memo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.memo_ = memo;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.memo)
}

// .google.protobuf.Int32Value max_automatic_token_associations = 15;
inline bool CryptoUpdateTransactionBody::_internal_has_max_automatic_token_associations() const {
  return this != internal_default_instance() && _impl_.max_automatic_token_associations_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_max_automatic_token_associations() const {
  return _internal_has_max_automatic_token_associations();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& CryptoUpdateTransactionBody::_internal_max_automatic_token_associations() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = _impl_.max_automatic_token_associations_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& CryptoUpdateTransactionBody::max_automatic_token_associations() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.max_automatic_token_associations)
  return _internal_max_automatic_token_associations();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_max_automatic_token_associations(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_automatic_token_associations_);
  }
  _impl_.max_automatic_token_associations_ = max_automatic_token_associations;
  if (max_automatic_token_associations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.max_automatic_token_associations)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* CryptoUpdateTransactionBody::release_max_automatic_token_associations() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_automatic_token_associations_;
  _impl_.max_automatic_token_associations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* CryptoUpdateTransactionBody::unsafe_arena_release_max_automatic_token_associations() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.max_automatic_token_associations)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = _impl_.max_automatic_token_associations_;
  _impl_.max_automatic_token_associations_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* CryptoUpdateTransactionBody::_internal_mutable_max_automatic_token_associations() {
  
  if (_impl_.max_automatic_token_associations_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    _impl_.max_automatic_token_associations_ = p;
  }
  return _impl_.max_automatic_token_associations_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* CryptoUpdateTransactionBody::mutable_max_automatic_token_associations() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_max_automatic_token_associations();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.max_automatic_token_associations)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_max_automatic_token_associations(::PROTOBUF_NAMESPACE_ID::Int32Value* max_automatic_token_associations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_automatic_token_associations_);
  }
  if (max_automatic_token_associations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_automatic_token_associations));
    if (message_arena != submessage_arena) {
      max_automatic_token_associations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_automatic_token_associations, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_automatic_token_associations_ = max_automatic_token_associations;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.max_automatic_token_associations)
}

// .proto.AccountID staked_account_id = 16;
inline bool CryptoUpdateTransactionBody::_internal_has_staked_account_id() const {
  return staked_id_case() == kStakedAccountId;
}
inline bool CryptoUpdateTransactionBody::has_staked_account_id() const {
  return _internal_has_staked_account_id();
}
inline void CryptoUpdateTransactionBody::set_has_staked_account_id() {
  _impl_._oneof_case_[3] = kStakedAccountId;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::release_staked_account_id() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::AccountID& CryptoUpdateTransactionBody::_internal_staked_account_id() const {
  return _internal_has_staked_account_id()
      ? *_impl_.staked_id_.staked_account_id_
      : reinterpret_cast< ::proto::AccountID&>(::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoUpdateTransactionBody::staked_account_id() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.staked_account_id)
  return _internal_staked_account_id();
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::unsafe_arena_release_staked_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CryptoUpdateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  clear_staked_id();
  if (staked_account_id) {
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.staked_account_id)
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::_internal_mutable_staked_account_id() {
  if (!_internal_has_staked_account_id()) {
    clear_staked_id();
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = CreateMaybeMessage< ::proto::AccountID >(GetArenaForAllocation());
  }
  return _impl_.staked_id_.staked_account_id_;
}
inline ::proto::AccountID* CryptoUpdateTransactionBody::mutable_staked_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_staked_account_id();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.staked_account_id)
  return _msg;
}

// int64 staked_node_id = 17;
inline bool CryptoUpdateTransactionBody::_internal_has_staked_node_id() const {
  return staked_id_case() == kStakedNodeId;
}
inline bool CryptoUpdateTransactionBody::has_staked_node_id() const {
  return _internal_has_staked_node_id();
}
inline void CryptoUpdateTransactionBody::set_has_staked_node_id() {
  _impl_._oneof_case_[3] = kStakedNodeId;
}
inline void CryptoUpdateTransactionBody::clear_staked_node_id() {
  if (_internal_has_staked_node_id()) {
    _impl_.staked_id_.staked_node_id_ = int64_t{0};
    clear_has_staked_id();
  }
}
inline int64_t CryptoUpdateTransactionBody::_internal_staked_node_id() const {
  if (_internal_has_staked_node_id()) {
    return _impl_.staked_id_.staked_node_id_;
  }
  return int64_t{0};
}
inline void CryptoUpdateTransactionBody::_internal_set_staked_node_id(int64_t value) {
  if (!_internal_has_staked_node_id()) {
    clear_staked_id();
    set_has_staked_node_id();
  }
  _impl_.staked_id_.staked_node_id_ = value;
}
inline int64_t CryptoUpdateTransactionBody::staked_node_id() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.staked_node_id)
  return _internal_staked_node_id();
}
inline void CryptoUpdateTransactionBody::set_staked_node_id(int64_t value) {
  _internal_set_staked_node_id(value);
  // @@protoc_insertion_point(field_set:proto.CryptoUpdateTransactionBody.staked_node_id)
}

// .google.protobuf.BoolValue decline_reward = 18;
inline bool CryptoUpdateTransactionBody::_internal_has_decline_reward() const {
  return this != internal_default_instance() && _impl_.decline_reward_ != nullptr;
}
inline bool CryptoUpdateTransactionBody::has_decline_reward() const {
  return _internal_has_decline_reward();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CryptoUpdateTransactionBody::_internal_decline_reward() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.decline_reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& CryptoUpdateTransactionBody::decline_reward() const {
  // @@protoc_insertion_point(field_get:proto.CryptoUpdateTransactionBody.decline_reward)
  return _internal_decline_reward();
}
inline void CryptoUpdateTransactionBody::unsafe_arena_set_allocated_decline_reward(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decline_reward_);
  }
  _impl_.decline_reward_ = decline_reward;
  if (decline_reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoUpdateTransactionBody.decline_reward)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::release_decline_reward() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.decline_reward_;
  _impl_.decline_reward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::unsafe_arena_release_decline_reward() {
  // @@protoc_insertion_point(field_release:proto.CryptoUpdateTransactionBody.decline_reward)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.decline_reward_;
  _impl_.decline_reward_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::_internal_mutable_decline_reward() {
  
  if (_impl_.decline_reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.decline_reward_ = p;
  }
  return _impl_.decline_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* CryptoUpdateTransactionBody::mutable_decline_reward() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_decline_reward();
  // @@protoc_insertion_point(field_mutable:proto.CryptoUpdateTransactionBody.decline_reward)
  return _msg;
}
inline void CryptoUpdateTransactionBody::set_allocated_decline_reward(::PROTOBUF_NAMESPACE_ID::BoolValue* decline_reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decline_reward_);
  }
  if (decline_reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decline_reward));
    if (message_arena != submessage_arena) {
      decline_reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decline_reward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.decline_reward_ = decline_reward;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoUpdateTransactionBody.decline_reward)
}

inline bool CryptoUpdateTransactionBody::has_sendRecordThresholdField() const {
  return sendRecordThresholdField_case() != SENDRECORDTHRESHOLDFIELD_NOT_SET;
}
inline void CryptoUpdateTransactionBody::clear_has_sendRecordThresholdField() {
  _impl_._oneof_case_[0] = SENDRECORDTHRESHOLDFIELD_NOT_SET;
}
inline bool CryptoUpdateTransactionBody::has_receiveRecordThresholdField() const {
  return receiveRecordThresholdField_case() != RECEIVERECORDTHRESHOLDFIELD_NOT_SET;
}
inline void CryptoUpdateTransactionBody::clear_has_receiveRecordThresholdField() {
  _impl_._oneof_case_[1] = RECEIVERECORDTHRESHOLDFIELD_NOT_SET;
}
inline bool CryptoUpdateTransactionBody::has_receiverSigRequiredField() const {
  return receiverSigRequiredField_case() != RECEIVERSIGREQUIREDFIELD_NOT_SET;
}
inline void CryptoUpdateTransactionBody::clear_has_receiverSigRequiredField() {
  _impl_._oneof_case_[2] = RECEIVERSIGREQUIREDFIELD_NOT_SET;
}
inline bool CryptoUpdateTransactionBody::has_staked_id() const {
  return staked_id_case() != STAKED_ID_NOT_SET;
}
inline void CryptoUpdateTransactionBody::clear_has_staked_id() {
  _impl_._oneof_case_[3] = STAKED_ID_NOT_SET;
}
inline CryptoUpdateTransactionBody::SendRecordThresholdFieldCase CryptoUpdateTransactionBody::sendRecordThresholdField_case() const {
  return CryptoUpdateTransactionBody::SendRecordThresholdFieldCase(_impl_._oneof_case_[0]);
}
inline CryptoUpdateTransactionBody::ReceiveRecordThresholdFieldCase CryptoUpdateTransactionBody::receiveRecordThresholdField_case() const {
  return CryptoUpdateTransactionBody::ReceiveRecordThresholdFieldCase(_impl_._oneof_case_[1]);
}
inline CryptoUpdateTransactionBody::ReceiverSigRequiredFieldCase CryptoUpdateTransactionBody::receiverSigRequiredField_case() const {
  return CryptoUpdateTransactionBody::ReceiverSigRequiredFieldCase(_impl_._oneof_case_[2]);
}
inline CryptoUpdateTransactionBody::StakedIdCase CryptoUpdateTransactionBody::staked_id_case() const {
  return CryptoUpdateTransactionBody::StakedIdCase(_impl_._oneof_case_[3]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fupdate_2eproto

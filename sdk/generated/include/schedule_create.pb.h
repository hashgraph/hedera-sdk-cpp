// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule_create.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schedule_5fcreate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schedule_5fcreate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "timestamp.pb.h"
#include "schedulable_transaction_body.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schedule_5fcreate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schedule_5fcreate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schedule_5fcreate_2eproto;
namespace proto {
class ScheduleCreateTransactionBody;
struct ScheduleCreateTransactionBodyDefaultTypeInternal;
extern ScheduleCreateTransactionBodyDefaultTypeInternal _ScheduleCreateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ScheduleCreateTransactionBody* Arena::CreateMaybeMessage<::proto::ScheduleCreateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ScheduleCreateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ScheduleCreateTransactionBody) */ {
 public:
  inline ScheduleCreateTransactionBody() : ScheduleCreateTransactionBody(nullptr) {}
  ~ScheduleCreateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR ScheduleCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleCreateTransactionBody(const ScheduleCreateTransactionBody& from);
  ScheduleCreateTransactionBody(ScheduleCreateTransactionBody&& from) noexcept
    : ScheduleCreateTransactionBody() {
    *this = ::std::move(from);
  }

  inline ScheduleCreateTransactionBody& operator=(const ScheduleCreateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleCreateTransactionBody& operator=(ScheduleCreateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleCreateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleCreateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const ScheduleCreateTransactionBody*>(
               &_ScheduleCreateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleCreateTransactionBody& a, ScheduleCreateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleCreateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleCreateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleCreateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleCreateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleCreateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleCreateTransactionBody& from) {
    ScheduleCreateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleCreateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ScheduleCreateTransactionBody";
  }
  protected:
  explicit ScheduleCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 2,
    kScheduledTransactionBodyFieldNumber = 1,
    kAdminKeyFieldNumber = 3,
    kPayerAccountIDFieldNumber = 4,
    kExpirationTimeFieldNumber = 5,
    kWaitForExpiryFieldNumber = 13,
  };
  // string memo = 2;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .proto.SchedulableTransactionBody scheduledTransactionBody = 1;
  bool has_scheduledtransactionbody() const;
  private:
  bool _internal_has_scheduledtransactionbody() const;
  public:
  void clear_scheduledtransactionbody();
  const ::proto::SchedulableTransactionBody& scheduledtransactionbody() const;
  PROTOBUF_NODISCARD ::proto::SchedulableTransactionBody* release_scheduledtransactionbody();
  ::proto::SchedulableTransactionBody* mutable_scheduledtransactionbody();
  void set_allocated_scheduledtransactionbody(::proto::SchedulableTransactionBody* scheduledtransactionbody);
  private:
  const ::proto::SchedulableTransactionBody& _internal_scheduledtransactionbody() const;
  ::proto::SchedulableTransactionBody* _internal_mutable_scheduledtransactionbody();
  public:
  void unsafe_arena_set_allocated_scheduledtransactionbody(
      ::proto::SchedulableTransactionBody* scheduledtransactionbody);
  ::proto::SchedulableTransactionBody* unsafe_arena_release_scheduledtransactionbody();

  // .proto.Key adminKey = 3;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.AccountID payerAccountID = 4;
  bool has_payeraccountid() const;
  private:
  bool _internal_has_payeraccountid() const;
  public:
  void clear_payeraccountid();
  const ::proto::AccountID& payeraccountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_payeraccountid();
  ::proto::AccountID* mutable_payeraccountid();
  void set_allocated_payeraccountid(::proto::AccountID* payeraccountid);
  private:
  const ::proto::AccountID& _internal_payeraccountid() const;
  ::proto::AccountID* _internal_mutable_payeraccountid();
  public:
  void unsafe_arena_set_allocated_payeraccountid(
      ::proto::AccountID* payeraccountid);
  ::proto::AccountID* unsafe_arena_release_payeraccountid();

  // .proto.Timestamp expiration_time = 5;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const ::proto::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expiration_time();
  ::proto::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::proto::Timestamp* expiration_time);
  private:
  const ::proto::Timestamp& _internal_expiration_time() const;
  ::proto::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      ::proto::Timestamp* expiration_time);
  ::proto::Timestamp* unsafe_arena_release_expiration_time();

  // bool wait_for_expiry = 13;
  void clear_wait_for_expiry();
  bool wait_for_expiry() const;
  void set_wait_for_expiry(bool value);
  private:
  bool _internal_wait_for_expiry() const;
  void _internal_set_wait_for_expiry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ScheduleCreateTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::proto::SchedulableTransactionBody* scheduledtransactionbody_;
    ::proto::Key* adminkey_;
    ::proto::AccountID* payeraccountid_;
    ::proto::Timestamp* expiration_time_;
    bool wait_for_expiry_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_5fcreate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScheduleCreateTransactionBody

// .proto.SchedulableTransactionBody scheduledTransactionBody = 1;
inline bool ScheduleCreateTransactionBody::_internal_has_scheduledtransactionbody() const {
  return this != internal_default_instance() && _impl_.scheduledtransactionbody_ != nullptr;
}
inline bool ScheduleCreateTransactionBody::has_scheduledtransactionbody() const {
  return _internal_has_scheduledtransactionbody();
}
inline const ::proto::SchedulableTransactionBody& ScheduleCreateTransactionBody::_internal_scheduledtransactionbody() const {
  const ::proto::SchedulableTransactionBody* p = _impl_.scheduledtransactionbody_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SchedulableTransactionBody&>(
      ::proto::_SchedulableTransactionBody_default_instance_);
}
inline const ::proto::SchedulableTransactionBody& ScheduleCreateTransactionBody::scheduledtransactionbody() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleCreateTransactionBody.scheduledTransactionBody)
  return _internal_scheduledtransactionbody();
}
inline void ScheduleCreateTransactionBody::unsafe_arena_set_allocated_scheduledtransactionbody(
    ::proto::SchedulableTransactionBody* scheduledtransactionbody) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionbody_);
  }
  _impl_.scheduledtransactionbody_ = scheduledtransactionbody;
  if (scheduledtransactionbody) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleCreateTransactionBody.scheduledTransactionBody)
}
inline ::proto::SchedulableTransactionBody* ScheduleCreateTransactionBody::release_scheduledtransactionbody() {
  
  ::proto::SchedulableTransactionBody* temp = _impl_.scheduledtransactionbody_;
  _impl_.scheduledtransactionbody_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SchedulableTransactionBody* ScheduleCreateTransactionBody::unsafe_arena_release_scheduledtransactionbody() {
  // @@protoc_insertion_point(field_release:proto.ScheduleCreateTransactionBody.scheduledTransactionBody)
  
  ::proto::SchedulableTransactionBody* temp = _impl_.scheduledtransactionbody_;
  _impl_.scheduledtransactionbody_ = nullptr;
  return temp;
}
inline ::proto::SchedulableTransactionBody* ScheduleCreateTransactionBody::_internal_mutable_scheduledtransactionbody() {
  
  if (_impl_.scheduledtransactionbody_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SchedulableTransactionBody>(GetArenaForAllocation());
    _impl_.scheduledtransactionbody_ = p;
  }
  return _impl_.scheduledtransactionbody_;
}
inline ::proto::SchedulableTransactionBody* ScheduleCreateTransactionBody::mutable_scheduledtransactionbody() {
  ::proto::SchedulableTransactionBody* _msg = _internal_mutable_scheduledtransactionbody();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleCreateTransactionBody.scheduledTransactionBody)
  return _msg;
}
inline void ScheduleCreateTransactionBody::set_allocated_scheduledtransactionbody(::proto::SchedulableTransactionBody* scheduledtransactionbody) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionbody_);
  }
  if (scheduledtransactionbody) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledtransactionbody));
    if (message_arena != submessage_arena) {
      scheduledtransactionbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduledtransactionbody, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduledtransactionbody_ = scheduledtransactionbody;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleCreateTransactionBody.scheduledTransactionBody)
}

// string memo = 2;
inline void ScheduleCreateTransactionBody::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& ScheduleCreateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleCreateTransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleCreateTransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ScheduleCreateTransactionBody.memo)
}
inline std::string* ScheduleCreateTransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleCreateTransactionBody.memo)
  return _s;
}
inline const std::string& ScheduleCreateTransactionBody::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void ScheduleCreateTransactionBody::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleCreateTransactionBody::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleCreateTransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:proto.ScheduleCreateTransactionBody.memo)
  return _impl_.memo_.Release();
}
inline void ScheduleCreateTransactionBody::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleCreateTransactionBody.memo)
}

// .proto.Key adminKey = 3;
inline bool ScheduleCreateTransactionBody::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ScheduleCreateTransactionBody::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ScheduleCreateTransactionBody::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ScheduleCreateTransactionBody::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleCreateTransactionBody.adminKey)
  return _internal_adminkey();
}
inline void ScheduleCreateTransactionBody::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleCreateTransactionBody.adminKey)
}
inline ::proto::Key* ScheduleCreateTransactionBody::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ScheduleCreateTransactionBody::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ScheduleCreateTransactionBody.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ScheduleCreateTransactionBody::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ScheduleCreateTransactionBody::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleCreateTransactionBody.adminKey)
  return _msg;
}
inline void ScheduleCreateTransactionBody::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleCreateTransactionBody.adminKey)
}

// .proto.AccountID payerAccountID = 4;
inline bool ScheduleCreateTransactionBody::_internal_has_payeraccountid() const {
  return this != internal_default_instance() && _impl_.payeraccountid_ != nullptr;
}
inline bool ScheduleCreateTransactionBody::has_payeraccountid() const {
  return _internal_has_payeraccountid();
}
inline const ::proto::AccountID& ScheduleCreateTransactionBody::_internal_payeraccountid() const {
  const ::proto::AccountID* p = _impl_.payeraccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ScheduleCreateTransactionBody::payeraccountid() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleCreateTransactionBody.payerAccountID)
  return _internal_payeraccountid();
}
inline void ScheduleCreateTransactionBody::unsafe_arena_set_allocated_payeraccountid(
    ::proto::AccountID* payeraccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payeraccountid_);
  }
  _impl_.payeraccountid_ = payeraccountid;
  if (payeraccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleCreateTransactionBody.payerAccountID)
}
inline ::proto::AccountID* ScheduleCreateTransactionBody::release_payeraccountid() {
  
  ::proto::AccountID* temp = _impl_.payeraccountid_;
  _impl_.payeraccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ScheduleCreateTransactionBody::unsafe_arena_release_payeraccountid() {
  // @@protoc_insertion_point(field_release:proto.ScheduleCreateTransactionBody.payerAccountID)
  
  ::proto::AccountID* temp = _impl_.payeraccountid_;
  _impl_.payeraccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ScheduleCreateTransactionBody::_internal_mutable_payeraccountid() {
  
  if (_impl_.payeraccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.payeraccountid_ = p;
  }
  return _impl_.payeraccountid_;
}
inline ::proto::AccountID* ScheduleCreateTransactionBody::mutable_payeraccountid() {
  ::proto::AccountID* _msg = _internal_mutable_payeraccountid();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleCreateTransactionBody.payerAccountID)
  return _msg;
}
inline void ScheduleCreateTransactionBody::set_allocated_payeraccountid(::proto::AccountID* payeraccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payeraccountid_);
  }
  if (payeraccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payeraccountid));
    if (message_arena != submessage_arena) {
      payeraccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payeraccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payeraccountid_ = payeraccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleCreateTransactionBody.payerAccountID)
}

// .proto.Timestamp expiration_time = 5;
inline bool ScheduleCreateTransactionBody::_internal_has_expiration_time() const {
  return this != internal_default_instance() && _impl_.expiration_time_ != nullptr;
}
inline bool ScheduleCreateTransactionBody::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const ::proto::Timestamp& ScheduleCreateTransactionBody::_internal_expiration_time() const {
  const ::proto::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ScheduleCreateTransactionBody::expiration_time() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleCreateTransactionBody.expiration_time)
  return _internal_expiration_time();
}
inline void ScheduleCreateTransactionBody::unsafe_arena_set_allocated_expiration_time(
    ::proto::Timestamp* expiration_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleCreateTransactionBody.expiration_time)
}
inline ::proto::Timestamp* ScheduleCreateTransactionBody::release_expiration_time() {
  
  ::proto::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ScheduleCreateTransactionBody::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:proto.ScheduleCreateTransactionBody.expiration_time)
  
  ::proto::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ScheduleCreateTransactionBody::_internal_mutable_expiration_time() {
  
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_time_ = p;
  }
  return _impl_.expiration_time_;
}
inline ::proto::Timestamp* ScheduleCreateTransactionBody::mutable_expiration_time() {
  ::proto::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleCreateTransactionBody.expiration_time)
  return _msg;
}
inline void ScheduleCreateTransactionBody::set_allocated_expiration_time(::proto::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time));
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleCreateTransactionBody.expiration_time)
}

// bool wait_for_expiry = 13;
inline void ScheduleCreateTransactionBody::clear_wait_for_expiry() {
  _impl_.wait_for_expiry_ = false;
}
inline bool ScheduleCreateTransactionBody::_internal_wait_for_expiry() const {
  return _impl_.wait_for_expiry_;
}
inline bool ScheduleCreateTransactionBody::wait_for_expiry() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleCreateTransactionBody.wait_for_expiry)
  return _internal_wait_for_expiry();
}
inline void ScheduleCreateTransactionBody::_internal_set_wait_for_expiry(bool value) {
  
  _impl_.wait_for_expiry_ = value;
}
inline void ScheduleCreateTransactionBody::set_wait_for_expiry(bool value) {
  _internal_set_wait_for_expiry(value);
  // @@protoc_insertion_point(field_set:proto.ScheduleCreateTransactionBody.wait_for_expiry)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schedule_5fcreate_2eproto

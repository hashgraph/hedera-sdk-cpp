// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_approve_allowance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fapprove_5fallowance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fapprove_5fallowance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fapprove_5fallowance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fapprove_5fallowance_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fapprove_5fallowance_2eproto;
namespace proto {
class CryptoAllowance;
struct CryptoAllowanceDefaultTypeInternal;
extern CryptoAllowanceDefaultTypeInternal _CryptoAllowance_default_instance_;
class CryptoApproveAllowanceTransactionBody;
struct CryptoApproveAllowanceTransactionBodyDefaultTypeInternal;
extern CryptoApproveAllowanceTransactionBodyDefaultTypeInternal _CryptoApproveAllowanceTransactionBody_default_instance_;
class NftAllowance;
struct NftAllowanceDefaultTypeInternal;
extern NftAllowanceDefaultTypeInternal _NftAllowance_default_instance_;
class TokenAllowance;
struct TokenAllowanceDefaultTypeInternal;
extern TokenAllowanceDefaultTypeInternal _TokenAllowance_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoAllowance* Arena::CreateMaybeMessage<::proto::CryptoAllowance>(Arena*);
template<> ::proto::CryptoApproveAllowanceTransactionBody* Arena::CreateMaybeMessage<::proto::CryptoApproveAllowanceTransactionBody>(Arena*);
template<> ::proto::NftAllowance* Arena::CreateMaybeMessage<::proto::NftAllowance>(Arena*);
template<> ::proto::TokenAllowance* Arena::CreateMaybeMessage<::proto::TokenAllowance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoApproveAllowanceTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoApproveAllowanceTransactionBody) */ {
 public:
  inline CryptoApproveAllowanceTransactionBody() : CryptoApproveAllowanceTransactionBody(nullptr) {}
  ~CryptoApproveAllowanceTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR CryptoApproveAllowanceTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoApproveAllowanceTransactionBody(const CryptoApproveAllowanceTransactionBody& from);
  CryptoApproveAllowanceTransactionBody(CryptoApproveAllowanceTransactionBody&& from) noexcept
    : CryptoApproveAllowanceTransactionBody() {
    *this = ::std::move(from);
  }

  inline CryptoApproveAllowanceTransactionBody& operator=(const CryptoApproveAllowanceTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoApproveAllowanceTransactionBody& operator=(CryptoApproveAllowanceTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoApproveAllowanceTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoApproveAllowanceTransactionBody* internal_default_instance() {
    return reinterpret_cast<const CryptoApproveAllowanceTransactionBody*>(
               &_CryptoApproveAllowanceTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoApproveAllowanceTransactionBody& a, CryptoApproveAllowanceTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoApproveAllowanceTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoApproveAllowanceTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoApproveAllowanceTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoApproveAllowanceTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoApproveAllowanceTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoApproveAllowanceTransactionBody& from) {
    CryptoApproveAllowanceTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoApproveAllowanceTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoApproveAllowanceTransactionBody";
  }
  protected:
  explicit CryptoApproveAllowanceTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCryptoAllowancesFieldNumber = 1,
    kNftAllowancesFieldNumber = 2,
    kTokenAllowancesFieldNumber = 3,
  };
  // repeated .proto.CryptoAllowance cryptoAllowances = 1;
  int cryptoallowances_size() const;
  private:
  int _internal_cryptoallowances_size() const;
  public:
  void clear_cryptoallowances();
  ::proto::CryptoAllowance* mutable_cryptoallowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CryptoAllowance >*
      mutable_cryptoallowances();
  private:
  const ::proto::CryptoAllowance& _internal_cryptoallowances(int index) const;
  ::proto::CryptoAllowance* _internal_add_cryptoallowances();
  public:
  const ::proto::CryptoAllowance& cryptoallowances(int index) const;
  ::proto::CryptoAllowance* add_cryptoallowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CryptoAllowance >&
      cryptoallowances() const;

  // repeated .proto.NftAllowance nftAllowances = 2;
  int nftallowances_size() const;
  private:
  int _internal_nftallowances_size() const;
  public:
  void clear_nftallowances();
  ::proto::NftAllowance* mutable_nftallowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftAllowance >*
      mutable_nftallowances();
  private:
  const ::proto::NftAllowance& _internal_nftallowances(int index) const;
  ::proto::NftAllowance* _internal_add_nftallowances();
  public:
  const ::proto::NftAllowance& nftallowances(int index) const;
  ::proto::NftAllowance* add_nftallowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftAllowance >&
      nftallowances() const;

  // repeated .proto.TokenAllowance tokenAllowances = 3;
  int tokenallowances_size() const;
  private:
  int _internal_tokenallowances_size() const;
  public:
  void clear_tokenallowances();
  ::proto::TokenAllowance* mutable_tokenallowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAllowance >*
      mutable_tokenallowances();
  private:
  const ::proto::TokenAllowance& _internal_tokenallowances(int index) const;
  ::proto::TokenAllowance* _internal_add_tokenallowances();
  public:
  const ::proto::TokenAllowance& tokenallowances(int index) const;
  ::proto::TokenAllowance* add_tokenallowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAllowance >&
      tokenallowances() const;

  // @@protoc_insertion_point(class_scope:proto.CryptoApproveAllowanceTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CryptoAllowance > cryptoallowances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftAllowance > nftallowances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAllowance > tokenallowances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fapprove_5fallowance_2eproto;
};
// -------------------------------------------------------------------

class CryptoAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoAllowance) */ {
 public:
  inline CryptoAllowance() : CryptoAllowance(nullptr) {}
  ~CryptoAllowance() override;
  explicit PROTOBUF_CONSTEXPR CryptoAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoAllowance(const CryptoAllowance& from);
  CryptoAllowance(CryptoAllowance&& from) noexcept
    : CryptoAllowance() {
    *this = ::std::move(from);
  }

  inline CryptoAllowance& operator=(const CryptoAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoAllowance& operator=(CryptoAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoAllowance* internal_default_instance() {
    return reinterpret_cast<const CryptoAllowance*>(
               &_CryptoAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CryptoAllowance& a, CryptoAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoAllowance& from) {
    CryptoAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoAllowance";
  }
  protected:
  explicit CryptoAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kSpenderFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // .proto.AccountID owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::proto::AccountID& owner() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_owner();
  ::proto::AccountID* mutable_owner();
  void set_allocated_owner(::proto::AccountID* owner);
  private:
  const ::proto::AccountID& _internal_owner() const;
  ::proto::AccountID* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::proto::AccountID* owner);
  ::proto::AccountID* unsafe_arena_release_owner();

  // .proto.AccountID spender = 2;
  bool has_spender() const;
  private:
  bool _internal_has_spender() const;
  public:
  void clear_spender();
  const ::proto::AccountID& spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender();
  ::proto::AccountID* mutable_spender();
  void set_allocated_spender(::proto::AccountID* spender);
  private:
  const ::proto::AccountID& _internal_spender() const;
  ::proto::AccountID* _internal_mutable_spender();
  public:
  void unsafe_arena_set_allocated_spender(
      ::proto::AccountID* spender);
  ::proto::AccountID* unsafe_arena_release_spender();

  // int64 amount = 3;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CryptoAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::AccountID* owner_;
    ::proto::AccountID* spender_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fapprove_5fallowance_2eproto;
};
// -------------------------------------------------------------------

class NftAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NftAllowance) */ {
 public:
  inline NftAllowance() : NftAllowance(nullptr) {}
  ~NftAllowance() override;
  explicit PROTOBUF_CONSTEXPR NftAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NftAllowance(const NftAllowance& from);
  NftAllowance(NftAllowance&& from) noexcept
    : NftAllowance() {
    *this = ::std::move(from);
  }

  inline NftAllowance& operator=(const NftAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline NftAllowance& operator=(NftAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NftAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const NftAllowance* internal_default_instance() {
    return reinterpret_cast<const NftAllowance*>(
               &_NftAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NftAllowance& a, NftAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(NftAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NftAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NftAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NftAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NftAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NftAllowance& from) {
    NftAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NftAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NftAllowance";
  }
  protected:
  explicit NftAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumbersFieldNumber = 4,
    kTokenIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kSpenderFieldNumber = 3,
    kApprovedForAllFieldNumber = 5,
    kDelegatingSpenderFieldNumber = 6,
  };
  // repeated int64 serial_numbers = 4;
  int serial_numbers_size() const;
  private:
  int _internal_serial_numbers_size() const;
  public:
  void clear_serial_numbers();
  private:
  int64_t _internal_serial_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_serial_numbers() const;
  void _internal_add_serial_numbers(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_serial_numbers();
  public:
  int64_t serial_numbers(int index) const;
  void set_serial_numbers(int index, int64_t value);
  void add_serial_numbers(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      serial_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_serial_numbers();

  // .proto.TokenID tokenId = 1;
  bool has_tokenid() const;
  private:
  bool _internal_has_tokenid() const;
  public:
  void clear_tokenid();
  const ::proto::TokenID& tokenid() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_tokenid();
  ::proto::TokenID* mutable_tokenid();
  void set_allocated_tokenid(::proto::TokenID* tokenid);
  private:
  const ::proto::TokenID& _internal_tokenid() const;
  ::proto::TokenID* _internal_mutable_tokenid();
  public:
  void unsafe_arena_set_allocated_tokenid(
      ::proto::TokenID* tokenid);
  ::proto::TokenID* unsafe_arena_release_tokenid();

  // .proto.AccountID owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::proto::AccountID& owner() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_owner();
  ::proto::AccountID* mutable_owner();
  void set_allocated_owner(::proto::AccountID* owner);
  private:
  const ::proto::AccountID& _internal_owner() const;
  ::proto::AccountID* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::proto::AccountID* owner);
  ::proto::AccountID* unsafe_arena_release_owner();

  // .proto.AccountID spender = 3;
  bool has_spender() const;
  private:
  bool _internal_has_spender() const;
  public:
  void clear_spender();
  const ::proto::AccountID& spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender();
  ::proto::AccountID* mutable_spender();
  void set_allocated_spender(::proto::AccountID* spender);
  private:
  const ::proto::AccountID& _internal_spender() const;
  ::proto::AccountID* _internal_mutable_spender();
  public:
  void unsafe_arena_set_allocated_spender(
      ::proto::AccountID* spender);
  ::proto::AccountID* unsafe_arena_release_spender();

  // .google.protobuf.BoolValue approved_for_all = 5;
  bool has_approved_for_all() const;
  private:
  bool _internal_has_approved_for_all() const;
  public:
  void clear_approved_for_all();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& approved_for_all() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_approved_for_all();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_approved_for_all();
  void set_allocated_approved_for_all(::PROTOBUF_NAMESPACE_ID::BoolValue* approved_for_all);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_approved_for_all() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_approved_for_all();
  public:
  void unsafe_arena_set_allocated_approved_for_all(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* approved_for_all);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_approved_for_all();

  // .proto.AccountID delegating_spender = 6;
  bool has_delegating_spender() const;
  private:
  bool _internal_has_delegating_spender() const;
  public:
  void clear_delegating_spender();
  const ::proto::AccountID& delegating_spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_delegating_spender();
  ::proto::AccountID* mutable_delegating_spender();
  void set_allocated_delegating_spender(::proto::AccountID* delegating_spender);
  private:
  const ::proto::AccountID& _internal_delegating_spender() const;
  ::proto::AccountID* _internal_mutable_delegating_spender();
  public:
  void unsafe_arena_set_allocated_delegating_spender(
      ::proto::AccountID* delegating_spender);
  ::proto::AccountID* unsafe_arena_release_delegating_spender();

  // @@protoc_insertion_point(class_scope:proto.NftAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > serial_numbers_;
    mutable std::atomic<int> _serial_numbers_cached_byte_size_;
    ::proto::TokenID* tokenid_;
    ::proto::AccountID* owner_;
    ::proto::AccountID* spender_;
    ::PROTOBUF_NAMESPACE_ID::BoolValue* approved_for_all_;
    ::proto::AccountID* delegating_spender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fapprove_5fallowance_2eproto;
};
// -------------------------------------------------------------------

class TokenAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenAllowance) */ {
 public:
  inline TokenAllowance() : TokenAllowance(nullptr) {}
  ~TokenAllowance() override;
  explicit PROTOBUF_CONSTEXPR TokenAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenAllowance(const TokenAllowance& from);
  TokenAllowance(TokenAllowance&& from) noexcept
    : TokenAllowance() {
    *this = ::std::move(from);
  }

  inline TokenAllowance& operator=(const TokenAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenAllowance& operator=(TokenAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenAllowance* internal_default_instance() {
    return reinterpret_cast<const TokenAllowance*>(
               &_TokenAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TokenAllowance& a, TokenAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenAllowance& from) {
    TokenAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenAllowance";
  }
  protected:
  explicit TokenAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kSpenderFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // .proto.TokenID tokenId = 1;
  bool has_tokenid() const;
  private:
  bool _internal_has_tokenid() const;
  public:
  void clear_tokenid();
  const ::proto::TokenID& tokenid() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_tokenid();
  ::proto::TokenID* mutable_tokenid();
  void set_allocated_tokenid(::proto::TokenID* tokenid);
  private:
  const ::proto::TokenID& _internal_tokenid() const;
  ::proto::TokenID* _internal_mutable_tokenid();
  public:
  void unsafe_arena_set_allocated_tokenid(
      ::proto::TokenID* tokenid);
  ::proto::TokenID* unsafe_arena_release_tokenid();

  // .proto.AccountID owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::proto::AccountID& owner() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_owner();
  ::proto::AccountID* mutable_owner();
  void set_allocated_owner(::proto::AccountID* owner);
  private:
  const ::proto::AccountID& _internal_owner() const;
  ::proto::AccountID* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::proto::AccountID* owner);
  ::proto::AccountID* unsafe_arena_release_owner();

  // .proto.AccountID spender = 3;
  bool has_spender() const;
  private:
  bool _internal_has_spender() const;
  public:
  void clear_spender();
  const ::proto::AccountID& spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender();
  ::proto::AccountID* mutable_spender();
  void set_allocated_spender(::proto::AccountID* spender);
  private:
  const ::proto::AccountID& _internal_spender() const;
  ::proto::AccountID* _internal_mutable_spender();
  public:
  void unsafe_arena_set_allocated_spender(
      ::proto::AccountID* spender);
  ::proto::AccountID* unsafe_arena_release_spender();

  // int64 amount = 4;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TokenAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TokenID* tokenid_;
    ::proto::AccountID* owner_;
    ::proto::AccountID* spender_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fapprove_5fallowance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoApproveAllowanceTransactionBody

// repeated .proto.CryptoAllowance cryptoAllowances = 1;
inline int CryptoApproveAllowanceTransactionBody::_internal_cryptoallowances_size() const {
  return _impl_.cryptoallowances_.size();
}
inline int CryptoApproveAllowanceTransactionBody::cryptoallowances_size() const {
  return _internal_cryptoallowances_size();
}
inline void CryptoApproveAllowanceTransactionBody::clear_cryptoallowances() {
  _impl_.cryptoallowances_.Clear();
}
inline ::proto::CryptoAllowance* CryptoApproveAllowanceTransactionBody::mutable_cryptoallowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CryptoApproveAllowanceTransactionBody.cryptoAllowances)
  return _impl_.cryptoallowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CryptoAllowance >*
CryptoApproveAllowanceTransactionBody::mutable_cryptoallowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.CryptoApproveAllowanceTransactionBody.cryptoAllowances)
  return &_impl_.cryptoallowances_;
}
inline const ::proto::CryptoAllowance& CryptoApproveAllowanceTransactionBody::_internal_cryptoallowances(int index) const {
  return _impl_.cryptoallowances_.Get(index);
}
inline const ::proto::CryptoAllowance& CryptoApproveAllowanceTransactionBody::cryptoallowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.CryptoApproveAllowanceTransactionBody.cryptoAllowances)
  return _internal_cryptoallowances(index);
}
inline ::proto::CryptoAllowance* CryptoApproveAllowanceTransactionBody::_internal_add_cryptoallowances() {
  return _impl_.cryptoallowances_.Add();
}
inline ::proto::CryptoAllowance* CryptoApproveAllowanceTransactionBody::add_cryptoallowances() {
  ::proto::CryptoAllowance* _add = _internal_add_cryptoallowances();
  // @@protoc_insertion_point(field_add:proto.CryptoApproveAllowanceTransactionBody.cryptoAllowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CryptoAllowance >&
CryptoApproveAllowanceTransactionBody::cryptoallowances() const {
  // @@protoc_insertion_point(field_list:proto.CryptoApproveAllowanceTransactionBody.cryptoAllowances)
  return _impl_.cryptoallowances_;
}

// repeated .proto.NftAllowance nftAllowances = 2;
inline int CryptoApproveAllowanceTransactionBody::_internal_nftallowances_size() const {
  return _impl_.nftallowances_.size();
}
inline int CryptoApproveAllowanceTransactionBody::nftallowances_size() const {
  return _internal_nftallowances_size();
}
inline void CryptoApproveAllowanceTransactionBody::clear_nftallowances() {
  _impl_.nftallowances_.Clear();
}
inline ::proto::NftAllowance* CryptoApproveAllowanceTransactionBody::mutable_nftallowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CryptoApproveAllowanceTransactionBody.nftAllowances)
  return _impl_.nftallowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftAllowance >*
CryptoApproveAllowanceTransactionBody::mutable_nftallowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.CryptoApproveAllowanceTransactionBody.nftAllowances)
  return &_impl_.nftallowances_;
}
inline const ::proto::NftAllowance& CryptoApproveAllowanceTransactionBody::_internal_nftallowances(int index) const {
  return _impl_.nftallowances_.Get(index);
}
inline const ::proto::NftAllowance& CryptoApproveAllowanceTransactionBody::nftallowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.CryptoApproveAllowanceTransactionBody.nftAllowances)
  return _internal_nftallowances(index);
}
inline ::proto::NftAllowance* CryptoApproveAllowanceTransactionBody::_internal_add_nftallowances() {
  return _impl_.nftallowances_.Add();
}
inline ::proto::NftAllowance* CryptoApproveAllowanceTransactionBody::add_nftallowances() {
  ::proto::NftAllowance* _add = _internal_add_nftallowances();
  // @@protoc_insertion_point(field_add:proto.CryptoApproveAllowanceTransactionBody.nftAllowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftAllowance >&
CryptoApproveAllowanceTransactionBody::nftallowances() const {
  // @@protoc_insertion_point(field_list:proto.CryptoApproveAllowanceTransactionBody.nftAllowances)
  return _impl_.nftallowances_;
}

// repeated .proto.TokenAllowance tokenAllowances = 3;
inline int CryptoApproveAllowanceTransactionBody::_internal_tokenallowances_size() const {
  return _impl_.tokenallowances_.size();
}
inline int CryptoApproveAllowanceTransactionBody::tokenallowances_size() const {
  return _internal_tokenallowances_size();
}
inline void CryptoApproveAllowanceTransactionBody::clear_tokenallowances() {
  _impl_.tokenallowances_.Clear();
}
inline ::proto::TokenAllowance* CryptoApproveAllowanceTransactionBody::mutable_tokenallowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CryptoApproveAllowanceTransactionBody.tokenAllowances)
  return _impl_.tokenallowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAllowance >*
CryptoApproveAllowanceTransactionBody::mutable_tokenallowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.CryptoApproveAllowanceTransactionBody.tokenAllowances)
  return &_impl_.tokenallowances_;
}
inline const ::proto::TokenAllowance& CryptoApproveAllowanceTransactionBody::_internal_tokenallowances(int index) const {
  return _impl_.tokenallowances_.Get(index);
}
inline const ::proto::TokenAllowance& CryptoApproveAllowanceTransactionBody::tokenallowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.CryptoApproveAllowanceTransactionBody.tokenAllowances)
  return _internal_tokenallowances(index);
}
inline ::proto::TokenAllowance* CryptoApproveAllowanceTransactionBody::_internal_add_tokenallowances() {
  return _impl_.tokenallowances_.Add();
}
inline ::proto::TokenAllowance* CryptoApproveAllowanceTransactionBody::add_tokenallowances() {
  ::proto::TokenAllowance* _add = _internal_add_tokenallowances();
  // @@protoc_insertion_point(field_add:proto.CryptoApproveAllowanceTransactionBody.tokenAllowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAllowance >&
CryptoApproveAllowanceTransactionBody::tokenallowances() const {
  // @@protoc_insertion_point(field_list:proto.CryptoApproveAllowanceTransactionBody.tokenAllowances)
  return _impl_.tokenallowances_;
}

// -------------------------------------------------------------------

// CryptoAllowance

// .proto.AccountID owner = 1;
inline bool CryptoAllowance::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool CryptoAllowance::has_owner() const {
  return _internal_has_owner();
}
inline const ::proto::AccountID& CryptoAllowance::_internal_owner() const {
  const ::proto::AccountID* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoAllowance::owner() const {
  // @@protoc_insertion_point(field_get:proto.CryptoAllowance.owner)
  return _internal_owner();
}
inline void CryptoAllowance::unsafe_arena_set_allocated_owner(
    ::proto::AccountID* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoAllowance.owner)
}
inline ::proto::AccountID* CryptoAllowance::release_owner() {
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoAllowance::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:proto.CryptoAllowance.owner)
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoAllowance::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::proto::AccountID* CryptoAllowance::mutable_owner() {
  ::proto::AccountID* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:proto.CryptoAllowance.owner)
  return _msg;
}
inline void CryptoAllowance::set_allocated_owner(::proto::AccountID* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoAllowance.owner)
}

// .proto.AccountID spender = 2;
inline bool CryptoAllowance::_internal_has_spender() const {
  return this != internal_default_instance() && _impl_.spender_ != nullptr;
}
inline bool CryptoAllowance::has_spender() const {
  return _internal_has_spender();
}
inline const ::proto::AccountID& CryptoAllowance::_internal_spender() const {
  const ::proto::AccountID* p = _impl_.spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoAllowance::spender() const {
  // @@protoc_insertion_point(field_get:proto.CryptoAllowance.spender)
  return _internal_spender();
}
inline void CryptoAllowance::unsafe_arena_set_allocated_spender(
    ::proto::AccountID* spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  _impl_.spender_ = spender;
  if (spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoAllowance.spender)
}
inline ::proto::AccountID* CryptoAllowance::release_spender() {
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoAllowance::unsafe_arena_release_spender() {
  // @@protoc_insertion_point(field_release:proto.CryptoAllowance.spender)
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoAllowance::_internal_mutable_spender() {
  
  if (_impl_.spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_ = p;
  }
  return _impl_.spender_;
}
inline ::proto::AccountID* CryptoAllowance::mutable_spender() {
  ::proto::AccountID* _msg = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:proto.CryptoAllowance.spender)
  return _msg;
}
inline void CryptoAllowance::set_allocated_spender(::proto::AccountID* spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  if (spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender));
    if (message_arena != submessage_arena) {
      spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_ = spender;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoAllowance.spender)
}

// int64 amount = 3;
inline void CryptoAllowance::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t CryptoAllowance::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t CryptoAllowance::amount() const {
  // @@protoc_insertion_point(field_get:proto.CryptoAllowance.amount)
  return _internal_amount();
}
inline void CryptoAllowance::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void CryptoAllowance::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.CryptoAllowance.amount)
}

// -------------------------------------------------------------------

// NftAllowance

// .proto.TokenID tokenId = 1;
inline bool NftAllowance::_internal_has_tokenid() const {
  return this != internal_default_instance() && _impl_.tokenid_ != nullptr;
}
inline bool NftAllowance::has_tokenid() const {
  return _internal_has_tokenid();
}
inline const ::proto::TokenID& NftAllowance::_internal_tokenid() const {
  const ::proto::TokenID* p = _impl_.tokenid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& NftAllowance::tokenid() const {
  // @@protoc_insertion_point(field_get:proto.NftAllowance.tokenId)
  return _internal_tokenid();
}
inline void NftAllowance::unsafe_arena_set_allocated_tokenid(
    ::proto::TokenID* tokenid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  _impl_.tokenid_ = tokenid;
  if (tokenid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftAllowance.tokenId)
}
inline ::proto::TokenID* NftAllowance::release_tokenid() {
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* NftAllowance::unsafe_arena_release_tokenid() {
  // @@protoc_insertion_point(field_release:proto.NftAllowance.tokenId)
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
  return temp;
}
inline ::proto::TokenID* NftAllowance::_internal_mutable_tokenid() {
  
  if (_impl_.tokenid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.tokenid_ = p;
  }
  return _impl_.tokenid_;
}
inline ::proto::TokenID* NftAllowance::mutable_tokenid() {
  ::proto::TokenID* _msg = _internal_mutable_tokenid();
  // @@protoc_insertion_point(field_mutable:proto.NftAllowance.tokenId)
  return _msg;
}
inline void NftAllowance::set_allocated_tokenid(::proto::TokenID* tokenid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  if (tokenid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenid));
    if (message_arena != submessage_arena) {
      tokenid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tokenid_ = tokenid;
  // @@protoc_insertion_point(field_set_allocated:proto.NftAllowance.tokenId)
}

// .proto.AccountID owner = 2;
inline bool NftAllowance::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool NftAllowance::has_owner() const {
  return _internal_has_owner();
}
inline const ::proto::AccountID& NftAllowance::_internal_owner() const {
  const ::proto::AccountID* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& NftAllowance::owner() const {
  // @@protoc_insertion_point(field_get:proto.NftAllowance.owner)
  return _internal_owner();
}
inline void NftAllowance::unsafe_arena_set_allocated_owner(
    ::proto::AccountID* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftAllowance.owner)
}
inline ::proto::AccountID* NftAllowance::release_owner() {
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* NftAllowance::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:proto.NftAllowance.owner)
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::proto::AccountID* NftAllowance::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::proto::AccountID* NftAllowance::mutable_owner() {
  ::proto::AccountID* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:proto.NftAllowance.owner)
  return _msg;
}
inline void NftAllowance::set_allocated_owner(::proto::AccountID* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:proto.NftAllowance.owner)
}

// .proto.AccountID spender = 3;
inline bool NftAllowance::_internal_has_spender() const {
  return this != internal_default_instance() && _impl_.spender_ != nullptr;
}
inline bool NftAllowance::has_spender() const {
  return _internal_has_spender();
}
inline const ::proto::AccountID& NftAllowance::_internal_spender() const {
  const ::proto::AccountID* p = _impl_.spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& NftAllowance::spender() const {
  // @@protoc_insertion_point(field_get:proto.NftAllowance.spender)
  return _internal_spender();
}
inline void NftAllowance::unsafe_arena_set_allocated_spender(
    ::proto::AccountID* spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  _impl_.spender_ = spender;
  if (spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftAllowance.spender)
}
inline ::proto::AccountID* NftAllowance::release_spender() {
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* NftAllowance::unsafe_arena_release_spender() {
  // @@protoc_insertion_point(field_release:proto.NftAllowance.spender)
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* NftAllowance::_internal_mutable_spender() {
  
  if (_impl_.spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_ = p;
  }
  return _impl_.spender_;
}
inline ::proto::AccountID* NftAllowance::mutable_spender() {
  ::proto::AccountID* _msg = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:proto.NftAllowance.spender)
  return _msg;
}
inline void NftAllowance::set_allocated_spender(::proto::AccountID* spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  if (spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender));
    if (message_arena != submessage_arena) {
      spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_ = spender;
  // @@protoc_insertion_point(field_set_allocated:proto.NftAllowance.spender)
}

// repeated int64 serial_numbers = 4;
inline int NftAllowance::_internal_serial_numbers_size() const {
  return _impl_.serial_numbers_.size();
}
inline int NftAllowance::serial_numbers_size() const {
  return _internal_serial_numbers_size();
}
inline void NftAllowance::clear_serial_numbers() {
  _impl_.serial_numbers_.Clear();
}
inline int64_t NftAllowance::_internal_serial_numbers(int index) const {
  return _impl_.serial_numbers_.Get(index);
}
inline int64_t NftAllowance::serial_numbers(int index) const {
  // @@protoc_insertion_point(field_get:proto.NftAllowance.serial_numbers)
  return _internal_serial_numbers(index);
}
inline void NftAllowance::set_serial_numbers(int index, int64_t value) {
  _impl_.serial_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.NftAllowance.serial_numbers)
}
inline void NftAllowance::_internal_add_serial_numbers(int64_t value) {
  _impl_.serial_numbers_.Add(value);
}
inline void NftAllowance::add_serial_numbers(int64_t value) {
  _internal_add_serial_numbers(value);
  // @@protoc_insertion_point(field_add:proto.NftAllowance.serial_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
NftAllowance::_internal_serial_numbers() const {
  return _impl_.serial_numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
NftAllowance::serial_numbers() const {
  // @@protoc_insertion_point(field_list:proto.NftAllowance.serial_numbers)
  return _internal_serial_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
NftAllowance::_internal_mutable_serial_numbers() {
  return &_impl_.serial_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
NftAllowance::mutable_serial_numbers() {
  // @@protoc_insertion_point(field_mutable_list:proto.NftAllowance.serial_numbers)
  return _internal_mutable_serial_numbers();
}

// .google.protobuf.BoolValue approved_for_all = 5;
inline bool NftAllowance::_internal_has_approved_for_all() const {
  return this != internal_default_instance() && _impl_.approved_for_all_ != nullptr;
}
inline bool NftAllowance::has_approved_for_all() const {
  return _internal_has_approved_for_all();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& NftAllowance::_internal_approved_for_all() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = _impl_.approved_for_all_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& NftAllowance::approved_for_all() const {
  // @@protoc_insertion_point(field_get:proto.NftAllowance.approved_for_all)
  return _internal_approved_for_all();
}
inline void NftAllowance::unsafe_arena_set_allocated_approved_for_all(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* approved_for_all) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.approved_for_all_);
  }
  _impl_.approved_for_all_ = approved_for_all;
  if (approved_for_all) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftAllowance.approved_for_all)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NftAllowance::release_approved_for_all() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.approved_for_all_;
  _impl_.approved_for_all_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NftAllowance::unsafe_arena_release_approved_for_all() {
  // @@protoc_insertion_point(field_release:proto.NftAllowance.approved_for_all)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = _impl_.approved_for_all_;
  _impl_.approved_for_all_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NftAllowance::_internal_mutable_approved_for_all() {
  
  if (_impl_.approved_for_all_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    _impl_.approved_for_all_ = p;
  }
  return _impl_.approved_for_all_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* NftAllowance::mutable_approved_for_all() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_approved_for_all();
  // @@protoc_insertion_point(field_mutable:proto.NftAllowance.approved_for_all)
  return _msg;
}
inline void NftAllowance::set_allocated_approved_for_all(::PROTOBUF_NAMESPACE_ID::BoolValue* approved_for_all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.approved_for_all_);
  }
  if (approved_for_all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(approved_for_all));
    if (message_arena != submessage_arena) {
      approved_for_all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, approved_for_all, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.approved_for_all_ = approved_for_all;
  // @@protoc_insertion_point(field_set_allocated:proto.NftAllowance.approved_for_all)
}

// .proto.AccountID delegating_spender = 6;
inline bool NftAllowance::_internal_has_delegating_spender() const {
  return this != internal_default_instance() && _impl_.delegating_spender_ != nullptr;
}
inline bool NftAllowance::has_delegating_spender() const {
  return _internal_has_delegating_spender();
}
inline const ::proto::AccountID& NftAllowance::_internal_delegating_spender() const {
  const ::proto::AccountID* p = _impl_.delegating_spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& NftAllowance::delegating_spender() const {
  // @@protoc_insertion_point(field_get:proto.NftAllowance.delegating_spender)
  return _internal_delegating_spender();
}
inline void NftAllowance::unsafe_arena_set_allocated_delegating_spender(
    ::proto::AccountID* delegating_spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delegating_spender_);
  }
  _impl_.delegating_spender_ = delegating_spender;
  if (delegating_spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftAllowance.delegating_spender)
}
inline ::proto::AccountID* NftAllowance::release_delegating_spender() {
  
  ::proto::AccountID* temp = _impl_.delegating_spender_;
  _impl_.delegating_spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* NftAllowance::unsafe_arena_release_delegating_spender() {
  // @@protoc_insertion_point(field_release:proto.NftAllowance.delegating_spender)
  
  ::proto::AccountID* temp = _impl_.delegating_spender_;
  _impl_.delegating_spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* NftAllowance::_internal_mutable_delegating_spender() {
  
  if (_impl_.delegating_spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.delegating_spender_ = p;
  }
  return _impl_.delegating_spender_;
}
inline ::proto::AccountID* NftAllowance::mutable_delegating_spender() {
  ::proto::AccountID* _msg = _internal_mutable_delegating_spender();
  // @@protoc_insertion_point(field_mutable:proto.NftAllowance.delegating_spender)
  return _msg;
}
inline void NftAllowance::set_allocated_delegating_spender(::proto::AccountID* delegating_spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delegating_spender_);
  }
  if (delegating_spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delegating_spender));
    if (message_arena != submessage_arena) {
      delegating_spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegating_spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delegating_spender_ = delegating_spender;
  // @@protoc_insertion_point(field_set_allocated:proto.NftAllowance.delegating_spender)
}

// -------------------------------------------------------------------

// TokenAllowance

// .proto.TokenID tokenId = 1;
inline bool TokenAllowance::_internal_has_tokenid() const {
  return this != internal_default_instance() && _impl_.tokenid_ != nullptr;
}
inline bool TokenAllowance::has_tokenid() const {
  return _internal_has_tokenid();
}
inline const ::proto::TokenID& TokenAllowance::_internal_tokenid() const {
  const ::proto::TokenID* p = _impl_.tokenid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& TokenAllowance::tokenid() const {
  // @@protoc_insertion_point(field_get:proto.TokenAllowance.tokenId)
  return _internal_tokenid();
}
inline void TokenAllowance::unsafe_arena_set_allocated_tokenid(
    ::proto::TokenID* tokenid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  _impl_.tokenid_ = tokenid;
  if (tokenid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenAllowance.tokenId)
}
inline ::proto::TokenID* TokenAllowance::release_tokenid() {
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* TokenAllowance::unsafe_arena_release_tokenid() {
  // @@protoc_insertion_point(field_release:proto.TokenAllowance.tokenId)
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
  return temp;
}
inline ::proto::TokenID* TokenAllowance::_internal_mutable_tokenid() {
  
  if (_impl_.tokenid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.tokenid_ = p;
  }
  return _impl_.tokenid_;
}
inline ::proto::TokenID* TokenAllowance::mutable_tokenid() {
  ::proto::TokenID* _msg = _internal_mutable_tokenid();
  // @@protoc_insertion_point(field_mutable:proto.TokenAllowance.tokenId)
  return _msg;
}
inline void TokenAllowance::set_allocated_tokenid(::proto::TokenID* tokenid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  if (tokenid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenid));
    if (message_arena != submessage_arena) {
      tokenid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tokenid_ = tokenid;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenAllowance.tokenId)
}

// .proto.AccountID owner = 2;
inline bool TokenAllowance::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool TokenAllowance::has_owner() const {
  return _internal_has_owner();
}
inline const ::proto::AccountID& TokenAllowance::_internal_owner() const {
  const ::proto::AccountID* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TokenAllowance::owner() const {
  // @@protoc_insertion_point(field_get:proto.TokenAllowance.owner)
  return _internal_owner();
}
inline void TokenAllowance::unsafe_arena_set_allocated_owner(
    ::proto::AccountID* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenAllowance.owner)
}
inline ::proto::AccountID* TokenAllowance::release_owner() {
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TokenAllowance::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:proto.TokenAllowance.owner)
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TokenAllowance::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::proto::AccountID* TokenAllowance::mutable_owner() {
  ::proto::AccountID* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:proto.TokenAllowance.owner)
  return _msg;
}
inline void TokenAllowance::set_allocated_owner(::proto::AccountID* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenAllowance.owner)
}

// .proto.AccountID spender = 3;
inline bool TokenAllowance::_internal_has_spender() const {
  return this != internal_default_instance() && _impl_.spender_ != nullptr;
}
inline bool TokenAllowance::has_spender() const {
  return _internal_has_spender();
}
inline const ::proto::AccountID& TokenAllowance::_internal_spender() const {
  const ::proto::AccountID* p = _impl_.spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TokenAllowance::spender() const {
  // @@protoc_insertion_point(field_get:proto.TokenAllowance.spender)
  return _internal_spender();
}
inline void TokenAllowance::unsafe_arena_set_allocated_spender(
    ::proto::AccountID* spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  _impl_.spender_ = spender;
  if (spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenAllowance.spender)
}
inline ::proto::AccountID* TokenAllowance::release_spender() {
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TokenAllowance::unsafe_arena_release_spender() {
  // @@protoc_insertion_point(field_release:proto.TokenAllowance.spender)
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TokenAllowance::_internal_mutable_spender() {
  
  if (_impl_.spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_ = p;
  }
  return _impl_.spender_;
}
inline ::proto::AccountID* TokenAllowance::mutable_spender() {
  ::proto::AccountID* _msg = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:proto.TokenAllowance.spender)
  return _msg;
}
inline void TokenAllowance::set_allocated_spender(::proto::AccountID* spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  if (spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender));
    if (message_arena != submessage_arena) {
      spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_ = spender;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenAllowance.spender)
}

// int64 amount = 4;
inline void TokenAllowance::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t TokenAllowance::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t TokenAllowance::amount() const {
  // @@protoc_insertion_point(field_get:proto.TokenAllowance.amount)
  return _internal_amount();
}
inline void TokenAllowance::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void TokenAllowance::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.TokenAllowance.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fapprove_5fallowance_2eproto

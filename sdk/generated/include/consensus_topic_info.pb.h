// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus_topic_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_consensus_5ftopic_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_consensus_5ftopic_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "duration.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_consensus_5ftopic_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_consensus_5ftopic_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consensus_5ftopic_5finfo_2eproto;
namespace proto {
class ConsensusTopicInfo;
struct ConsensusTopicInfoDefaultTypeInternal;
extern ConsensusTopicInfoDefaultTypeInternal _ConsensusTopicInfo_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ConsensusTopicInfo* Arena::CreateMaybeMessage<::proto::ConsensusTopicInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ConsensusTopicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ConsensusTopicInfo) */ {
 public:
  inline ConsensusTopicInfo() : ConsensusTopicInfo(nullptr) {}
  ~ConsensusTopicInfo() override;
  explicit PROTOBUF_CONSTEXPR ConsensusTopicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusTopicInfo(const ConsensusTopicInfo& from);
  ConsensusTopicInfo(ConsensusTopicInfo&& from) noexcept
    : ConsensusTopicInfo() {
    *this = ::std::move(from);
  }

  inline ConsensusTopicInfo& operator=(const ConsensusTopicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusTopicInfo& operator=(ConsensusTopicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusTopicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusTopicInfo* internal_default_instance() {
    return reinterpret_cast<const ConsensusTopicInfo*>(
               &_ConsensusTopicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsensusTopicInfo& a, ConsensusTopicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusTopicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusTopicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusTopicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusTopicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusTopicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusTopicInfo& from) {
    ConsensusTopicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusTopicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ConsensusTopicInfo";
  }
  protected:
  explicit ConsensusTopicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 1,
    kRunningHashFieldNumber = 2,
    kLedgerIdFieldNumber = 9,
    kExpirationTimeFieldNumber = 4,
    kAdminKeyFieldNumber = 5,
    kSubmitKeyFieldNumber = 6,
    kAutoRenewPeriodFieldNumber = 7,
    kAutoRenewAccountFieldNumber = 8,
    kSequenceNumberFieldNumber = 3,
  };
  // string memo = 1;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes runningHash = 2;
  void clear_runninghash();
  const std::string& runninghash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runninghash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runninghash();
  PROTOBUF_NODISCARD std::string* release_runninghash();
  void set_allocated_runninghash(std::string* runninghash);
  private:
  const std::string& _internal_runninghash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runninghash(const std::string& value);
  std::string* _internal_mutable_runninghash();
  public:

  // bytes ledger_id = 9;
  void clear_ledger_id();
  const std::string& ledger_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_id();
  PROTOBUF_NODISCARD std::string* release_ledger_id();
  void set_allocated_ledger_id(std::string* ledger_id);
  private:
  const std::string& _internal_ledger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_id(const std::string& value);
  std::string* _internal_mutable_ledger_id();
  public:

  // .proto.Timestamp expirationTime = 4;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.Key adminKey = 5;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.Key submitKey = 6;
  bool has_submitkey() const;
  private:
  bool _internal_has_submitkey() const;
  public:
  void clear_submitkey();
  const ::proto::Key& submitkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_submitkey();
  ::proto::Key* mutable_submitkey();
  void set_allocated_submitkey(::proto::Key* submitkey);
  private:
  const ::proto::Key& _internal_submitkey() const;
  ::proto::Key* _internal_mutable_submitkey();
  public:
  void unsafe_arena_set_allocated_submitkey(
      ::proto::Key* submitkey);
  ::proto::Key* unsafe_arena_release_submitkey();

  // .proto.Duration autoRenewPeriod = 7;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.AccountID autoRenewAccount = 8;
  bool has_autorenewaccount() const;
  private:
  bool _internal_has_autorenewaccount() const;
  public:
  void clear_autorenewaccount();
  const ::proto::AccountID& autorenewaccount() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_autorenewaccount();
  ::proto::AccountID* mutable_autorenewaccount();
  void set_allocated_autorenewaccount(::proto::AccountID* autorenewaccount);
  private:
  const ::proto::AccountID& _internal_autorenewaccount() const;
  ::proto::AccountID* _internal_mutable_autorenewaccount();
  public:
  void unsafe_arena_set_allocated_autorenewaccount(
      ::proto::AccountID* autorenewaccount);
  ::proto::AccountID* unsafe_arena_release_autorenewaccount();

  // uint64 sequenceNumber = 3;
  void clear_sequencenumber();
  uint64_t sequencenumber() const;
  void set_sequencenumber(uint64_t value);
  private:
  uint64_t _internal_sequencenumber() const;
  void _internal_set_sequencenumber(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ConsensusTopicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runninghash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_id_;
    ::proto::Timestamp* expirationtime_;
    ::proto::Key* adminkey_;
    ::proto::Key* submitkey_;
    ::proto::Duration* autorenewperiod_;
    ::proto::AccountID* autorenewaccount_;
    uint64_t sequencenumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_consensus_5ftopic_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsensusTopicInfo

// string memo = 1;
inline void ConsensusTopicInfo::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& ConsensusTopicInfo::memo() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusTopicInfo::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ConsensusTopicInfo.memo)
}
inline std::string* ConsensusTopicInfo::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.memo)
  return _s;
}
inline const std::string& ConsensusTopicInfo::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void ConsensusTopicInfo::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusTopicInfo::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsensusTopicInfo::release_memo() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.memo)
  return _impl_.memo_.Release();
}
inline void ConsensusTopicInfo::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.memo)
}

// bytes runningHash = 2;
inline void ConsensusTopicInfo::clear_runninghash() {
  _impl_.runninghash_.ClearToEmpty();
}
inline const std::string& ConsensusTopicInfo::runninghash() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.runningHash)
  return _internal_runninghash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusTopicInfo::set_runninghash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runninghash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ConsensusTopicInfo.runningHash)
}
inline std::string* ConsensusTopicInfo::mutable_runninghash() {
  std::string* _s = _internal_mutable_runninghash();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.runningHash)
  return _s;
}
inline const std::string& ConsensusTopicInfo::_internal_runninghash() const {
  return _impl_.runninghash_.Get();
}
inline void ConsensusTopicInfo::_internal_set_runninghash(const std::string& value) {
  
  _impl_.runninghash_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusTopicInfo::_internal_mutable_runninghash() {
  
  return _impl_.runninghash_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsensusTopicInfo::release_runninghash() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.runningHash)
  return _impl_.runninghash_.Release();
}
inline void ConsensusTopicInfo::set_allocated_runninghash(std::string* runninghash) {
  if (runninghash != nullptr) {
    
  } else {
    
  }
  _impl_.runninghash_.SetAllocated(runninghash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runninghash_.IsDefault()) {
    _impl_.runninghash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.runningHash)
}

// uint64 sequenceNumber = 3;
inline void ConsensusTopicInfo::clear_sequencenumber() {
  _impl_.sequencenumber_ = uint64_t{0u};
}
inline uint64_t ConsensusTopicInfo::_internal_sequencenumber() const {
  return _impl_.sequencenumber_;
}
inline uint64_t ConsensusTopicInfo::sequencenumber() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.sequenceNumber)
  return _internal_sequencenumber();
}
inline void ConsensusTopicInfo::_internal_set_sequencenumber(uint64_t value) {
  
  _impl_.sequencenumber_ = value;
}
inline void ConsensusTopicInfo::set_sequencenumber(uint64_t value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:proto.ConsensusTopicInfo.sequenceNumber)
}

// .proto.Timestamp expirationTime = 4;
inline bool ConsensusTopicInfo::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool ConsensusTopicInfo::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& ConsensusTopicInfo::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ConsensusTopicInfo::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.expirationTime)
  return _internal_expirationtime();
}
inline void ConsensusTopicInfo::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusTopicInfo.expirationTime)
}
inline ::proto::Timestamp* ConsensusTopicInfo::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ConsensusTopicInfo::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ConsensusTopicInfo::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* ConsensusTopicInfo::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.expirationTime)
  return _msg;
}
inline void ConsensusTopicInfo::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.expirationTime)
}

// .proto.Key adminKey = 5;
inline bool ConsensusTopicInfo::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ConsensusTopicInfo::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ConsensusTopicInfo::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ConsensusTopicInfo::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.adminKey)
  return _internal_adminkey();
}
inline void ConsensusTopicInfo::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusTopicInfo.adminKey)
}
inline ::proto::Key* ConsensusTopicInfo::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ConsensusTopicInfo::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ConsensusTopicInfo::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ConsensusTopicInfo::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.adminKey)
  return _msg;
}
inline void ConsensusTopicInfo::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.adminKey)
}

// .proto.Key submitKey = 6;
inline bool ConsensusTopicInfo::_internal_has_submitkey() const {
  return this != internal_default_instance() && _impl_.submitkey_ != nullptr;
}
inline bool ConsensusTopicInfo::has_submitkey() const {
  return _internal_has_submitkey();
}
inline const ::proto::Key& ConsensusTopicInfo::_internal_submitkey() const {
  const ::proto::Key* p = _impl_.submitkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ConsensusTopicInfo::submitkey() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.submitKey)
  return _internal_submitkey();
}
inline void ConsensusTopicInfo::unsafe_arena_set_allocated_submitkey(
    ::proto::Key* submitkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitkey_);
  }
  _impl_.submitkey_ = submitkey;
  if (submitkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusTopicInfo.submitKey)
}
inline ::proto::Key* ConsensusTopicInfo::release_submitkey() {
  
  ::proto::Key* temp = _impl_.submitkey_;
  _impl_.submitkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ConsensusTopicInfo::unsafe_arena_release_submitkey() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.submitKey)
  
  ::proto::Key* temp = _impl_.submitkey_;
  _impl_.submitkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ConsensusTopicInfo::_internal_mutable_submitkey() {
  
  if (_impl_.submitkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.submitkey_ = p;
  }
  return _impl_.submitkey_;
}
inline ::proto::Key* ConsensusTopicInfo::mutable_submitkey() {
  ::proto::Key* _msg = _internal_mutable_submitkey();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.submitKey)
  return _msg;
}
inline void ConsensusTopicInfo::set_allocated_submitkey(::proto::Key* submitkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitkey_);
  }
  if (submitkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submitkey));
    if (message_arena != submessage_arena) {
      submitkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submitkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submitkey_ = submitkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.submitKey)
}

// .proto.Duration autoRenewPeriod = 7;
inline bool ConsensusTopicInfo::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool ConsensusTopicInfo::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& ConsensusTopicInfo::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& ConsensusTopicInfo::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void ConsensusTopicInfo::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusTopicInfo.autoRenewPeriod)
}
inline ::proto::Duration* ConsensusTopicInfo::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* ConsensusTopicInfo::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* ConsensusTopicInfo::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* ConsensusTopicInfo::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.autoRenewPeriod)
  return _msg;
}
inline void ConsensusTopicInfo::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.autoRenewPeriod)
}

// .proto.AccountID autoRenewAccount = 8;
inline bool ConsensusTopicInfo::_internal_has_autorenewaccount() const {
  return this != internal_default_instance() && _impl_.autorenewaccount_ != nullptr;
}
inline bool ConsensusTopicInfo::has_autorenewaccount() const {
  return _internal_has_autorenewaccount();
}
inline const ::proto::AccountID& ConsensusTopicInfo::_internal_autorenewaccount() const {
  const ::proto::AccountID* p = _impl_.autorenewaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ConsensusTopicInfo::autorenewaccount() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.autoRenewAccount)
  return _internal_autorenewaccount();
}
inline void ConsensusTopicInfo::unsafe_arena_set_allocated_autorenewaccount(
    ::proto::AccountID* autorenewaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewaccount_);
  }
  _impl_.autorenewaccount_ = autorenewaccount;
  if (autorenewaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusTopicInfo.autoRenewAccount)
}
inline ::proto::AccountID* ConsensusTopicInfo::release_autorenewaccount() {
  
  ::proto::AccountID* temp = _impl_.autorenewaccount_;
  _impl_.autorenewaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ConsensusTopicInfo::unsafe_arena_release_autorenewaccount() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.autoRenewAccount)
  
  ::proto::AccountID* temp = _impl_.autorenewaccount_;
  _impl_.autorenewaccount_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ConsensusTopicInfo::_internal_mutable_autorenewaccount() {
  
  if (_impl_.autorenewaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.autorenewaccount_ = p;
  }
  return _impl_.autorenewaccount_;
}
inline ::proto::AccountID* ConsensusTopicInfo::mutable_autorenewaccount() {
  ::proto::AccountID* _msg = _internal_mutable_autorenewaccount();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.autoRenewAccount)
  return _msg;
}
inline void ConsensusTopicInfo::set_allocated_autorenewaccount(::proto::AccountID* autorenewaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewaccount_);
  }
  if (autorenewaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewaccount));
    if (message_arena != submessage_arena) {
      autorenewaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewaccount_ = autorenewaccount;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.autoRenewAccount)
}

// bytes ledger_id = 9;
inline void ConsensusTopicInfo::clear_ledger_id() {
  _impl_.ledger_id_.ClearToEmpty();
}
inline const std::string& ConsensusTopicInfo::ledger_id() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusTopicInfo.ledger_id)
  return _internal_ledger_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusTopicInfo::set_ledger_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ledger_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ConsensusTopicInfo.ledger_id)
}
inline std::string* ConsensusTopicInfo::mutable_ledger_id() {
  std::string* _s = _internal_mutable_ledger_id();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusTopicInfo.ledger_id)
  return _s;
}
inline const std::string& ConsensusTopicInfo::_internal_ledger_id() const {
  return _impl_.ledger_id_.Get();
}
inline void ConsensusTopicInfo::_internal_set_ledger_id(const std::string& value) {
  
  _impl_.ledger_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusTopicInfo::_internal_mutable_ledger_id() {
  
  return _impl_.ledger_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsensusTopicInfo::release_ledger_id() {
  // @@protoc_insertion_point(field_release:proto.ConsensusTopicInfo.ledger_id)
  return _impl_.ledger_id_.Release();
}
inline void ConsensusTopicInfo::set_allocated_ledger_id(std::string* ledger_id) {
  if (ledger_id != nullptr) {
    
  } else {
    
  }
  _impl_.ledger_id_.SetAllocated(ledger_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ledger_id_.IsDefault()) {
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusTopicInfo.ledger_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_consensus_5ftopic_5finfo_2eproto

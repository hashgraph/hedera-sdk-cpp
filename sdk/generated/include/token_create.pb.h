// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_create.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_5fcreate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_5fcreate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "duration.pb.h"
#include "basic_types.pb.h"
#include "custom_fees.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_5fcreate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_5fcreate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_5fcreate_2eproto;
namespace proto {
class TokenCreateTransactionBody;
struct TokenCreateTransactionBodyDefaultTypeInternal;
extern TokenCreateTransactionBodyDefaultTypeInternal _TokenCreateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TokenCreateTransactionBody* Arena::CreateMaybeMessage<::proto::TokenCreateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TokenCreateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenCreateTransactionBody) */ {
 public:
  inline TokenCreateTransactionBody() : TokenCreateTransactionBody(nullptr) {}
  ~TokenCreateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR TokenCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenCreateTransactionBody(const TokenCreateTransactionBody& from);
  TokenCreateTransactionBody(TokenCreateTransactionBody&& from) noexcept
    : TokenCreateTransactionBody() {
    *this = ::std::move(from);
  }

  inline TokenCreateTransactionBody& operator=(const TokenCreateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenCreateTransactionBody& operator=(TokenCreateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenCreateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenCreateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const TokenCreateTransactionBody*>(
               &_TokenCreateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenCreateTransactionBody& a, TokenCreateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenCreateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenCreateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenCreateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenCreateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenCreateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenCreateTransactionBody& from) {
    TokenCreateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenCreateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenCreateTransactionBody";
  }
  protected:
  explicit TokenCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFeesFieldNumber = 21,
    kNameFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kMemoFieldNumber = 16,
    kTreasuryFieldNumber = 5,
    kAdminKeyFieldNumber = 6,
    kKycKeyFieldNumber = 7,
    kFreezeKeyFieldNumber = 8,
    kWipeKeyFieldNumber = 9,
    kSupplyKeyFieldNumber = 10,
    kExpiryFieldNumber = 13,
    kAutoRenewAccountFieldNumber = 14,
    kAutoRenewPeriodFieldNumber = 15,
    kFeeScheduleKeyFieldNumber = 20,
    kPauseKeyFieldNumber = 22,
    kInitialSupplyFieldNumber = 4,
    kDecimalsFieldNumber = 3,
    kFreezeDefaultFieldNumber = 11,
    kTokenTypeFieldNumber = 17,
    kSupplyTypeFieldNumber = 18,
    kMaxSupplyFieldNumber = 19,
  };
  // repeated .proto.CustomFee custom_fees = 21;
  int custom_fees_size() const;
  private:
  int _internal_custom_fees_size() const;
  public:
  void clear_custom_fees();
  ::proto::CustomFee* mutable_custom_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CustomFee >*
      mutable_custom_fees();
  private:
  const ::proto::CustomFee& _internal_custom_fees(int index) const;
  ::proto::CustomFee* _internal_add_custom_fees();
  public:
  const ::proto::CustomFee& custom_fees(int index) const;
  ::proto::CustomFee* add_custom_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CustomFee >&
      custom_fees() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string memo = 16;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .proto.AccountID treasury = 5;
  bool has_treasury() const;
  private:
  bool _internal_has_treasury() const;
  public:
  void clear_treasury();
  const ::proto::AccountID& treasury() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_treasury();
  ::proto::AccountID* mutable_treasury();
  void set_allocated_treasury(::proto::AccountID* treasury);
  private:
  const ::proto::AccountID& _internal_treasury() const;
  ::proto::AccountID* _internal_mutable_treasury();
  public:
  void unsafe_arena_set_allocated_treasury(
      ::proto::AccountID* treasury);
  ::proto::AccountID* unsafe_arena_release_treasury();

  // .proto.Key adminKey = 6;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.Key kycKey = 7;
  bool has_kyckey() const;
  private:
  bool _internal_has_kyckey() const;
  public:
  void clear_kyckey();
  const ::proto::Key& kyckey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_kyckey();
  ::proto::Key* mutable_kyckey();
  void set_allocated_kyckey(::proto::Key* kyckey);
  private:
  const ::proto::Key& _internal_kyckey() const;
  ::proto::Key* _internal_mutable_kyckey();
  public:
  void unsafe_arena_set_allocated_kyckey(
      ::proto::Key* kyckey);
  ::proto::Key* unsafe_arena_release_kyckey();

  // .proto.Key freezeKey = 8;
  bool has_freezekey() const;
  private:
  bool _internal_has_freezekey() const;
  public:
  void clear_freezekey();
  const ::proto::Key& freezekey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_freezekey();
  ::proto::Key* mutable_freezekey();
  void set_allocated_freezekey(::proto::Key* freezekey);
  private:
  const ::proto::Key& _internal_freezekey() const;
  ::proto::Key* _internal_mutable_freezekey();
  public:
  void unsafe_arena_set_allocated_freezekey(
      ::proto::Key* freezekey);
  ::proto::Key* unsafe_arena_release_freezekey();

  // .proto.Key wipeKey = 9;
  bool has_wipekey() const;
  private:
  bool _internal_has_wipekey() const;
  public:
  void clear_wipekey();
  const ::proto::Key& wipekey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_wipekey();
  ::proto::Key* mutable_wipekey();
  void set_allocated_wipekey(::proto::Key* wipekey);
  private:
  const ::proto::Key& _internal_wipekey() const;
  ::proto::Key* _internal_mutable_wipekey();
  public:
  void unsafe_arena_set_allocated_wipekey(
      ::proto::Key* wipekey);
  ::proto::Key* unsafe_arena_release_wipekey();

  // .proto.Key supplyKey = 10;
  bool has_supplykey() const;
  private:
  bool _internal_has_supplykey() const;
  public:
  void clear_supplykey();
  const ::proto::Key& supplykey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_supplykey();
  ::proto::Key* mutable_supplykey();
  void set_allocated_supplykey(::proto::Key* supplykey);
  private:
  const ::proto::Key& _internal_supplykey() const;
  ::proto::Key* _internal_mutable_supplykey();
  public:
  void unsafe_arena_set_allocated_supplykey(
      ::proto::Key* supplykey);
  ::proto::Key* unsafe_arena_release_supplykey();

  // .proto.Timestamp expiry = 13;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const ::proto::Timestamp& expiry() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expiry();
  ::proto::Timestamp* mutable_expiry();
  void set_allocated_expiry(::proto::Timestamp* expiry);
  private:
  const ::proto::Timestamp& _internal_expiry() const;
  ::proto::Timestamp* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      ::proto::Timestamp* expiry);
  ::proto::Timestamp* unsafe_arena_release_expiry();

  // .proto.AccountID autoRenewAccount = 14;
  bool has_autorenewaccount() const;
  private:
  bool _internal_has_autorenewaccount() const;
  public:
  void clear_autorenewaccount();
  const ::proto::AccountID& autorenewaccount() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_autorenewaccount();
  ::proto::AccountID* mutable_autorenewaccount();
  void set_allocated_autorenewaccount(::proto::AccountID* autorenewaccount);
  private:
  const ::proto::AccountID& _internal_autorenewaccount() const;
  ::proto::AccountID* _internal_mutable_autorenewaccount();
  public:
  void unsafe_arena_set_allocated_autorenewaccount(
      ::proto::AccountID* autorenewaccount);
  ::proto::AccountID* unsafe_arena_release_autorenewaccount();

  // .proto.Duration autoRenewPeriod = 15;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.Key fee_schedule_key = 20;
  bool has_fee_schedule_key() const;
  private:
  bool _internal_has_fee_schedule_key() const;
  public:
  void clear_fee_schedule_key();
  const ::proto::Key& fee_schedule_key() const;
  PROTOBUF_NODISCARD ::proto::Key* release_fee_schedule_key();
  ::proto::Key* mutable_fee_schedule_key();
  void set_allocated_fee_schedule_key(::proto::Key* fee_schedule_key);
  private:
  const ::proto::Key& _internal_fee_schedule_key() const;
  ::proto::Key* _internal_mutable_fee_schedule_key();
  public:
  void unsafe_arena_set_allocated_fee_schedule_key(
      ::proto::Key* fee_schedule_key);
  ::proto::Key* unsafe_arena_release_fee_schedule_key();

  // .proto.Key pause_key = 22;
  bool has_pause_key() const;
  private:
  bool _internal_has_pause_key() const;
  public:
  void clear_pause_key();
  const ::proto::Key& pause_key() const;
  PROTOBUF_NODISCARD ::proto::Key* release_pause_key();
  ::proto::Key* mutable_pause_key();
  void set_allocated_pause_key(::proto::Key* pause_key);
  private:
  const ::proto::Key& _internal_pause_key() const;
  ::proto::Key* _internal_mutable_pause_key();
  public:
  void unsafe_arena_set_allocated_pause_key(
      ::proto::Key* pause_key);
  ::proto::Key* unsafe_arena_release_pause_key();

  // uint64 initialSupply = 4;
  void clear_initialsupply();
  uint64_t initialsupply() const;
  void set_initialsupply(uint64_t value);
  private:
  uint64_t _internal_initialsupply() const;
  void _internal_set_initialsupply(uint64_t value);
  public:

  // uint32 decimals = 3;
  void clear_decimals();
  uint32_t decimals() const;
  void set_decimals(uint32_t value);
  private:
  uint32_t _internal_decimals() const;
  void _internal_set_decimals(uint32_t value);
  public:

  // bool freezeDefault = 11;
  void clear_freezedefault();
  bool freezedefault() const;
  void set_freezedefault(bool value);
  private:
  bool _internal_freezedefault() const;
  void _internal_set_freezedefault(bool value);
  public:

  // .proto.TokenType tokenType = 17;
  void clear_tokentype();
  ::proto::TokenType tokentype() const;
  void set_tokentype(::proto::TokenType value);
  private:
  ::proto::TokenType _internal_tokentype() const;
  void _internal_set_tokentype(::proto::TokenType value);
  public:

  // .proto.TokenSupplyType supplyType = 18;
  void clear_supplytype();
  ::proto::TokenSupplyType supplytype() const;
  void set_supplytype(::proto::TokenSupplyType value);
  private:
  ::proto::TokenSupplyType _internal_supplytype() const;
  void _internal_set_supplytype(::proto::TokenSupplyType value);
  public:

  // int64 maxSupply = 19;
  void clear_maxsupply();
  int64_t maxsupply() const;
  void set_maxsupply(int64_t value);
  private:
  int64_t _internal_maxsupply() const;
  void _internal_set_maxsupply(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TokenCreateTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CustomFee > custom_fees_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::proto::AccountID* treasury_;
    ::proto::Key* adminkey_;
    ::proto::Key* kyckey_;
    ::proto::Key* freezekey_;
    ::proto::Key* wipekey_;
    ::proto::Key* supplykey_;
    ::proto::Timestamp* expiry_;
    ::proto::AccountID* autorenewaccount_;
    ::proto::Duration* autorenewperiod_;
    ::proto::Key* fee_schedule_key_;
    ::proto::Key* pause_key_;
    uint64_t initialsupply_;
    uint32_t decimals_;
    bool freezedefault_;
    int tokentype_;
    int supplytype_;
    int64_t maxsupply_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fcreate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenCreateTransactionBody

// string name = 1;
inline void TokenCreateTransactionBody::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TokenCreateTransactionBody::name() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenCreateTransactionBody::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.name)
}
inline std::string* TokenCreateTransactionBody::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.name)
  return _s;
}
inline const std::string& TokenCreateTransactionBody::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TokenCreateTransactionBody::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenCreateTransactionBody::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenCreateTransactionBody::release_name() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.name)
  return _impl_.name_.Release();
}
inline void TokenCreateTransactionBody::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.name)
}

// string symbol = 2;
inline void TokenCreateTransactionBody::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& TokenCreateTransactionBody::symbol() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenCreateTransactionBody::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.symbol)
}
inline std::string* TokenCreateTransactionBody::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.symbol)
  return _s;
}
inline const std::string& TokenCreateTransactionBody::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void TokenCreateTransactionBody::_internal_set_symbol(const std::string& value) {
  
  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenCreateTransactionBody::_internal_mutable_symbol() {
  
  return _impl_.symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenCreateTransactionBody::release_symbol() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.symbol)
  return _impl_.symbol_.Release();
}
inline void TokenCreateTransactionBody::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  _impl_.symbol_.SetAllocated(symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.symbol)
}

// uint32 decimals = 3;
inline void TokenCreateTransactionBody::clear_decimals() {
  _impl_.decimals_ = 0u;
}
inline uint32_t TokenCreateTransactionBody::_internal_decimals() const {
  return _impl_.decimals_;
}
inline uint32_t TokenCreateTransactionBody::decimals() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.decimals)
  return _internal_decimals();
}
inline void TokenCreateTransactionBody::_internal_set_decimals(uint32_t value) {
  
  _impl_.decimals_ = value;
}
inline void TokenCreateTransactionBody::set_decimals(uint32_t value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.decimals)
}

// uint64 initialSupply = 4;
inline void TokenCreateTransactionBody::clear_initialsupply() {
  _impl_.initialsupply_ = uint64_t{0u};
}
inline uint64_t TokenCreateTransactionBody::_internal_initialsupply() const {
  return _impl_.initialsupply_;
}
inline uint64_t TokenCreateTransactionBody::initialsupply() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.initialSupply)
  return _internal_initialsupply();
}
inline void TokenCreateTransactionBody::_internal_set_initialsupply(uint64_t value) {
  
  _impl_.initialsupply_ = value;
}
inline void TokenCreateTransactionBody::set_initialsupply(uint64_t value) {
  _internal_set_initialsupply(value);
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.initialSupply)
}

// .proto.AccountID treasury = 5;
inline bool TokenCreateTransactionBody::_internal_has_treasury() const {
  return this != internal_default_instance() && _impl_.treasury_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_treasury() const {
  return _internal_has_treasury();
}
inline const ::proto::AccountID& TokenCreateTransactionBody::_internal_treasury() const {
  const ::proto::AccountID* p = _impl_.treasury_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TokenCreateTransactionBody::treasury() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.treasury)
  return _internal_treasury();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_treasury(
    ::proto::AccountID* treasury) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.treasury_);
  }
  _impl_.treasury_ = treasury;
  if (treasury) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.treasury)
}
inline ::proto::AccountID* TokenCreateTransactionBody::release_treasury() {
  
  ::proto::AccountID* temp = _impl_.treasury_;
  _impl_.treasury_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TokenCreateTransactionBody::unsafe_arena_release_treasury() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.treasury)
  
  ::proto::AccountID* temp = _impl_.treasury_;
  _impl_.treasury_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TokenCreateTransactionBody::_internal_mutable_treasury() {
  
  if (_impl_.treasury_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.treasury_ = p;
  }
  return _impl_.treasury_;
}
inline ::proto::AccountID* TokenCreateTransactionBody::mutable_treasury() {
  ::proto::AccountID* _msg = _internal_mutable_treasury();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.treasury)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_treasury(::proto::AccountID* treasury) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.treasury_);
  }
  if (treasury) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(treasury));
    if (message_arena != submessage_arena) {
      treasury = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasury, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.treasury_ = treasury;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.treasury)
}

// .proto.Key adminKey = 6;
inline bool TokenCreateTransactionBody::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.adminKey)
  return _internal_adminkey();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.adminKey)
}
inline ::proto::Key* TokenCreateTransactionBody::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.adminKey)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.adminKey)
}

// .proto.Key kycKey = 7;
inline bool TokenCreateTransactionBody::_internal_has_kyckey() const {
  return this != internal_default_instance() && _impl_.kyckey_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_kyckey() const {
  return _internal_has_kyckey();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_kyckey() const {
  const ::proto::Key* p = _impl_.kyckey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::kyckey() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.kycKey)
  return _internal_kyckey();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_kyckey(
    ::proto::Key* kyckey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kyckey_);
  }
  _impl_.kyckey_ = kyckey;
  if (kyckey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.kycKey)
}
inline ::proto::Key* TokenCreateTransactionBody::release_kyckey() {
  
  ::proto::Key* temp = _impl_.kyckey_;
  _impl_.kyckey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_kyckey() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.kycKey)
  
  ::proto::Key* temp = _impl_.kyckey_;
  _impl_.kyckey_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_kyckey() {
  
  if (_impl_.kyckey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.kyckey_ = p;
  }
  return _impl_.kyckey_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_kyckey() {
  ::proto::Key* _msg = _internal_mutable_kyckey();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.kycKey)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_kyckey(::proto::Key* kyckey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kyckey_);
  }
  if (kyckey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kyckey));
    if (message_arena != submessage_arena) {
      kyckey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kyckey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kyckey_ = kyckey;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.kycKey)
}

// .proto.Key freezeKey = 8;
inline bool TokenCreateTransactionBody::_internal_has_freezekey() const {
  return this != internal_default_instance() && _impl_.freezekey_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_freezekey() const {
  return _internal_has_freezekey();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_freezekey() const {
  const ::proto::Key* p = _impl_.freezekey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::freezekey() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.freezeKey)
  return _internal_freezekey();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_freezekey(
    ::proto::Key* freezekey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freezekey_);
  }
  _impl_.freezekey_ = freezekey;
  if (freezekey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.freezeKey)
}
inline ::proto::Key* TokenCreateTransactionBody::release_freezekey() {
  
  ::proto::Key* temp = _impl_.freezekey_;
  _impl_.freezekey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_freezekey() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.freezeKey)
  
  ::proto::Key* temp = _impl_.freezekey_;
  _impl_.freezekey_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_freezekey() {
  
  if (_impl_.freezekey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.freezekey_ = p;
  }
  return _impl_.freezekey_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_freezekey() {
  ::proto::Key* _msg = _internal_mutable_freezekey();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.freezeKey)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_freezekey(::proto::Key* freezekey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freezekey_);
  }
  if (freezekey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freezekey));
    if (message_arena != submessage_arena) {
      freezekey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freezekey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.freezekey_ = freezekey;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.freezeKey)
}

// .proto.Key wipeKey = 9;
inline bool TokenCreateTransactionBody::_internal_has_wipekey() const {
  return this != internal_default_instance() && _impl_.wipekey_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_wipekey() const {
  return _internal_has_wipekey();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_wipekey() const {
  const ::proto::Key* p = _impl_.wipekey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::wipekey() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.wipeKey)
  return _internal_wipekey();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_wipekey(
    ::proto::Key* wipekey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wipekey_);
  }
  _impl_.wipekey_ = wipekey;
  if (wipekey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.wipeKey)
}
inline ::proto::Key* TokenCreateTransactionBody::release_wipekey() {
  
  ::proto::Key* temp = _impl_.wipekey_;
  _impl_.wipekey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_wipekey() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.wipeKey)
  
  ::proto::Key* temp = _impl_.wipekey_;
  _impl_.wipekey_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_wipekey() {
  
  if (_impl_.wipekey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.wipekey_ = p;
  }
  return _impl_.wipekey_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_wipekey() {
  ::proto::Key* _msg = _internal_mutable_wipekey();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.wipeKey)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_wipekey(::proto::Key* wipekey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wipekey_);
  }
  if (wipekey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wipekey));
    if (message_arena != submessage_arena) {
      wipekey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wipekey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wipekey_ = wipekey;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.wipeKey)
}

// .proto.Key supplyKey = 10;
inline bool TokenCreateTransactionBody::_internal_has_supplykey() const {
  return this != internal_default_instance() && _impl_.supplykey_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_supplykey() const {
  return _internal_has_supplykey();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_supplykey() const {
  const ::proto::Key* p = _impl_.supplykey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::supplykey() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.supplyKey)
  return _internal_supplykey();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_supplykey(
    ::proto::Key* supplykey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.supplykey_);
  }
  _impl_.supplykey_ = supplykey;
  if (supplykey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.supplyKey)
}
inline ::proto::Key* TokenCreateTransactionBody::release_supplykey() {
  
  ::proto::Key* temp = _impl_.supplykey_;
  _impl_.supplykey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_supplykey() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.supplyKey)
  
  ::proto::Key* temp = _impl_.supplykey_;
  _impl_.supplykey_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_supplykey() {
  
  if (_impl_.supplykey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.supplykey_ = p;
  }
  return _impl_.supplykey_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_supplykey() {
  ::proto::Key* _msg = _internal_mutable_supplykey();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.supplyKey)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_supplykey(::proto::Key* supplykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.supplykey_);
  }
  if (supplykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supplykey));
    if (message_arena != submessage_arena) {
      supplykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supplykey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.supplykey_ = supplykey;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.supplyKey)
}

// bool freezeDefault = 11;
inline void TokenCreateTransactionBody::clear_freezedefault() {
  _impl_.freezedefault_ = false;
}
inline bool TokenCreateTransactionBody::_internal_freezedefault() const {
  return _impl_.freezedefault_;
}
inline bool TokenCreateTransactionBody::freezedefault() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.freezeDefault)
  return _internal_freezedefault();
}
inline void TokenCreateTransactionBody::_internal_set_freezedefault(bool value) {
  
  _impl_.freezedefault_ = value;
}
inline void TokenCreateTransactionBody::set_freezedefault(bool value) {
  _internal_set_freezedefault(value);
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.freezeDefault)
}

// .proto.Timestamp expiry = 13;
inline bool TokenCreateTransactionBody::_internal_has_expiry() const {
  return this != internal_default_instance() && _impl_.expiry_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_expiry() const {
  return _internal_has_expiry();
}
inline const ::proto::Timestamp& TokenCreateTransactionBody::_internal_expiry() const {
  const ::proto::Timestamp* p = _impl_.expiry_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& TokenCreateTransactionBody::expiry() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.expiry)
  return _internal_expiry();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_expiry(
    ::proto::Timestamp* expiry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiry_);
  }
  _impl_.expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.expiry)
}
inline ::proto::Timestamp* TokenCreateTransactionBody::release_expiry() {
  
  ::proto::Timestamp* temp = _impl_.expiry_;
  _impl_.expiry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* TokenCreateTransactionBody::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.expiry)
  
  ::proto::Timestamp* temp = _impl_.expiry_;
  _impl_.expiry_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* TokenCreateTransactionBody::_internal_mutable_expiry() {
  
  if (_impl_.expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expiry_ = p;
  }
  return _impl_.expiry_;
}
inline ::proto::Timestamp* TokenCreateTransactionBody::mutable_expiry() {
  ::proto::Timestamp* _msg = _internal_mutable_expiry();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.expiry)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_expiry(::proto::Timestamp* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry));
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.expiry)
}

// .proto.AccountID autoRenewAccount = 14;
inline bool TokenCreateTransactionBody::_internal_has_autorenewaccount() const {
  return this != internal_default_instance() && _impl_.autorenewaccount_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_autorenewaccount() const {
  return _internal_has_autorenewaccount();
}
inline const ::proto::AccountID& TokenCreateTransactionBody::_internal_autorenewaccount() const {
  const ::proto::AccountID* p = _impl_.autorenewaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TokenCreateTransactionBody::autorenewaccount() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.autoRenewAccount)
  return _internal_autorenewaccount();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_autorenewaccount(
    ::proto::AccountID* autorenewaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewaccount_);
  }
  _impl_.autorenewaccount_ = autorenewaccount;
  if (autorenewaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.autoRenewAccount)
}
inline ::proto::AccountID* TokenCreateTransactionBody::release_autorenewaccount() {
  
  ::proto::AccountID* temp = _impl_.autorenewaccount_;
  _impl_.autorenewaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TokenCreateTransactionBody::unsafe_arena_release_autorenewaccount() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.autoRenewAccount)
  
  ::proto::AccountID* temp = _impl_.autorenewaccount_;
  _impl_.autorenewaccount_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TokenCreateTransactionBody::_internal_mutable_autorenewaccount() {
  
  if (_impl_.autorenewaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.autorenewaccount_ = p;
  }
  return _impl_.autorenewaccount_;
}
inline ::proto::AccountID* TokenCreateTransactionBody::mutable_autorenewaccount() {
  ::proto::AccountID* _msg = _internal_mutable_autorenewaccount();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.autoRenewAccount)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_autorenewaccount(::proto::AccountID* autorenewaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewaccount_);
  }
  if (autorenewaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewaccount));
    if (message_arena != submessage_arena) {
      autorenewaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewaccount_ = autorenewaccount;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.autoRenewAccount)
}

// .proto.Duration autoRenewPeriod = 15;
inline bool TokenCreateTransactionBody::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& TokenCreateTransactionBody::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& TokenCreateTransactionBody::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.autoRenewPeriod)
}
inline ::proto::Duration* TokenCreateTransactionBody::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* TokenCreateTransactionBody::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* TokenCreateTransactionBody::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* TokenCreateTransactionBody::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.autoRenewPeriod)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.autoRenewPeriod)
}

// string memo = 16;
inline void TokenCreateTransactionBody::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& TokenCreateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenCreateTransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.memo)
}
inline std::string* TokenCreateTransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.memo)
  return _s;
}
inline const std::string& TokenCreateTransactionBody::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void TokenCreateTransactionBody::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenCreateTransactionBody::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenCreateTransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.memo)
  return _impl_.memo_.Release();
}
inline void TokenCreateTransactionBody::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.memo)
}

// .proto.TokenType tokenType = 17;
inline void TokenCreateTransactionBody::clear_tokentype() {
  _impl_.tokentype_ = 0;
}
inline ::proto::TokenType TokenCreateTransactionBody::_internal_tokentype() const {
  return static_cast< ::proto::TokenType >(_impl_.tokentype_);
}
inline ::proto::TokenType TokenCreateTransactionBody::tokentype() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.tokenType)
  return _internal_tokentype();
}
inline void TokenCreateTransactionBody::_internal_set_tokentype(::proto::TokenType value) {
  
  _impl_.tokentype_ = value;
}
inline void TokenCreateTransactionBody::set_tokentype(::proto::TokenType value) {
  _internal_set_tokentype(value);
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.tokenType)
}

// .proto.TokenSupplyType supplyType = 18;
inline void TokenCreateTransactionBody::clear_supplytype() {
  _impl_.supplytype_ = 0;
}
inline ::proto::TokenSupplyType TokenCreateTransactionBody::_internal_supplytype() const {
  return static_cast< ::proto::TokenSupplyType >(_impl_.supplytype_);
}
inline ::proto::TokenSupplyType TokenCreateTransactionBody::supplytype() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.supplyType)
  return _internal_supplytype();
}
inline void TokenCreateTransactionBody::_internal_set_supplytype(::proto::TokenSupplyType value) {
  
  _impl_.supplytype_ = value;
}
inline void TokenCreateTransactionBody::set_supplytype(::proto::TokenSupplyType value) {
  _internal_set_supplytype(value);
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.supplyType)
}

// int64 maxSupply = 19;
inline void TokenCreateTransactionBody::clear_maxsupply() {
  _impl_.maxsupply_ = int64_t{0};
}
inline int64_t TokenCreateTransactionBody::_internal_maxsupply() const {
  return _impl_.maxsupply_;
}
inline int64_t TokenCreateTransactionBody::maxsupply() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.maxSupply)
  return _internal_maxsupply();
}
inline void TokenCreateTransactionBody::_internal_set_maxsupply(int64_t value) {
  
  _impl_.maxsupply_ = value;
}
inline void TokenCreateTransactionBody::set_maxsupply(int64_t value) {
  _internal_set_maxsupply(value);
  // @@protoc_insertion_point(field_set:proto.TokenCreateTransactionBody.maxSupply)
}

// .proto.Key fee_schedule_key = 20;
inline bool TokenCreateTransactionBody::_internal_has_fee_schedule_key() const {
  return this != internal_default_instance() && _impl_.fee_schedule_key_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_fee_schedule_key() const {
  return _internal_has_fee_schedule_key();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_fee_schedule_key() const {
  const ::proto::Key* p = _impl_.fee_schedule_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::fee_schedule_key() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.fee_schedule_key)
  return _internal_fee_schedule_key();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_fee_schedule_key(
    ::proto::Key* fee_schedule_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_schedule_key_);
  }
  _impl_.fee_schedule_key_ = fee_schedule_key;
  if (fee_schedule_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.fee_schedule_key)
}
inline ::proto::Key* TokenCreateTransactionBody::release_fee_schedule_key() {
  
  ::proto::Key* temp = _impl_.fee_schedule_key_;
  _impl_.fee_schedule_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_fee_schedule_key() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.fee_schedule_key)
  
  ::proto::Key* temp = _impl_.fee_schedule_key_;
  _impl_.fee_schedule_key_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_fee_schedule_key() {
  
  if (_impl_.fee_schedule_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.fee_schedule_key_ = p;
  }
  return _impl_.fee_schedule_key_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_fee_schedule_key() {
  ::proto::Key* _msg = _internal_mutable_fee_schedule_key();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.fee_schedule_key)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_fee_schedule_key(::proto::Key* fee_schedule_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_schedule_key_);
  }
  if (fee_schedule_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_schedule_key));
    if (message_arena != submessage_arena) {
      fee_schedule_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_schedule_key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fee_schedule_key_ = fee_schedule_key;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.fee_schedule_key)
}

// repeated .proto.CustomFee custom_fees = 21;
inline int TokenCreateTransactionBody::_internal_custom_fees_size() const {
  return _impl_.custom_fees_.size();
}
inline int TokenCreateTransactionBody::custom_fees_size() const {
  return _internal_custom_fees_size();
}
inline ::proto::CustomFee* TokenCreateTransactionBody::mutable_custom_fees(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.custom_fees)
  return _impl_.custom_fees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CustomFee >*
TokenCreateTransactionBody::mutable_custom_fees() {
  // @@protoc_insertion_point(field_mutable_list:proto.TokenCreateTransactionBody.custom_fees)
  return &_impl_.custom_fees_;
}
inline const ::proto::CustomFee& TokenCreateTransactionBody::_internal_custom_fees(int index) const {
  return _impl_.custom_fees_.Get(index);
}
inline const ::proto::CustomFee& TokenCreateTransactionBody::custom_fees(int index) const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.custom_fees)
  return _internal_custom_fees(index);
}
inline ::proto::CustomFee* TokenCreateTransactionBody::_internal_add_custom_fees() {
  return _impl_.custom_fees_.Add();
}
inline ::proto::CustomFee* TokenCreateTransactionBody::add_custom_fees() {
  ::proto::CustomFee* _add = _internal_add_custom_fees();
  // @@protoc_insertion_point(field_add:proto.TokenCreateTransactionBody.custom_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::CustomFee >&
TokenCreateTransactionBody::custom_fees() const {
  // @@protoc_insertion_point(field_list:proto.TokenCreateTransactionBody.custom_fees)
  return _impl_.custom_fees_;
}

// .proto.Key pause_key = 22;
inline bool TokenCreateTransactionBody::_internal_has_pause_key() const {
  return this != internal_default_instance() && _impl_.pause_key_ != nullptr;
}
inline bool TokenCreateTransactionBody::has_pause_key() const {
  return _internal_has_pause_key();
}
inline const ::proto::Key& TokenCreateTransactionBody::_internal_pause_key() const {
  const ::proto::Key* p = _impl_.pause_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& TokenCreateTransactionBody::pause_key() const {
  // @@protoc_insertion_point(field_get:proto.TokenCreateTransactionBody.pause_key)
  return _internal_pause_key();
}
inline void TokenCreateTransactionBody::unsafe_arena_set_allocated_pause_key(
    ::proto::Key* pause_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pause_key_);
  }
  _impl_.pause_key_ = pause_key;
  if (pause_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenCreateTransactionBody.pause_key)
}
inline ::proto::Key* TokenCreateTransactionBody::release_pause_key() {
  
  ::proto::Key* temp = _impl_.pause_key_;
  _impl_.pause_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::unsafe_arena_release_pause_key() {
  // @@protoc_insertion_point(field_release:proto.TokenCreateTransactionBody.pause_key)
  
  ::proto::Key* temp = _impl_.pause_key_;
  _impl_.pause_key_ = nullptr;
  return temp;
}
inline ::proto::Key* TokenCreateTransactionBody::_internal_mutable_pause_key() {
  
  if (_impl_.pause_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.pause_key_ = p;
  }
  return _impl_.pause_key_;
}
inline ::proto::Key* TokenCreateTransactionBody::mutable_pause_key() {
  ::proto::Key* _msg = _internal_mutable_pause_key();
  // @@protoc_insertion_point(field_mutable:proto.TokenCreateTransactionBody.pause_key)
  return _msg;
}
inline void TokenCreateTransactionBody::set_allocated_pause_key(::proto::Key* pause_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pause_key_);
  }
  if (pause_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pause_key));
    if (message_arena != submessage_arena) {
      pause_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pause_key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pause_key_ = pause_key;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenCreateTransactionBody.pause_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_5fcreate_2eproto

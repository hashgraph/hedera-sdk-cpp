// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_get_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contract_5fget_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contract_5fget_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "timestamp.pb.h"
#include "duration.pb.h"
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_5fget_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_5fget_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fget_5finfo_2eproto;
namespace proto {
class ContractGetInfoQuery;
struct ContractGetInfoQueryDefaultTypeInternal;
extern ContractGetInfoQueryDefaultTypeInternal _ContractGetInfoQuery_default_instance_;
class ContractGetInfoResponse;
struct ContractGetInfoResponseDefaultTypeInternal;
extern ContractGetInfoResponseDefaultTypeInternal _ContractGetInfoResponse_default_instance_;
class ContractGetInfoResponse_ContractInfo;
struct ContractGetInfoResponse_ContractInfoDefaultTypeInternal;
extern ContractGetInfoResponse_ContractInfoDefaultTypeInternal _ContractGetInfoResponse_ContractInfo_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ContractGetInfoQuery* Arena::CreateMaybeMessage<::proto::ContractGetInfoQuery>(Arena*);
template<> ::proto::ContractGetInfoResponse* Arena::CreateMaybeMessage<::proto::ContractGetInfoResponse>(Arena*);
template<> ::proto::ContractGetInfoResponse_ContractInfo* Arena::CreateMaybeMessage<::proto::ContractGetInfoResponse_ContractInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ContractGetInfoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractGetInfoQuery) */ {
 public:
  inline ContractGetInfoQuery() : ContractGetInfoQuery(nullptr) {}
  ~ContractGetInfoQuery() override;
  explicit PROTOBUF_CONSTEXPR ContractGetInfoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractGetInfoQuery(const ContractGetInfoQuery& from);
  ContractGetInfoQuery(ContractGetInfoQuery&& from) noexcept
    : ContractGetInfoQuery() {
    *this = ::std::move(from);
  }

  inline ContractGetInfoQuery& operator=(const ContractGetInfoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractGetInfoQuery& operator=(ContractGetInfoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractGetInfoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractGetInfoQuery* internal_default_instance() {
    return reinterpret_cast<const ContractGetInfoQuery*>(
               &_ContractGetInfoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractGetInfoQuery& a, ContractGetInfoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractGetInfoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractGetInfoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractGetInfoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractGetInfoQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractGetInfoQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractGetInfoQuery& from) {
    ContractGetInfoQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractGetInfoQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractGetInfoQuery";
  }
  protected:
  explicit ContractGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kContractIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.ContractID contractID = 2;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // @@protoc_insertion_point(class_scope:proto.ContractGetInfoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::ContractID* contractid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fget_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ContractGetInfoResponse_ContractInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractGetInfoResponse.ContractInfo) */ {
 public:
  inline ContractGetInfoResponse_ContractInfo() : ContractGetInfoResponse_ContractInfo(nullptr) {}
  ~ContractGetInfoResponse_ContractInfo() override;
  explicit PROTOBUF_CONSTEXPR ContractGetInfoResponse_ContractInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractGetInfoResponse_ContractInfo(const ContractGetInfoResponse_ContractInfo& from);
  ContractGetInfoResponse_ContractInfo(ContractGetInfoResponse_ContractInfo&& from) noexcept
    : ContractGetInfoResponse_ContractInfo() {
    *this = ::std::move(from);
  }

  inline ContractGetInfoResponse_ContractInfo& operator=(const ContractGetInfoResponse_ContractInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractGetInfoResponse_ContractInfo& operator=(ContractGetInfoResponse_ContractInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractGetInfoResponse_ContractInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractGetInfoResponse_ContractInfo* internal_default_instance() {
    return reinterpret_cast<const ContractGetInfoResponse_ContractInfo*>(
               &_ContractGetInfoResponse_ContractInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContractGetInfoResponse_ContractInfo& a, ContractGetInfoResponse_ContractInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractGetInfoResponse_ContractInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractGetInfoResponse_ContractInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractGetInfoResponse_ContractInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractGetInfoResponse_ContractInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractGetInfoResponse_ContractInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractGetInfoResponse_ContractInfo& from) {
    ContractGetInfoResponse_ContractInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractGetInfoResponse_ContractInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractGetInfoResponse.ContractInfo";
  }
  protected:
  explicit ContractGetInfoResponse_ContractInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenRelationshipsFieldNumber = 11,
    kContractAccountIDFieldNumber = 3,
    kMemoFieldNumber = 8,
    kLedgerIdFieldNumber = 12,
    kContractIDFieldNumber = 1,
    kAccountIDFieldNumber = 2,
    kAdminKeyFieldNumber = 4,
    kExpirationTimeFieldNumber = 5,
    kAutoRenewPeriodFieldNumber = 6,
    kAutoRenewAccountIdFieldNumber = 13,
    kStakingInfoFieldNumber = 15,
    kStorageFieldNumber = 7,
    kBalanceFieldNumber = 9,
    kDeletedFieldNumber = 10,
    kMaxAutomaticTokenAssociationsFieldNumber = 14,
  };
  // repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];
  PROTOBUF_DEPRECATED int tokenrelationships_size() const;
  private:
  int _internal_tokenrelationships_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_tokenrelationships();
  PROTOBUF_DEPRECATED ::proto::TokenRelationship* mutable_tokenrelationships(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >*
      mutable_tokenrelationships();
  private:
  const ::proto::TokenRelationship& _internal_tokenrelationships(int index) const;
  ::proto::TokenRelationship* _internal_add_tokenrelationships();
  public:
  PROTOBUF_DEPRECATED const ::proto::TokenRelationship& tokenrelationships(int index) const;
  PROTOBUF_DEPRECATED ::proto::TokenRelationship* add_tokenrelationships();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >&
      tokenrelationships() const;

  // string contractAccountID = 3;
  void clear_contractaccountid();
  const std::string& contractaccountid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contractaccountid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contractaccountid();
  PROTOBUF_NODISCARD std::string* release_contractaccountid();
  void set_allocated_contractaccountid(std::string* contractaccountid);
  private:
  const std::string& _internal_contractaccountid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contractaccountid(const std::string& value);
  std::string* _internal_mutable_contractaccountid();
  public:

  // string memo = 8;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes ledger_id = 12;
  void clear_ledger_id();
  const std::string& ledger_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_id();
  PROTOBUF_NODISCARD std::string* release_ledger_id();
  void set_allocated_ledger_id(std::string* ledger_id);
  private:
  const std::string& _internal_ledger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_id(const std::string& value);
  std::string* _internal_mutable_ledger_id();
  public:

  // .proto.ContractID contractID = 1;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // .proto.AccountID accountID = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // .proto.Key adminKey = 4;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.Timestamp expirationTime = 5;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.Duration autoRenewPeriod = 6;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.AccountID auto_renew_account_id = 13;
  bool has_auto_renew_account_id() const;
  private:
  bool _internal_has_auto_renew_account_id() const;
  public:
  void clear_auto_renew_account_id();
  const ::proto::AccountID& auto_renew_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_auto_renew_account_id();
  ::proto::AccountID* mutable_auto_renew_account_id();
  void set_allocated_auto_renew_account_id(::proto::AccountID* auto_renew_account_id);
  private:
  const ::proto::AccountID& _internal_auto_renew_account_id() const;
  ::proto::AccountID* _internal_mutable_auto_renew_account_id();
  public:
  void unsafe_arena_set_allocated_auto_renew_account_id(
      ::proto::AccountID* auto_renew_account_id);
  ::proto::AccountID* unsafe_arena_release_auto_renew_account_id();

  // .proto.StakingInfo staking_info = 15;
  bool has_staking_info() const;
  private:
  bool _internal_has_staking_info() const;
  public:
  void clear_staking_info();
  const ::proto::StakingInfo& staking_info() const;
  PROTOBUF_NODISCARD ::proto::StakingInfo* release_staking_info();
  ::proto::StakingInfo* mutable_staking_info();
  void set_allocated_staking_info(::proto::StakingInfo* staking_info);
  private:
  const ::proto::StakingInfo& _internal_staking_info() const;
  ::proto::StakingInfo* _internal_mutable_staking_info();
  public:
  void unsafe_arena_set_allocated_staking_info(
      ::proto::StakingInfo* staking_info);
  ::proto::StakingInfo* unsafe_arena_release_staking_info();

  // int64 storage = 7;
  void clear_storage();
  int64_t storage() const;
  void set_storage(int64_t value);
  private:
  int64_t _internal_storage() const;
  void _internal_set_storage(int64_t value);
  public:

  // uint64 balance = 9;
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // bool deleted = 10;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // int32 max_automatic_token_associations = 14;
  void clear_max_automatic_token_associations();
  int32_t max_automatic_token_associations() const;
  void set_max_automatic_token_associations(int32_t value);
  private:
  int32_t _internal_max_automatic_token_associations() const;
  void _internal_set_max_automatic_token_associations(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ContractGetInfoResponse.ContractInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship > tokenrelationships_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaccountid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_id_;
    ::proto::ContractID* contractid_;
    ::proto::AccountID* accountid_;
    ::proto::Key* adminkey_;
    ::proto::Timestamp* expirationtime_;
    ::proto::Duration* autorenewperiod_;
    ::proto::AccountID* auto_renew_account_id_;
    ::proto::StakingInfo* staking_info_;
    int64_t storage_;
    uint64_t balance_;
    bool deleted_;
    int32_t max_automatic_token_associations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fget_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ContractGetInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractGetInfoResponse) */ {
 public:
  inline ContractGetInfoResponse() : ContractGetInfoResponse(nullptr) {}
  ~ContractGetInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ContractGetInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractGetInfoResponse(const ContractGetInfoResponse& from);
  ContractGetInfoResponse(ContractGetInfoResponse&& from) noexcept
    : ContractGetInfoResponse() {
    *this = ::std::move(from);
  }

  inline ContractGetInfoResponse& operator=(const ContractGetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractGetInfoResponse& operator=(ContractGetInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractGetInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractGetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ContractGetInfoResponse*>(
               &_ContractGetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContractGetInfoResponse& a, ContractGetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractGetInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractGetInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractGetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractGetInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractGetInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractGetInfoResponse& from) {
    ContractGetInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractGetInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractGetInfoResponse";
  }
  protected:
  explicit ContractGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContractGetInfoResponse_ContractInfo ContractInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kContractInfoFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.ContractGetInfoResponse.ContractInfo contractInfo = 2;
  bool has_contractinfo() const;
  private:
  bool _internal_has_contractinfo() const;
  public:
  void clear_contractinfo();
  const ::proto::ContractGetInfoResponse_ContractInfo& contractinfo() const;
  PROTOBUF_NODISCARD ::proto::ContractGetInfoResponse_ContractInfo* release_contractinfo();
  ::proto::ContractGetInfoResponse_ContractInfo* mutable_contractinfo();
  void set_allocated_contractinfo(::proto::ContractGetInfoResponse_ContractInfo* contractinfo);
  private:
  const ::proto::ContractGetInfoResponse_ContractInfo& _internal_contractinfo() const;
  ::proto::ContractGetInfoResponse_ContractInfo* _internal_mutable_contractinfo();
  public:
  void unsafe_arena_set_allocated_contractinfo(
      ::proto::ContractGetInfoResponse_ContractInfo* contractinfo);
  ::proto::ContractGetInfoResponse_ContractInfo* unsafe_arena_release_contractinfo();

  // @@protoc_insertion_point(class_scope:proto.ContractGetInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::ContractGetInfoResponse_ContractInfo* contractinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fget_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractGetInfoQuery

// .proto.QueryHeader header = 1;
inline bool ContractGetInfoQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ContractGetInfoQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& ContractGetInfoQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& ContractGetInfoQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoQuery.header)
  return _internal_header();
}
inline void ContractGetInfoQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoQuery.header)
}
inline ::proto::QueryHeader* ContractGetInfoQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* ContractGetInfoQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* ContractGetInfoQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* ContractGetInfoQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoQuery.header)
  return _msg;
}
inline void ContractGetInfoQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoQuery.header)
}

// .proto.ContractID contractID = 2;
inline bool ContractGetInfoQuery::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool ContractGetInfoQuery::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& ContractGetInfoQuery::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& ContractGetInfoQuery::contractid() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoQuery.contractID)
  return _internal_contractid();
}
inline void ContractGetInfoQuery::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoQuery.contractID)
}
inline ::proto::ContractID* ContractGetInfoQuery::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* ContractGetInfoQuery::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoQuery.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* ContractGetInfoQuery::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* ContractGetInfoQuery::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoQuery.contractID)
  return _msg;
}
inline void ContractGetInfoQuery::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoQuery.contractID)
}

// -------------------------------------------------------------------

// ContractGetInfoResponse_ContractInfo

// .proto.ContractID contractID = 1;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& ContractGetInfoResponse_ContractInfo::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& ContractGetInfoResponse_ContractInfo::contractid() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.contractID)
  return _internal_contractid();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.contractID)
}
inline ::proto::ContractID* ContractGetInfoResponse_ContractInfo::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* ContractGetInfoResponse_ContractInfo::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* ContractGetInfoResponse_ContractInfo::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.contractID)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.contractID)
}

// .proto.AccountID accountID = 2;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& ContractGetInfoResponse_ContractInfo::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractGetInfoResponse_ContractInfo::accountid() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.accountID)
  return _internal_accountid();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.accountID)
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.accountID)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.accountID)
}

// string contractAccountID = 3;
inline void ContractGetInfoResponse_ContractInfo::clear_contractaccountid() {
  _impl_.contractaccountid_.ClearToEmpty();
}
inline const std::string& ContractGetInfoResponse_ContractInfo::contractaccountid() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.contractAccountID)
  return _internal_contractaccountid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractGetInfoResponse_ContractInfo::set_contractaccountid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contractaccountid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.contractAccountID)
}
inline std::string* ContractGetInfoResponse_ContractInfo::mutable_contractaccountid() {
  std::string* _s = _internal_mutable_contractaccountid();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.contractAccountID)
  return _s;
}
inline const std::string& ContractGetInfoResponse_ContractInfo::_internal_contractaccountid() const {
  return _impl_.contractaccountid_.Get();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_contractaccountid(const std::string& value) {
  
  _impl_.contractaccountid_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractGetInfoResponse_ContractInfo::_internal_mutable_contractaccountid() {
  
  return _impl_.contractaccountid_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractGetInfoResponse_ContractInfo::release_contractaccountid() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.contractAccountID)
  return _impl_.contractaccountid_.Release();
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_contractaccountid(std::string* contractaccountid) {
  if (contractaccountid != nullptr) {
    
  } else {
    
  }
  _impl_.contractaccountid_.SetAllocated(contractaccountid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contractaccountid_.IsDefault()) {
    _impl_.contractaccountid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.contractAccountID)
}

// .proto.Key adminKey = 4;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ContractGetInfoResponse_ContractInfo::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ContractGetInfoResponse_ContractInfo::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.adminKey)
  return _internal_adminkey();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.adminKey)
}
inline ::proto::Key* ContractGetInfoResponse_ContractInfo::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ContractGetInfoResponse_ContractInfo::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ContractGetInfoResponse_ContractInfo::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.adminKey)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.adminKey)
}

// .proto.Timestamp expirationTime = 5;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& ContractGetInfoResponse_ContractInfo::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ContractGetInfoResponse_ContractInfo::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.expirationTime)
  return _internal_expirationtime();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.expirationTime)
}
inline ::proto::Timestamp* ContractGetInfoResponse_ContractInfo::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ContractGetInfoResponse_ContractInfo::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* ContractGetInfoResponse_ContractInfo::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.expirationTime)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.expirationTime)
}

// .proto.Duration autoRenewPeriod = 6;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& ContractGetInfoResponse_ContractInfo::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& ContractGetInfoResponse_ContractInfo::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.autoRenewPeriod)
}
inline ::proto::Duration* ContractGetInfoResponse_ContractInfo::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* ContractGetInfoResponse_ContractInfo::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* ContractGetInfoResponse_ContractInfo::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.autoRenewPeriod)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.autoRenewPeriod)
}

// int64 storage = 7;
inline void ContractGetInfoResponse_ContractInfo::clear_storage() {
  _impl_.storage_ = int64_t{0};
}
inline int64_t ContractGetInfoResponse_ContractInfo::_internal_storage() const {
  return _impl_.storage_;
}
inline int64_t ContractGetInfoResponse_ContractInfo::storage() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.storage)
  return _internal_storage();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_storage(int64_t value) {
  
  _impl_.storage_ = value;
}
inline void ContractGetInfoResponse_ContractInfo::set_storage(int64_t value) {
  _internal_set_storage(value);
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.storage)
}

// string memo = 8;
inline void ContractGetInfoResponse_ContractInfo::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& ContractGetInfoResponse_ContractInfo::memo() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractGetInfoResponse_ContractInfo::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.memo)
}
inline std::string* ContractGetInfoResponse_ContractInfo::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.memo)
  return _s;
}
inline const std::string& ContractGetInfoResponse_ContractInfo::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractGetInfoResponse_ContractInfo::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractGetInfoResponse_ContractInfo::release_memo() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.memo)
  return _impl_.memo_.Release();
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.memo)
}

// uint64 balance = 9;
inline void ContractGetInfoResponse_ContractInfo::clear_balance() {
  _impl_.balance_ = uint64_t{0u};
}
inline uint64_t ContractGetInfoResponse_ContractInfo::_internal_balance() const {
  return _impl_.balance_;
}
inline uint64_t ContractGetInfoResponse_ContractInfo::balance() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.balance)
  return _internal_balance();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_balance(uint64_t value) {
  
  _impl_.balance_ = value;
}
inline void ContractGetInfoResponse_ContractInfo::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.balance)
}

// bool deleted = 10;
inline void ContractGetInfoResponse_ContractInfo::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool ContractGetInfoResponse_ContractInfo::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool ContractGetInfoResponse_ContractInfo::deleted() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.deleted)
  return _internal_deleted();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_deleted(bool value) {
  
  _impl_.deleted_ = value;
}
inline void ContractGetInfoResponse_ContractInfo::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.deleted)
}

// repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];
inline int ContractGetInfoResponse_ContractInfo::_internal_tokenrelationships_size() const {
  return _impl_.tokenrelationships_.size();
}
inline int ContractGetInfoResponse_ContractInfo::tokenrelationships_size() const {
  return _internal_tokenrelationships_size();
}
inline ::proto::TokenRelationship* ContractGetInfoResponse_ContractInfo::mutable_tokenrelationships(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.tokenRelationships)
  return _impl_.tokenrelationships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >*
ContractGetInfoResponse_ContractInfo::mutable_tokenrelationships() {
  // @@protoc_insertion_point(field_mutable_list:proto.ContractGetInfoResponse.ContractInfo.tokenRelationships)
  return &_impl_.tokenrelationships_;
}
inline const ::proto::TokenRelationship& ContractGetInfoResponse_ContractInfo::_internal_tokenrelationships(int index) const {
  return _impl_.tokenrelationships_.Get(index);
}
inline const ::proto::TokenRelationship& ContractGetInfoResponse_ContractInfo::tokenrelationships(int index) const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.tokenRelationships)
  return _internal_tokenrelationships(index);
}
inline ::proto::TokenRelationship* ContractGetInfoResponse_ContractInfo::_internal_add_tokenrelationships() {
  return _impl_.tokenrelationships_.Add();
}
inline ::proto::TokenRelationship* ContractGetInfoResponse_ContractInfo::add_tokenrelationships() {
  ::proto::TokenRelationship* _add = _internal_add_tokenrelationships();
  // @@protoc_insertion_point(field_add:proto.ContractGetInfoResponse.ContractInfo.tokenRelationships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >&
ContractGetInfoResponse_ContractInfo::tokenrelationships() const {
  // @@protoc_insertion_point(field_list:proto.ContractGetInfoResponse.ContractInfo.tokenRelationships)
  return _impl_.tokenrelationships_;
}

// bytes ledger_id = 12;
inline void ContractGetInfoResponse_ContractInfo::clear_ledger_id() {
  _impl_.ledger_id_.ClearToEmpty();
}
inline const std::string& ContractGetInfoResponse_ContractInfo::ledger_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.ledger_id)
  return _internal_ledger_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractGetInfoResponse_ContractInfo::set_ledger_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ledger_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.ledger_id)
}
inline std::string* ContractGetInfoResponse_ContractInfo::mutable_ledger_id() {
  std::string* _s = _internal_mutable_ledger_id();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.ledger_id)
  return _s;
}
inline const std::string& ContractGetInfoResponse_ContractInfo::_internal_ledger_id() const {
  return _impl_.ledger_id_.Get();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_ledger_id(const std::string& value) {
  
  _impl_.ledger_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractGetInfoResponse_ContractInfo::_internal_mutable_ledger_id() {
  
  return _impl_.ledger_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractGetInfoResponse_ContractInfo::release_ledger_id() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.ledger_id)
  return _impl_.ledger_id_.Release();
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_ledger_id(std::string* ledger_id) {
  if (ledger_id != nullptr) {
    
  } else {
    
  }
  _impl_.ledger_id_.SetAllocated(ledger_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ledger_id_.IsDefault()) {
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.ledger_id)
}

// .proto.AccountID auto_renew_account_id = 13;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_auto_renew_account_id() const {
  return this != internal_default_instance() && _impl_.auto_renew_account_id_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_auto_renew_account_id() const {
  return _internal_has_auto_renew_account_id();
}
inline const ::proto::AccountID& ContractGetInfoResponse_ContractInfo::_internal_auto_renew_account_id() const {
  const ::proto::AccountID* p = _impl_.auto_renew_account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractGetInfoResponse_ContractInfo::auto_renew_account_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.auto_renew_account_id)
  return _internal_auto_renew_account_id();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_auto_renew_account_id(
    ::proto::AccountID* auto_renew_account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_account_id_);
  }
  _impl_.auto_renew_account_id_ = auto_renew_account_id;
  if (auto_renew_account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.auto_renew_account_id)
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::release_auto_renew_account_id() {
  
  ::proto::AccountID* temp = _impl_.auto_renew_account_id_;
  _impl_.auto_renew_account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_auto_renew_account_id() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.auto_renew_account_id)
  
  ::proto::AccountID* temp = _impl_.auto_renew_account_id_;
  _impl_.auto_renew_account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::_internal_mutable_auto_renew_account_id() {
  
  if (_impl_.auto_renew_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.auto_renew_account_id_ = p;
  }
  return _impl_.auto_renew_account_id_;
}
inline ::proto::AccountID* ContractGetInfoResponse_ContractInfo::mutable_auto_renew_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_auto_renew_account_id();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.auto_renew_account_id)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_auto_renew_account_id(::proto::AccountID* auto_renew_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_account_id_);
  }
  if (auto_renew_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_renew_account_id));
    if (message_arena != submessage_arena) {
      auto_renew_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_renew_account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_renew_account_id_ = auto_renew_account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.auto_renew_account_id)
}

// int32 max_automatic_token_associations = 14;
inline void ContractGetInfoResponse_ContractInfo::clear_max_automatic_token_associations() {
  _impl_.max_automatic_token_associations_ = 0;
}
inline int32_t ContractGetInfoResponse_ContractInfo::_internal_max_automatic_token_associations() const {
  return _impl_.max_automatic_token_associations_;
}
inline int32_t ContractGetInfoResponse_ContractInfo::max_automatic_token_associations() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.max_automatic_token_associations)
  return _internal_max_automatic_token_associations();
}
inline void ContractGetInfoResponse_ContractInfo::_internal_set_max_automatic_token_associations(int32_t value) {
  
  _impl_.max_automatic_token_associations_ = value;
}
inline void ContractGetInfoResponse_ContractInfo::set_max_automatic_token_associations(int32_t value) {
  _internal_set_max_automatic_token_associations(value);
  // @@protoc_insertion_point(field_set:proto.ContractGetInfoResponse.ContractInfo.max_automatic_token_associations)
}

// .proto.StakingInfo staking_info = 15;
inline bool ContractGetInfoResponse_ContractInfo::_internal_has_staking_info() const {
  return this != internal_default_instance() && _impl_.staking_info_ != nullptr;
}
inline bool ContractGetInfoResponse_ContractInfo::has_staking_info() const {
  return _internal_has_staking_info();
}
inline const ::proto::StakingInfo& ContractGetInfoResponse_ContractInfo::_internal_staking_info() const {
  const ::proto::StakingInfo* p = _impl_.staking_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::StakingInfo&>(
      ::proto::_StakingInfo_default_instance_);
}
inline const ::proto::StakingInfo& ContractGetInfoResponse_ContractInfo::staking_info() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.ContractInfo.staking_info)
  return _internal_staking_info();
}
inline void ContractGetInfoResponse_ContractInfo::unsafe_arena_set_allocated_staking_info(
    ::proto::StakingInfo* staking_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staking_info_);
  }
  _impl_.staking_info_ = staking_info;
  if (staking_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.ContractInfo.staking_info)
}
inline ::proto::StakingInfo* ContractGetInfoResponse_ContractInfo::release_staking_info() {
  
  ::proto::StakingInfo* temp = _impl_.staking_info_;
  _impl_.staking_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::StakingInfo* ContractGetInfoResponse_ContractInfo::unsafe_arena_release_staking_info() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.ContractInfo.staking_info)
  
  ::proto::StakingInfo* temp = _impl_.staking_info_;
  _impl_.staking_info_ = nullptr;
  return temp;
}
inline ::proto::StakingInfo* ContractGetInfoResponse_ContractInfo::_internal_mutable_staking_info() {
  
  if (_impl_.staking_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::StakingInfo>(GetArenaForAllocation());
    _impl_.staking_info_ = p;
  }
  return _impl_.staking_info_;
}
inline ::proto::StakingInfo* ContractGetInfoResponse_ContractInfo::mutable_staking_info() {
  ::proto::StakingInfo* _msg = _internal_mutable_staking_info();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.ContractInfo.staking_info)
  return _msg;
}
inline void ContractGetInfoResponse_ContractInfo::set_allocated_staking_info(::proto::StakingInfo* staking_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staking_info_);
  }
  if (staking_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staking_info));
    if (message_arena != submessage_arena) {
      staking_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staking_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.staking_info_ = staking_info;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.ContractInfo.staking_info)
}

// -------------------------------------------------------------------

// ContractGetInfoResponse

// .proto.ResponseHeader header = 1;
inline bool ContractGetInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ContractGetInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& ContractGetInfoResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& ContractGetInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.header)
  return _internal_header();
}
inline void ContractGetInfoResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.header)
}
inline ::proto::ResponseHeader* ContractGetInfoResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* ContractGetInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* ContractGetInfoResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* ContractGetInfoResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.header)
  return _msg;
}
inline void ContractGetInfoResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.header)
}

// .proto.ContractGetInfoResponse.ContractInfo contractInfo = 2;
inline bool ContractGetInfoResponse::_internal_has_contractinfo() const {
  return this != internal_default_instance() && _impl_.contractinfo_ != nullptr;
}
inline bool ContractGetInfoResponse::has_contractinfo() const {
  return _internal_has_contractinfo();
}
inline void ContractGetInfoResponse::clear_contractinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.contractinfo_ != nullptr) {
    delete _impl_.contractinfo_;
  }
  _impl_.contractinfo_ = nullptr;
}
inline const ::proto::ContractGetInfoResponse_ContractInfo& ContractGetInfoResponse::_internal_contractinfo() const {
  const ::proto::ContractGetInfoResponse_ContractInfo* p = _impl_.contractinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractGetInfoResponse_ContractInfo&>(
      ::proto::_ContractGetInfoResponse_ContractInfo_default_instance_);
}
inline const ::proto::ContractGetInfoResponse_ContractInfo& ContractGetInfoResponse::contractinfo() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetInfoResponse.contractInfo)
  return _internal_contractinfo();
}
inline void ContractGetInfoResponse::unsafe_arena_set_allocated_contractinfo(
    ::proto::ContractGetInfoResponse_ContractInfo* contractinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractinfo_);
  }
  _impl_.contractinfo_ = contractinfo;
  if (contractinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetInfoResponse.contractInfo)
}
inline ::proto::ContractGetInfoResponse_ContractInfo* ContractGetInfoResponse::release_contractinfo() {
  
  ::proto::ContractGetInfoResponse_ContractInfo* temp = _impl_.contractinfo_;
  _impl_.contractinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractGetInfoResponse_ContractInfo* ContractGetInfoResponse::unsafe_arena_release_contractinfo() {
  // @@protoc_insertion_point(field_release:proto.ContractGetInfoResponse.contractInfo)
  
  ::proto::ContractGetInfoResponse_ContractInfo* temp = _impl_.contractinfo_;
  _impl_.contractinfo_ = nullptr;
  return temp;
}
inline ::proto::ContractGetInfoResponse_ContractInfo* ContractGetInfoResponse::_internal_mutable_contractinfo() {
  
  if (_impl_.contractinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractGetInfoResponse_ContractInfo>(GetArenaForAllocation());
    _impl_.contractinfo_ = p;
  }
  return _impl_.contractinfo_;
}
inline ::proto::ContractGetInfoResponse_ContractInfo* ContractGetInfoResponse::mutable_contractinfo() {
  ::proto::ContractGetInfoResponse_ContractInfo* _msg = _internal_mutable_contractinfo();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetInfoResponse.contractInfo)
  return _msg;
}
inline void ContractGetInfoResponse::set_allocated_contractinfo(::proto::ContractGetInfoResponse_ContractInfo* contractinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contractinfo_;
  }
  if (contractinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contractinfo);
    if (message_arena != submessage_arena) {
      contractinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractinfo_ = contractinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetInfoResponse.contractInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contract_5fget_5finfo_2eproto

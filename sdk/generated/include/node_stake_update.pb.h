// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_stake_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5fstake_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5fstake_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5fstake_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5fstake_5fupdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5fstake_5fupdate_2eproto;
namespace proto {
class NodeStake;
struct NodeStakeDefaultTypeInternal;
extern NodeStakeDefaultTypeInternal _NodeStake_default_instance_;
class NodeStakeUpdateTransactionBody;
struct NodeStakeUpdateTransactionBodyDefaultTypeInternal;
extern NodeStakeUpdateTransactionBodyDefaultTypeInternal _NodeStakeUpdateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::NodeStake* Arena::CreateMaybeMessage<::proto::NodeStake>(Arena*);
template<> ::proto::NodeStakeUpdateTransactionBody* Arena::CreateMaybeMessage<::proto::NodeStakeUpdateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class NodeStakeUpdateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NodeStakeUpdateTransactionBody) */ {
 public:
  inline NodeStakeUpdateTransactionBody() : NodeStakeUpdateTransactionBody(nullptr) {}
  ~NodeStakeUpdateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR NodeStakeUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeStakeUpdateTransactionBody(const NodeStakeUpdateTransactionBody& from);
  NodeStakeUpdateTransactionBody(NodeStakeUpdateTransactionBody&& from) noexcept
    : NodeStakeUpdateTransactionBody() {
    *this = ::std::move(from);
  }

  inline NodeStakeUpdateTransactionBody& operator=(const NodeStakeUpdateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStakeUpdateTransactionBody& operator=(NodeStakeUpdateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeStakeUpdateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeStakeUpdateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const NodeStakeUpdateTransactionBody*>(
               &_NodeStakeUpdateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeStakeUpdateTransactionBody& a, NodeStakeUpdateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeStakeUpdateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStakeUpdateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeStakeUpdateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeStakeUpdateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeStakeUpdateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeStakeUpdateTransactionBody& from) {
    NodeStakeUpdateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStakeUpdateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NodeStakeUpdateTransactionBody";
  }
  protected:
  explicit NodeStakeUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeStakeFieldNumber = 2,
    kEndOfStakingPeriodFieldNumber = 1,
    kNodeRewardFeeFractionFieldNumber = 4,
    kStakingRewardFeeFractionFieldNumber = 7,
    kMaxStakingRewardRatePerHbarFieldNumber = 3,
    kStakingPeriodsStoredFieldNumber = 5,
    kStakingPeriodFieldNumber = 6,
    kStakingStartThresholdFieldNumber = 8,
    kStakingRewardRateFieldNumber = 9,
  };
  // repeated .proto.NodeStake node_stake = 2;
  int node_stake_size() const;
  private:
  int _internal_node_stake_size() const;
  public:
  void clear_node_stake();
  ::proto::NodeStake* mutable_node_stake(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NodeStake >*
      mutable_node_stake();
  private:
  const ::proto::NodeStake& _internal_node_stake(int index) const;
  ::proto::NodeStake* _internal_add_node_stake();
  public:
  const ::proto::NodeStake& node_stake(int index) const;
  ::proto::NodeStake* add_node_stake();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NodeStake >&
      node_stake() const;

  // .proto.Timestamp end_of_staking_period = 1;
  bool has_end_of_staking_period() const;
  private:
  bool _internal_has_end_of_staking_period() const;
  public:
  void clear_end_of_staking_period();
  const ::proto::Timestamp& end_of_staking_period() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_end_of_staking_period();
  ::proto::Timestamp* mutable_end_of_staking_period();
  void set_allocated_end_of_staking_period(::proto::Timestamp* end_of_staking_period);
  private:
  const ::proto::Timestamp& _internal_end_of_staking_period() const;
  ::proto::Timestamp* _internal_mutable_end_of_staking_period();
  public:
  void unsafe_arena_set_allocated_end_of_staking_period(
      ::proto::Timestamp* end_of_staking_period);
  ::proto::Timestamp* unsafe_arena_release_end_of_staking_period();

  // .proto.Fraction node_reward_fee_fraction = 4;
  bool has_node_reward_fee_fraction() const;
  private:
  bool _internal_has_node_reward_fee_fraction() const;
  public:
  void clear_node_reward_fee_fraction();
  const ::proto::Fraction& node_reward_fee_fraction() const;
  PROTOBUF_NODISCARD ::proto::Fraction* release_node_reward_fee_fraction();
  ::proto::Fraction* mutable_node_reward_fee_fraction();
  void set_allocated_node_reward_fee_fraction(::proto::Fraction* node_reward_fee_fraction);
  private:
  const ::proto::Fraction& _internal_node_reward_fee_fraction() const;
  ::proto::Fraction* _internal_mutable_node_reward_fee_fraction();
  public:
  void unsafe_arena_set_allocated_node_reward_fee_fraction(
      ::proto::Fraction* node_reward_fee_fraction);
  ::proto::Fraction* unsafe_arena_release_node_reward_fee_fraction();

  // .proto.Fraction staking_reward_fee_fraction = 7;
  bool has_staking_reward_fee_fraction() const;
  private:
  bool _internal_has_staking_reward_fee_fraction() const;
  public:
  void clear_staking_reward_fee_fraction();
  const ::proto::Fraction& staking_reward_fee_fraction() const;
  PROTOBUF_NODISCARD ::proto::Fraction* release_staking_reward_fee_fraction();
  ::proto::Fraction* mutable_staking_reward_fee_fraction();
  void set_allocated_staking_reward_fee_fraction(::proto::Fraction* staking_reward_fee_fraction);
  private:
  const ::proto::Fraction& _internal_staking_reward_fee_fraction() const;
  ::proto::Fraction* _internal_mutable_staking_reward_fee_fraction();
  public:
  void unsafe_arena_set_allocated_staking_reward_fee_fraction(
      ::proto::Fraction* staking_reward_fee_fraction);
  ::proto::Fraction* unsafe_arena_release_staking_reward_fee_fraction();

  // int64 max_staking_reward_rate_per_hbar = 3;
  void clear_max_staking_reward_rate_per_hbar();
  int64_t max_staking_reward_rate_per_hbar() const;
  void set_max_staking_reward_rate_per_hbar(int64_t value);
  private:
  int64_t _internal_max_staking_reward_rate_per_hbar() const;
  void _internal_set_max_staking_reward_rate_per_hbar(int64_t value);
  public:

  // int64 staking_periods_stored = 5;
  void clear_staking_periods_stored();
  int64_t staking_periods_stored() const;
  void set_staking_periods_stored(int64_t value);
  private:
  int64_t _internal_staking_periods_stored() const;
  void _internal_set_staking_periods_stored(int64_t value);
  public:

  // int64 staking_period = 6;
  void clear_staking_period();
  int64_t staking_period() const;
  void set_staking_period(int64_t value);
  private:
  int64_t _internal_staking_period() const;
  void _internal_set_staking_period(int64_t value);
  public:

  // int64 staking_start_threshold = 8;
  void clear_staking_start_threshold();
  int64_t staking_start_threshold() const;
  void set_staking_start_threshold(int64_t value);
  private:
  int64_t _internal_staking_start_threshold() const;
  void _internal_set_staking_start_threshold(int64_t value);
  public:

  // int64 staking_reward_rate = 9;
  void clear_staking_reward_rate();
  int64_t staking_reward_rate() const;
  void set_staking_reward_rate(int64_t value);
  private:
  int64_t _internal_staking_reward_rate() const;
  void _internal_set_staking_reward_rate(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.NodeStakeUpdateTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NodeStake > node_stake_;
    ::proto::Timestamp* end_of_staking_period_;
    ::proto::Fraction* node_reward_fee_fraction_;
    ::proto::Fraction* staking_reward_fee_fraction_;
    int64_t max_staking_reward_rate_per_hbar_;
    int64_t staking_periods_stored_;
    int64_t staking_period_;
    int64_t staking_start_threshold_;
    int64_t staking_reward_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_5fstake_5fupdate_2eproto;
};
// -------------------------------------------------------------------

class NodeStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NodeStake) */ {
 public:
  inline NodeStake() : NodeStake(nullptr) {}
  ~NodeStake() override;
  explicit PROTOBUF_CONSTEXPR NodeStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeStake(const NodeStake& from);
  NodeStake(NodeStake&& from) noexcept
    : NodeStake() {
    *this = ::std::move(from);
  }

  inline NodeStake& operator=(const NodeStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStake& operator=(NodeStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeStake* internal_default_instance() {
    return reinterpret_cast<const NodeStake*>(
               &_NodeStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeStake& a, NodeStake& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeStake& from) {
    NodeStake::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NodeStake";
  }
  protected:
  explicit NodeStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxStakeFieldNumber = 1,
    kMinStakeFieldNumber = 2,
    kNodeIdFieldNumber = 3,
    kRewardRateFieldNumber = 4,
    kStakeFieldNumber = 5,
    kStakeNotRewardedFieldNumber = 6,
    kStakeRewardedFieldNumber = 7,
  };
  // int64 max_stake = 1;
  void clear_max_stake();
  int64_t max_stake() const;
  void set_max_stake(int64_t value);
  private:
  int64_t _internal_max_stake() const;
  void _internal_set_max_stake(int64_t value);
  public:

  // int64 min_stake = 2;
  void clear_min_stake();
  int64_t min_stake() const;
  void set_min_stake(int64_t value);
  private:
  int64_t _internal_min_stake() const;
  void _internal_set_min_stake(int64_t value);
  public:

  // int64 node_id = 3;
  void clear_node_id();
  int64_t node_id() const;
  void set_node_id(int64_t value);
  private:
  int64_t _internal_node_id() const;
  void _internal_set_node_id(int64_t value);
  public:

  // int64 reward_rate = 4;
  void clear_reward_rate();
  int64_t reward_rate() const;
  void set_reward_rate(int64_t value);
  private:
  int64_t _internal_reward_rate() const;
  void _internal_set_reward_rate(int64_t value);
  public:

  // int64 stake = 5;
  void clear_stake();
  int64_t stake() const;
  void set_stake(int64_t value);
  private:
  int64_t _internal_stake() const;
  void _internal_set_stake(int64_t value);
  public:

  // int64 stake_not_rewarded = 6;
  void clear_stake_not_rewarded();
  int64_t stake_not_rewarded() const;
  void set_stake_not_rewarded(int64_t value);
  private:
  int64_t _internal_stake_not_rewarded() const;
  void _internal_set_stake_not_rewarded(int64_t value);
  public:

  // int64 stake_rewarded = 7;
  void clear_stake_rewarded();
  int64_t stake_rewarded() const;
  void set_stake_rewarded(int64_t value);
  private:
  int64_t _internal_stake_rewarded() const;
  void _internal_set_stake_rewarded(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.NodeStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t max_stake_;
    int64_t min_stake_;
    int64_t node_id_;
    int64_t reward_rate_;
    int64_t stake_;
    int64_t stake_not_rewarded_;
    int64_t stake_rewarded_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_5fstake_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeStakeUpdateTransactionBody

// .proto.Timestamp end_of_staking_period = 1;
inline bool NodeStakeUpdateTransactionBody::_internal_has_end_of_staking_period() const {
  return this != internal_default_instance() && _impl_.end_of_staking_period_ != nullptr;
}
inline bool NodeStakeUpdateTransactionBody::has_end_of_staking_period() const {
  return _internal_has_end_of_staking_period();
}
inline const ::proto::Timestamp& NodeStakeUpdateTransactionBody::_internal_end_of_staking_period() const {
  const ::proto::Timestamp* p = _impl_.end_of_staking_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& NodeStakeUpdateTransactionBody::end_of_staking_period() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.end_of_staking_period)
  return _internal_end_of_staking_period();
}
inline void NodeStakeUpdateTransactionBody::unsafe_arena_set_allocated_end_of_staking_period(
    ::proto::Timestamp* end_of_staking_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_of_staking_period_);
  }
  _impl_.end_of_staking_period_ = end_of_staking_period;
  if (end_of_staking_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NodeStakeUpdateTransactionBody.end_of_staking_period)
}
inline ::proto::Timestamp* NodeStakeUpdateTransactionBody::release_end_of_staking_period() {
  
  ::proto::Timestamp* temp = _impl_.end_of_staking_period_;
  _impl_.end_of_staking_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* NodeStakeUpdateTransactionBody::unsafe_arena_release_end_of_staking_period() {
  // @@protoc_insertion_point(field_release:proto.NodeStakeUpdateTransactionBody.end_of_staking_period)
  
  ::proto::Timestamp* temp = _impl_.end_of_staking_period_;
  _impl_.end_of_staking_period_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* NodeStakeUpdateTransactionBody::_internal_mutable_end_of_staking_period() {
  
  if (_impl_.end_of_staking_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.end_of_staking_period_ = p;
  }
  return _impl_.end_of_staking_period_;
}
inline ::proto::Timestamp* NodeStakeUpdateTransactionBody::mutable_end_of_staking_period() {
  ::proto::Timestamp* _msg = _internal_mutable_end_of_staking_period();
  // @@protoc_insertion_point(field_mutable:proto.NodeStakeUpdateTransactionBody.end_of_staking_period)
  return _msg;
}
inline void NodeStakeUpdateTransactionBody::set_allocated_end_of_staking_period(::proto::Timestamp* end_of_staking_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_of_staking_period_);
  }
  if (end_of_staking_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_of_staking_period));
    if (message_arena != submessage_arena) {
      end_of_staking_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_of_staking_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_of_staking_period_ = end_of_staking_period;
  // @@protoc_insertion_point(field_set_allocated:proto.NodeStakeUpdateTransactionBody.end_of_staking_period)
}

// repeated .proto.NodeStake node_stake = 2;
inline int NodeStakeUpdateTransactionBody::_internal_node_stake_size() const {
  return _impl_.node_stake_.size();
}
inline int NodeStakeUpdateTransactionBody::node_stake_size() const {
  return _internal_node_stake_size();
}
inline void NodeStakeUpdateTransactionBody::clear_node_stake() {
  _impl_.node_stake_.Clear();
}
inline ::proto::NodeStake* NodeStakeUpdateTransactionBody::mutable_node_stake(int index) {
  // @@protoc_insertion_point(field_mutable:proto.NodeStakeUpdateTransactionBody.node_stake)
  return _impl_.node_stake_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NodeStake >*
NodeStakeUpdateTransactionBody::mutable_node_stake() {
  // @@protoc_insertion_point(field_mutable_list:proto.NodeStakeUpdateTransactionBody.node_stake)
  return &_impl_.node_stake_;
}
inline const ::proto::NodeStake& NodeStakeUpdateTransactionBody::_internal_node_stake(int index) const {
  return _impl_.node_stake_.Get(index);
}
inline const ::proto::NodeStake& NodeStakeUpdateTransactionBody::node_stake(int index) const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.node_stake)
  return _internal_node_stake(index);
}
inline ::proto::NodeStake* NodeStakeUpdateTransactionBody::_internal_add_node_stake() {
  return _impl_.node_stake_.Add();
}
inline ::proto::NodeStake* NodeStakeUpdateTransactionBody::add_node_stake() {
  ::proto::NodeStake* _add = _internal_add_node_stake();
  // @@protoc_insertion_point(field_add:proto.NodeStakeUpdateTransactionBody.node_stake)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NodeStake >&
NodeStakeUpdateTransactionBody::node_stake() const {
  // @@protoc_insertion_point(field_list:proto.NodeStakeUpdateTransactionBody.node_stake)
  return _impl_.node_stake_;
}

// int64 max_staking_reward_rate_per_hbar = 3;
inline void NodeStakeUpdateTransactionBody::clear_max_staking_reward_rate_per_hbar() {
  _impl_.max_staking_reward_rate_per_hbar_ = int64_t{0};
}
inline int64_t NodeStakeUpdateTransactionBody::_internal_max_staking_reward_rate_per_hbar() const {
  return _impl_.max_staking_reward_rate_per_hbar_;
}
inline int64_t NodeStakeUpdateTransactionBody::max_staking_reward_rate_per_hbar() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.max_staking_reward_rate_per_hbar)
  return _internal_max_staking_reward_rate_per_hbar();
}
inline void NodeStakeUpdateTransactionBody::_internal_set_max_staking_reward_rate_per_hbar(int64_t value) {
  
  _impl_.max_staking_reward_rate_per_hbar_ = value;
}
inline void NodeStakeUpdateTransactionBody::set_max_staking_reward_rate_per_hbar(int64_t value) {
  _internal_set_max_staking_reward_rate_per_hbar(value);
  // @@protoc_insertion_point(field_set:proto.NodeStakeUpdateTransactionBody.max_staking_reward_rate_per_hbar)
}

// .proto.Fraction node_reward_fee_fraction = 4;
inline bool NodeStakeUpdateTransactionBody::_internal_has_node_reward_fee_fraction() const {
  return this != internal_default_instance() && _impl_.node_reward_fee_fraction_ != nullptr;
}
inline bool NodeStakeUpdateTransactionBody::has_node_reward_fee_fraction() const {
  return _internal_has_node_reward_fee_fraction();
}
inline const ::proto::Fraction& NodeStakeUpdateTransactionBody::_internal_node_reward_fee_fraction() const {
  const ::proto::Fraction* p = _impl_.node_reward_fee_fraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Fraction&>(
      ::proto::_Fraction_default_instance_);
}
inline const ::proto::Fraction& NodeStakeUpdateTransactionBody::node_reward_fee_fraction() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.node_reward_fee_fraction)
  return _internal_node_reward_fee_fraction();
}
inline void NodeStakeUpdateTransactionBody::unsafe_arena_set_allocated_node_reward_fee_fraction(
    ::proto::Fraction* node_reward_fee_fraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_reward_fee_fraction_);
  }
  _impl_.node_reward_fee_fraction_ = node_reward_fee_fraction;
  if (node_reward_fee_fraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NodeStakeUpdateTransactionBody.node_reward_fee_fraction)
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::release_node_reward_fee_fraction() {
  
  ::proto::Fraction* temp = _impl_.node_reward_fee_fraction_;
  _impl_.node_reward_fee_fraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::unsafe_arena_release_node_reward_fee_fraction() {
  // @@protoc_insertion_point(field_release:proto.NodeStakeUpdateTransactionBody.node_reward_fee_fraction)
  
  ::proto::Fraction* temp = _impl_.node_reward_fee_fraction_;
  _impl_.node_reward_fee_fraction_ = nullptr;
  return temp;
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::_internal_mutable_node_reward_fee_fraction() {
  
  if (_impl_.node_reward_fee_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Fraction>(GetArenaForAllocation());
    _impl_.node_reward_fee_fraction_ = p;
  }
  return _impl_.node_reward_fee_fraction_;
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::mutable_node_reward_fee_fraction() {
  ::proto::Fraction* _msg = _internal_mutable_node_reward_fee_fraction();
  // @@protoc_insertion_point(field_mutable:proto.NodeStakeUpdateTransactionBody.node_reward_fee_fraction)
  return _msg;
}
inline void NodeStakeUpdateTransactionBody::set_allocated_node_reward_fee_fraction(::proto::Fraction* node_reward_fee_fraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_reward_fee_fraction_);
  }
  if (node_reward_fee_fraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_reward_fee_fraction));
    if (message_arena != submessage_arena) {
      node_reward_fee_fraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_reward_fee_fraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_reward_fee_fraction_ = node_reward_fee_fraction;
  // @@protoc_insertion_point(field_set_allocated:proto.NodeStakeUpdateTransactionBody.node_reward_fee_fraction)
}

// int64 staking_periods_stored = 5;
inline void NodeStakeUpdateTransactionBody::clear_staking_periods_stored() {
  _impl_.staking_periods_stored_ = int64_t{0};
}
inline int64_t NodeStakeUpdateTransactionBody::_internal_staking_periods_stored() const {
  return _impl_.staking_periods_stored_;
}
inline int64_t NodeStakeUpdateTransactionBody::staking_periods_stored() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.staking_periods_stored)
  return _internal_staking_periods_stored();
}
inline void NodeStakeUpdateTransactionBody::_internal_set_staking_periods_stored(int64_t value) {
  
  _impl_.staking_periods_stored_ = value;
}
inline void NodeStakeUpdateTransactionBody::set_staking_periods_stored(int64_t value) {
  _internal_set_staking_periods_stored(value);
  // @@protoc_insertion_point(field_set:proto.NodeStakeUpdateTransactionBody.staking_periods_stored)
}

// int64 staking_period = 6;
inline void NodeStakeUpdateTransactionBody::clear_staking_period() {
  _impl_.staking_period_ = int64_t{0};
}
inline int64_t NodeStakeUpdateTransactionBody::_internal_staking_period() const {
  return _impl_.staking_period_;
}
inline int64_t NodeStakeUpdateTransactionBody::staking_period() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.staking_period)
  return _internal_staking_period();
}
inline void NodeStakeUpdateTransactionBody::_internal_set_staking_period(int64_t value) {
  
  _impl_.staking_period_ = value;
}
inline void NodeStakeUpdateTransactionBody::set_staking_period(int64_t value) {
  _internal_set_staking_period(value);
  // @@protoc_insertion_point(field_set:proto.NodeStakeUpdateTransactionBody.staking_period)
}

// .proto.Fraction staking_reward_fee_fraction = 7;
inline bool NodeStakeUpdateTransactionBody::_internal_has_staking_reward_fee_fraction() const {
  return this != internal_default_instance() && _impl_.staking_reward_fee_fraction_ != nullptr;
}
inline bool NodeStakeUpdateTransactionBody::has_staking_reward_fee_fraction() const {
  return _internal_has_staking_reward_fee_fraction();
}
inline const ::proto::Fraction& NodeStakeUpdateTransactionBody::_internal_staking_reward_fee_fraction() const {
  const ::proto::Fraction* p = _impl_.staking_reward_fee_fraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Fraction&>(
      ::proto::_Fraction_default_instance_);
}
inline const ::proto::Fraction& NodeStakeUpdateTransactionBody::staking_reward_fee_fraction() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.staking_reward_fee_fraction)
  return _internal_staking_reward_fee_fraction();
}
inline void NodeStakeUpdateTransactionBody::unsafe_arena_set_allocated_staking_reward_fee_fraction(
    ::proto::Fraction* staking_reward_fee_fraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staking_reward_fee_fraction_);
  }
  _impl_.staking_reward_fee_fraction_ = staking_reward_fee_fraction;
  if (staking_reward_fee_fraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NodeStakeUpdateTransactionBody.staking_reward_fee_fraction)
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::release_staking_reward_fee_fraction() {
  
  ::proto::Fraction* temp = _impl_.staking_reward_fee_fraction_;
  _impl_.staking_reward_fee_fraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::unsafe_arena_release_staking_reward_fee_fraction() {
  // @@protoc_insertion_point(field_release:proto.NodeStakeUpdateTransactionBody.staking_reward_fee_fraction)
  
  ::proto::Fraction* temp = _impl_.staking_reward_fee_fraction_;
  _impl_.staking_reward_fee_fraction_ = nullptr;
  return temp;
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::_internal_mutable_staking_reward_fee_fraction() {
  
  if (_impl_.staking_reward_fee_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Fraction>(GetArenaForAllocation());
    _impl_.staking_reward_fee_fraction_ = p;
  }
  return _impl_.staking_reward_fee_fraction_;
}
inline ::proto::Fraction* NodeStakeUpdateTransactionBody::mutable_staking_reward_fee_fraction() {
  ::proto::Fraction* _msg = _internal_mutable_staking_reward_fee_fraction();
  // @@protoc_insertion_point(field_mutable:proto.NodeStakeUpdateTransactionBody.staking_reward_fee_fraction)
  return _msg;
}
inline void NodeStakeUpdateTransactionBody::set_allocated_staking_reward_fee_fraction(::proto::Fraction* staking_reward_fee_fraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staking_reward_fee_fraction_);
  }
  if (staking_reward_fee_fraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staking_reward_fee_fraction));
    if (message_arena != submessage_arena) {
      staking_reward_fee_fraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staking_reward_fee_fraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.staking_reward_fee_fraction_ = staking_reward_fee_fraction;
  // @@protoc_insertion_point(field_set_allocated:proto.NodeStakeUpdateTransactionBody.staking_reward_fee_fraction)
}

// int64 staking_start_threshold = 8;
inline void NodeStakeUpdateTransactionBody::clear_staking_start_threshold() {
  _impl_.staking_start_threshold_ = int64_t{0};
}
inline int64_t NodeStakeUpdateTransactionBody::_internal_staking_start_threshold() const {
  return _impl_.staking_start_threshold_;
}
inline int64_t NodeStakeUpdateTransactionBody::staking_start_threshold() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.staking_start_threshold)
  return _internal_staking_start_threshold();
}
inline void NodeStakeUpdateTransactionBody::_internal_set_staking_start_threshold(int64_t value) {
  
  _impl_.staking_start_threshold_ = value;
}
inline void NodeStakeUpdateTransactionBody::set_staking_start_threshold(int64_t value) {
  _internal_set_staking_start_threshold(value);
  // @@protoc_insertion_point(field_set:proto.NodeStakeUpdateTransactionBody.staking_start_threshold)
}

// int64 staking_reward_rate = 9;
inline void NodeStakeUpdateTransactionBody::clear_staking_reward_rate() {
  _impl_.staking_reward_rate_ = int64_t{0};
}
inline int64_t NodeStakeUpdateTransactionBody::_internal_staking_reward_rate() const {
  return _impl_.staking_reward_rate_;
}
inline int64_t NodeStakeUpdateTransactionBody::staking_reward_rate() const {
  // @@protoc_insertion_point(field_get:proto.NodeStakeUpdateTransactionBody.staking_reward_rate)
  return _internal_staking_reward_rate();
}
inline void NodeStakeUpdateTransactionBody::_internal_set_staking_reward_rate(int64_t value) {
  
  _impl_.staking_reward_rate_ = value;
}
inline void NodeStakeUpdateTransactionBody::set_staking_reward_rate(int64_t value) {
  _internal_set_staking_reward_rate(value);
  // @@protoc_insertion_point(field_set:proto.NodeStakeUpdateTransactionBody.staking_reward_rate)
}

// -------------------------------------------------------------------

// NodeStake

// int64 max_stake = 1;
inline void NodeStake::clear_max_stake() {
  _impl_.max_stake_ = int64_t{0};
}
inline int64_t NodeStake::_internal_max_stake() const {
  return _impl_.max_stake_;
}
inline int64_t NodeStake::max_stake() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.max_stake)
  return _internal_max_stake();
}
inline void NodeStake::_internal_set_max_stake(int64_t value) {
  
  _impl_.max_stake_ = value;
}
inline void NodeStake::set_max_stake(int64_t value) {
  _internal_set_max_stake(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.max_stake)
}

// int64 min_stake = 2;
inline void NodeStake::clear_min_stake() {
  _impl_.min_stake_ = int64_t{0};
}
inline int64_t NodeStake::_internal_min_stake() const {
  return _impl_.min_stake_;
}
inline int64_t NodeStake::min_stake() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.min_stake)
  return _internal_min_stake();
}
inline void NodeStake::_internal_set_min_stake(int64_t value) {
  
  _impl_.min_stake_ = value;
}
inline void NodeStake::set_min_stake(int64_t value) {
  _internal_set_min_stake(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.min_stake)
}

// int64 node_id = 3;
inline void NodeStake::clear_node_id() {
  _impl_.node_id_ = int64_t{0};
}
inline int64_t NodeStake::_internal_node_id() const {
  return _impl_.node_id_;
}
inline int64_t NodeStake::node_id() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.node_id)
  return _internal_node_id();
}
inline void NodeStake::_internal_set_node_id(int64_t value) {
  
  _impl_.node_id_ = value;
}
inline void NodeStake::set_node_id(int64_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.node_id)
}

// int64 reward_rate = 4;
inline void NodeStake::clear_reward_rate() {
  _impl_.reward_rate_ = int64_t{0};
}
inline int64_t NodeStake::_internal_reward_rate() const {
  return _impl_.reward_rate_;
}
inline int64_t NodeStake::reward_rate() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.reward_rate)
  return _internal_reward_rate();
}
inline void NodeStake::_internal_set_reward_rate(int64_t value) {
  
  _impl_.reward_rate_ = value;
}
inline void NodeStake::set_reward_rate(int64_t value) {
  _internal_set_reward_rate(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.reward_rate)
}

// int64 stake = 5;
inline void NodeStake::clear_stake() {
  _impl_.stake_ = int64_t{0};
}
inline int64_t NodeStake::_internal_stake() const {
  return _impl_.stake_;
}
inline int64_t NodeStake::stake() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.stake)
  return _internal_stake();
}
inline void NodeStake::_internal_set_stake(int64_t value) {
  
  _impl_.stake_ = value;
}
inline void NodeStake::set_stake(int64_t value) {
  _internal_set_stake(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.stake)
}

// int64 stake_not_rewarded = 6;
inline void NodeStake::clear_stake_not_rewarded() {
  _impl_.stake_not_rewarded_ = int64_t{0};
}
inline int64_t NodeStake::_internal_stake_not_rewarded() const {
  return _impl_.stake_not_rewarded_;
}
inline int64_t NodeStake::stake_not_rewarded() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.stake_not_rewarded)
  return _internal_stake_not_rewarded();
}
inline void NodeStake::_internal_set_stake_not_rewarded(int64_t value) {
  
  _impl_.stake_not_rewarded_ = value;
}
inline void NodeStake::set_stake_not_rewarded(int64_t value) {
  _internal_set_stake_not_rewarded(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.stake_not_rewarded)
}

// int64 stake_rewarded = 7;
inline void NodeStake::clear_stake_rewarded() {
  _impl_.stake_rewarded_ = int64_t{0};
}
inline int64_t NodeStake::_internal_stake_rewarded() const {
  return _impl_.stake_rewarded_;
}
inline int64_t NodeStake::stake_rewarded() const {
  // @@protoc_insertion_point(field_get:proto.NodeStake.stake_rewarded)
  return _internal_stake_rewarded();
}
inline void NodeStake::_internal_set_stake_rewarded(int64_t value) {
  
  _impl_.stake_rewarded_ = value;
}
inline void NodeStake::set_stake_rewarded(int64_t value) {
  _internal_set_stake_rewarded(value);
  // @@protoc_insertion_point(field_set:proto.NodeStake.stake_rewarded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5fstake_5fupdate_2eproto

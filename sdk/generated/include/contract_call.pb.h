// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_call.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contract_5fcall_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contract_5fcall_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_5fcall_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_5fcall_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fcall_2eproto;
namespace proto {
class ContractCallTransactionBody;
struct ContractCallTransactionBodyDefaultTypeInternal;
extern ContractCallTransactionBodyDefaultTypeInternal _ContractCallTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ContractCallTransactionBody* Arena::CreateMaybeMessage<::proto::ContractCallTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ContractCallTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractCallTransactionBody) */ {
 public:
  inline ContractCallTransactionBody() : ContractCallTransactionBody(nullptr) {}
  ~ContractCallTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR ContractCallTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractCallTransactionBody(const ContractCallTransactionBody& from);
  ContractCallTransactionBody(ContractCallTransactionBody&& from) noexcept
    : ContractCallTransactionBody() {
    *this = ::std::move(from);
  }

  inline ContractCallTransactionBody& operator=(const ContractCallTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractCallTransactionBody& operator=(ContractCallTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractCallTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractCallTransactionBody* internal_default_instance() {
    return reinterpret_cast<const ContractCallTransactionBody*>(
               &_ContractCallTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractCallTransactionBody& a, ContractCallTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractCallTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractCallTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractCallTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractCallTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractCallTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractCallTransactionBody& from) {
    ContractCallTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractCallTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractCallTransactionBody";
  }
  protected:
  explicit ContractCallTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionParametersFieldNumber = 4,
    kContractIDFieldNumber = 1,
    kGasFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // bytes functionParameters = 4;
  void clear_functionparameters();
  const std::string& functionparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_functionparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_functionparameters();
  PROTOBUF_NODISCARD std::string* release_functionparameters();
  void set_allocated_functionparameters(std::string* functionparameters);
  private:
  const std::string& _internal_functionparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_functionparameters(const std::string& value);
  std::string* _internal_mutable_functionparameters();
  public:

  // .proto.ContractID contractID = 1;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // int64 gas = 2;
  void clear_gas();
  int64_t gas() const;
  void set_gas(int64_t value);
  private:
  int64_t _internal_gas() const;
  void _internal_set_gas(int64_t value);
  public:

  // int64 amount = 3;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ContractCallTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionparameters_;
    ::proto::ContractID* contractid_;
    int64_t gas_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fcall_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractCallTransactionBody

// .proto.ContractID contractID = 1;
inline bool ContractCallTransactionBody::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool ContractCallTransactionBody::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& ContractCallTransactionBody::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& ContractCallTransactionBody::contractid() const {
  // @@protoc_insertion_point(field_get:proto.ContractCallTransactionBody.contractID)
  return _internal_contractid();
}
inline void ContractCallTransactionBody::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCallTransactionBody.contractID)
}
inline ::proto::ContractID* ContractCallTransactionBody::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* ContractCallTransactionBody::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.ContractCallTransactionBody.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* ContractCallTransactionBody::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* ContractCallTransactionBody::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.ContractCallTransactionBody.contractID)
  return _msg;
}
inline void ContractCallTransactionBody::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCallTransactionBody.contractID)
}

// int64 gas = 2;
inline void ContractCallTransactionBody::clear_gas() {
  _impl_.gas_ = int64_t{0};
}
inline int64_t ContractCallTransactionBody::_internal_gas() const {
  return _impl_.gas_;
}
inline int64_t ContractCallTransactionBody::gas() const {
  // @@protoc_insertion_point(field_get:proto.ContractCallTransactionBody.gas)
  return _internal_gas();
}
inline void ContractCallTransactionBody::_internal_set_gas(int64_t value) {
  
  _impl_.gas_ = value;
}
inline void ContractCallTransactionBody::set_gas(int64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:proto.ContractCallTransactionBody.gas)
}

// int64 amount = 3;
inline void ContractCallTransactionBody::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t ContractCallTransactionBody::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t ContractCallTransactionBody::amount() const {
  // @@protoc_insertion_point(field_get:proto.ContractCallTransactionBody.amount)
  return _internal_amount();
}
inline void ContractCallTransactionBody::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void ContractCallTransactionBody::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.ContractCallTransactionBody.amount)
}

// bytes functionParameters = 4;
inline void ContractCallTransactionBody::clear_functionparameters() {
  _impl_.functionparameters_.ClearToEmpty();
}
inline const std::string& ContractCallTransactionBody::functionparameters() const {
  // @@protoc_insertion_point(field_get:proto.ContractCallTransactionBody.functionParameters)
  return _internal_functionparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractCallTransactionBody::set_functionparameters(ArgT0&& arg0, ArgT... args) {
 
 _impl_.functionparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractCallTransactionBody.functionParameters)
}
inline std::string* ContractCallTransactionBody::mutable_functionparameters() {
  std::string* _s = _internal_mutable_functionparameters();
  // @@protoc_insertion_point(field_mutable:proto.ContractCallTransactionBody.functionParameters)
  return _s;
}
inline const std::string& ContractCallTransactionBody::_internal_functionparameters() const {
  return _impl_.functionparameters_.Get();
}
inline void ContractCallTransactionBody::_internal_set_functionparameters(const std::string& value) {
  
  _impl_.functionparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractCallTransactionBody::_internal_mutable_functionparameters() {
  
  return _impl_.functionparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractCallTransactionBody::release_functionparameters() {
  // @@protoc_insertion_point(field_release:proto.ContractCallTransactionBody.functionParameters)
  return _impl_.functionparameters_.Release();
}
inline void ContractCallTransactionBody::set_allocated_functionparameters(std::string* functionparameters) {
  if (functionparameters != nullptr) {
    
  } else {
    
  }
  _impl_.functionparameters_.SetAllocated(functionparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.functionparameters_.IsDefault()) {
    _impl_.functionparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCallTransactionBody.functionParameters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contract_5fcall_2eproto

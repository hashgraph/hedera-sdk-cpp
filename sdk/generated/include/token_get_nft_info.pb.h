// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_get_nft_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_5fget_5fnft_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_5fget_5fnft_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_5fget_5fnft_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_5fget_5fnft_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_5fget_5fnft_5finfo_2eproto;
namespace proto {
class NftID;
struct NftIDDefaultTypeInternal;
extern NftIDDefaultTypeInternal _NftID_default_instance_;
class TokenGetNftInfoQuery;
struct TokenGetNftInfoQueryDefaultTypeInternal;
extern TokenGetNftInfoQueryDefaultTypeInternal _TokenGetNftInfoQuery_default_instance_;
class TokenGetNftInfoResponse;
struct TokenGetNftInfoResponseDefaultTypeInternal;
extern TokenGetNftInfoResponseDefaultTypeInternal _TokenGetNftInfoResponse_default_instance_;
class TokenNftInfo;
struct TokenNftInfoDefaultTypeInternal;
extern TokenNftInfoDefaultTypeInternal _TokenNftInfo_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::NftID* Arena::CreateMaybeMessage<::proto::NftID>(Arena*);
template<> ::proto::TokenGetNftInfoQuery* Arena::CreateMaybeMessage<::proto::TokenGetNftInfoQuery>(Arena*);
template<> ::proto::TokenGetNftInfoResponse* Arena::CreateMaybeMessage<::proto::TokenGetNftInfoResponse>(Arena*);
template<> ::proto::TokenNftInfo* Arena::CreateMaybeMessage<::proto::TokenNftInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class NftID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NftID) */ {
 public:
  inline NftID() : NftID(nullptr) {}
  ~NftID() override;
  explicit PROTOBUF_CONSTEXPR NftID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NftID(const NftID& from);
  NftID(NftID&& from) noexcept
    : NftID() {
    *this = ::std::move(from);
  }

  inline NftID& operator=(const NftID& from) {
    CopyFrom(from);
    return *this;
  }
  inline NftID& operator=(NftID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NftID& default_instance() {
    return *internal_default_instance();
  }
  static inline const NftID* internal_default_instance() {
    return reinterpret_cast<const NftID*>(
               &_NftID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NftID& a, NftID& b) {
    a.Swap(&b);
  }
  inline void Swap(NftID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NftID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NftID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NftID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NftID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NftID& from) {
    NftID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NftID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NftID";
  }
  protected:
  explicit NftID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIDFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
  };
  // .proto.TokenID tokenID = 1;
  bool has_tokenid() const;
  private:
  bool _internal_has_tokenid() const;
  public:
  void clear_tokenid();
  const ::proto::TokenID& tokenid() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_tokenid();
  ::proto::TokenID* mutable_tokenid();
  void set_allocated_tokenid(::proto::TokenID* tokenid);
  private:
  const ::proto::TokenID& _internal_tokenid() const;
  ::proto::TokenID* _internal_mutable_tokenid();
  public:
  void unsafe_arena_set_allocated_tokenid(
      ::proto::TokenID* tokenid);
  ::proto::TokenID* unsafe_arena_release_tokenid();

  // int64 serialNumber = 2;
  void clear_serialnumber();
  int64_t serialnumber() const;
  void set_serialnumber(int64_t value);
  private:
  int64_t _internal_serialnumber() const;
  void _internal_set_serialnumber(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.NftID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TokenID* tokenid_;
    int64_t serialnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fget_5fnft_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TokenGetNftInfoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenGetNftInfoQuery) */ {
 public:
  inline TokenGetNftInfoQuery() : TokenGetNftInfoQuery(nullptr) {}
  ~TokenGetNftInfoQuery() override;
  explicit PROTOBUF_CONSTEXPR TokenGetNftInfoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenGetNftInfoQuery(const TokenGetNftInfoQuery& from);
  TokenGetNftInfoQuery(TokenGetNftInfoQuery&& from) noexcept
    : TokenGetNftInfoQuery() {
    *this = ::std::move(from);
  }

  inline TokenGetNftInfoQuery& operator=(const TokenGetNftInfoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenGetNftInfoQuery& operator=(TokenGetNftInfoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenGetNftInfoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenGetNftInfoQuery* internal_default_instance() {
    return reinterpret_cast<const TokenGetNftInfoQuery*>(
               &_TokenGetNftInfoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenGetNftInfoQuery& a, TokenGetNftInfoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenGetNftInfoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenGetNftInfoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenGetNftInfoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenGetNftInfoQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenGetNftInfoQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenGetNftInfoQuery& from) {
    TokenGetNftInfoQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenGetNftInfoQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenGetNftInfoQuery";
  }
  protected:
  explicit TokenGetNftInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kNftIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.NftID nftID = 2;
  bool has_nftid() const;
  private:
  bool _internal_has_nftid() const;
  public:
  void clear_nftid();
  const ::proto::NftID& nftid() const;
  PROTOBUF_NODISCARD ::proto::NftID* release_nftid();
  ::proto::NftID* mutable_nftid();
  void set_allocated_nftid(::proto::NftID* nftid);
  private:
  const ::proto::NftID& _internal_nftid() const;
  ::proto::NftID* _internal_mutable_nftid();
  public:
  void unsafe_arena_set_allocated_nftid(
      ::proto::NftID* nftid);
  ::proto::NftID* unsafe_arena_release_nftid();

  // @@protoc_insertion_point(class_scope:proto.TokenGetNftInfoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::NftID* nftid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fget_5fnft_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TokenNftInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenNftInfo) */ {
 public:
  inline TokenNftInfo() : TokenNftInfo(nullptr) {}
  ~TokenNftInfo() override;
  explicit PROTOBUF_CONSTEXPR TokenNftInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenNftInfo(const TokenNftInfo& from);
  TokenNftInfo(TokenNftInfo&& from) noexcept
    : TokenNftInfo() {
    *this = ::std::move(from);
  }

  inline TokenNftInfo& operator=(const TokenNftInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenNftInfo& operator=(TokenNftInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenNftInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenNftInfo* internal_default_instance() {
    return reinterpret_cast<const TokenNftInfo*>(
               &_TokenNftInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TokenNftInfo& a, TokenNftInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenNftInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenNftInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenNftInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenNftInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenNftInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenNftInfo& from) {
    TokenNftInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenNftInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenNftInfo";
  }
  protected:
  explicit TokenNftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kLedgerIdFieldNumber = 5,
    kNftIDFieldNumber = 1,
    kAccountIDFieldNumber = 2,
    kCreationTimeFieldNumber = 3,
    kSpenderIdFieldNumber = 6,
  };
  // bytes metadata = 4;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // bytes ledger_id = 5;
  void clear_ledger_id();
  const std::string& ledger_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_id();
  PROTOBUF_NODISCARD std::string* release_ledger_id();
  void set_allocated_ledger_id(std::string* ledger_id);
  private:
  const std::string& _internal_ledger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_id(const std::string& value);
  std::string* _internal_mutable_ledger_id();
  public:

  // .proto.NftID nftID = 1;
  bool has_nftid() const;
  private:
  bool _internal_has_nftid() const;
  public:
  void clear_nftid();
  const ::proto::NftID& nftid() const;
  PROTOBUF_NODISCARD ::proto::NftID* release_nftid();
  ::proto::NftID* mutable_nftid();
  void set_allocated_nftid(::proto::NftID* nftid);
  private:
  const ::proto::NftID& _internal_nftid() const;
  ::proto::NftID* _internal_mutable_nftid();
  public:
  void unsafe_arena_set_allocated_nftid(
      ::proto::NftID* nftid);
  ::proto::NftID* unsafe_arena_release_nftid();

  // .proto.AccountID accountID = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // .proto.Timestamp creationTime = 3;
  bool has_creationtime() const;
  private:
  bool _internal_has_creationtime() const;
  public:
  void clear_creationtime();
  const ::proto::Timestamp& creationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_creationtime();
  ::proto::Timestamp* mutable_creationtime();
  void set_allocated_creationtime(::proto::Timestamp* creationtime);
  private:
  const ::proto::Timestamp& _internal_creationtime() const;
  ::proto::Timestamp* _internal_mutable_creationtime();
  public:
  void unsafe_arena_set_allocated_creationtime(
      ::proto::Timestamp* creationtime);
  ::proto::Timestamp* unsafe_arena_release_creationtime();

  // .proto.AccountID spender_id = 6;
  bool has_spender_id() const;
  private:
  bool _internal_has_spender_id() const;
  public:
  void clear_spender_id();
  const ::proto::AccountID& spender_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender_id();
  ::proto::AccountID* mutable_spender_id();
  void set_allocated_spender_id(::proto::AccountID* spender_id);
  private:
  const ::proto::AccountID& _internal_spender_id() const;
  ::proto::AccountID* _internal_mutable_spender_id();
  public:
  void unsafe_arena_set_allocated_spender_id(
      ::proto::AccountID* spender_id);
  ::proto::AccountID* unsafe_arena_release_spender_id();

  // @@protoc_insertion_point(class_scope:proto.TokenNftInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_id_;
    ::proto::NftID* nftid_;
    ::proto::AccountID* accountid_;
    ::proto::Timestamp* creationtime_;
    ::proto::AccountID* spender_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fget_5fnft_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TokenGetNftInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenGetNftInfoResponse) */ {
 public:
  inline TokenGetNftInfoResponse() : TokenGetNftInfoResponse(nullptr) {}
  ~TokenGetNftInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR TokenGetNftInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenGetNftInfoResponse(const TokenGetNftInfoResponse& from);
  TokenGetNftInfoResponse(TokenGetNftInfoResponse&& from) noexcept
    : TokenGetNftInfoResponse() {
    *this = ::std::move(from);
  }

  inline TokenGetNftInfoResponse& operator=(const TokenGetNftInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenGetNftInfoResponse& operator=(TokenGetNftInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenGetNftInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenGetNftInfoResponse* internal_default_instance() {
    return reinterpret_cast<const TokenGetNftInfoResponse*>(
               &_TokenGetNftInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TokenGetNftInfoResponse& a, TokenGetNftInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenGetNftInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenGetNftInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenGetNftInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenGetNftInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenGetNftInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenGetNftInfoResponse& from) {
    TokenGetNftInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenGetNftInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenGetNftInfoResponse";
  }
  protected:
  explicit TokenGetNftInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kNftFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.TokenNftInfo nft = 2;
  bool has_nft() const;
  private:
  bool _internal_has_nft() const;
  public:
  void clear_nft();
  const ::proto::TokenNftInfo& nft() const;
  PROTOBUF_NODISCARD ::proto::TokenNftInfo* release_nft();
  ::proto::TokenNftInfo* mutable_nft();
  void set_allocated_nft(::proto::TokenNftInfo* nft);
  private:
  const ::proto::TokenNftInfo& _internal_nft() const;
  ::proto::TokenNftInfo* _internal_mutable_nft();
  public:
  void unsafe_arena_set_allocated_nft(
      ::proto::TokenNftInfo* nft);
  ::proto::TokenNftInfo* unsafe_arena_release_nft();

  // @@protoc_insertion_point(class_scope:proto.TokenGetNftInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::TokenNftInfo* nft_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fget_5fnft_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NftID

// .proto.TokenID tokenID = 1;
inline bool NftID::_internal_has_tokenid() const {
  return this != internal_default_instance() && _impl_.tokenid_ != nullptr;
}
inline bool NftID::has_tokenid() const {
  return _internal_has_tokenid();
}
inline const ::proto::TokenID& NftID::_internal_tokenid() const {
  const ::proto::TokenID* p = _impl_.tokenid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& NftID::tokenid() const {
  // @@protoc_insertion_point(field_get:proto.NftID.tokenID)
  return _internal_tokenid();
}
inline void NftID::unsafe_arena_set_allocated_tokenid(
    ::proto::TokenID* tokenid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  _impl_.tokenid_ = tokenid;
  if (tokenid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftID.tokenID)
}
inline ::proto::TokenID* NftID::release_tokenid() {
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* NftID::unsafe_arena_release_tokenid() {
  // @@protoc_insertion_point(field_release:proto.NftID.tokenID)
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
  return temp;
}
inline ::proto::TokenID* NftID::_internal_mutable_tokenid() {
  
  if (_impl_.tokenid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.tokenid_ = p;
  }
  return _impl_.tokenid_;
}
inline ::proto::TokenID* NftID::mutable_tokenid() {
  ::proto::TokenID* _msg = _internal_mutable_tokenid();
  // @@protoc_insertion_point(field_mutable:proto.NftID.tokenID)
  return _msg;
}
inline void NftID::set_allocated_tokenid(::proto::TokenID* tokenid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  if (tokenid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenid));
    if (message_arena != submessage_arena) {
      tokenid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tokenid_ = tokenid;
  // @@protoc_insertion_point(field_set_allocated:proto.NftID.tokenID)
}

// int64 serialNumber = 2;
inline void NftID::clear_serialnumber() {
  _impl_.serialnumber_ = int64_t{0};
}
inline int64_t NftID::_internal_serialnumber() const {
  return _impl_.serialnumber_;
}
inline int64_t NftID::serialnumber() const {
  // @@protoc_insertion_point(field_get:proto.NftID.serialNumber)
  return _internal_serialnumber();
}
inline void NftID::_internal_set_serialnumber(int64_t value) {
  
  _impl_.serialnumber_ = value;
}
inline void NftID::set_serialnumber(int64_t value) {
  _internal_set_serialnumber(value);
  // @@protoc_insertion_point(field_set:proto.NftID.serialNumber)
}

// -------------------------------------------------------------------

// TokenGetNftInfoQuery

// .proto.QueryHeader header = 1;
inline bool TokenGetNftInfoQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool TokenGetNftInfoQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& TokenGetNftInfoQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& TokenGetNftInfoQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfoQuery.header)
  return _internal_header();
}
inline void TokenGetNftInfoQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfoQuery.header)
}
inline ::proto::QueryHeader* TokenGetNftInfoQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* TokenGetNftInfoQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfoQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* TokenGetNftInfoQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* TokenGetNftInfoQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfoQuery.header)
  return _msg;
}
inline void TokenGetNftInfoQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfoQuery.header)
}

// .proto.NftID nftID = 2;
inline bool TokenGetNftInfoQuery::_internal_has_nftid() const {
  return this != internal_default_instance() && _impl_.nftid_ != nullptr;
}
inline bool TokenGetNftInfoQuery::has_nftid() const {
  return _internal_has_nftid();
}
inline void TokenGetNftInfoQuery::clear_nftid() {
  if (GetArenaForAllocation() == nullptr && _impl_.nftid_ != nullptr) {
    delete _impl_.nftid_;
  }
  _impl_.nftid_ = nullptr;
}
inline const ::proto::NftID& TokenGetNftInfoQuery::_internal_nftid() const {
  const ::proto::NftID* p = _impl_.nftid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::NftID&>(
      ::proto::_NftID_default_instance_);
}
inline const ::proto::NftID& TokenGetNftInfoQuery::nftid() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfoQuery.nftID)
  return _internal_nftid();
}
inline void TokenGetNftInfoQuery::unsafe_arena_set_allocated_nftid(
    ::proto::NftID* nftid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nftid_);
  }
  _impl_.nftid_ = nftid;
  if (nftid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfoQuery.nftID)
}
inline ::proto::NftID* TokenGetNftInfoQuery::release_nftid() {
  
  ::proto::NftID* temp = _impl_.nftid_;
  _impl_.nftid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::NftID* TokenGetNftInfoQuery::unsafe_arena_release_nftid() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfoQuery.nftID)
  
  ::proto::NftID* temp = _impl_.nftid_;
  _impl_.nftid_ = nullptr;
  return temp;
}
inline ::proto::NftID* TokenGetNftInfoQuery::_internal_mutable_nftid() {
  
  if (_impl_.nftid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::NftID>(GetArenaForAllocation());
    _impl_.nftid_ = p;
  }
  return _impl_.nftid_;
}
inline ::proto::NftID* TokenGetNftInfoQuery::mutable_nftid() {
  ::proto::NftID* _msg = _internal_mutable_nftid();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfoQuery.nftID)
  return _msg;
}
inline void TokenGetNftInfoQuery::set_allocated_nftid(::proto::NftID* nftid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nftid_;
  }
  if (nftid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nftid);
    if (message_arena != submessage_arena) {
      nftid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nftid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nftid_ = nftid;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfoQuery.nftID)
}

// -------------------------------------------------------------------

// TokenNftInfo

// .proto.NftID nftID = 1;
inline bool TokenNftInfo::_internal_has_nftid() const {
  return this != internal_default_instance() && _impl_.nftid_ != nullptr;
}
inline bool TokenNftInfo::has_nftid() const {
  return _internal_has_nftid();
}
inline void TokenNftInfo::clear_nftid() {
  if (GetArenaForAllocation() == nullptr && _impl_.nftid_ != nullptr) {
    delete _impl_.nftid_;
  }
  _impl_.nftid_ = nullptr;
}
inline const ::proto::NftID& TokenNftInfo::_internal_nftid() const {
  const ::proto::NftID* p = _impl_.nftid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::NftID&>(
      ::proto::_NftID_default_instance_);
}
inline const ::proto::NftID& TokenNftInfo::nftid() const {
  // @@protoc_insertion_point(field_get:proto.TokenNftInfo.nftID)
  return _internal_nftid();
}
inline void TokenNftInfo::unsafe_arena_set_allocated_nftid(
    ::proto::NftID* nftid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nftid_);
  }
  _impl_.nftid_ = nftid;
  if (nftid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenNftInfo.nftID)
}
inline ::proto::NftID* TokenNftInfo::release_nftid() {
  
  ::proto::NftID* temp = _impl_.nftid_;
  _impl_.nftid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::NftID* TokenNftInfo::unsafe_arena_release_nftid() {
  // @@protoc_insertion_point(field_release:proto.TokenNftInfo.nftID)
  
  ::proto::NftID* temp = _impl_.nftid_;
  _impl_.nftid_ = nullptr;
  return temp;
}
inline ::proto::NftID* TokenNftInfo::_internal_mutable_nftid() {
  
  if (_impl_.nftid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::NftID>(GetArenaForAllocation());
    _impl_.nftid_ = p;
  }
  return _impl_.nftid_;
}
inline ::proto::NftID* TokenNftInfo::mutable_nftid() {
  ::proto::NftID* _msg = _internal_mutable_nftid();
  // @@protoc_insertion_point(field_mutable:proto.TokenNftInfo.nftID)
  return _msg;
}
inline void TokenNftInfo::set_allocated_nftid(::proto::NftID* nftid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nftid_;
  }
  if (nftid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nftid);
    if (message_arena != submessage_arena) {
      nftid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nftid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nftid_ = nftid;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenNftInfo.nftID)
}

// .proto.AccountID accountID = 2;
inline bool TokenNftInfo::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool TokenNftInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& TokenNftInfo::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TokenNftInfo::accountid() const {
  // @@protoc_insertion_point(field_get:proto.TokenNftInfo.accountID)
  return _internal_accountid();
}
inline void TokenNftInfo::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenNftInfo.accountID)
}
inline ::proto::AccountID* TokenNftInfo::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TokenNftInfo::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.TokenNftInfo.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TokenNftInfo::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* TokenNftInfo::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.TokenNftInfo.accountID)
  return _msg;
}
inline void TokenNftInfo::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenNftInfo.accountID)
}

// .proto.Timestamp creationTime = 3;
inline bool TokenNftInfo::_internal_has_creationtime() const {
  return this != internal_default_instance() && _impl_.creationtime_ != nullptr;
}
inline bool TokenNftInfo::has_creationtime() const {
  return _internal_has_creationtime();
}
inline const ::proto::Timestamp& TokenNftInfo::_internal_creationtime() const {
  const ::proto::Timestamp* p = _impl_.creationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& TokenNftInfo::creationtime() const {
  // @@protoc_insertion_point(field_get:proto.TokenNftInfo.creationTime)
  return _internal_creationtime();
}
inline void TokenNftInfo::unsafe_arena_set_allocated_creationtime(
    ::proto::Timestamp* creationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creationtime_);
  }
  _impl_.creationtime_ = creationtime;
  if (creationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenNftInfo.creationTime)
}
inline ::proto::Timestamp* TokenNftInfo::release_creationtime() {
  
  ::proto::Timestamp* temp = _impl_.creationtime_;
  _impl_.creationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* TokenNftInfo::unsafe_arena_release_creationtime() {
  // @@protoc_insertion_point(field_release:proto.TokenNftInfo.creationTime)
  
  ::proto::Timestamp* temp = _impl_.creationtime_;
  _impl_.creationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* TokenNftInfo::_internal_mutable_creationtime() {
  
  if (_impl_.creationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.creationtime_ = p;
  }
  return _impl_.creationtime_;
}
inline ::proto::Timestamp* TokenNftInfo::mutable_creationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_creationtime();
  // @@protoc_insertion_point(field_mutable:proto.TokenNftInfo.creationTime)
  return _msg;
}
inline void TokenNftInfo::set_allocated_creationtime(::proto::Timestamp* creationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creationtime_);
  }
  if (creationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creationtime));
    if (message_arena != submessage_arena) {
      creationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creationtime_ = creationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenNftInfo.creationTime)
}

// bytes metadata = 4;
inline void TokenNftInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& TokenNftInfo::metadata() const {
  // @@protoc_insertion_point(field_get:proto.TokenNftInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenNftInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TokenNftInfo.metadata)
}
inline std::string* TokenNftInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:proto.TokenNftInfo.metadata)
  return _s;
}
inline const std::string& TokenNftInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void TokenNftInfo::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenNftInfo::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenNftInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.TokenNftInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void TokenNftInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TokenNftInfo.metadata)
}

// bytes ledger_id = 5;
inline void TokenNftInfo::clear_ledger_id() {
  _impl_.ledger_id_.ClearToEmpty();
}
inline const std::string& TokenNftInfo::ledger_id() const {
  // @@protoc_insertion_point(field_get:proto.TokenNftInfo.ledger_id)
  return _internal_ledger_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TokenNftInfo::set_ledger_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ledger_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TokenNftInfo.ledger_id)
}
inline std::string* TokenNftInfo::mutable_ledger_id() {
  std::string* _s = _internal_mutable_ledger_id();
  // @@protoc_insertion_point(field_mutable:proto.TokenNftInfo.ledger_id)
  return _s;
}
inline const std::string& TokenNftInfo::_internal_ledger_id() const {
  return _impl_.ledger_id_.Get();
}
inline void TokenNftInfo::_internal_set_ledger_id(const std::string& value) {
  
  _impl_.ledger_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TokenNftInfo::_internal_mutable_ledger_id() {
  
  return _impl_.ledger_id_.Mutable(GetArenaForAllocation());
}
inline std::string* TokenNftInfo::release_ledger_id() {
  // @@protoc_insertion_point(field_release:proto.TokenNftInfo.ledger_id)
  return _impl_.ledger_id_.Release();
}
inline void TokenNftInfo::set_allocated_ledger_id(std::string* ledger_id) {
  if (ledger_id != nullptr) {
    
  } else {
    
  }
  _impl_.ledger_id_.SetAllocated(ledger_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ledger_id_.IsDefault()) {
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TokenNftInfo.ledger_id)
}

// .proto.AccountID spender_id = 6;
inline bool TokenNftInfo::_internal_has_spender_id() const {
  return this != internal_default_instance() && _impl_.spender_id_ != nullptr;
}
inline bool TokenNftInfo::has_spender_id() const {
  return _internal_has_spender_id();
}
inline const ::proto::AccountID& TokenNftInfo::_internal_spender_id() const {
  const ::proto::AccountID* p = _impl_.spender_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TokenNftInfo::spender_id() const {
  // @@protoc_insertion_point(field_get:proto.TokenNftInfo.spender_id)
  return _internal_spender_id();
}
inline void TokenNftInfo::unsafe_arena_set_allocated_spender_id(
    ::proto::AccountID* spender_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_id_);
  }
  _impl_.spender_id_ = spender_id;
  if (spender_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenNftInfo.spender_id)
}
inline ::proto::AccountID* TokenNftInfo::release_spender_id() {
  
  ::proto::AccountID* temp = _impl_.spender_id_;
  _impl_.spender_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TokenNftInfo::unsafe_arena_release_spender_id() {
  // @@protoc_insertion_point(field_release:proto.TokenNftInfo.spender_id)
  
  ::proto::AccountID* temp = _impl_.spender_id_;
  _impl_.spender_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TokenNftInfo::_internal_mutable_spender_id() {
  
  if (_impl_.spender_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_id_ = p;
  }
  return _impl_.spender_id_;
}
inline ::proto::AccountID* TokenNftInfo::mutable_spender_id() {
  ::proto::AccountID* _msg = _internal_mutable_spender_id();
  // @@protoc_insertion_point(field_mutable:proto.TokenNftInfo.spender_id)
  return _msg;
}
inline void TokenNftInfo::set_allocated_spender_id(::proto::AccountID* spender_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_id_);
  }
  if (spender_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender_id));
    if (message_arena != submessage_arena) {
      spender_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_id_ = spender_id;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenNftInfo.spender_id)
}

// -------------------------------------------------------------------

// TokenGetNftInfoResponse

// .proto.ResponseHeader header = 1;
inline bool TokenGetNftInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool TokenGetNftInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& TokenGetNftInfoResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& TokenGetNftInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfoResponse.header)
  return _internal_header();
}
inline void TokenGetNftInfoResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfoResponse.header)
}
inline ::proto::ResponseHeader* TokenGetNftInfoResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* TokenGetNftInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfoResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* TokenGetNftInfoResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* TokenGetNftInfoResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfoResponse.header)
  return _msg;
}
inline void TokenGetNftInfoResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfoResponse.header)
}

// .proto.TokenNftInfo nft = 2;
inline bool TokenGetNftInfoResponse::_internal_has_nft() const {
  return this != internal_default_instance() && _impl_.nft_ != nullptr;
}
inline bool TokenGetNftInfoResponse::has_nft() const {
  return _internal_has_nft();
}
inline void TokenGetNftInfoResponse::clear_nft() {
  if (GetArenaForAllocation() == nullptr && _impl_.nft_ != nullptr) {
    delete _impl_.nft_;
  }
  _impl_.nft_ = nullptr;
}
inline const ::proto::TokenNftInfo& TokenGetNftInfoResponse::_internal_nft() const {
  const ::proto::TokenNftInfo* p = _impl_.nft_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenNftInfo&>(
      ::proto::_TokenNftInfo_default_instance_);
}
inline const ::proto::TokenNftInfo& TokenGetNftInfoResponse::nft() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfoResponse.nft)
  return _internal_nft();
}
inline void TokenGetNftInfoResponse::unsafe_arena_set_allocated_nft(
    ::proto::TokenNftInfo* nft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nft_);
  }
  _impl_.nft_ = nft;
  if (nft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfoResponse.nft)
}
inline ::proto::TokenNftInfo* TokenGetNftInfoResponse::release_nft() {
  
  ::proto::TokenNftInfo* temp = _impl_.nft_;
  _impl_.nft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenNftInfo* TokenGetNftInfoResponse::unsafe_arena_release_nft() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfoResponse.nft)
  
  ::proto::TokenNftInfo* temp = _impl_.nft_;
  _impl_.nft_ = nullptr;
  return temp;
}
inline ::proto::TokenNftInfo* TokenGetNftInfoResponse::_internal_mutable_nft() {
  
  if (_impl_.nft_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenNftInfo>(GetArenaForAllocation());
    _impl_.nft_ = p;
  }
  return _impl_.nft_;
}
inline ::proto::TokenNftInfo* TokenGetNftInfoResponse::mutable_nft() {
  ::proto::TokenNftInfo* _msg = _internal_mutable_nft();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfoResponse.nft)
  return _msg;
}
inline void TokenGetNftInfoResponse::set_allocated_nft(::proto::TokenNftInfo* nft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nft_;
  }
  if (nft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nft);
    if (message_arena != submessage_arena) {
      nft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nft, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nft_ = nft;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfoResponse.nft)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_5fget_5fnft_5finfo_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_get_nft_infos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_5fget_5fnft_5finfos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_5fget_5fnft_5finfos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "token_get_nft_info.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_5fget_5fnft_5finfos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_5fget_5fnft_5finfos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_5fget_5fnft_5finfos_2eproto;
namespace proto {
class TokenGetNftInfosQuery;
struct TokenGetNftInfosQueryDefaultTypeInternal;
extern TokenGetNftInfosQueryDefaultTypeInternal _TokenGetNftInfosQuery_default_instance_;
class TokenGetNftInfosResponse;
struct TokenGetNftInfosResponseDefaultTypeInternal;
extern TokenGetNftInfosResponseDefaultTypeInternal _TokenGetNftInfosResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TokenGetNftInfosQuery* Arena::CreateMaybeMessage<::proto::TokenGetNftInfosQuery>(Arena*);
template<> ::proto::TokenGetNftInfosResponse* Arena::CreateMaybeMessage<::proto::TokenGetNftInfosResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TokenGetNftInfosQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenGetNftInfosQuery) */ {
 public:
  inline TokenGetNftInfosQuery() : TokenGetNftInfosQuery(nullptr) {}
  ~TokenGetNftInfosQuery() override;
  explicit PROTOBUF_CONSTEXPR TokenGetNftInfosQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenGetNftInfosQuery(const TokenGetNftInfosQuery& from);
  TokenGetNftInfosQuery(TokenGetNftInfosQuery&& from) noexcept
    : TokenGetNftInfosQuery() {
    *this = ::std::move(from);
  }

  inline TokenGetNftInfosQuery& operator=(const TokenGetNftInfosQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenGetNftInfosQuery& operator=(TokenGetNftInfosQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenGetNftInfosQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenGetNftInfosQuery* internal_default_instance() {
    return reinterpret_cast<const TokenGetNftInfosQuery*>(
               &_TokenGetNftInfosQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenGetNftInfosQuery& a, TokenGetNftInfosQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenGetNftInfosQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenGetNftInfosQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenGetNftInfosQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenGetNftInfosQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenGetNftInfosQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenGetNftInfosQuery& from) {
    TokenGetNftInfosQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenGetNftInfosQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenGetNftInfosQuery";
  }
  protected:
  explicit TokenGetNftInfosQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTokenIDFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.TokenID tokenID = 2;
  bool has_tokenid() const;
  private:
  bool _internal_has_tokenid() const;
  public:
  void clear_tokenid();
  const ::proto::TokenID& tokenid() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_tokenid();
  ::proto::TokenID* mutable_tokenid();
  void set_allocated_tokenid(::proto::TokenID* tokenid);
  private:
  const ::proto::TokenID& _internal_tokenid() const;
  ::proto::TokenID* _internal_mutable_tokenid();
  public:
  void unsafe_arena_set_allocated_tokenid(
      ::proto::TokenID* tokenid);
  ::proto::TokenID* unsafe_arena_release_tokenid();

  // int64 start = 3;
  void clear_start();
  int64_t start() const;
  void set_start(int64_t value);
  private:
  int64_t _internal_start() const;
  void _internal_set_start(int64_t value);
  public:

  // int64 end = 4;
  void clear_end();
  int64_t end() const;
  void set_end(int64_t value);
  private:
  int64_t _internal_end() const;
  void _internal_set_end(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TokenGetNftInfosQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::TokenID* tokenid_;
    int64_t start_;
    int64_t end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fget_5fnft_5finfos_2eproto;
};
// -------------------------------------------------------------------

class TokenGetNftInfosResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenGetNftInfosResponse) */ {
 public:
  inline TokenGetNftInfosResponse() : TokenGetNftInfosResponse(nullptr) {}
  ~TokenGetNftInfosResponse() override;
  explicit PROTOBUF_CONSTEXPR TokenGetNftInfosResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenGetNftInfosResponse(const TokenGetNftInfosResponse& from);
  TokenGetNftInfosResponse(TokenGetNftInfosResponse&& from) noexcept
    : TokenGetNftInfosResponse() {
    *this = ::std::move(from);
  }

  inline TokenGetNftInfosResponse& operator=(const TokenGetNftInfosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenGetNftInfosResponse& operator=(TokenGetNftInfosResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenGetNftInfosResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenGetNftInfosResponse* internal_default_instance() {
    return reinterpret_cast<const TokenGetNftInfosResponse*>(
               &_TokenGetNftInfosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenGetNftInfosResponse& a, TokenGetNftInfosResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenGetNftInfosResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenGetNftInfosResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenGetNftInfosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenGetNftInfosResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenGetNftInfosResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenGetNftInfosResponse& from) {
    TokenGetNftInfosResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenGetNftInfosResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenGetNftInfosResponse";
  }
  protected:
  explicit TokenGetNftInfosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kTokenIDFieldNumber = 2,
  };
  // repeated .proto.TokenNftInfo nfts = 3;
  int nfts_size() const;
  private:
  int _internal_nfts_size() const;
  public:
  void clear_nfts();
  ::proto::TokenNftInfo* mutable_nfts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenNftInfo >*
      mutable_nfts();
  private:
  const ::proto::TokenNftInfo& _internal_nfts(int index) const;
  ::proto::TokenNftInfo* _internal_add_nfts();
  public:
  const ::proto::TokenNftInfo& nfts(int index) const;
  ::proto::TokenNftInfo* add_nfts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenNftInfo >&
      nfts() const;

  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.TokenID tokenID = 2;
  bool has_tokenid() const;
  private:
  bool _internal_has_tokenid() const;
  public:
  void clear_tokenid();
  const ::proto::TokenID& tokenid() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_tokenid();
  ::proto::TokenID* mutable_tokenid();
  void set_allocated_tokenid(::proto::TokenID* tokenid);
  private:
  const ::proto::TokenID& _internal_tokenid() const;
  ::proto::TokenID* _internal_mutable_tokenid();
  public:
  void unsafe_arena_set_allocated_tokenid(
      ::proto::TokenID* tokenid);
  ::proto::TokenID* unsafe_arena_release_tokenid();

  // @@protoc_insertion_point(class_scope:proto.TokenGetNftInfosResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenNftInfo > nfts_;
    ::proto::ResponseHeader* header_;
    ::proto::TokenID* tokenid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fget_5fnft_5finfos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenGetNftInfosQuery

// .proto.QueryHeader header = 1;
inline bool TokenGetNftInfosQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool TokenGetNftInfosQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& TokenGetNftInfosQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& TokenGetNftInfosQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosQuery.header)
  return _internal_header();
}
inline void TokenGetNftInfosQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfosQuery.header)
}
inline ::proto::QueryHeader* TokenGetNftInfosQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* TokenGetNftInfosQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfosQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* TokenGetNftInfosQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* TokenGetNftInfosQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfosQuery.header)
  return _msg;
}
inline void TokenGetNftInfosQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfosQuery.header)
}

// .proto.TokenID tokenID = 2;
inline bool TokenGetNftInfosQuery::_internal_has_tokenid() const {
  return this != internal_default_instance() && _impl_.tokenid_ != nullptr;
}
inline bool TokenGetNftInfosQuery::has_tokenid() const {
  return _internal_has_tokenid();
}
inline const ::proto::TokenID& TokenGetNftInfosQuery::_internal_tokenid() const {
  const ::proto::TokenID* p = _impl_.tokenid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& TokenGetNftInfosQuery::tokenid() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosQuery.tokenID)
  return _internal_tokenid();
}
inline void TokenGetNftInfosQuery::unsafe_arena_set_allocated_tokenid(
    ::proto::TokenID* tokenid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  _impl_.tokenid_ = tokenid;
  if (tokenid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfosQuery.tokenID)
}
inline ::proto::TokenID* TokenGetNftInfosQuery::release_tokenid() {
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* TokenGetNftInfosQuery::unsafe_arena_release_tokenid() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfosQuery.tokenID)
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
  return temp;
}
inline ::proto::TokenID* TokenGetNftInfosQuery::_internal_mutable_tokenid() {
  
  if (_impl_.tokenid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.tokenid_ = p;
  }
  return _impl_.tokenid_;
}
inline ::proto::TokenID* TokenGetNftInfosQuery::mutable_tokenid() {
  ::proto::TokenID* _msg = _internal_mutable_tokenid();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfosQuery.tokenID)
  return _msg;
}
inline void TokenGetNftInfosQuery::set_allocated_tokenid(::proto::TokenID* tokenid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  if (tokenid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenid));
    if (message_arena != submessage_arena) {
      tokenid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tokenid_ = tokenid;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfosQuery.tokenID)
}

// int64 start = 3;
inline void TokenGetNftInfosQuery::clear_start() {
  _impl_.start_ = int64_t{0};
}
inline int64_t TokenGetNftInfosQuery::_internal_start() const {
  return _impl_.start_;
}
inline int64_t TokenGetNftInfosQuery::start() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosQuery.start)
  return _internal_start();
}
inline void TokenGetNftInfosQuery::_internal_set_start(int64_t value) {
  
  _impl_.start_ = value;
}
inline void TokenGetNftInfosQuery::set_start(int64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:proto.TokenGetNftInfosQuery.start)
}

// int64 end = 4;
inline void TokenGetNftInfosQuery::clear_end() {
  _impl_.end_ = int64_t{0};
}
inline int64_t TokenGetNftInfosQuery::_internal_end() const {
  return _impl_.end_;
}
inline int64_t TokenGetNftInfosQuery::end() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosQuery.end)
  return _internal_end();
}
inline void TokenGetNftInfosQuery::_internal_set_end(int64_t value) {
  
  _impl_.end_ = value;
}
inline void TokenGetNftInfosQuery::set_end(int64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:proto.TokenGetNftInfosQuery.end)
}

// -------------------------------------------------------------------

// TokenGetNftInfosResponse

// .proto.ResponseHeader header = 1;
inline bool TokenGetNftInfosResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool TokenGetNftInfosResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& TokenGetNftInfosResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& TokenGetNftInfosResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosResponse.header)
  return _internal_header();
}
inline void TokenGetNftInfosResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfosResponse.header)
}
inline ::proto::ResponseHeader* TokenGetNftInfosResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* TokenGetNftInfosResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfosResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* TokenGetNftInfosResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* TokenGetNftInfosResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfosResponse.header)
  return _msg;
}
inline void TokenGetNftInfosResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfosResponse.header)
}

// .proto.TokenID tokenID = 2;
inline bool TokenGetNftInfosResponse::_internal_has_tokenid() const {
  return this != internal_default_instance() && _impl_.tokenid_ != nullptr;
}
inline bool TokenGetNftInfosResponse::has_tokenid() const {
  return _internal_has_tokenid();
}
inline const ::proto::TokenID& TokenGetNftInfosResponse::_internal_tokenid() const {
  const ::proto::TokenID* p = _impl_.tokenid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& TokenGetNftInfosResponse::tokenid() const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosResponse.tokenID)
  return _internal_tokenid();
}
inline void TokenGetNftInfosResponse::unsafe_arena_set_allocated_tokenid(
    ::proto::TokenID* tokenid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  _impl_.tokenid_ = tokenid;
  if (tokenid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenGetNftInfosResponse.tokenID)
}
inline ::proto::TokenID* TokenGetNftInfosResponse::release_tokenid() {
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* TokenGetNftInfosResponse::unsafe_arena_release_tokenid() {
  // @@protoc_insertion_point(field_release:proto.TokenGetNftInfosResponse.tokenID)
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
  return temp;
}
inline ::proto::TokenID* TokenGetNftInfosResponse::_internal_mutable_tokenid() {
  
  if (_impl_.tokenid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.tokenid_ = p;
  }
  return _impl_.tokenid_;
}
inline ::proto::TokenID* TokenGetNftInfosResponse::mutable_tokenid() {
  ::proto::TokenID* _msg = _internal_mutable_tokenid();
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfosResponse.tokenID)
  return _msg;
}
inline void TokenGetNftInfosResponse::set_allocated_tokenid(::proto::TokenID* tokenid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  if (tokenid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenid));
    if (message_arena != submessage_arena) {
      tokenid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tokenid_ = tokenid;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenGetNftInfosResponse.tokenID)
}

// repeated .proto.TokenNftInfo nfts = 3;
inline int TokenGetNftInfosResponse::_internal_nfts_size() const {
  return _impl_.nfts_.size();
}
inline int TokenGetNftInfosResponse::nfts_size() const {
  return _internal_nfts_size();
}
inline ::proto::TokenNftInfo* TokenGetNftInfosResponse::mutable_nfts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TokenGetNftInfosResponse.nfts)
  return _impl_.nfts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenNftInfo >*
TokenGetNftInfosResponse::mutable_nfts() {
  // @@protoc_insertion_point(field_mutable_list:proto.TokenGetNftInfosResponse.nfts)
  return &_impl_.nfts_;
}
inline const ::proto::TokenNftInfo& TokenGetNftInfosResponse::_internal_nfts(int index) const {
  return _impl_.nfts_.Get(index);
}
inline const ::proto::TokenNftInfo& TokenGetNftInfosResponse::nfts(int index) const {
  // @@protoc_insertion_point(field_get:proto.TokenGetNftInfosResponse.nfts)
  return _internal_nfts(index);
}
inline ::proto::TokenNftInfo* TokenGetNftInfosResponse::_internal_add_nfts() {
  return _impl_.nfts_.Add();
}
inline ::proto::TokenNftInfo* TokenGetNftInfosResponse::add_nfts() {
  ::proto::TokenNftInfo* _add = _internal_add_nfts();
  // @@protoc_insertion_point(field_add:proto.TokenGetNftInfosResponse.nfts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenNftInfo >&
TokenGetNftInfosResponse::nfts() const {
  // @@protoc_insertion_point(field_list:proto.TokenGetNftInfosResponse.nfts)
  return _impl_.nfts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_5fget_5fnft_5finfos_2eproto

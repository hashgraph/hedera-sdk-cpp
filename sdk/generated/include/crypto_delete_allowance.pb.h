// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_delete_allowance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fdelete_5fallowance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fdelete_5fallowance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fdelete_5fallowance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fdelete_5fallowance_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fdelete_5fallowance_2eproto;
namespace proto {
class CryptoDeleteAllowanceTransactionBody;
struct CryptoDeleteAllowanceTransactionBodyDefaultTypeInternal;
extern CryptoDeleteAllowanceTransactionBodyDefaultTypeInternal _CryptoDeleteAllowanceTransactionBody_default_instance_;
class NftRemoveAllowance;
struct NftRemoveAllowanceDefaultTypeInternal;
extern NftRemoveAllowanceDefaultTypeInternal _NftRemoveAllowance_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoDeleteAllowanceTransactionBody* Arena::CreateMaybeMessage<::proto::CryptoDeleteAllowanceTransactionBody>(Arena*);
template<> ::proto::NftRemoveAllowance* Arena::CreateMaybeMessage<::proto::NftRemoveAllowance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoDeleteAllowanceTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoDeleteAllowanceTransactionBody) */ {
 public:
  inline CryptoDeleteAllowanceTransactionBody() : CryptoDeleteAllowanceTransactionBody(nullptr) {}
  ~CryptoDeleteAllowanceTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR CryptoDeleteAllowanceTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoDeleteAllowanceTransactionBody(const CryptoDeleteAllowanceTransactionBody& from);
  CryptoDeleteAllowanceTransactionBody(CryptoDeleteAllowanceTransactionBody&& from) noexcept
    : CryptoDeleteAllowanceTransactionBody() {
    *this = ::std::move(from);
  }

  inline CryptoDeleteAllowanceTransactionBody& operator=(const CryptoDeleteAllowanceTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoDeleteAllowanceTransactionBody& operator=(CryptoDeleteAllowanceTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoDeleteAllowanceTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoDeleteAllowanceTransactionBody* internal_default_instance() {
    return reinterpret_cast<const CryptoDeleteAllowanceTransactionBody*>(
               &_CryptoDeleteAllowanceTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoDeleteAllowanceTransactionBody& a, CryptoDeleteAllowanceTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoDeleteAllowanceTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoDeleteAllowanceTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoDeleteAllowanceTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoDeleteAllowanceTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoDeleteAllowanceTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoDeleteAllowanceTransactionBody& from) {
    CryptoDeleteAllowanceTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoDeleteAllowanceTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoDeleteAllowanceTransactionBody";
  }
  protected:
  explicit CryptoDeleteAllowanceTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftAllowancesFieldNumber = 2,
  };
  // repeated .proto.NftRemoveAllowance nftAllowances = 2;
  int nftallowances_size() const;
  private:
  int _internal_nftallowances_size() const;
  public:
  void clear_nftallowances();
  ::proto::NftRemoveAllowance* mutable_nftallowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftRemoveAllowance >*
      mutable_nftallowances();
  private:
  const ::proto::NftRemoveAllowance& _internal_nftallowances(int index) const;
  ::proto::NftRemoveAllowance* _internal_add_nftallowances();
  public:
  const ::proto::NftRemoveAllowance& nftallowances(int index) const;
  ::proto::NftRemoveAllowance* add_nftallowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftRemoveAllowance >&
      nftallowances() const;

  // @@protoc_insertion_point(class_scope:proto.CryptoDeleteAllowanceTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftRemoveAllowance > nftallowances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fdelete_5fallowance_2eproto;
};
// -------------------------------------------------------------------

class NftRemoveAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NftRemoveAllowance) */ {
 public:
  inline NftRemoveAllowance() : NftRemoveAllowance(nullptr) {}
  ~NftRemoveAllowance() override;
  explicit PROTOBUF_CONSTEXPR NftRemoveAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NftRemoveAllowance(const NftRemoveAllowance& from);
  NftRemoveAllowance(NftRemoveAllowance&& from) noexcept
    : NftRemoveAllowance() {
    *this = ::std::move(from);
  }

  inline NftRemoveAllowance& operator=(const NftRemoveAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline NftRemoveAllowance& operator=(NftRemoveAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NftRemoveAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const NftRemoveAllowance* internal_default_instance() {
    return reinterpret_cast<const NftRemoveAllowance*>(
               &_NftRemoveAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NftRemoveAllowance& a, NftRemoveAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(NftRemoveAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NftRemoveAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NftRemoveAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NftRemoveAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NftRemoveAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NftRemoveAllowance& from) {
    NftRemoveAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NftRemoveAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NftRemoveAllowance";
  }
  protected:
  explicit NftRemoveAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumbersFieldNumber = 3,
    kTokenIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // repeated int64 serial_numbers = 3;
  int serial_numbers_size() const;
  private:
  int _internal_serial_numbers_size() const;
  public:
  void clear_serial_numbers();
  private:
  int64_t _internal_serial_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_serial_numbers() const;
  void _internal_add_serial_numbers(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_serial_numbers();
  public:
  int64_t serial_numbers(int index) const;
  void set_serial_numbers(int index, int64_t value);
  void add_serial_numbers(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      serial_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_serial_numbers();

  // .proto.TokenID token_id = 1;
  bool has_token_id() const;
  private:
  bool _internal_has_token_id() const;
  public:
  void clear_token_id();
  const ::proto::TokenID& token_id() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_token_id();
  ::proto::TokenID* mutable_token_id();
  void set_allocated_token_id(::proto::TokenID* token_id);
  private:
  const ::proto::TokenID& _internal_token_id() const;
  ::proto::TokenID* _internal_mutable_token_id();
  public:
  void unsafe_arena_set_allocated_token_id(
      ::proto::TokenID* token_id);
  ::proto::TokenID* unsafe_arena_release_token_id();

  // .proto.AccountID owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::proto::AccountID& owner() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_owner();
  ::proto::AccountID* mutable_owner();
  void set_allocated_owner(::proto::AccountID* owner);
  private:
  const ::proto::AccountID& _internal_owner() const;
  ::proto::AccountID* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::proto::AccountID* owner);
  ::proto::AccountID* unsafe_arena_release_owner();

  // @@protoc_insertion_point(class_scope:proto.NftRemoveAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > serial_numbers_;
    mutable std::atomic<int> _serial_numbers_cached_byte_size_;
    ::proto::TokenID* token_id_;
    ::proto::AccountID* owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fdelete_5fallowance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoDeleteAllowanceTransactionBody

// repeated .proto.NftRemoveAllowance nftAllowances = 2;
inline int CryptoDeleteAllowanceTransactionBody::_internal_nftallowances_size() const {
  return _impl_.nftallowances_.size();
}
inline int CryptoDeleteAllowanceTransactionBody::nftallowances_size() const {
  return _internal_nftallowances_size();
}
inline void CryptoDeleteAllowanceTransactionBody::clear_nftallowances() {
  _impl_.nftallowances_.Clear();
}
inline ::proto::NftRemoveAllowance* CryptoDeleteAllowanceTransactionBody::mutable_nftallowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CryptoDeleteAllowanceTransactionBody.nftAllowances)
  return _impl_.nftallowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftRemoveAllowance >*
CryptoDeleteAllowanceTransactionBody::mutable_nftallowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.CryptoDeleteAllowanceTransactionBody.nftAllowances)
  return &_impl_.nftallowances_;
}
inline const ::proto::NftRemoveAllowance& CryptoDeleteAllowanceTransactionBody::_internal_nftallowances(int index) const {
  return _impl_.nftallowances_.Get(index);
}
inline const ::proto::NftRemoveAllowance& CryptoDeleteAllowanceTransactionBody::nftallowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.CryptoDeleteAllowanceTransactionBody.nftAllowances)
  return _internal_nftallowances(index);
}
inline ::proto::NftRemoveAllowance* CryptoDeleteAllowanceTransactionBody::_internal_add_nftallowances() {
  return _impl_.nftallowances_.Add();
}
inline ::proto::NftRemoveAllowance* CryptoDeleteAllowanceTransactionBody::add_nftallowances() {
  ::proto::NftRemoveAllowance* _add = _internal_add_nftallowances();
  // @@protoc_insertion_point(field_add:proto.CryptoDeleteAllowanceTransactionBody.nftAllowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::NftRemoveAllowance >&
CryptoDeleteAllowanceTransactionBody::nftallowances() const {
  // @@protoc_insertion_point(field_list:proto.CryptoDeleteAllowanceTransactionBody.nftAllowances)
  return _impl_.nftallowances_;
}

// -------------------------------------------------------------------

// NftRemoveAllowance

// .proto.TokenID token_id = 1;
inline bool NftRemoveAllowance::_internal_has_token_id() const {
  return this != internal_default_instance() && _impl_.token_id_ != nullptr;
}
inline bool NftRemoveAllowance::has_token_id() const {
  return _internal_has_token_id();
}
inline const ::proto::TokenID& NftRemoveAllowance::_internal_token_id() const {
  const ::proto::TokenID* p = _impl_.token_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& NftRemoveAllowance::token_id() const {
  // @@protoc_insertion_point(field_get:proto.NftRemoveAllowance.token_id)
  return _internal_token_id();
}
inline void NftRemoveAllowance::unsafe_arena_set_allocated_token_id(
    ::proto::TokenID* token_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  _impl_.token_id_ = token_id;
  if (token_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftRemoveAllowance.token_id)
}
inline ::proto::TokenID* NftRemoveAllowance::release_token_id() {
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* NftRemoveAllowance::unsafe_arena_release_token_id() {
  // @@protoc_insertion_point(field_release:proto.NftRemoveAllowance.token_id)
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
  return temp;
}
inline ::proto::TokenID* NftRemoveAllowance::_internal_mutable_token_id() {
  
  if (_impl_.token_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.token_id_ = p;
  }
  return _impl_.token_id_;
}
inline ::proto::TokenID* NftRemoveAllowance::mutable_token_id() {
  ::proto::TokenID* _msg = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:proto.NftRemoveAllowance.token_id)
  return _msg;
}
inline void NftRemoveAllowance::set_allocated_token_id(::proto::TokenID* token_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  if (token_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_id));
    if (message_arena != submessage_arena) {
      token_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.token_id_ = token_id;
  // @@protoc_insertion_point(field_set_allocated:proto.NftRemoveAllowance.token_id)
}

// .proto.AccountID owner = 2;
inline bool NftRemoveAllowance::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool NftRemoveAllowance::has_owner() const {
  return _internal_has_owner();
}
inline const ::proto::AccountID& NftRemoveAllowance::_internal_owner() const {
  const ::proto::AccountID* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& NftRemoveAllowance::owner() const {
  // @@protoc_insertion_point(field_get:proto.NftRemoveAllowance.owner)
  return _internal_owner();
}
inline void NftRemoveAllowance::unsafe_arena_set_allocated_owner(
    ::proto::AccountID* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.NftRemoveAllowance.owner)
}
inline ::proto::AccountID* NftRemoveAllowance::release_owner() {
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* NftRemoveAllowance::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:proto.NftRemoveAllowance.owner)
  
  ::proto::AccountID* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::proto::AccountID* NftRemoveAllowance::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::proto::AccountID* NftRemoveAllowance::mutable_owner() {
  ::proto::AccountID* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:proto.NftRemoveAllowance.owner)
  return _msg;
}
inline void NftRemoveAllowance::set_allocated_owner(::proto::AccountID* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner));
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:proto.NftRemoveAllowance.owner)
}

// repeated int64 serial_numbers = 3;
inline int NftRemoveAllowance::_internal_serial_numbers_size() const {
  return _impl_.serial_numbers_.size();
}
inline int NftRemoveAllowance::serial_numbers_size() const {
  return _internal_serial_numbers_size();
}
inline void NftRemoveAllowance::clear_serial_numbers() {
  _impl_.serial_numbers_.Clear();
}
inline int64_t NftRemoveAllowance::_internal_serial_numbers(int index) const {
  return _impl_.serial_numbers_.Get(index);
}
inline int64_t NftRemoveAllowance::serial_numbers(int index) const {
  // @@protoc_insertion_point(field_get:proto.NftRemoveAllowance.serial_numbers)
  return _internal_serial_numbers(index);
}
inline void NftRemoveAllowance::set_serial_numbers(int index, int64_t value) {
  _impl_.serial_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.NftRemoveAllowance.serial_numbers)
}
inline void NftRemoveAllowance::_internal_add_serial_numbers(int64_t value) {
  _impl_.serial_numbers_.Add(value);
}
inline void NftRemoveAllowance::add_serial_numbers(int64_t value) {
  _internal_add_serial_numbers(value);
  // @@protoc_insertion_point(field_add:proto.NftRemoveAllowance.serial_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
NftRemoveAllowance::_internal_serial_numbers() const {
  return _impl_.serial_numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
NftRemoveAllowance::serial_numbers() const {
  // @@protoc_insertion_point(field_list:proto.NftRemoveAllowance.serial_numbers)
  return _internal_serial_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
NftRemoveAllowance::_internal_mutable_serial_numbers() {
  return &_impl_.serial_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
NftRemoveAllowance::mutable_serial_numbers() {
  // @@protoc_insertion_point(field_mutable_list:proto.NftRemoveAllowance.serial_numbers)
  return _internal_mutable_serial_numbers();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fdelete_5fallowance_2eproto

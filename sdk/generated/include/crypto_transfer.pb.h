// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_transfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5ftransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5ftransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5ftransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5ftransfer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5ftransfer_2eproto;
namespace proto {
class CryptoTransferTransactionBody;
struct CryptoTransferTransactionBodyDefaultTypeInternal;
extern CryptoTransferTransactionBodyDefaultTypeInternal _CryptoTransferTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoTransferTransactionBody* Arena::CreateMaybeMessage<::proto::CryptoTransferTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoTransferTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoTransferTransactionBody) */ {
 public:
  inline CryptoTransferTransactionBody() : CryptoTransferTransactionBody(nullptr) {}
  ~CryptoTransferTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR CryptoTransferTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoTransferTransactionBody(const CryptoTransferTransactionBody& from);
  CryptoTransferTransactionBody(CryptoTransferTransactionBody&& from) noexcept
    : CryptoTransferTransactionBody() {
    *this = ::std::move(from);
  }

  inline CryptoTransferTransactionBody& operator=(const CryptoTransferTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoTransferTransactionBody& operator=(CryptoTransferTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoTransferTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoTransferTransactionBody* internal_default_instance() {
    return reinterpret_cast<const CryptoTransferTransactionBody*>(
               &_CryptoTransferTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoTransferTransactionBody& a, CryptoTransferTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoTransferTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoTransferTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoTransferTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoTransferTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoTransferTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoTransferTransactionBody& from) {
    CryptoTransferTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoTransferTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoTransferTransactionBody";
  }
  protected:
  explicit CryptoTransferTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenTransfersFieldNumber = 2,
    kTransfersFieldNumber = 1,
  };
  // repeated .proto.TokenTransferList tokenTransfers = 2;
  int tokentransfers_size() const;
  private:
  int _internal_tokentransfers_size() const;
  public:
  void clear_tokentransfers();
  ::proto::TokenTransferList* mutable_tokentransfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >*
      mutable_tokentransfers();
  private:
  const ::proto::TokenTransferList& _internal_tokentransfers(int index) const;
  ::proto::TokenTransferList* _internal_add_tokentransfers();
  public:
  const ::proto::TokenTransferList& tokentransfers(int index) const;
  ::proto::TokenTransferList* add_tokentransfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >&
      tokentransfers() const;

  // .proto.TransferList transfers = 1;
  bool has_transfers() const;
  private:
  bool _internal_has_transfers() const;
  public:
  void clear_transfers();
  const ::proto::TransferList& transfers() const;
  PROTOBUF_NODISCARD ::proto::TransferList* release_transfers();
  ::proto::TransferList* mutable_transfers();
  void set_allocated_transfers(::proto::TransferList* transfers);
  private:
  const ::proto::TransferList& _internal_transfers() const;
  ::proto::TransferList* _internal_mutable_transfers();
  public:
  void unsafe_arena_set_allocated_transfers(
      ::proto::TransferList* transfers);
  ::proto::TransferList* unsafe_arena_release_transfers();

  // @@protoc_insertion_point(class_scope:proto.CryptoTransferTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList > tokentransfers_;
    ::proto::TransferList* transfers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5ftransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoTransferTransactionBody

// .proto.TransferList transfers = 1;
inline bool CryptoTransferTransactionBody::_internal_has_transfers() const {
  return this != internal_default_instance() && _impl_.transfers_ != nullptr;
}
inline bool CryptoTransferTransactionBody::has_transfers() const {
  return _internal_has_transfers();
}
inline const ::proto::TransferList& CryptoTransferTransactionBody::_internal_transfers() const {
  const ::proto::TransferList* p = _impl_.transfers_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransferList&>(
      ::proto::_TransferList_default_instance_);
}
inline const ::proto::TransferList& CryptoTransferTransactionBody::transfers() const {
  // @@protoc_insertion_point(field_get:proto.CryptoTransferTransactionBody.transfers)
  return _internal_transfers();
}
inline void CryptoTransferTransactionBody::unsafe_arena_set_allocated_transfers(
    ::proto::TransferList* transfers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transfers_);
  }
  _impl_.transfers_ = transfers;
  if (transfers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoTransferTransactionBody.transfers)
}
inline ::proto::TransferList* CryptoTransferTransactionBody::release_transfers() {
  
  ::proto::TransferList* temp = _impl_.transfers_;
  _impl_.transfers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransferList* CryptoTransferTransactionBody::unsafe_arena_release_transfers() {
  // @@protoc_insertion_point(field_release:proto.CryptoTransferTransactionBody.transfers)
  
  ::proto::TransferList* temp = _impl_.transfers_;
  _impl_.transfers_ = nullptr;
  return temp;
}
inline ::proto::TransferList* CryptoTransferTransactionBody::_internal_mutable_transfers() {
  
  if (_impl_.transfers_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransferList>(GetArenaForAllocation());
    _impl_.transfers_ = p;
  }
  return _impl_.transfers_;
}
inline ::proto::TransferList* CryptoTransferTransactionBody::mutable_transfers() {
  ::proto::TransferList* _msg = _internal_mutable_transfers();
  // @@protoc_insertion_point(field_mutable:proto.CryptoTransferTransactionBody.transfers)
  return _msg;
}
inline void CryptoTransferTransactionBody::set_allocated_transfers(::proto::TransferList* transfers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transfers_);
  }
  if (transfers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfers));
    if (message_arena != submessage_arena) {
      transfers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transfers_ = transfers;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoTransferTransactionBody.transfers)
}

// repeated .proto.TokenTransferList tokenTransfers = 2;
inline int CryptoTransferTransactionBody::_internal_tokentransfers_size() const {
  return _impl_.tokentransfers_.size();
}
inline int CryptoTransferTransactionBody::tokentransfers_size() const {
  return _internal_tokentransfers_size();
}
inline ::proto::TokenTransferList* CryptoTransferTransactionBody::mutable_tokentransfers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CryptoTransferTransactionBody.tokenTransfers)
  return _impl_.tokentransfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >*
CryptoTransferTransactionBody::mutable_tokentransfers() {
  // @@protoc_insertion_point(field_mutable_list:proto.CryptoTransferTransactionBody.tokenTransfers)
  return &_impl_.tokentransfers_;
}
inline const ::proto::TokenTransferList& CryptoTransferTransactionBody::_internal_tokentransfers(int index) const {
  return _impl_.tokentransfers_.Get(index);
}
inline const ::proto::TokenTransferList& CryptoTransferTransactionBody::tokentransfers(int index) const {
  // @@protoc_insertion_point(field_get:proto.CryptoTransferTransactionBody.tokenTransfers)
  return _internal_tokentransfers(index);
}
inline ::proto::TokenTransferList* CryptoTransferTransactionBody::_internal_add_tokentransfers() {
  return _impl_.tokentransfers_.Add();
}
inline ::proto::TokenTransferList* CryptoTransferTransactionBody::add_tokentransfers() {
  ::proto::TokenTransferList* _add = _internal_add_tokentransfers();
  // @@protoc_insertion_point(field_add:proto.CryptoTransferTransactionBody.tokenTransfers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >&
CryptoTransferTransactionBody::tokentransfers() const {
  // @@protoc_insertion_point(field_list:proto.CryptoTransferTransactionBody.tokenTransfers)
  return _impl_.tokentransfers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5ftransfer_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_delete.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_5fdelete_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_5fdelete_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_5fdelete_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_5fdelete_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_5fdelete_2eproto;
namespace proto {
class SystemDeleteTransactionBody;
struct SystemDeleteTransactionBodyDefaultTypeInternal;
extern SystemDeleteTransactionBodyDefaultTypeInternal _SystemDeleteTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::SystemDeleteTransactionBody* Arena::CreateMaybeMessage<::proto::SystemDeleteTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class SystemDeleteTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SystemDeleteTransactionBody) */ {
 public:
  inline SystemDeleteTransactionBody() : SystemDeleteTransactionBody(nullptr) {}
  ~SystemDeleteTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR SystemDeleteTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemDeleteTransactionBody(const SystemDeleteTransactionBody& from);
  SystemDeleteTransactionBody(SystemDeleteTransactionBody&& from) noexcept
    : SystemDeleteTransactionBody() {
    *this = ::std::move(from);
  }

  inline SystemDeleteTransactionBody& operator=(const SystemDeleteTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemDeleteTransactionBody& operator=(SystemDeleteTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemDeleteTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  enum IdCase {
    kFileID = 1,
    kContractID = 2,
    ID_NOT_SET = 0,
  };

  static inline const SystemDeleteTransactionBody* internal_default_instance() {
    return reinterpret_cast<const SystemDeleteTransactionBody*>(
               &_SystemDeleteTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemDeleteTransactionBody& a, SystemDeleteTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemDeleteTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemDeleteTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemDeleteTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemDeleteTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemDeleteTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemDeleteTransactionBody& from) {
    SystemDeleteTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemDeleteTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SystemDeleteTransactionBody";
  }
  protected:
  explicit SystemDeleteTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationTimeFieldNumber = 3,
    kFileIDFieldNumber = 1,
    kContractIDFieldNumber = 2,
  };
  // .proto.TimestampSeconds expirationTime = 3;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::TimestampSeconds& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::TimestampSeconds* release_expirationtime();
  ::proto::TimestampSeconds* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::TimestampSeconds* expirationtime);
  private:
  const ::proto::TimestampSeconds& _internal_expirationtime() const;
  ::proto::TimestampSeconds* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::TimestampSeconds* expirationtime);
  ::proto::TimestampSeconds* unsafe_arena_release_expirationtime();

  // .proto.FileID fileID = 1;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // .proto.ContractID contractID = 2;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:proto.SystemDeleteTransactionBody)
 private:
  class _Internal;
  void set_has_fileid();
  void set_has_contractid();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TimestampSeconds* expirationtime_;
    union IdUnion {
      constexpr IdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::FileID* fileid_;
      ::proto::ContractID* contractid_;
    } id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_system_5fdelete_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemDeleteTransactionBody

// .proto.FileID fileID = 1;
inline bool SystemDeleteTransactionBody::_internal_has_fileid() const {
  return id_case() == kFileID;
}
inline bool SystemDeleteTransactionBody::has_fileid() const {
  return _internal_has_fileid();
}
inline void SystemDeleteTransactionBody::set_has_fileid() {
  _impl_._oneof_case_[0] = kFileID;
}
inline ::proto::FileID* SystemDeleteTransactionBody::release_fileid() {
  // @@protoc_insertion_point(field_release:proto.SystemDeleteTransactionBody.fileID)
  if (_internal_has_fileid()) {
    clear_has_id();
    ::proto::FileID* temp = _impl_.id_.fileid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.id_.fileid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FileID& SystemDeleteTransactionBody::_internal_fileid() const {
  return _internal_has_fileid()
      ? *_impl_.id_.fileid_
      : reinterpret_cast< ::proto::FileID&>(::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& SystemDeleteTransactionBody::fileid() const {
  // @@protoc_insertion_point(field_get:proto.SystemDeleteTransactionBody.fileID)
  return _internal_fileid();
}
inline ::proto::FileID* SystemDeleteTransactionBody::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SystemDeleteTransactionBody.fileID)
  if (_internal_has_fileid()) {
    clear_has_id();
    ::proto::FileID* temp = _impl_.id_.fileid_;
    _impl_.id_.fileid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SystemDeleteTransactionBody::unsafe_arena_set_allocated_fileid(::proto::FileID* fileid) {
  clear_id();
  if (fileid) {
    set_has_fileid();
    _impl_.id_.fileid_ = fileid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SystemDeleteTransactionBody.fileID)
}
inline ::proto::FileID* SystemDeleteTransactionBody::_internal_mutable_fileid() {
  if (!_internal_has_fileid()) {
    clear_id();
    set_has_fileid();
    _impl_.id_.fileid_ = CreateMaybeMessage< ::proto::FileID >(GetArenaForAllocation());
  }
  return _impl_.id_.fileid_;
}
inline ::proto::FileID* SystemDeleteTransactionBody::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.SystemDeleteTransactionBody.fileID)
  return _msg;
}

// .proto.ContractID contractID = 2;
inline bool SystemDeleteTransactionBody::_internal_has_contractid() const {
  return id_case() == kContractID;
}
inline bool SystemDeleteTransactionBody::has_contractid() const {
  return _internal_has_contractid();
}
inline void SystemDeleteTransactionBody::set_has_contractid() {
  _impl_._oneof_case_[0] = kContractID;
}
inline ::proto::ContractID* SystemDeleteTransactionBody::release_contractid() {
  // @@protoc_insertion_point(field_release:proto.SystemDeleteTransactionBody.contractID)
  if (_internal_has_contractid()) {
    clear_has_id();
    ::proto::ContractID* temp = _impl_.id_.contractid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.id_.contractid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractID& SystemDeleteTransactionBody::_internal_contractid() const {
  return _internal_has_contractid()
      ? *_impl_.id_.contractid_
      : reinterpret_cast< ::proto::ContractID&>(::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& SystemDeleteTransactionBody::contractid() const {
  // @@protoc_insertion_point(field_get:proto.SystemDeleteTransactionBody.contractID)
  return _internal_contractid();
}
inline ::proto::ContractID* SystemDeleteTransactionBody::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SystemDeleteTransactionBody.contractID)
  if (_internal_has_contractid()) {
    clear_has_id();
    ::proto::ContractID* temp = _impl_.id_.contractid_;
    _impl_.id_.contractid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SystemDeleteTransactionBody::unsafe_arena_set_allocated_contractid(::proto::ContractID* contractid) {
  clear_id();
  if (contractid) {
    set_has_contractid();
    _impl_.id_.contractid_ = contractid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SystemDeleteTransactionBody.contractID)
}
inline ::proto::ContractID* SystemDeleteTransactionBody::_internal_mutable_contractid() {
  if (!_internal_has_contractid()) {
    clear_id();
    set_has_contractid();
    _impl_.id_.contractid_ = CreateMaybeMessage< ::proto::ContractID >(GetArenaForAllocation());
  }
  return _impl_.id_.contractid_;
}
inline ::proto::ContractID* SystemDeleteTransactionBody::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.SystemDeleteTransactionBody.contractID)
  return _msg;
}

// .proto.TimestampSeconds expirationTime = 3;
inline bool SystemDeleteTransactionBody::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool SystemDeleteTransactionBody::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::TimestampSeconds& SystemDeleteTransactionBody::_internal_expirationtime() const {
  const ::proto::TimestampSeconds* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TimestampSeconds&>(
      ::proto::_TimestampSeconds_default_instance_);
}
inline const ::proto::TimestampSeconds& SystemDeleteTransactionBody::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.SystemDeleteTransactionBody.expirationTime)
  return _internal_expirationtime();
}
inline void SystemDeleteTransactionBody::unsafe_arena_set_allocated_expirationtime(
    ::proto::TimestampSeconds* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SystemDeleteTransactionBody.expirationTime)
}
inline ::proto::TimestampSeconds* SystemDeleteTransactionBody::release_expirationtime() {
  
  ::proto::TimestampSeconds* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TimestampSeconds* SystemDeleteTransactionBody::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.SystemDeleteTransactionBody.expirationTime)
  
  ::proto::TimestampSeconds* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::TimestampSeconds* SystemDeleteTransactionBody::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TimestampSeconds>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::TimestampSeconds* SystemDeleteTransactionBody::mutable_expirationtime() {
  ::proto::TimestampSeconds* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.SystemDeleteTransactionBody.expirationTime)
  return _msg;
}
inline void SystemDeleteTransactionBody::set_allocated_expirationtime(::proto::TimestampSeconds* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SystemDeleteTransactionBody.expirationTime)
}

inline bool SystemDeleteTransactionBody::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void SystemDeleteTransactionBody::clear_has_id() {
  _impl_._oneof_case_[0] = ID_NOT_SET;
}
inline SystemDeleteTransactionBody::IdCase SystemDeleteTransactionBody::id_case() const {
  return SystemDeleteTransactionBody::IdCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_5fdelete_2eproto

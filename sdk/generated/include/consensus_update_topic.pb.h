// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus_update_topic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_consensus_5fupdate_5ftopic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_consensus_5fupdate_5ftopic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "basic_types.pb.h"
#include "duration.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_consensus_5fupdate_5ftopic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_consensus_5fupdate_5ftopic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consensus_5fupdate_5ftopic_2eproto;
namespace proto {
class ConsensusUpdateTopicTransactionBody;
struct ConsensusUpdateTopicTransactionBodyDefaultTypeInternal;
extern ConsensusUpdateTopicTransactionBodyDefaultTypeInternal _ConsensusUpdateTopicTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ConsensusUpdateTopicTransactionBody* Arena::CreateMaybeMessage<::proto::ConsensusUpdateTopicTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ConsensusUpdateTopicTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ConsensusUpdateTopicTransactionBody) */ {
 public:
  inline ConsensusUpdateTopicTransactionBody() : ConsensusUpdateTopicTransactionBody(nullptr) {}
  ~ConsensusUpdateTopicTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR ConsensusUpdateTopicTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusUpdateTopicTransactionBody(const ConsensusUpdateTopicTransactionBody& from);
  ConsensusUpdateTopicTransactionBody(ConsensusUpdateTopicTransactionBody&& from) noexcept
    : ConsensusUpdateTopicTransactionBody() {
    *this = ::std::move(from);
  }

  inline ConsensusUpdateTopicTransactionBody& operator=(const ConsensusUpdateTopicTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusUpdateTopicTransactionBody& operator=(ConsensusUpdateTopicTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusUpdateTopicTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusUpdateTopicTransactionBody* internal_default_instance() {
    return reinterpret_cast<const ConsensusUpdateTopicTransactionBody*>(
               &_ConsensusUpdateTopicTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsensusUpdateTopicTransactionBody& a, ConsensusUpdateTopicTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusUpdateTopicTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusUpdateTopicTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusUpdateTopicTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusUpdateTopicTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusUpdateTopicTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusUpdateTopicTransactionBody& from) {
    ConsensusUpdateTopicTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusUpdateTopicTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ConsensusUpdateTopicTransactionBody";
  }
  protected:
  explicit ConsensusUpdateTopicTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicIDFieldNumber = 1,
    kMemoFieldNumber = 2,
    kExpirationTimeFieldNumber = 4,
    kAdminKeyFieldNumber = 6,
    kSubmitKeyFieldNumber = 7,
    kAutoRenewPeriodFieldNumber = 8,
    kAutoRenewAccountFieldNumber = 9,
  };
  // .proto.TopicID topicID = 1;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const ::proto::TopicID& topicid() const;
  PROTOBUF_NODISCARD ::proto::TopicID* release_topicid();
  ::proto::TopicID* mutable_topicid();
  void set_allocated_topicid(::proto::TopicID* topicid);
  private:
  const ::proto::TopicID& _internal_topicid() const;
  ::proto::TopicID* _internal_mutable_topicid();
  public:
  void unsafe_arena_set_allocated_topicid(
      ::proto::TopicID* topicid);
  ::proto::TopicID* unsafe_arena_release_topicid();

  // .google.protobuf.StringValue memo = 2;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& memo() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_memo();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_memo();
  void set_allocated_memo(::PROTOBUF_NAMESPACE_ID::StringValue* memo);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_memo();
  public:
  void unsafe_arena_set_allocated_memo(
      ::PROTOBUF_NAMESPACE_ID::StringValue* memo);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_memo();

  // .proto.Timestamp expirationTime = 4;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.Key adminKey = 6;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.Key submitKey = 7;
  bool has_submitkey() const;
  private:
  bool _internal_has_submitkey() const;
  public:
  void clear_submitkey();
  const ::proto::Key& submitkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_submitkey();
  ::proto::Key* mutable_submitkey();
  void set_allocated_submitkey(::proto::Key* submitkey);
  private:
  const ::proto::Key& _internal_submitkey() const;
  ::proto::Key* _internal_mutable_submitkey();
  public:
  void unsafe_arena_set_allocated_submitkey(
      ::proto::Key* submitkey);
  ::proto::Key* unsafe_arena_release_submitkey();

  // .proto.Duration autoRenewPeriod = 8;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.AccountID autoRenewAccount = 9;
  bool has_autorenewaccount() const;
  private:
  bool _internal_has_autorenewaccount() const;
  public:
  void clear_autorenewaccount();
  const ::proto::AccountID& autorenewaccount() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_autorenewaccount();
  ::proto::AccountID* mutable_autorenewaccount();
  void set_allocated_autorenewaccount(::proto::AccountID* autorenewaccount);
  private:
  const ::proto::AccountID& _internal_autorenewaccount() const;
  ::proto::AccountID* _internal_mutable_autorenewaccount();
  public:
  void unsafe_arena_set_allocated_autorenewaccount(
      ::proto::AccountID* autorenewaccount);
  ::proto::AccountID* unsafe_arena_release_autorenewaccount();

  // @@protoc_insertion_point(class_scope:proto.ConsensusUpdateTopicTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TopicID* topicid_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* memo_;
    ::proto::Timestamp* expirationtime_;
    ::proto::Key* adminkey_;
    ::proto::Key* submitkey_;
    ::proto::Duration* autorenewperiod_;
    ::proto::AccountID* autorenewaccount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_consensus_5fupdate_5ftopic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsensusUpdateTopicTransactionBody

// .proto.TopicID topicID = 1;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_topicid() const {
  return this != internal_default_instance() && _impl_.topicid_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_topicid() const {
  return _internal_has_topicid();
}
inline const ::proto::TopicID& ConsensusUpdateTopicTransactionBody::_internal_topicid() const {
  const ::proto::TopicID* p = _impl_.topicid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TopicID&>(
      ::proto::_TopicID_default_instance_);
}
inline const ::proto::TopicID& ConsensusUpdateTopicTransactionBody::topicid() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.topicID)
  return _internal_topicid();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_topicid(
    ::proto::TopicID* topicid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topicid_);
  }
  _impl_.topicid_ = topicid;
  if (topicid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.topicID)
}
inline ::proto::TopicID* ConsensusUpdateTopicTransactionBody::release_topicid() {
  
  ::proto::TopicID* temp = _impl_.topicid_;
  _impl_.topicid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TopicID* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_topicid() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.topicID)
  
  ::proto::TopicID* temp = _impl_.topicid_;
  _impl_.topicid_ = nullptr;
  return temp;
}
inline ::proto::TopicID* ConsensusUpdateTopicTransactionBody::_internal_mutable_topicid() {
  
  if (_impl_.topicid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TopicID>(GetArenaForAllocation());
    _impl_.topicid_ = p;
  }
  return _impl_.topicid_;
}
inline ::proto::TopicID* ConsensusUpdateTopicTransactionBody::mutable_topicid() {
  ::proto::TopicID* _msg = _internal_mutable_topicid();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.topicID)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_topicid(::proto::TopicID* topicid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topicid_);
  }
  if (topicid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topicid));
    if (message_arena != submessage_arena) {
      topicid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topicid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.topicid_ = topicid;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.topicID)
}

// .google.protobuf.StringValue memo = 2;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_memo() const {
  return this != internal_default_instance() && _impl_.memo_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_memo() const {
  return _internal_has_memo();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ConsensusUpdateTopicTransactionBody::_internal_memo() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.memo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ConsensusUpdateTopicTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.memo)
  return _internal_memo();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_memo(
    ::PROTOBUF_NAMESPACE_ID::StringValue* memo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memo_);
  }
  _impl_.memo_ = memo;
  if (memo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.memo)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ConsensusUpdateTopicTransactionBody::release_memo() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memo_;
  _impl_.memo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_memo() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.memo)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memo_;
  _impl_.memo_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ConsensusUpdateTopicTransactionBody::_internal_mutable_memo() {
  
  if (_impl_.memo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.memo_ = p;
  }
  return _impl_.memo_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ConsensusUpdateTopicTransactionBody::mutable_memo() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.memo)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_memo(::PROTOBUF_NAMESPACE_ID::StringValue* memo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memo_);
  }
  if (memo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memo));
    if (message_arena != submessage_arena) {
      memo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.memo_ = memo;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.memo)
}

// .proto.Timestamp expirationTime = 4;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& ConsensusUpdateTopicTransactionBody::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ConsensusUpdateTopicTransactionBody::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.expirationTime)
  return _internal_expirationtime();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.expirationTime)
}
inline ::proto::Timestamp* ConsensusUpdateTopicTransactionBody::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ConsensusUpdateTopicTransactionBody::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* ConsensusUpdateTopicTransactionBody::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.expirationTime)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.expirationTime)
}

// .proto.Key adminKey = 6;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ConsensusUpdateTopicTransactionBody::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ConsensusUpdateTopicTransactionBody::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.adminKey)
  return _internal_adminkey();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.adminKey)
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.adminKey)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.adminKey)
}

// .proto.Key submitKey = 7;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_submitkey() const {
  return this != internal_default_instance() && _impl_.submitkey_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_submitkey() const {
  return _internal_has_submitkey();
}
inline const ::proto::Key& ConsensusUpdateTopicTransactionBody::_internal_submitkey() const {
  const ::proto::Key* p = _impl_.submitkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ConsensusUpdateTopicTransactionBody::submitkey() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.submitKey)
  return _internal_submitkey();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_submitkey(
    ::proto::Key* submitkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitkey_);
  }
  _impl_.submitkey_ = submitkey;
  if (submitkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.submitKey)
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::release_submitkey() {
  
  ::proto::Key* temp = _impl_.submitkey_;
  _impl_.submitkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_submitkey() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.submitKey)
  
  ::proto::Key* temp = _impl_.submitkey_;
  _impl_.submitkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::_internal_mutable_submitkey() {
  
  if (_impl_.submitkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.submitkey_ = p;
  }
  return _impl_.submitkey_;
}
inline ::proto::Key* ConsensusUpdateTopicTransactionBody::mutable_submitkey() {
  ::proto::Key* _msg = _internal_mutable_submitkey();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.submitKey)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_submitkey(::proto::Key* submitkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitkey_);
  }
  if (submitkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submitkey));
    if (message_arena != submessage_arena) {
      submitkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submitkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submitkey_ = submitkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.submitKey)
}

// .proto.Duration autoRenewPeriod = 8;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& ConsensusUpdateTopicTransactionBody::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& ConsensusUpdateTopicTransactionBody::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.autoRenewPeriod)
}
inline ::proto::Duration* ConsensusUpdateTopicTransactionBody::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* ConsensusUpdateTopicTransactionBody::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* ConsensusUpdateTopicTransactionBody::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.autoRenewPeriod)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.autoRenewPeriod)
}

// .proto.AccountID autoRenewAccount = 9;
inline bool ConsensusUpdateTopicTransactionBody::_internal_has_autorenewaccount() const {
  return this != internal_default_instance() && _impl_.autorenewaccount_ != nullptr;
}
inline bool ConsensusUpdateTopicTransactionBody::has_autorenewaccount() const {
  return _internal_has_autorenewaccount();
}
inline const ::proto::AccountID& ConsensusUpdateTopicTransactionBody::_internal_autorenewaccount() const {
  const ::proto::AccountID* p = _impl_.autorenewaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ConsensusUpdateTopicTransactionBody::autorenewaccount() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusUpdateTopicTransactionBody.autoRenewAccount)
  return _internal_autorenewaccount();
}
inline void ConsensusUpdateTopicTransactionBody::unsafe_arena_set_allocated_autorenewaccount(
    ::proto::AccountID* autorenewaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewaccount_);
  }
  _impl_.autorenewaccount_ = autorenewaccount;
  if (autorenewaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusUpdateTopicTransactionBody.autoRenewAccount)
}
inline ::proto::AccountID* ConsensusUpdateTopicTransactionBody::release_autorenewaccount() {
  
  ::proto::AccountID* temp = _impl_.autorenewaccount_;
  _impl_.autorenewaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ConsensusUpdateTopicTransactionBody::unsafe_arena_release_autorenewaccount() {
  // @@protoc_insertion_point(field_release:proto.ConsensusUpdateTopicTransactionBody.autoRenewAccount)
  
  ::proto::AccountID* temp = _impl_.autorenewaccount_;
  _impl_.autorenewaccount_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ConsensusUpdateTopicTransactionBody::_internal_mutable_autorenewaccount() {
  
  if (_impl_.autorenewaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.autorenewaccount_ = p;
  }
  return _impl_.autorenewaccount_;
}
inline ::proto::AccountID* ConsensusUpdateTopicTransactionBody::mutable_autorenewaccount() {
  ::proto::AccountID* _msg = _internal_mutable_autorenewaccount();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusUpdateTopicTransactionBody.autoRenewAccount)
  return _msg;
}
inline void ConsensusUpdateTopicTransactionBody::set_allocated_autorenewaccount(::proto::AccountID* autorenewaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewaccount_);
  }
  if (autorenewaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewaccount));
    if (message_arena != submessage_arena) {
      autorenewaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewaccount_ = autorenewaccount;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusUpdateTopicTransactionBody.autoRenewAccount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_consensus_5fupdate_5ftopic_2eproto

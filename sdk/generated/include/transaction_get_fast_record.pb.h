// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_get_fast_record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5fget_5ffast_5frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5fget_5ffast_5frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction_record.pb.h"
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5fget_5ffast_5frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5fget_5ffast_5frecord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5fget_5ffast_5frecord_2eproto;
namespace proto {
class TransactionGetFastRecordQuery;
struct TransactionGetFastRecordQueryDefaultTypeInternal;
extern TransactionGetFastRecordQueryDefaultTypeInternal _TransactionGetFastRecordQuery_default_instance_;
class TransactionGetFastRecordResponse;
struct TransactionGetFastRecordResponseDefaultTypeInternal;
extern TransactionGetFastRecordResponseDefaultTypeInternal _TransactionGetFastRecordResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TransactionGetFastRecordQuery* Arena::CreateMaybeMessage<::proto::TransactionGetFastRecordQuery>(Arena*);
template<> ::proto::TransactionGetFastRecordResponse* Arena::CreateMaybeMessage<::proto::TransactionGetFastRecordResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TransactionGetFastRecordQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransactionGetFastRecordQuery) */ {
 public:
  inline TransactionGetFastRecordQuery() : TransactionGetFastRecordQuery(nullptr) {}
  ~TransactionGetFastRecordQuery() override;
  explicit PROTOBUF_CONSTEXPR TransactionGetFastRecordQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionGetFastRecordQuery(const TransactionGetFastRecordQuery& from);
  TransactionGetFastRecordQuery(TransactionGetFastRecordQuery&& from) noexcept
    : TransactionGetFastRecordQuery() {
    *this = ::std::move(from);
  }

  inline TransactionGetFastRecordQuery& operator=(const TransactionGetFastRecordQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionGetFastRecordQuery& operator=(TransactionGetFastRecordQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionGetFastRecordQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionGetFastRecordQuery* internal_default_instance() {
    return reinterpret_cast<const TransactionGetFastRecordQuery*>(
               &_TransactionGetFastRecordQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionGetFastRecordQuery& a, TransactionGetFastRecordQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionGetFastRecordQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionGetFastRecordQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionGetFastRecordQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionGetFastRecordQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionGetFastRecordQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionGetFastRecordQuery& from) {
    TransactionGetFastRecordQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionGetFastRecordQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransactionGetFastRecordQuery";
  }
  protected:
  explicit TransactionGetFastRecordQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTransactionIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.TransactionID transactionID = 2;
  bool has_transactionid() const;
  private:
  bool _internal_has_transactionid() const;
  public:
  void clear_transactionid();
  const ::proto::TransactionID& transactionid() const;
  PROTOBUF_NODISCARD ::proto::TransactionID* release_transactionid();
  ::proto::TransactionID* mutable_transactionid();
  void set_allocated_transactionid(::proto::TransactionID* transactionid);
  private:
  const ::proto::TransactionID& _internal_transactionid() const;
  ::proto::TransactionID* _internal_mutable_transactionid();
  public:
  void unsafe_arena_set_allocated_transactionid(
      ::proto::TransactionID* transactionid);
  ::proto::TransactionID* unsafe_arena_release_transactionid();

  // @@protoc_insertion_point(class_scope:proto.TransactionGetFastRecordQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::TransactionID* transactionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5fget_5ffast_5frecord_2eproto;
};
// -------------------------------------------------------------------

class TransactionGetFastRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransactionGetFastRecordResponse) */ {
 public:
  inline TransactionGetFastRecordResponse() : TransactionGetFastRecordResponse(nullptr) {}
  ~TransactionGetFastRecordResponse() override;
  explicit PROTOBUF_CONSTEXPR TransactionGetFastRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionGetFastRecordResponse(const TransactionGetFastRecordResponse& from);
  TransactionGetFastRecordResponse(TransactionGetFastRecordResponse&& from) noexcept
    : TransactionGetFastRecordResponse() {
    *this = ::std::move(from);
  }

  inline TransactionGetFastRecordResponse& operator=(const TransactionGetFastRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionGetFastRecordResponse& operator=(TransactionGetFastRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionGetFastRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionGetFastRecordResponse* internal_default_instance() {
    return reinterpret_cast<const TransactionGetFastRecordResponse*>(
               &_TransactionGetFastRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionGetFastRecordResponse& a, TransactionGetFastRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionGetFastRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionGetFastRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionGetFastRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionGetFastRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionGetFastRecordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionGetFastRecordResponse& from) {
    TransactionGetFastRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionGetFastRecordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransactionGetFastRecordResponse";
  }
  protected:
  explicit TransactionGetFastRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTransactionRecordFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.TransactionRecord transactionRecord = 2;
  bool has_transactionrecord() const;
  private:
  bool _internal_has_transactionrecord() const;
  public:
  void clear_transactionrecord();
  const ::proto::TransactionRecord& transactionrecord() const;
  PROTOBUF_NODISCARD ::proto::TransactionRecord* release_transactionrecord();
  ::proto::TransactionRecord* mutable_transactionrecord();
  void set_allocated_transactionrecord(::proto::TransactionRecord* transactionrecord);
  private:
  const ::proto::TransactionRecord& _internal_transactionrecord() const;
  ::proto::TransactionRecord* _internal_mutable_transactionrecord();
  public:
  void unsafe_arena_set_allocated_transactionrecord(
      ::proto::TransactionRecord* transactionrecord);
  ::proto::TransactionRecord* unsafe_arena_release_transactionrecord();

  // @@protoc_insertion_point(class_scope:proto.TransactionGetFastRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::TransactionRecord* transactionrecord_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5fget_5ffast_5frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionGetFastRecordQuery

// .proto.QueryHeader header = 1;
inline bool TransactionGetFastRecordQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool TransactionGetFastRecordQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& TransactionGetFastRecordQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& TransactionGetFastRecordQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.TransactionGetFastRecordQuery.header)
  return _internal_header();
}
inline void TransactionGetFastRecordQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionGetFastRecordQuery.header)
}
inline ::proto::QueryHeader* TransactionGetFastRecordQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* TransactionGetFastRecordQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.TransactionGetFastRecordQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* TransactionGetFastRecordQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* TransactionGetFastRecordQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.TransactionGetFastRecordQuery.header)
  return _msg;
}
inline void TransactionGetFastRecordQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionGetFastRecordQuery.header)
}

// .proto.TransactionID transactionID = 2;
inline bool TransactionGetFastRecordQuery::_internal_has_transactionid() const {
  return this != internal_default_instance() && _impl_.transactionid_ != nullptr;
}
inline bool TransactionGetFastRecordQuery::has_transactionid() const {
  return _internal_has_transactionid();
}
inline const ::proto::TransactionID& TransactionGetFastRecordQuery::_internal_transactionid() const {
  const ::proto::TransactionID* p = _impl_.transactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionID&>(
      ::proto::_TransactionID_default_instance_);
}
inline const ::proto::TransactionID& TransactionGetFastRecordQuery::transactionid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionGetFastRecordQuery.transactionID)
  return _internal_transactionid();
}
inline void TransactionGetFastRecordQuery::unsafe_arena_set_allocated_transactionid(
    ::proto::TransactionID* transactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionid_);
  }
  _impl_.transactionid_ = transactionid;
  if (transactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionGetFastRecordQuery.transactionID)
}
inline ::proto::TransactionID* TransactionGetFastRecordQuery::release_transactionid() {
  
  ::proto::TransactionID* temp = _impl_.transactionid_;
  _impl_.transactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionID* TransactionGetFastRecordQuery::unsafe_arena_release_transactionid() {
  // @@protoc_insertion_point(field_release:proto.TransactionGetFastRecordQuery.transactionID)
  
  ::proto::TransactionID* temp = _impl_.transactionid_;
  _impl_.transactionid_ = nullptr;
  return temp;
}
inline ::proto::TransactionID* TransactionGetFastRecordQuery::_internal_mutable_transactionid() {
  
  if (_impl_.transactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionID>(GetArenaForAllocation());
    _impl_.transactionid_ = p;
  }
  return _impl_.transactionid_;
}
inline ::proto::TransactionID* TransactionGetFastRecordQuery::mutable_transactionid() {
  ::proto::TransactionID* _msg = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionGetFastRecordQuery.transactionID)
  return _msg;
}
inline void TransactionGetFastRecordQuery::set_allocated_transactionid(::proto::TransactionID* transactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionid_);
  }
  if (transactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionid));
    if (message_arena != submessage_arena) {
      transactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transactionid_ = transactionid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionGetFastRecordQuery.transactionID)
}

// -------------------------------------------------------------------

// TransactionGetFastRecordResponse

// .proto.ResponseHeader header = 1;
inline bool TransactionGetFastRecordResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool TransactionGetFastRecordResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& TransactionGetFastRecordResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& TransactionGetFastRecordResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.TransactionGetFastRecordResponse.header)
  return _internal_header();
}
inline void TransactionGetFastRecordResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionGetFastRecordResponse.header)
}
inline ::proto::ResponseHeader* TransactionGetFastRecordResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* TransactionGetFastRecordResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.TransactionGetFastRecordResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* TransactionGetFastRecordResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* TransactionGetFastRecordResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.TransactionGetFastRecordResponse.header)
  return _msg;
}
inline void TransactionGetFastRecordResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionGetFastRecordResponse.header)
}

// .proto.TransactionRecord transactionRecord = 2;
inline bool TransactionGetFastRecordResponse::_internal_has_transactionrecord() const {
  return this != internal_default_instance() && _impl_.transactionrecord_ != nullptr;
}
inline bool TransactionGetFastRecordResponse::has_transactionrecord() const {
  return _internal_has_transactionrecord();
}
inline const ::proto::TransactionRecord& TransactionGetFastRecordResponse::_internal_transactionrecord() const {
  const ::proto::TransactionRecord* p = _impl_.transactionrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionRecord&>(
      ::proto::_TransactionRecord_default_instance_);
}
inline const ::proto::TransactionRecord& TransactionGetFastRecordResponse::transactionrecord() const {
  // @@protoc_insertion_point(field_get:proto.TransactionGetFastRecordResponse.transactionRecord)
  return _internal_transactionrecord();
}
inline void TransactionGetFastRecordResponse::unsafe_arena_set_allocated_transactionrecord(
    ::proto::TransactionRecord* transactionrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionrecord_);
  }
  _impl_.transactionrecord_ = transactionrecord;
  if (transactionrecord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionGetFastRecordResponse.transactionRecord)
}
inline ::proto::TransactionRecord* TransactionGetFastRecordResponse::release_transactionrecord() {
  
  ::proto::TransactionRecord* temp = _impl_.transactionrecord_;
  _impl_.transactionrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionRecord* TransactionGetFastRecordResponse::unsafe_arena_release_transactionrecord() {
  // @@protoc_insertion_point(field_release:proto.TransactionGetFastRecordResponse.transactionRecord)
  
  ::proto::TransactionRecord* temp = _impl_.transactionrecord_;
  _impl_.transactionrecord_ = nullptr;
  return temp;
}
inline ::proto::TransactionRecord* TransactionGetFastRecordResponse::_internal_mutable_transactionrecord() {
  
  if (_impl_.transactionrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionRecord>(GetArenaForAllocation());
    _impl_.transactionrecord_ = p;
  }
  return _impl_.transactionrecord_;
}
inline ::proto::TransactionRecord* TransactionGetFastRecordResponse::mutable_transactionrecord() {
  ::proto::TransactionRecord* _msg = _internal_mutable_transactionrecord();
  // @@protoc_insertion_point(field_mutable:proto.TransactionGetFastRecordResponse.transactionRecord)
  return _msg;
}
inline void TransactionGetFastRecordResponse::set_allocated_transactionrecord(::proto::TransactionRecord* transactionrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionrecord_);
  }
  if (transactionrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionrecord));
    if (message_arena != submessage_arena) {
      transactionrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionrecord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transactionrecord_ = transactionrecord;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionGetFastRecordResponse.transactionRecord)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5fget_5ffast_5frecord_2eproto

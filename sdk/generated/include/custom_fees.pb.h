// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_fees.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_custom_5ffees_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_custom_5ffees_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_custom_5ffees_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_custom_5ffees_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custom_5ffees_2eproto;
namespace proto {
class AssessedCustomFee;
struct AssessedCustomFeeDefaultTypeInternal;
extern AssessedCustomFeeDefaultTypeInternal _AssessedCustomFee_default_instance_;
class CustomFee;
struct CustomFeeDefaultTypeInternal;
extern CustomFeeDefaultTypeInternal _CustomFee_default_instance_;
class FixedFee;
struct FixedFeeDefaultTypeInternal;
extern FixedFeeDefaultTypeInternal _FixedFee_default_instance_;
class FractionalFee;
struct FractionalFeeDefaultTypeInternal;
extern FractionalFeeDefaultTypeInternal _FractionalFee_default_instance_;
class RoyaltyFee;
struct RoyaltyFeeDefaultTypeInternal;
extern RoyaltyFeeDefaultTypeInternal _RoyaltyFee_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AssessedCustomFee* Arena::CreateMaybeMessage<::proto::AssessedCustomFee>(Arena*);
template<> ::proto::CustomFee* Arena::CreateMaybeMessage<::proto::CustomFee>(Arena*);
template<> ::proto::FixedFee* Arena::CreateMaybeMessage<::proto::FixedFee>(Arena*);
template<> ::proto::FractionalFee* Arena::CreateMaybeMessage<::proto::FractionalFee>(Arena*);
template<> ::proto::RoyaltyFee* Arena::CreateMaybeMessage<::proto::RoyaltyFee>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class FractionalFee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FractionalFee) */ {
 public:
  inline FractionalFee() : FractionalFee(nullptr) {}
  ~FractionalFee() override;
  explicit PROTOBUF_CONSTEXPR FractionalFee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FractionalFee(const FractionalFee& from);
  FractionalFee(FractionalFee&& from) noexcept
    : FractionalFee() {
    *this = ::std::move(from);
  }

  inline FractionalFee& operator=(const FractionalFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline FractionalFee& operator=(FractionalFee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FractionalFee& default_instance() {
    return *internal_default_instance();
  }
  static inline const FractionalFee* internal_default_instance() {
    return reinterpret_cast<const FractionalFee*>(
               &_FractionalFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FractionalFee& a, FractionalFee& b) {
    a.Swap(&b);
  }
  inline void Swap(FractionalFee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FractionalFee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FractionalFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FractionalFee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FractionalFee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FractionalFee& from) {
    FractionalFee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FractionalFee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FractionalFee";
  }
  protected:
  explicit FractionalFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFractionalAmountFieldNumber = 1,
    kMinimumAmountFieldNumber = 2,
    kMaximumAmountFieldNumber = 3,
    kNetOfTransfersFieldNumber = 4,
  };
  // .proto.Fraction fractional_amount = 1;
  bool has_fractional_amount() const;
  private:
  bool _internal_has_fractional_amount() const;
  public:
  void clear_fractional_amount();
  const ::proto::Fraction& fractional_amount() const;
  PROTOBUF_NODISCARD ::proto::Fraction* release_fractional_amount();
  ::proto::Fraction* mutable_fractional_amount();
  void set_allocated_fractional_amount(::proto::Fraction* fractional_amount);
  private:
  const ::proto::Fraction& _internal_fractional_amount() const;
  ::proto::Fraction* _internal_mutable_fractional_amount();
  public:
  void unsafe_arena_set_allocated_fractional_amount(
      ::proto::Fraction* fractional_amount);
  ::proto::Fraction* unsafe_arena_release_fractional_amount();

  // int64 minimum_amount = 2;
  void clear_minimum_amount();
  int64_t minimum_amount() const;
  void set_minimum_amount(int64_t value);
  private:
  int64_t _internal_minimum_amount() const;
  void _internal_set_minimum_amount(int64_t value);
  public:

  // int64 maximum_amount = 3;
  void clear_maximum_amount();
  int64_t maximum_amount() const;
  void set_maximum_amount(int64_t value);
  private:
  int64_t _internal_maximum_amount() const;
  void _internal_set_maximum_amount(int64_t value);
  public:

  // bool net_of_transfers = 4;
  void clear_net_of_transfers();
  bool net_of_transfers() const;
  void set_net_of_transfers(bool value);
  private:
  bool _internal_net_of_transfers() const;
  void _internal_set_net_of_transfers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.FractionalFee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Fraction* fractional_amount_;
    int64_t minimum_amount_;
    int64_t maximum_amount_;
    bool net_of_transfers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_5ffees_2eproto;
};
// -------------------------------------------------------------------

class FixedFee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FixedFee) */ {
 public:
  inline FixedFee() : FixedFee(nullptr) {}
  ~FixedFee() override;
  explicit PROTOBUF_CONSTEXPR FixedFee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedFee(const FixedFee& from);
  FixedFee(FixedFee&& from) noexcept
    : FixedFee() {
    *this = ::std::move(from);
  }

  inline FixedFee& operator=(const FixedFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedFee& operator=(FixedFee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedFee& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedFee* internal_default_instance() {
    return reinterpret_cast<const FixedFee*>(
               &_FixedFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FixedFee& a, FixedFee& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedFee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedFee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedFee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FixedFee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FixedFee& from) {
    FixedFee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedFee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FixedFee";
  }
  protected:
  explicit FixedFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenominatingTokenIdFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // .proto.TokenID denominating_token_id = 2;
  bool has_denominating_token_id() const;
  private:
  bool _internal_has_denominating_token_id() const;
  public:
  void clear_denominating_token_id();
  const ::proto::TokenID& denominating_token_id() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_denominating_token_id();
  ::proto::TokenID* mutable_denominating_token_id();
  void set_allocated_denominating_token_id(::proto::TokenID* denominating_token_id);
  private:
  const ::proto::TokenID& _internal_denominating_token_id() const;
  ::proto::TokenID* _internal_mutable_denominating_token_id();
  public:
  void unsafe_arena_set_allocated_denominating_token_id(
      ::proto::TokenID* denominating_token_id);
  ::proto::TokenID* unsafe_arena_release_denominating_token_id();

  // int64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.FixedFee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TokenID* denominating_token_id_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_5ffees_2eproto;
};
// -------------------------------------------------------------------

class RoyaltyFee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RoyaltyFee) */ {
 public:
  inline RoyaltyFee() : RoyaltyFee(nullptr) {}
  ~RoyaltyFee() override;
  explicit PROTOBUF_CONSTEXPR RoyaltyFee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoyaltyFee(const RoyaltyFee& from);
  RoyaltyFee(RoyaltyFee&& from) noexcept
    : RoyaltyFee() {
    *this = ::std::move(from);
  }

  inline RoyaltyFee& operator=(const RoyaltyFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoyaltyFee& operator=(RoyaltyFee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoyaltyFee& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoyaltyFee* internal_default_instance() {
    return reinterpret_cast<const RoyaltyFee*>(
               &_RoyaltyFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoyaltyFee& a, RoyaltyFee& b) {
    a.Swap(&b);
  }
  inline void Swap(RoyaltyFee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoyaltyFee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoyaltyFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoyaltyFee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoyaltyFee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoyaltyFee& from) {
    RoyaltyFee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoyaltyFee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RoyaltyFee";
  }
  protected:
  explicit RoyaltyFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeValueFractionFieldNumber = 1,
    kFallbackFeeFieldNumber = 2,
  };
  // .proto.Fraction exchange_value_fraction = 1;
  bool has_exchange_value_fraction() const;
  private:
  bool _internal_has_exchange_value_fraction() const;
  public:
  void clear_exchange_value_fraction();
  const ::proto::Fraction& exchange_value_fraction() const;
  PROTOBUF_NODISCARD ::proto::Fraction* release_exchange_value_fraction();
  ::proto::Fraction* mutable_exchange_value_fraction();
  void set_allocated_exchange_value_fraction(::proto::Fraction* exchange_value_fraction);
  private:
  const ::proto::Fraction& _internal_exchange_value_fraction() const;
  ::proto::Fraction* _internal_mutable_exchange_value_fraction();
  public:
  void unsafe_arena_set_allocated_exchange_value_fraction(
      ::proto::Fraction* exchange_value_fraction);
  ::proto::Fraction* unsafe_arena_release_exchange_value_fraction();

  // .proto.FixedFee fallback_fee = 2;
  bool has_fallback_fee() const;
  private:
  bool _internal_has_fallback_fee() const;
  public:
  void clear_fallback_fee();
  const ::proto::FixedFee& fallback_fee() const;
  PROTOBUF_NODISCARD ::proto::FixedFee* release_fallback_fee();
  ::proto::FixedFee* mutable_fallback_fee();
  void set_allocated_fallback_fee(::proto::FixedFee* fallback_fee);
  private:
  const ::proto::FixedFee& _internal_fallback_fee() const;
  ::proto::FixedFee* _internal_mutable_fallback_fee();
  public:
  void unsafe_arena_set_allocated_fallback_fee(
      ::proto::FixedFee* fallback_fee);
  ::proto::FixedFee* unsafe_arena_release_fallback_fee();

  // @@protoc_insertion_point(class_scope:proto.RoyaltyFee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Fraction* exchange_value_fraction_;
    ::proto::FixedFee* fallback_fee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_5ffees_2eproto;
};
// -------------------------------------------------------------------

class CustomFee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CustomFee) */ {
 public:
  inline CustomFee() : CustomFee(nullptr) {}
  ~CustomFee() override;
  explicit PROTOBUF_CONSTEXPR CustomFee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomFee(const CustomFee& from);
  CustomFee(CustomFee&& from) noexcept
    : CustomFee() {
    *this = ::std::move(from);
  }

  inline CustomFee& operator=(const CustomFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomFee& operator=(CustomFee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomFee& default_instance() {
    return *internal_default_instance();
  }
  enum FeeCase {
    kFixedFee = 1,
    kFractionalFee = 2,
    kRoyaltyFee = 4,
    FEE_NOT_SET = 0,
  };

  static inline const CustomFee* internal_default_instance() {
    return reinterpret_cast<const CustomFee*>(
               &_CustomFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomFee& a, CustomFee& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomFee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomFee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomFee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomFee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomFee& from) {
    CustomFee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomFee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CustomFee";
  }
  protected:
  explicit CustomFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeCollectorAccountIdFieldNumber = 3,
    kAllCollectorsAreExemptFieldNumber = 5,
    kFixedFeeFieldNumber = 1,
    kFractionalFeeFieldNumber = 2,
    kRoyaltyFeeFieldNumber = 4,
  };
  // .proto.AccountID fee_collector_account_id = 3;
  bool has_fee_collector_account_id() const;
  private:
  bool _internal_has_fee_collector_account_id() const;
  public:
  void clear_fee_collector_account_id();
  const ::proto::AccountID& fee_collector_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_fee_collector_account_id();
  ::proto::AccountID* mutable_fee_collector_account_id();
  void set_allocated_fee_collector_account_id(::proto::AccountID* fee_collector_account_id);
  private:
  const ::proto::AccountID& _internal_fee_collector_account_id() const;
  ::proto::AccountID* _internal_mutable_fee_collector_account_id();
  public:
  void unsafe_arena_set_allocated_fee_collector_account_id(
      ::proto::AccountID* fee_collector_account_id);
  ::proto::AccountID* unsafe_arena_release_fee_collector_account_id();

  // bool all_collectors_are_exempt = 5;
  void clear_all_collectors_are_exempt();
  bool all_collectors_are_exempt() const;
  void set_all_collectors_are_exempt(bool value);
  private:
  bool _internal_all_collectors_are_exempt() const;
  void _internal_set_all_collectors_are_exempt(bool value);
  public:

  // .proto.FixedFee fixed_fee = 1;
  bool has_fixed_fee() const;
  private:
  bool _internal_has_fixed_fee() const;
  public:
  void clear_fixed_fee();
  const ::proto::FixedFee& fixed_fee() const;
  PROTOBUF_NODISCARD ::proto::FixedFee* release_fixed_fee();
  ::proto::FixedFee* mutable_fixed_fee();
  void set_allocated_fixed_fee(::proto::FixedFee* fixed_fee);
  private:
  const ::proto::FixedFee& _internal_fixed_fee() const;
  ::proto::FixedFee* _internal_mutable_fixed_fee();
  public:
  void unsafe_arena_set_allocated_fixed_fee(
      ::proto::FixedFee* fixed_fee);
  ::proto::FixedFee* unsafe_arena_release_fixed_fee();

  // .proto.FractionalFee fractional_fee = 2;
  bool has_fractional_fee() const;
  private:
  bool _internal_has_fractional_fee() const;
  public:
  void clear_fractional_fee();
  const ::proto::FractionalFee& fractional_fee() const;
  PROTOBUF_NODISCARD ::proto::FractionalFee* release_fractional_fee();
  ::proto::FractionalFee* mutable_fractional_fee();
  void set_allocated_fractional_fee(::proto::FractionalFee* fractional_fee);
  private:
  const ::proto::FractionalFee& _internal_fractional_fee() const;
  ::proto::FractionalFee* _internal_mutable_fractional_fee();
  public:
  void unsafe_arena_set_allocated_fractional_fee(
      ::proto::FractionalFee* fractional_fee);
  ::proto::FractionalFee* unsafe_arena_release_fractional_fee();

  // .proto.RoyaltyFee royalty_fee = 4;
  bool has_royalty_fee() const;
  private:
  bool _internal_has_royalty_fee() const;
  public:
  void clear_royalty_fee();
  const ::proto::RoyaltyFee& royalty_fee() const;
  PROTOBUF_NODISCARD ::proto::RoyaltyFee* release_royalty_fee();
  ::proto::RoyaltyFee* mutable_royalty_fee();
  void set_allocated_royalty_fee(::proto::RoyaltyFee* royalty_fee);
  private:
  const ::proto::RoyaltyFee& _internal_royalty_fee() const;
  ::proto::RoyaltyFee* _internal_mutable_royalty_fee();
  public:
  void unsafe_arena_set_allocated_royalty_fee(
      ::proto::RoyaltyFee* royalty_fee);
  ::proto::RoyaltyFee* unsafe_arena_release_royalty_fee();

  void clear_fee();
  FeeCase fee_case() const;
  // @@protoc_insertion_point(class_scope:proto.CustomFee)
 private:
  class _Internal;
  void set_has_fixed_fee();
  void set_has_fractional_fee();
  void set_has_royalty_fee();

  inline bool has_fee() const;
  inline void clear_has_fee();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::AccountID* fee_collector_account_id_;
    bool all_collectors_are_exempt_;
    union FeeUnion {
      constexpr FeeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::FixedFee* fixed_fee_;
      ::proto::FractionalFee* fractional_fee_;
      ::proto::RoyaltyFee* royalty_fee_;
    } fee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_5ffees_2eproto;
};
// -------------------------------------------------------------------

class AssessedCustomFee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AssessedCustomFee) */ {
 public:
  inline AssessedCustomFee() : AssessedCustomFee(nullptr) {}
  ~AssessedCustomFee() override;
  explicit PROTOBUF_CONSTEXPR AssessedCustomFee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssessedCustomFee(const AssessedCustomFee& from);
  AssessedCustomFee(AssessedCustomFee&& from) noexcept
    : AssessedCustomFee() {
    *this = ::std::move(from);
  }

  inline AssessedCustomFee& operator=(const AssessedCustomFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssessedCustomFee& operator=(AssessedCustomFee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssessedCustomFee& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssessedCustomFee* internal_default_instance() {
    return reinterpret_cast<const AssessedCustomFee*>(
               &_AssessedCustomFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AssessedCustomFee& a, AssessedCustomFee& b) {
    a.Swap(&b);
  }
  inline void Swap(AssessedCustomFee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssessedCustomFee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssessedCustomFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssessedCustomFee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssessedCustomFee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssessedCustomFee& from) {
    AssessedCustomFee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssessedCustomFee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AssessedCustomFee";
  }
  protected:
  explicit AssessedCustomFee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectivePayerAccountIdFieldNumber = 4,
    kTokenIdFieldNumber = 2,
    kFeeCollectorAccountIdFieldNumber = 3,
    kAmountFieldNumber = 1,
  };
  // repeated .proto.AccountID effective_payer_account_id = 4;
  int effective_payer_account_id_size() const;
  private:
  int _internal_effective_payer_account_id_size() const;
  public:
  void clear_effective_payer_account_id();
  ::proto::AccountID* mutable_effective_payer_account_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountID >*
      mutable_effective_payer_account_id();
  private:
  const ::proto::AccountID& _internal_effective_payer_account_id(int index) const;
  ::proto::AccountID* _internal_add_effective_payer_account_id();
  public:
  const ::proto::AccountID& effective_payer_account_id(int index) const;
  ::proto::AccountID* add_effective_payer_account_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountID >&
      effective_payer_account_id() const;

  // .proto.TokenID token_id = 2;
  bool has_token_id() const;
  private:
  bool _internal_has_token_id() const;
  public:
  void clear_token_id();
  const ::proto::TokenID& token_id() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_token_id();
  ::proto::TokenID* mutable_token_id();
  void set_allocated_token_id(::proto::TokenID* token_id);
  private:
  const ::proto::TokenID& _internal_token_id() const;
  ::proto::TokenID* _internal_mutable_token_id();
  public:
  void unsafe_arena_set_allocated_token_id(
      ::proto::TokenID* token_id);
  ::proto::TokenID* unsafe_arena_release_token_id();

  // .proto.AccountID fee_collector_account_id = 3;
  bool has_fee_collector_account_id() const;
  private:
  bool _internal_has_fee_collector_account_id() const;
  public:
  void clear_fee_collector_account_id();
  const ::proto::AccountID& fee_collector_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_fee_collector_account_id();
  ::proto::AccountID* mutable_fee_collector_account_id();
  void set_allocated_fee_collector_account_id(::proto::AccountID* fee_collector_account_id);
  private:
  const ::proto::AccountID& _internal_fee_collector_account_id() const;
  ::proto::AccountID* _internal_mutable_fee_collector_account_id();
  public:
  void unsafe_arena_set_allocated_fee_collector_account_id(
      ::proto::AccountID* fee_collector_account_id);
  ::proto::AccountID* unsafe_arena_release_fee_collector_account_id();

  // int64 amount = 1;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.AssessedCustomFee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountID > effective_payer_account_id_;
    ::proto::TokenID* token_id_;
    ::proto::AccountID* fee_collector_account_id_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_5ffees_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FractionalFee

// .proto.Fraction fractional_amount = 1;
inline bool FractionalFee::_internal_has_fractional_amount() const {
  return this != internal_default_instance() && _impl_.fractional_amount_ != nullptr;
}
inline bool FractionalFee::has_fractional_amount() const {
  return _internal_has_fractional_amount();
}
inline const ::proto::Fraction& FractionalFee::_internal_fractional_amount() const {
  const ::proto::Fraction* p = _impl_.fractional_amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Fraction&>(
      ::proto::_Fraction_default_instance_);
}
inline const ::proto::Fraction& FractionalFee::fractional_amount() const {
  // @@protoc_insertion_point(field_get:proto.FractionalFee.fractional_amount)
  return _internal_fractional_amount();
}
inline void FractionalFee::unsafe_arena_set_allocated_fractional_amount(
    ::proto::Fraction* fractional_amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fractional_amount_);
  }
  _impl_.fractional_amount_ = fractional_amount;
  if (fractional_amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FractionalFee.fractional_amount)
}
inline ::proto::Fraction* FractionalFee::release_fractional_amount() {
  
  ::proto::Fraction* temp = _impl_.fractional_amount_;
  _impl_.fractional_amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Fraction* FractionalFee::unsafe_arena_release_fractional_amount() {
  // @@protoc_insertion_point(field_release:proto.FractionalFee.fractional_amount)
  
  ::proto::Fraction* temp = _impl_.fractional_amount_;
  _impl_.fractional_amount_ = nullptr;
  return temp;
}
inline ::proto::Fraction* FractionalFee::_internal_mutable_fractional_amount() {
  
  if (_impl_.fractional_amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Fraction>(GetArenaForAllocation());
    _impl_.fractional_amount_ = p;
  }
  return _impl_.fractional_amount_;
}
inline ::proto::Fraction* FractionalFee::mutable_fractional_amount() {
  ::proto::Fraction* _msg = _internal_mutable_fractional_amount();
  // @@protoc_insertion_point(field_mutable:proto.FractionalFee.fractional_amount)
  return _msg;
}
inline void FractionalFee::set_allocated_fractional_amount(::proto::Fraction* fractional_amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fractional_amount_);
  }
  if (fractional_amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractional_amount));
    if (message_arena != submessage_arena) {
      fractional_amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractional_amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fractional_amount_ = fractional_amount;
  // @@protoc_insertion_point(field_set_allocated:proto.FractionalFee.fractional_amount)
}

// int64 minimum_amount = 2;
inline void FractionalFee::clear_minimum_amount() {
  _impl_.minimum_amount_ = int64_t{0};
}
inline int64_t FractionalFee::_internal_minimum_amount() const {
  return _impl_.minimum_amount_;
}
inline int64_t FractionalFee::minimum_amount() const {
  // @@protoc_insertion_point(field_get:proto.FractionalFee.minimum_amount)
  return _internal_minimum_amount();
}
inline void FractionalFee::_internal_set_minimum_amount(int64_t value) {
  
  _impl_.minimum_amount_ = value;
}
inline void FractionalFee::set_minimum_amount(int64_t value) {
  _internal_set_minimum_amount(value);
  // @@protoc_insertion_point(field_set:proto.FractionalFee.minimum_amount)
}

// int64 maximum_amount = 3;
inline void FractionalFee::clear_maximum_amount() {
  _impl_.maximum_amount_ = int64_t{0};
}
inline int64_t FractionalFee::_internal_maximum_amount() const {
  return _impl_.maximum_amount_;
}
inline int64_t FractionalFee::maximum_amount() const {
  // @@protoc_insertion_point(field_get:proto.FractionalFee.maximum_amount)
  return _internal_maximum_amount();
}
inline void FractionalFee::_internal_set_maximum_amount(int64_t value) {
  
  _impl_.maximum_amount_ = value;
}
inline void FractionalFee::set_maximum_amount(int64_t value) {
  _internal_set_maximum_amount(value);
  // @@protoc_insertion_point(field_set:proto.FractionalFee.maximum_amount)
}

// bool net_of_transfers = 4;
inline void FractionalFee::clear_net_of_transfers() {
  _impl_.net_of_transfers_ = false;
}
inline bool FractionalFee::_internal_net_of_transfers() const {
  return _impl_.net_of_transfers_;
}
inline bool FractionalFee::net_of_transfers() const {
  // @@protoc_insertion_point(field_get:proto.FractionalFee.net_of_transfers)
  return _internal_net_of_transfers();
}
inline void FractionalFee::_internal_set_net_of_transfers(bool value) {
  
  _impl_.net_of_transfers_ = value;
}
inline void FractionalFee::set_net_of_transfers(bool value) {
  _internal_set_net_of_transfers(value);
  // @@protoc_insertion_point(field_set:proto.FractionalFee.net_of_transfers)
}

// -------------------------------------------------------------------

// FixedFee

// int64 amount = 1;
inline void FixedFee::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t FixedFee::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t FixedFee::amount() const {
  // @@protoc_insertion_point(field_get:proto.FixedFee.amount)
  return _internal_amount();
}
inline void FixedFee::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void FixedFee::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.FixedFee.amount)
}

// .proto.TokenID denominating_token_id = 2;
inline bool FixedFee::_internal_has_denominating_token_id() const {
  return this != internal_default_instance() && _impl_.denominating_token_id_ != nullptr;
}
inline bool FixedFee::has_denominating_token_id() const {
  return _internal_has_denominating_token_id();
}
inline const ::proto::TokenID& FixedFee::_internal_denominating_token_id() const {
  const ::proto::TokenID* p = _impl_.denominating_token_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& FixedFee::denominating_token_id() const {
  // @@protoc_insertion_point(field_get:proto.FixedFee.denominating_token_id)
  return _internal_denominating_token_id();
}
inline void FixedFee::unsafe_arena_set_allocated_denominating_token_id(
    ::proto::TokenID* denominating_token_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.denominating_token_id_);
  }
  _impl_.denominating_token_id_ = denominating_token_id;
  if (denominating_token_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FixedFee.denominating_token_id)
}
inline ::proto::TokenID* FixedFee::release_denominating_token_id() {
  
  ::proto::TokenID* temp = _impl_.denominating_token_id_;
  _impl_.denominating_token_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* FixedFee::unsafe_arena_release_denominating_token_id() {
  // @@protoc_insertion_point(field_release:proto.FixedFee.denominating_token_id)
  
  ::proto::TokenID* temp = _impl_.denominating_token_id_;
  _impl_.denominating_token_id_ = nullptr;
  return temp;
}
inline ::proto::TokenID* FixedFee::_internal_mutable_denominating_token_id() {
  
  if (_impl_.denominating_token_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.denominating_token_id_ = p;
  }
  return _impl_.denominating_token_id_;
}
inline ::proto::TokenID* FixedFee::mutable_denominating_token_id() {
  ::proto::TokenID* _msg = _internal_mutable_denominating_token_id();
  // @@protoc_insertion_point(field_mutable:proto.FixedFee.denominating_token_id)
  return _msg;
}
inline void FixedFee::set_allocated_denominating_token_id(::proto::TokenID* denominating_token_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.denominating_token_id_);
  }
  if (denominating_token_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(denominating_token_id));
    if (message_arena != submessage_arena) {
      denominating_token_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, denominating_token_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.denominating_token_id_ = denominating_token_id;
  // @@protoc_insertion_point(field_set_allocated:proto.FixedFee.denominating_token_id)
}

// -------------------------------------------------------------------

// RoyaltyFee

// .proto.Fraction exchange_value_fraction = 1;
inline bool RoyaltyFee::_internal_has_exchange_value_fraction() const {
  return this != internal_default_instance() && _impl_.exchange_value_fraction_ != nullptr;
}
inline bool RoyaltyFee::has_exchange_value_fraction() const {
  return _internal_has_exchange_value_fraction();
}
inline const ::proto::Fraction& RoyaltyFee::_internal_exchange_value_fraction() const {
  const ::proto::Fraction* p = _impl_.exchange_value_fraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Fraction&>(
      ::proto::_Fraction_default_instance_);
}
inline const ::proto::Fraction& RoyaltyFee::exchange_value_fraction() const {
  // @@protoc_insertion_point(field_get:proto.RoyaltyFee.exchange_value_fraction)
  return _internal_exchange_value_fraction();
}
inline void RoyaltyFee::unsafe_arena_set_allocated_exchange_value_fraction(
    ::proto::Fraction* exchange_value_fraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_value_fraction_);
  }
  _impl_.exchange_value_fraction_ = exchange_value_fraction;
  if (exchange_value_fraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RoyaltyFee.exchange_value_fraction)
}
inline ::proto::Fraction* RoyaltyFee::release_exchange_value_fraction() {
  
  ::proto::Fraction* temp = _impl_.exchange_value_fraction_;
  _impl_.exchange_value_fraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Fraction* RoyaltyFee::unsafe_arena_release_exchange_value_fraction() {
  // @@protoc_insertion_point(field_release:proto.RoyaltyFee.exchange_value_fraction)
  
  ::proto::Fraction* temp = _impl_.exchange_value_fraction_;
  _impl_.exchange_value_fraction_ = nullptr;
  return temp;
}
inline ::proto::Fraction* RoyaltyFee::_internal_mutable_exchange_value_fraction() {
  
  if (_impl_.exchange_value_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Fraction>(GetArenaForAllocation());
    _impl_.exchange_value_fraction_ = p;
  }
  return _impl_.exchange_value_fraction_;
}
inline ::proto::Fraction* RoyaltyFee::mutable_exchange_value_fraction() {
  ::proto::Fraction* _msg = _internal_mutable_exchange_value_fraction();
  // @@protoc_insertion_point(field_mutable:proto.RoyaltyFee.exchange_value_fraction)
  return _msg;
}
inline void RoyaltyFee::set_allocated_exchange_value_fraction(::proto::Fraction* exchange_value_fraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_value_fraction_);
  }
  if (exchange_value_fraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_value_fraction));
    if (message_arena != submessage_arena) {
      exchange_value_fraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_value_fraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchange_value_fraction_ = exchange_value_fraction;
  // @@protoc_insertion_point(field_set_allocated:proto.RoyaltyFee.exchange_value_fraction)
}

// .proto.FixedFee fallback_fee = 2;
inline bool RoyaltyFee::_internal_has_fallback_fee() const {
  return this != internal_default_instance() && _impl_.fallback_fee_ != nullptr;
}
inline bool RoyaltyFee::has_fallback_fee() const {
  return _internal_has_fallback_fee();
}
inline void RoyaltyFee::clear_fallback_fee() {
  if (GetArenaForAllocation() == nullptr && _impl_.fallback_fee_ != nullptr) {
    delete _impl_.fallback_fee_;
  }
  _impl_.fallback_fee_ = nullptr;
}
inline const ::proto::FixedFee& RoyaltyFee::_internal_fallback_fee() const {
  const ::proto::FixedFee* p = _impl_.fallback_fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FixedFee&>(
      ::proto::_FixedFee_default_instance_);
}
inline const ::proto::FixedFee& RoyaltyFee::fallback_fee() const {
  // @@protoc_insertion_point(field_get:proto.RoyaltyFee.fallback_fee)
  return _internal_fallback_fee();
}
inline void RoyaltyFee::unsafe_arena_set_allocated_fallback_fee(
    ::proto::FixedFee* fallback_fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fallback_fee_);
  }
  _impl_.fallback_fee_ = fallback_fee;
  if (fallback_fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RoyaltyFee.fallback_fee)
}
inline ::proto::FixedFee* RoyaltyFee::release_fallback_fee() {
  
  ::proto::FixedFee* temp = _impl_.fallback_fee_;
  _impl_.fallback_fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FixedFee* RoyaltyFee::unsafe_arena_release_fallback_fee() {
  // @@protoc_insertion_point(field_release:proto.RoyaltyFee.fallback_fee)
  
  ::proto::FixedFee* temp = _impl_.fallback_fee_;
  _impl_.fallback_fee_ = nullptr;
  return temp;
}
inline ::proto::FixedFee* RoyaltyFee::_internal_mutable_fallback_fee() {
  
  if (_impl_.fallback_fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FixedFee>(GetArenaForAllocation());
    _impl_.fallback_fee_ = p;
  }
  return _impl_.fallback_fee_;
}
inline ::proto::FixedFee* RoyaltyFee::mutable_fallback_fee() {
  ::proto::FixedFee* _msg = _internal_mutable_fallback_fee();
  // @@protoc_insertion_point(field_mutable:proto.RoyaltyFee.fallback_fee)
  return _msg;
}
inline void RoyaltyFee::set_allocated_fallback_fee(::proto::FixedFee* fallback_fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fallback_fee_;
  }
  if (fallback_fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fallback_fee);
    if (message_arena != submessage_arena) {
      fallback_fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fallback_fee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fallback_fee_ = fallback_fee;
  // @@protoc_insertion_point(field_set_allocated:proto.RoyaltyFee.fallback_fee)
}

// -------------------------------------------------------------------

// CustomFee

// .proto.FixedFee fixed_fee = 1;
inline bool CustomFee::_internal_has_fixed_fee() const {
  return fee_case() == kFixedFee;
}
inline bool CustomFee::has_fixed_fee() const {
  return _internal_has_fixed_fee();
}
inline void CustomFee::set_has_fixed_fee() {
  _impl_._oneof_case_[0] = kFixedFee;
}
inline void CustomFee::clear_fixed_fee() {
  if (_internal_has_fixed_fee()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.fee_.fixed_fee_;
    }
    clear_has_fee();
  }
}
inline ::proto::FixedFee* CustomFee::release_fixed_fee() {
  // @@protoc_insertion_point(field_release:proto.CustomFee.fixed_fee)
  if (_internal_has_fixed_fee()) {
    clear_has_fee();
    ::proto::FixedFee* temp = _impl_.fee_.fixed_fee_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.fee_.fixed_fee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FixedFee& CustomFee::_internal_fixed_fee() const {
  return _internal_has_fixed_fee()
      ? *_impl_.fee_.fixed_fee_
      : reinterpret_cast< ::proto::FixedFee&>(::proto::_FixedFee_default_instance_);
}
inline const ::proto::FixedFee& CustomFee::fixed_fee() const {
  // @@protoc_insertion_point(field_get:proto.CustomFee.fixed_fee)
  return _internal_fixed_fee();
}
inline ::proto::FixedFee* CustomFee::unsafe_arena_release_fixed_fee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CustomFee.fixed_fee)
  if (_internal_has_fixed_fee()) {
    clear_has_fee();
    ::proto::FixedFee* temp = _impl_.fee_.fixed_fee_;
    _impl_.fee_.fixed_fee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomFee::unsafe_arena_set_allocated_fixed_fee(::proto::FixedFee* fixed_fee) {
  clear_fee();
  if (fixed_fee) {
    set_has_fixed_fee();
    _impl_.fee_.fixed_fee_ = fixed_fee;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CustomFee.fixed_fee)
}
inline ::proto::FixedFee* CustomFee::_internal_mutable_fixed_fee() {
  if (!_internal_has_fixed_fee()) {
    clear_fee();
    set_has_fixed_fee();
    _impl_.fee_.fixed_fee_ = CreateMaybeMessage< ::proto::FixedFee >(GetArenaForAllocation());
  }
  return _impl_.fee_.fixed_fee_;
}
inline ::proto::FixedFee* CustomFee::mutable_fixed_fee() {
  ::proto::FixedFee* _msg = _internal_mutable_fixed_fee();
  // @@protoc_insertion_point(field_mutable:proto.CustomFee.fixed_fee)
  return _msg;
}

// .proto.FractionalFee fractional_fee = 2;
inline bool CustomFee::_internal_has_fractional_fee() const {
  return fee_case() == kFractionalFee;
}
inline bool CustomFee::has_fractional_fee() const {
  return _internal_has_fractional_fee();
}
inline void CustomFee::set_has_fractional_fee() {
  _impl_._oneof_case_[0] = kFractionalFee;
}
inline void CustomFee::clear_fractional_fee() {
  if (_internal_has_fractional_fee()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.fee_.fractional_fee_;
    }
    clear_has_fee();
  }
}
inline ::proto::FractionalFee* CustomFee::release_fractional_fee() {
  // @@protoc_insertion_point(field_release:proto.CustomFee.fractional_fee)
  if (_internal_has_fractional_fee()) {
    clear_has_fee();
    ::proto::FractionalFee* temp = _impl_.fee_.fractional_fee_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.fee_.fractional_fee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FractionalFee& CustomFee::_internal_fractional_fee() const {
  return _internal_has_fractional_fee()
      ? *_impl_.fee_.fractional_fee_
      : reinterpret_cast< ::proto::FractionalFee&>(::proto::_FractionalFee_default_instance_);
}
inline const ::proto::FractionalFee& CustomFee::fractional_fee() const {
  // @@protoc_insertion_point(field_get:proto.CustomFee.fractional_fee)
  return _internal_fractional_fee();
}
inline ::proto::FractionalFee* CustomFee::unsafe_arena_release_fractional_fee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CustomFee.fractional_fee)
  if (_internal_has_fractional_fee()) {
    clear_has_fee();
    ::proto::FractionalFee* temp = _impl_.fee_.fractional_fee_;
    _impl_.fee_.fractional_fee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomFee::unsafe_arena_set_allocated_fractional_fee(::proto::FractionalFee* fractional_fee) {
  clear_fee();
  if (fractional_fee) {
    set_has_fractional_fee();
    _impl_.fee_.fractional_fee_ = fractional_fee;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CustomFee.fractional_fee)
}
inline ::proto::FractionalFee* CustomFee::_internal_mutable_fractional_fee() {
  if (!_internal_has_fractional_fee()) {
    clear_fee();
    set_has_fractional_fee();
    _impl_.fee_.fractional_fee_ = CreateMaybeMessage< ::proto::FractionalFee >(GetArenaForAllocation());
  }
  return _impl_.fee_.fractional_fee_;
}
inline ::proto::FractionalFee* CustomFee::mutable_fractional_fee() {
  ::proto::FractionalFee* _msg = _internal_mutable_fractional_fee();
  // @@protoc_insertion_point(field_mutable:proto.CustomFee.fractional_fee)
  return _msg;
}

// .proto.RoyaltyFee royalty_fee = 4;
inline bool CustomFee::_internal_has_royalty_fee() const {
  return fee_case() == kRoyaltyFee;
}
inline bool CustomFee::has_royalty_fee() const {
  return _internal_has_royalty_fee();
}
inline void CustomFee::set_has_royalty_fee() {
  _impl_._oneof_case_[0] = kRoyaltyFee;
}
inline void CustomFee::clear_royalty_fee() {
  if (_internal_has_royalty_fee()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.fee_.royalty_fee_;
    }
    clear_has_fee();
  }
}
inline ::proto::RoyaltyFee* CustomFee::release_royalty_fee() {
  // @@protoc_insertion_point(field_release:proto.CustomFee.royalty_fee)
  if (_internal_has_royalty_fee()) {
    clear_has_fee();
    ::proto::RoyaltyFee* temp = _impl_.fee_.royalty_fee_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.fee_.royalty_fee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::RoyaltyFee& CustomFee::_internal_royalty_fee() const {
  return _internal_has_royalty_fee()
      ? *_impl_.fee_.royalty_fee_
      : reinterpret_cast< ::proto::RoyaltyFee&>(::proto::_RoyaltyFee_default_instance_);
}
inline const ::proto::RoyaltyFee& CustomFee::royalty_fee() const {
  // @@protoc_insertion_point(field_get:proto.CustomFee.royalty_fee)
  return _internal_royalty_fee();
}
inline ::proto::RoyaltyFee* CustomFee::unsafe_arena_release_royalty_fee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.CustomFee.royalty_fee)
  if (_internal_has_royalty_fee()) {
    clear_has_fee();
    ::proto::RoyaltyFee* temp = _impl_.fee_.royalty_fee_;
    _impl_.fee_.royalty_fee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomFee::unsafe_arena_set_allocated_royalty_fee(::proto::RoyaltyFee* royalty_fee) {
  clear_fee();
  if (royalty_fee) {
    set_has_royalty_fee();
    _impl_.fee_.royalty_fee_ = royalty_fee;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CustomFee.royalty_fee)
}
inline ::proto::RoyaltyFee* CustomFee::_internal_mutable_royalty_fee() {
  if (!_internal_has_royalty_fee()) {
    clear_fee();
    set_has_royalty_fee();
    _impl_.fee_.royalty_fee_ = CreateMaybeMessage< ::proto::RoyaltyFee >(GetArenaForAllocation());
  }
  return _impl_.fee_.royalty_fee_;
}
inline ::proto::RoyaltyFee* CustomFee::mutable_royalty_fee() {
  ::proto::RoyaltyFee* _msg = _internal_mutable_royalty_fee();
  // @@protoc_insertion_point(field_mutable:proto.CustomFee.royalty_fee)
  return _msg;
}

// .proto.AccountID fee_collector_account_id = 3;
inline bool CustomFee::_internal_has_fee_collector_account_id() const {
  return this != internal_default_instance() && _impl_.fee_collector_account_id_ != nullptr;
}
inline bool CustomFee::has_fee_collector_account_id() const {
  return _internal_has_fee_collector_account_id();
}
inline const ::proto::AccountID& CustomFee::_internal_fee_collector_account_id() const {
  const ::proto::AccountID* p = _impl_.fee_collector_account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CustomFee::fee_collector_account_id() const {
  // @@protoc_insertion_point(field_get:proto.CustomFee.fee_collector_account_id)
  return _internal_fee_collector_account_id();
}
inline void CustomFee::unsafe_arena_set_allocated_fee_collector_account_id(
    ::proto::AccountID* fee_collector_account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_collector_account_id_);
  }
  _impl_.fee_collector_account_id_ = fee_collector_account_id;
  if (fee_collector_account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CustomFee.fee_collector_account_id)
}
inline ::proto::AccountID* CustomFee::release_fee_collector_account_id() {
  
  ::proto::AccountID* temp = _impl_.fee_collector_account_id_;
  _impl_.fee_collector_account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CustomFee::unsafe_arena_release_fee_collector_account_id() {
  // @@protoc_insertion_point(field_release:proto.CustomFee.fee_collector_account_id)
  
  ::proto::AccountID* temp = _impl_.fee_collector_account_id_;
  _impl_.fee_collector_account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CustomFee::_internal_mutable_fee_collector_account_id() {
  
  if (_impl_.fee_collector_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.fee_collector_account_id_ = p;
  }
  return _impl_.fee_collector_account_id_;
}
inline ::proto::AccountID* CustomFee::mutable_fee_collector_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_fee_collector_account_id();
  // @@protoc_insertion_point(field_mutable:proto.CustomFee.fee_collector_account_id)
  return _msg;
}
inline void CustomFee::set_allocated_fee_collector_account_id(::proto::AccountID* fee_collector_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_collector_account_id_);
  }
  if (fee_collector_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_collector_account_id));
    if (message_arena != submessage_arena) {
      fee_collector_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_collector_account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fee_collector_account_id_ = fee_collector_account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.CustomFee.fee_collector_account_id)
}

// bool all_collectors_are_exempt = 5;
inline void CustomFee::clear_all_collectors_are_exempt() {
  _impl_.all_collectors_are_exempt_ = false;
}
inline bool CustomFee::_internal_all_collectors_are_exempt() const {
  return _impl_.all_collectors_are_exempt_;
}
inline bool CustomFee::all_collectors_are_exempt() const {
  // @@protoc_insertion_point(field_get:proto.CustomFee.all_collectors_are_exempt)
  return _internal_all_collectors_are_exempt();
}
inline void CustomFee::_internal_set_all_collectors_are_exempt(bool value) {
  
  _impl_.all_collectors_are_exempt_ = value;
}
inline void CustomFee::set_all_collectors_are_exempt(bool value) {
  _internal_set_all_collectors_are_exempt(value);
  // @@protoc_insertion_point(field_set:proto.CustomFee.all_collectors_are_exempt)
}

inline bool CustomFee::has_fee() const {
  return fee_case() != FEE_NOT_SET;
}
inline void CustomFee::clear_has_fee() {
  _impl_._oneof_case_[0] = FEE_NOT_SET;
}
inline CustomFee::FeeCase CustomFee::fee_case() const {
  return CustomFee::FeeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AssessedCustomFee

// int64 amount = 1;
inline void AssessedCustomFee::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t AssessedCustomFee::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t AssessedCustomFee::amount() const {
  // @@protoc_insertion_point(field_get:proto.AssessedCustomFee.amount)
  return _internal_amount();
}
inline void AssessedCustomFee::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void AssessedCustomFee::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.AssessedCustomFee.amount)
}

// .proto.TokenID token_id = 2;
inline bool AssessedCustomFee::_internal_has_token_id() const {
  return this != internal_default_instance() && _impl_.token_id_ != nullptr;
}
inline bool AssessedCustomFee::has_token_id() const {
  return _internal_has_token_id();
}
inline const ::proto::TokenID& AssessedCustomFee::_internal_token_id() const {
  const ::proto::TokenID* p = _impl_.token_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& AssessedCustomFee::token_id() const {
  // @@protoc_insertion_point(field_get:proto.AssessedCustomFee.token_id)
  return _internal_token_id();
}
inline void AssessedCustomFee::unsafe_arena_set_allocated_token_id(
    ::proto::TokenID* token_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  _impl_.token_id_ = token_id;
  if (token_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AssessedCustomFee.token_id)
}
inline ::proto::TokenID* AssessedCustomFee::release_token_id() {
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* AssessedCustomFee::unsafe_arena_release_token_id() {
  // @@protoc_insertion_point(field_release:proto.AssessedCustomFee.token_id)
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
  return temp;
}
inline ::proto::TokenID* AssessedCustomFee::_internal_mutable_token_id() {
  
  if (_impl_.token_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.token_id_ = p;
  }
  return _impl_.token_id_;
}
inline ::proto::TokenID* AssessedCustomFee::mutable_token_id() {
  ::proto::TokenID* _msg = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:proto.AssessedCustomFee.token_id)
  return _msg;
}
inline void AssessedCustomFee::set_allocated_token_id(::proto::TokenID* token_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  if (token_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_id));
    if (message_arena != submessage_arena) {
      token_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.token_id_ = token_id;
  // @@protoc_insertion_point(field_set_allocated:proto.AssessedCustomFee.token_id)
}

// .proto.AccountID fee_collector_account_id = 3;
inline bool AssessedCustomFee::_internal_has_fee_collector_account_id() const {
  return this != internal_default_instance() && _impl_.fee_collector_account_id_ != nullptr;
}
inline bool AssessedCustomFee::has_fee_collector_account_id() const {
  return _internal_has_fee_collector_account_id();
}
inline const ::proto::AccountID& AssessedCustomFee::_internal_fee_collector_account_id() const {
  const ::proto::AccountID* p = _impl_.fee_collector_account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& AssessedCustomFee::fee_collector_account_id() const {
  // @@protoc_insertion_point(field_get:proto.AssessedCustomFee.fee_collector_account_id)
  return _internal_fee_collector_account_id();
}
inline void AssessedCustomFee::unsafe_arena_set_allocated_fee_collector_account_id(
    ::proto::AccountID* fee_collector_account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_collector_account_id_);
  }
  _impl_.fee_collector_account_id_ = fee_collector_account_id;
  if (fee_collector_account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AssessedCustomFee.fee_collector_account_id)
}
inline ::proto::AccountID* AssessedCustomFee::release_fee_collector_account_id() {
  
  ::proto::AccountID* temp = _impl_.fee_collector_account_id_;
  _impl_.fee_collector_account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* AssessedCustomFee::unsafe_arena_release_fee_collector_account_id() {
  // @@protoc_insertion_point(field_release:proto.AssessedCustomFee.fee_collector_account_id)
  
  ::proto::AccountID* temp = _impl_.fee_collector_account_id_;
  _impl_.fee_collector_account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* AssessedCustomFee::_internal_mutable_fee_collector_account_id() {
  
  if (_impl_.fee_collector_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.fee_collector_account_id_ = p;
  }
  return _impl_.fee_collector_account_id_;
}
inline ::proto::AccountID* AssessedCustomFee::mutable_fee_collector_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_fee_collector_account_id();
  // @@protoc_insertion_point(field_mutable:proto.AssessedCustomFee.fee_collector_account_id)
  return _msg;
}
inline void AssessedCustomFee::set_allocated_fee_collector_account_id(::proto::AccountID* fee_collector_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_collector_account_id_);
  }
  if (fee_collector_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_collector_account_id));
    if (message_arena != submessage_arena) {
      fee_collector_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_collector_account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fee_collector_account_id_ = fee_collector_account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.AssessedCustomFee.fee_collector_account_id)
}

// repeated .proto.AccountID effective_payer_account_id = 4;
inline int AssessedCustomFee::_internal_effective_payer_account_id_size() const {
  return _impl_.effective_payer_account_id_.size();
}
inline int AssessedCustomFee::effective_payer_account_id_size() const {
  return _internal_effective_payer_account_id_size();
}
inline ::proto::AccountID* AssessedCustomFee::mutable_effective_payer_account_id(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AssessedCustomFee.effective_payer_account_id)
  return _impl_.effective_payer_account_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountID >*
AssessedCustomFee::mutable_effective_payer_account_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.AssessedCustomFee.effective_payer_account_id)
  return &_impl_.effective_payer_account_id_;
}
inline const ::proto::AccountID& AssessedCustomFee::_internal_effective_payer_account_id(int index) const {
  return _impl_.effective_payer_account_id_.Get(index);
}
inline const ::proto::AccountID& AssessedCustomFee::effective_payer_account_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.AssessedCustomFee.effective_payer_account_id)
  return _internal_effective_payer_account_id(index);
}
inline ::proto::AccountID* AssessedCustomFee::_internal_add_effective_payer_account_id() {
  return _impl_.effective_payer_account_id_.Add();
}
inline ::proto::AccountID* AssessedCustomFee::add_effective_payer_account_id() {
  ::proto::AccountID* _add = _internal_add_effective_payer_account_id();
  // @@protoc_insertion_point(field_add:proto.AssessedCustomFee.effective_payer_account_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountID >&
AssessedCustomFee::effective_payer_account_id() const {
  // @@protoc_insertion_point(field_list:proto.AssessedCustomFee.effective_payer_account_id)
  return _impl_.effective_payer_account_id_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_custom_5ffees_2eproto

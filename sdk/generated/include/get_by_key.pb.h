// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_by_key.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_get_5fby_5fkey_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_get_5fby_5fkey_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
#include "crypto_add_live_hash.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_get_5fby_5fkey_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_get_5fby_5fkey_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_get_5fby_5fkey_2eproto;
namespace proto {
class EntityID;
struct EntityIDDefaultTypeInternal;
extern EntityIDDefaultTypeInternal _EntityID_default_instance_;
class GetByKeyQuery;
struct GetByKeyQueryDefaultTypeInternal;
extern GetByKeyQueryDefaultTypeInternal _GetByKeyQuery_default_instance_;
class GetByKeyResponse;
struct GetByKeyResponseDefaultTypeInternal;
extern GetByKeyResponseDefaultTypeInternal _GetByKeyResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::EntityID* Arena::CreateMaybeMessage<::proto::EntityID>(Arena*);
template<> ::proto::GetByKeyQuery* Arena::CreateMaybeMessage<::proto::GetByKeyQuery>(Arena*);
template<> ::proto::GetByKeyResponse* Arena::CreateMaybeMessage<::proto::GetByKeyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class GetByKeyQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetByKeyQuery) */ {
 public:
  inline GetByKeyQuery() : GetByKeyQuery(nullptr) {}
  ~GetByKeyQuery() override;
  explicit PROTOBUF_CONSTEXPR GetByKeyQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetByKeyQuery(const GetByKeyQuery& from);
  GetByKeyQuery(GetByKeyQuery&& from) noexcept
    : GetByKeyQuery() {
    *this = ::std::move(from);
  }

  inline GetByKeyQuery& operator=(const GetByKeyQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetByKeyQuery& operator=(GetByKeyQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetByKeyQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetByKeyQuery* internal_default_instance() {
    return reinterpret_cast<const GetByKeyQuery*>(
               &_GetByKeyQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetByKeyQuery& a, GetByKeyQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(GetByKeyQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetByKeyQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetByKeyQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetByKeyQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetByKeyQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetByKeyQuery& from) {
    GetByKeyQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetByKeyQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetByKeyQuery";
  }
  protected:
  explicit GetByKeyQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.Key key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::proto::Key& key() const;
  PROTOBUF_NODISCARD ::proto::Key* release_key();
  ::proto::Key* mutable_key();
  void set_allocated_key(::proto::Key* key);
  private:
  const ::proto::Key& _internal_key() const;
  ::proto::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::proto::Key* key);
  ::proto::Key* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:proto.GetByKeyQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::Key* key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5fby_5fkey_2eproto;
};
// -------------------------------------------------------------------

class EntityID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.EntityID) */ {
 public:
  inline EntityID() : EntityID(nullptr) {}
  ~EntityID() override;
  explicit PROTOBUF_CONSTEXPR EntityID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityID(const EntityID& from);
  EntityID(EntityID&& from) noexcept
    : EntityID() {
    *this = ::std::move(from);
  }

  inline EntityID& operator=(const EntityID& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityID& operator=(EntityID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityID& default_instance() {
    return *internal_default_instance();
  }
  enum EntityCase {
    kAccountID = 1,
    kLiveHash = 2,
    kFileID = 3,
    kContractID = 4,
    ENTITY_NOT_SET = 0,
  };

  static inline const EntityID* internal_default_instance() {
    return reinterpret_cast<const EntityID*>(
               &_EntityID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityID& a, EntityID& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityID& from) {
    EntityID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.EntityID";
  }
  protected:
  explicit EntityID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIDFieldNumber = 1,
    kLiveHashFieldNumber = 2,
    kFileIDFieldNumber = 3,
    kContractIDFieldNumber = 4,
  };
  // .proto.AccountID accountID = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // .proto.LiveHash liveHash = 2;
  bool has_livehash() const;
  private:
  bool _internal_has_livehash() const;
  public:
  void clear_livehash();
  const ::proto::LiveHash& livehash() const;
  PROTOBUF_NODISCARD ::proto::LiveHash* release_livehash();
  ::proto::LiveHash* mutable_livehash();
  void set_allocated_livehash(::proto::LiveHash* livehash);
  private:
  const ::proto::LiveHash& _internal_livehash() const;
  ::proto::LiveHash* _internal_mutable_livehash();
  public:
  void unsafe_arena_set_allocated_livehash(
      ::proto::LiveHash* livehash);
  ::proto::LiveHash* unsafe_arena_release_livehash();

  // .proto.FileID fileID = 3;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // .proto.ContractID contractID = 4;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  void clear_entity();
  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:proto.EntityID)
 private:
  class _Internal;
  void set_has_accountid();
  void set_has_livehash();
  void set_has_fileid();
  void set_has_contractid();

  inline bool has_entity() const;
  inline void clear_has_entity();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EntityUnion {
      constexpr EntityUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::AccountID* accountid_;
      ::proto::LiveHash* livehash_;
      ::proto::FileID* fileid_;
      ::proto::ContractID* contractid_;
    } entity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5fby_5fkey_2eproto;
};
// -------------------------------------------------------------------

class GetByKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetByKeyResponse) */ {
 public:
  inline GetByKeyResponse() : GetByKeyResponse(nullptr) {}
  ~GetByKeyResponse() override;
  explicit PROTOBUF_CONSTEXPR GetByKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetByKeyResponse(const GetByKeyResponse& from);
  GetByKeyResponse(GetByKeyResponse&& from) noexcept
    : GetByKeyResponse() {
    *this = ::std::move(from);
  }

  inline GetByKeyResponse& operator=(const GetByKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetByKeyResponse& operator=(GetByKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetByKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetByKeyResponse* internal_default_instance() {
    return reinterpret_cast<const GetByKeyResponse*>(
               &_GetByKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetByKeyResponse& a, GetByKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetByKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetByKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetByKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetByKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetByKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetByKeyResponse& from) {
    GetByKeyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetByKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetByKeyResponse";
  }
  protected:
  explicit GetByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .proto.EntityID entities = 2;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::proto::EntityID* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntityID >*
      mutable_entities();
  private:
  const ::proto::EntityID& _internal_entities(int index) const;
  ::proto::EntityID* _internal_add_entities();
  public:
  const ::proto::EntityID& entities(int index) const;
  ::proto::EntityID* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntityID >&
      entities() const;

  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:proto.GetByKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntityID > entities_;
    ::proto::ResponseHeader* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5fby_5fkey_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetByKeyQuery

// .proto.QueryHeader header = 1;
inline bool GetByKeyQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetByKeyQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& GetByKeyQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& GetByKeyQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.GetByKeyQuery.header)
  return _internal_header();
}
inline void GetByKeyQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetByKeyQuery.header)
}
inline ::proto::QueryHeader* GetByKeyQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* GetByKeyQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.GetByKeyQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* GetByKeyQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* GetByKeyQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.GetByKeyQuery.header)
  return _msg;
}
inline void GetByKeyQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.GetByKeyQuery.header)
}

// .proto.Key key = 2;
inline bool GetByKeyQuery::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool GetByKeyQuery::has_key() const {
  return _internal_has_key();
}
inline const ::proto::Key& GetByKeyQuery::_internal_key() const {
  const ::proto::Key* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& GetByKeyQuery::key() const {
  // @@protoc_insertion_point(field_get:proto.GetByKeyQuery.key)
  return _internal_key();
}
inline void GetByKeyQuery::unsafe_arena_set_allocated_key(
    ::proto::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetByKeyQuery.key)
}
inline ::proto::Key* GetByKeyQuery::release_key() {
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* GetByKeyQuery::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:proto.GetByKeyQuery.key)
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::proto::Key* GetByKeyQuery::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::proto::Key* GetByKeyQuery::mutable_key() {
  ::proto::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto.GetByKeyQuery.key)
  return _msg;
}
inline void GetByKeyQuery::set_allocated_key(::proto::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:proto.GetByKeyQuery.key)
}

// -------------------------------------------------------------------

// EntityID

// .proto.AccountID accountID = 1;
inline bool EntityID::_internal_has_accountid() const {
  return entity_case() == kAccountID;
}
inline bool EntityID::has_accountid() const {
  return _internal_has_accountid();
}
inline void EntityID::set_has_accountid() {
  _impl_._oneof_case_[0] = kAccountID;
}
inline ::proto::AccountID* EntityID::release_accountid() {
  // @@protoc_insertion_point(field_release:proto.EntityID.accountID)
  if (_internal_has_accountid()) {
    clear_has_entity();
    ::proto::AccountID* temp = _impl_.entity_.accountid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_.accountid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::AccountID& EntityID::_internal_accountid() const {
  return _internal_has_accountid()
      ? *_impl_.entity_.accountid_
      : reinterpret_cast< ::proto::AccountID&>(::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& EntityID::accountid() const {
  // @@protoc_insertion_point(field_get:proto.EntityID.accountID)
  return _internal_accountid();
}
inline ::proto::AccountID* EntityID::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.EntityID.accountID)
  if (_internal_has_accountid()) {
    clear_has_entity();
    ::proto::AccountID* temp = _impl_.entity_.accountid_;
    _impl_.entity_.accountid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityID::unsafe_arena_set_allocated_accountid(::proto::AccountID* accountid) {
  clear_entity();
  if (accountid) {
    set_has_accountid();
    _impl_.entity_.accountid_ = accountid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.EntityID.accountID)
}
inline ::proto::AccountID* EntityID::_internal_mutable_accountid() {
  if (!_internal_has_accountid()) {
    clear_entity();
    set_has_accountid();
    _impl_.entity_.accountid_ = CreateMaybeMessage< ::proto::AccountID >(GetArenaForAllocation());
  }
  return _impl_.entity_.accountid_;
}
inline ::proto::AccountID* EntityID::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.EntityID.accountID)
  return _msg;
}

// .proto.LiveHash liveHash = 2;
inline bool EntityID::_internal_has_livehash() const {
  return entity_case() == kLiveHash;
}
inline bool EntityID::has_livehash() const {
  return _internal_has_livehash();
}
inline void EntityID::set_has_livehash() {
  _impl_._oneof_case_[0] = kLiveHash;
}
inline ::proto::LiveHash* EntityID::release_livehash() {
  // @@protoc_insertion_point(field_release:proto.EntityID.liveHash)
  if (_internal_has_livehash()) {
    clear_has_entity();
    ::proto::LiveHash* temp = _impl_.entity_.livehash_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_.livehash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::LiveHash& EntityID::_internal_livehash() const {
  return _internal_has_livehash()
      ? *_impl_.entity_.livehash_
      : reinterpret_cast< ::proto::LiveHash&>(::proto::_LiveHash_default_instance_);
}
inline const ::proto::LiveHash& EntityID::livehash() const {
  // @@protoc_insertion_point(field_get:proto.EntityID.liveHash)
  return _internal_livehash();
}
inline ::proto::LiveHash* EntityID::unsafe_arena_release_livehash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.EntityID.liveHash)
  if (_internal_has_livehash()) {
    clear_has_entity();
    ::proto::LiveHash* temp = _impl_.entity_.livehash_;
    _impl_.entity_.livehash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityID::unsafe_arena_set_allocated_livehash(::proto::LiveHash* livehash) {
  clear_entity();
  if (livehash) {
    set_has_livehash();
    _impl_.entity_.livehash_ = livehash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.EntityID.liveHash)
}
inline ::proto::LiveHash* EntityID::_internal_mutable_livehash() {
  if (!_internal_has_livehash()) {
    clear_entity();
    set_has_livehash();
    _impl_.entity_.livehash_ = CreateMaybeMessage< ::proto::LiveHash >(GetArenaForAllocation());
  }
  return _impl_.entity_.livehash_;
}
inline ::proto::LiveHash* EntityID::mutable_livehash() {
  ::proto::LiveHash* _msg = _internal_mutable_livehash();
  // @@protoc_insertion_point(field_mutable:proto.EntityID.liveHash)
  return _msg;
}

// .proto.FileID fileID = 3;
inline bool EntityID::_internal_has_fileid() const {
  return entity_case() == kFileID;
}
inline bool EntityID::has_fileid() const {
  return _internal_has_fileid();
}
inline void EntityID::set_has_fileid() {
  _impl_._oneof_case_[0] = kFileID;
}
inline ::proto::FileID* EntityID::release_fileid() {
  // @@protoc_insertion_point(field_release:proto.EntityID.fileID)
  if (_internal_has_fileid()) {
    clear_has_entity();
    ::proto::FileID* temp = _impl_.entity_.fileid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_.fileid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FileID& EntityID::_internal_fileid() const {
  return _internal_has_fileid()
      ? *_impl_.entity_.fileid_
      : reinterpret_cast< ::proto::FileID&>(::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& EntityID::fileid() const {
  // @@protoc_insertion_point(field_get:proto.EntityID.fileID)
  return _internal_fileid();
}
inline ::proto::FileID* EntityID::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.EntityID.fileID)
  if (_internal_has_fileid()) {
    clear_has_entity();
    ::proto::FileID* temp = _impl_.entity_.fileid_;
    _impl_.entity_.fileid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityID::unsafe_arena_set_allocated_fileid(::proto::FileID* fileid) {
  clear_entity();
  if (fileid) {
    set_has_fileid();
    _impl_.entity_.fileid_ = fileid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.EntityID.fileID)
}
inline ::proto::FileID* EntityID::_internal_mutable_fileid() {
  if (!_internal_has_fileid()) {
    clear_entity();
    set_has_fileid();
    _impl_.entity_.fileid_ = CreateMaybeMessage< ::proto::FileID >(GetArenaForAllocation());
  }
  return _impl_.entity_.fileid_;
}
inline ::proto::FileID* EntityID::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.EntityID.fileID)
  return _msg;
}

// .proto.ContractID contractID = 4;
inline bool EntityID::_internal_has_contractid() const {
  return entity_case() == kContractID;
}
inline bool EntityID::has_contractid() const {
  return _internal_has_contractid();
}
inline void EntityID::set_has_contractid() {
  _impl_._oneof_case_[0] = kContractID;
}
inline ::proto::ContractID* EntityID::release_contractid() {
  // @@protoc_insertion_point(field_release:proto.EntityID.contractID)
  if (_internal_has_contractid()) {
    clear_has_entity();
    ::proto::ContractID* temp = _impl_.entity_.contractid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_.contractid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractID& EntityID::_internal_contractid() const {
  return _internal_has_contractid()
      ? *_impl_.entity_.contractid_
      : reinterpret_cast< ::proto::ContractID&>(::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& EntityID::contractid() const {
  // @@protoc_insertion_point(field_get:proto.EntityID.contractID)
  return _internal_contractid();
}
inline ::proto::ContractID* EntityID::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.EntityID.contractID)
  if (_internal_has_contractid()) {
    clear_has_entity();
    ::proto::ContractID* temp = _impl_.entity_.contractid_;
    _impl_.entity_.contractid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityID::unsafe_arena_set_allocated_contractid(::proto::ContractID* contractid) {
  clear_entity();
  if (contractid) {
    set_has_contractid();
    _impl_.entity_.contractid_ = contractid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.EntityID.contractID)
}
inline ::proto::ContractID* EntityID::_internal_mutable_contractid() {
  if (!_internal_has_contractid()) {
    clear_entity();
    set_has_contractid();
    _impl_.entity_.contractid_ = CreateMaybeMessage< ::proto::ContractID >(GetArenaForAllocation());
  }
  return _impl_.entity_.contractid_;
}
inline ::proto::ContractID* EntityID::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.EntityID.contractID)
  return _msg;
}

inline bool EntityID::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void EntityID::clear_has_entity() {
  _impl_._oneof_case_[0] = ENTITY_NOT_SET;
}
inline EntityID::EntityCase EntityID::entity_case() const {
  return EntityID::EntityCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetByKeyResponse

// .proto.ResponseHeader header = 1;
inline bool GetByKeyResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetByKeyResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& GetByKeyResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& GetByKeyResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.GetByKeyResponse.header)
  return _internal_header();
}
inline void GetByKeyResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetByKeyResponse.header)
}
inline ::proto::ResponseHeader* GetByKeyResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* GetByKeyResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.GetByKeyResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* GetByKeyResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* GetByKeyResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.GetByKeyResponse.header)
  return _msg;
}
inline void GetByKeyResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.GetByKeyResponse.header)
}

// repeated .proto.EntityID entities = 2;
inline int GetByKeyResponse::_internal_entities_size() const {
  return _impl_.entities_.size();
}
inline int GetByKeyResponse::entities_size() const {
  return _internal_entities_size();
}
inline void GetByKeyResponse::clear_entities() {
  _impl_.entities_.Clear();
}
inline ::proto::EntityID* GetByKeyResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetByKeyResponse.entities)
  return _impl_.entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntityID >*
GetByKeyResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetByKeyResponse.entities)
  return &_impl_.entities_;
}
inline const ::proto::EntityID& GetByKeyResponse::_internal_entities(int index) const {
  return _impl_.entities_.Get(index);
}
inline const ::proto::EntityID& GetByKeyResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetByKeyResponse.entities)
  return _internal_entities(index);
}
inline ::proto::EntityID* GetByKeyResponse::_internal_add_entities() {
  return _impl_.entities_.Add();
}
inline ::proto::EntityID* GetByKeyResponse::add_entities() {
  ::proto::EntityID* _add = _internal_add_entities();
  // @@protoc_insertion_point(field_add:proto.GetByKeyResponse.entities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntityID >&
GetByKeyResponse::entities() const {
  // @@protoc_insertion_point(field_list:proto.GetByKeyResponse.entities)
  return _impl_.entities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_get_5fby_5fkey_2eproto

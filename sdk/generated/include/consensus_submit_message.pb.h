// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus_submit_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_consensus_5fsubmit_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_consensus_5fsubmit_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_consensus_5fsubmit_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_consensus_5fsubmit_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consensus_5fsubmit_5fmessage_2eproto;
namespace proto {
class ConsensusMessageChunkInfo;
struct ConsensusMessageChunkInfoDefaultTypeInternal;
extern ConsensusMessageChunkInfoDefaultTypeInternal _ConsensusMessageChunkInfo_default_instance_;
class ConsensusSubmitMessageTransactionBody;
struct ConsensusSubmitMessageTransactionBodyDefaultTypeInternal;
extern ConsensusSubmitMessageTransactionBodyDefaultTypeInternal _ConsensusSubmitMessageTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ConsensusMessageChunkInfo* Arena::CreateMaybeMessage<::proto::ConsensusMessageChunkInfo>(Arena*);
template<> ::proto::ConsensusSubmitMessageTransactionBody* Arena::CreateMaybeMessage<::proto::ConsensusSubmitMessageTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ConsensusMessageChunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ConsensusMessageChunkInfo) */ {
 public:
  inline ConsensusMessageChunkInfo() : ConsensusMessageChunkInfo(nullptr) {}
  ~ConsensusMessageChunkInfo() override;
  explicit PROTOBUF_CONSTEXPR ConsensusMessageChunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusMessageChunkInfo(const ConsensusMessageChunkInfo& from);
  ConsensusMessageChunkInfo(ConsensusMessageChunkInfo&& from) noexcept
    : ConsensusMessageChunkInfo() {
    *this = ::std::move(from);
  }

  inline ConsensusMessageChunkInfo& operator=(const ConsensusMessageChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusMessageChunkInfo& operator=(ConsensusMessageChunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusMessageChunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusMessageChunkInfo* internal_default_instance() {
    return reinterpret_cast<const ConsensusMessageChunkInfo*>(
               &_ConsensusMessageChunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsensusMessageChunkInfo& a, ConsensusMessageChunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusMessageChunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusMessageChunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusMessageChunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusMessageChunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusMessageChunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusMessageChunkInfo& from) {
    ConsensusMessageChunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusMessageChunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ConsensusMessageChunkInfo";
  }
  protected:
  explicit ConsensusMessageChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialTransactionIDFieldNumber = 1,
    kTotalFieldNumber = 2,
    kNumberFieldNumber = 3,
  };
  // .proto.TransactionID initialTransactionID = 1;
  bool has_initialtransactionid() const;
  private:
  bool _internal_has_initialtransactionid() const;
  public:
  void clear_initialtransactionid();
  const ::proto::TransactionID& initialtransactionid() const;
  PROTOBUF_NODISCARD ::proto::TransactionID* release_initialtransactionid();
  ::proto::TransactionID* mutable_initialtransactionid();
  void set_allocated_initialtransactionid(::proto::TransactionID* initialtransactionid);
  private:
  const ::proto::TransactionID& _internal_initialtransactionid() const;
  ::proto::TransactionID* _internal_mutable_initialtransactionid();
  public:
  void unsafe_arena_set_allocated_initialtransactionid(
      ::proto::TransactionID* initialtransactionid);
  ::proto::TransactionID* unsafe_arena_release_initialtransactionid();

  // int32 total = 2;
  void clear_total();
  int32_t total() const;
  void set_total(int32_t value);
  private:
  int32_t _internal_total() const;
  void _internal_set_total(int32_t value);
  public:

  // int32 number = 3;
  void clear_number();
  int32_t number() const;
  void set_number(int32_t value);
  private:
  int32_t _internal_number() const;
  void _internal_set_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ConsensusMessageChunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TransactionID* initialtransactionid_;
    int32_t total_;
    int32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_consensus_5fsubmit_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ConsensusSubmitMessageTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ConsensusSubmitMessageTransactionBody) */ {
 public:
  inline ConsensusSubmitMessageTransactionBody() : ConsensusSubmitMessageTransactionBody(nullptr) {}
  ~ConsensusSubmitMessageTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR ConsensusSubmitMessageTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusSubmitMessageTransactionBody(const ConsensusSubmitMessageTransactionBody& from);
  ConsensusSubmitMessageTransactionBody(ConsensusSubmitMessageTransactionBody&& from) noexcept
    : ConsensusSubmitMessageTransactionBody() {
    *this = ::std::move(from);
  }

  inline ConsensusSubmitMessageTransactionBody& operator=(const ConsensusSubmitMessageTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusSubmitMessageTransactionBody& operator=(ConsensusSubmitMessageTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusSubmitMessageTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusSubmitMessageTransactionBody* internal_default_instance() {
    return reinterpret_cast<const ConsensusSubmitMessageTransactionBody*>(
               &_ConsensusSubmitMessageTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConsensusSubmitMessageTransactionBody& a, ConsensusSubmitMessageTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusSubmitMessageTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusSubmitMessageTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusSubmitMessageTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusSubmitMessageTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusSubmitMessageTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusSubmitMessageTransactionBody& from) {
    ConsensusSubmitMessageTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusSubmitMessageTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ConsensusSubmitMessageTransactionBody";
  }
  protected:
  explicit ConsensusSubmitMessageTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTopicIDFieldNumber = 1,
    kChunkInfoFieldNumber = 3,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .proto.TopicID topicID = 1;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const ::proto::TopicID& topicid() const;
  PROTOBUF_NODISCARD ::proto::TopicID* release_topicid();
  ::proto::TopicID* mutable_topicid();
  void set_allocated_topicid(::proto::TopicID* topicid);
  private:
  const ::proto::TopicID& _internal_topicid() const;
  ::proto::TopicID* _internal_mutable_topicid();
  public:
  void unsafe_arena_set_allocated_topicid(
      ::proto::TopicID* topicid);
  ::proto::TopicID* unsafe_arena_release_topicid();

  // .proto.ConsensusMessageChunkInfo chunkInfo = 3;
  bool has_chunkinfo() const;
  private:
  bool _internal_has_chunkinfo() const;
  public:
  void clear_chunkinfo();
  const ::proto::ConsensusMessageChunkInfo& chunkinfo() const;
  PROTOBUF_NODISCARD ::proto::ConsensusMessageChunkInfo* release_chunkinfo();
  ::proto::ConsensusMessageChunkInfo* mutable_chunkinfo();
  void set_allocated_chunkinfo(::proto::ConsensusMessageChunkInfo* chunkinfo);
  private:
  const ::proto::ConsensusMessageChunkInfo& _internal_chunkinfo() const;
  ::proto::ConsensusMessageChunkInfo* _internal_mutable_chunkinfo();
  public:
  void unsafe_arena_set_allocated_chunkinfo(
      ::proto::ConsensusMessageChunkInfo* chunkinfo);
  ::proto::ConsensusMessageChunkInfo* unsafe_arena_release_chunkinfo();

  // @@protoc_insertion_point(class_scope:proto.ConsensusSubmitMessageTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::proto::TopicID* topicid_;
    ::proto::ConsensusMessageChunkInfo* chunkinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_consensus_5fsubmit_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsensusMessageChunkInfo

// .proto.TransactionID initialTransactionID = 1;
inline bool ConsensusMessageChunkInfo::_internal_has_initialtransactionid() const {
  return this != internal_default_instance() && _impl_.initialtransactionid_ != nullptr;
}
inline bool ConsensusMessageChunkInfo::has_initialtransactionid() const {
  return _internal_has_initialtransactionid();
}
inline const ::proto::TransactionID& ConsensusMessageChunkInfo::_internal_initialtransactionid() const {
  const ::proto::TransactionID* p = _impl_.initialtransactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionID&>(
      ::proto::_TransactionID_default_instance_);
}
inline const ::proto::TransactionID& ConsensusMessageChunkInfo::initialtransactionid() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusMessageChunkInfo.initialTransactionID)
  return _internal_initialtransactionid();
}
inline void ConsensusMessageChunkInfo::unsafe_arena_set_allocated_initialtransactionid(
    ::proto::TransactionID* initialtransactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initialtransactionid_);
  }
  _impl_.initialtransactionid_ = initialtransactionid;
  if (initialtransactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusMessageChunkInfo.initialTransactionID)
}
inline ::proto::TransactionID* ConsensusMessageChunkInfo::release_initialtransactionid() {
  
  ::proto::TransactionID* temp = _impl_.initialtransactionid_;
  _impl_.initialtransactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionID* ConsensusMessageChunkInfo::unsafe_arena_release_initialtransactionid() {
  // @@protoc_insertion_point(field_release:proto.ConsensusMessageChunkInfo.initialTransactionID)
  
  ::proto::TransactionID* temp = _impl_.initialtransactionid_;
  _impl_.initialtransactionid_ = nullptr;
  return temp;
}
inline ::proto::TransactionID* ConsensusMessageChunkInfo::_internal_mutable_initialtransactionid() {
  
  if (_impl_.initialtransactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionID>(GetArenaForAllocation());
    _impl_.initialtransactionid_ = p;
  }
  return _impl_.initialtransactionid_;
}
inline ::proto::TransactionID* ConsensusMessageChunkInfo::mutable_initialtransactionid() {
  ::proto::TransactionID* _msg = _internal_mutable_initialtransactionid();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusMessageChunkInfo.initialTransactionID)
  return _msg;
}
inline void ConsensusMessageChunkInfo::set_allocated_initialtransactionid(::proto::TransactionID* initialtransactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initialtransactionid_);
  }
  if (initialtransactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialtransactionid));
    if (message_arena != submessage_arena) {
      initialtransactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialtransactionid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.initialtransactionid_ = initialtransactionid;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusMessageChunkInfo.initialTransactionID)
}

// int32 total = 2;
inline void ConsensusMessageChunkInfo::clear_total() {
  _impl_.total_ = 0;
}
inline int32_t ConsensusMessageChunkInfo::_internal_total() const {
  return _impl_.total_;
}
inline int32_t ConsensusMessageChunkInfo::total() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusMessageChunkInfo.total)
  return _internal_total();
}
inline void ConsensusMessageChunkInfo::_internal_set_total(int32_t value) {
  
  _impl_.total_ = value;
}
inline void ConsensusMessageChunkInfo::set_total(int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:proto.ConsensusMessageChunkInfo.total)
}

// int32 number = 3;
inline void ConsensusMessageChunkInfo::clear_number() {
  _impl_.number_ = 0;
}
inline int32_t ConsensusMessageChunkInfo::_internal_number() const {
  return _impl_.number_;
}
inline int32_t ConsensusMessageChunkInfo::number() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusMessageChunkInfo.number)
  return _internal_number();
}
inline void ConsensusMessageChunkInfo::_internal_set_number(int32_t value) {
  
  _impl_.number_ = value;
}
inline void ConsensusMessageChunkInfo::set_number(int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:proto.ConsensusMessageChunkInfo.number)
}

// -------------------------------------------------------------------

// ConsensusSubmitMessageTransactionBody

// .proto.TopicID topicID = 1;
inline bool ConsensusSubmitMessageTransactionBody::_internal_has_topicid() const {
  return this != internal_default_instance() && _impl_.topicid_ != nullptr;
}
inline bool ConsensusSubmitMessageTransactionBody::has_topicid() const {
  return _internal_has_topicid();
}
inline const ::proto::TopicID& ConsensusSubmitMessageTransactionBody::_internal_topicid() const {
  const ::proto::TopicID* p = _impl_.topicid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TopicID&>(
      ::proto::_TopicID_default_instance_);
}
inline const ::proto::TopicID& ConsensusSubmitMessageTransactionBody::topicid() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusSubmitMessageTransactionBody.topicID)
  return _internal_topicid();
}
inline void ConsensusSubmitMessageTransactionBody::unsafe_arena_set_allocated_topicid(
    ::proto::TopicID* topicid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topicid_);
  }
  _impl_.topicid_ = topicid;
  if (topicid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusSubmitMessageTransactionBody.topicID)
}
inline ::proto::TopicID* ConsensusSubmitMessageTransactionBody::release_topicid() {
  
  ::proto::TopicID* temp = _impl_.topicid_;
  _impl_.topicid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TopicID* ConsensusSubmitMessageTransactionBody::unsafe_arena_release_topicid() {
  // @@protoc_insertion_point(field_release:proto.ConsensusSubmitMessageTransactionBody.topicID)
  
  ::proto::TopicID* temp = _impl_.topicid_;
  _impl_.topicid_ = nullptr;
  return temp;
}
inline ::proto::TopicID* ConsensusSubmitMessageTransactionBody::_internal_mutable_topicid() {
  
  if (_impl_.topicid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TopicID>(GetArenaForAllocation());
    _impl_.topicid_ = p;
  }
  return _impl_.topicid_;
}
inline ::proto::TopicID* ConsensusSubmitMessageTransactionBody::mutable_topicid() {
  ::proto::TopicID* _msg = _internal_mutable_topicid();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusSubmitMessageTransactionBody.topicID)
  return _msg;
}
inline void ConsensusSubmitMessageTransactionBody::set_allocated_topicid(::proto::TopicID* topicid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topicid_);
  }
  if (topicid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topicid));
    if (message_arena != submessage_arena) {
      topicid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topicid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.topicid_ = topicid;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusSubmitMessageTransactionBody.topicID)
}

// bytes message = 2;
inline void ConsensusSubmitMessageTransactionBody::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ConsensusSubmitMessageTransactionBody::message() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusSubmitMessageTransactionBody.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusSubmitMessageTransactionBody::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ConsensusSubmitMessageTransactionBody.message)
}
inline std::string* ConsensusSubmitMessageTransactionBody::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusSubmitMessageTransactionBody.message)
  return _s;
}
inline const std::string& ConsensusSubmitMessageTransactionBody::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ConsensusSubmitMessageTransactionBody::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusSubmitMessageTransactionBody::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ConsensusSubmitMessageTransactionBody::release_message() {
  // @@protoc_insertion_point(field_release:proto.ConsensusSubmitMessageTransactionBody.message)
  return _impl_.message_.Release();
}
inline void ConsensusSubmitMessageTransactionBody::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusSubmitMessageTransactionBody.message)
}

// .proto.ConsensusMessageChunkInfo chunkInfo = 3;
inline bool ConsensusSubmitMessageTransactionBody::_internal_has_chunkinfo() const {
  return this != internal_default_instance() && _impl_.chunkinfo_ != nullptr;
}
inline bool ConsensusSubmitMessageTransactionBody::has_chunkinfo() const {
  return _internal_has_chunkinfo();
}
inline void ConsensusSubmitMessageTransactionBody::clear_chunkinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.chunkinfo_ != nullptr) {
    delete _impl_.chunkinfo_;
  }
  _impl_.chunkinfo_ = nullptr;
}
inline const ::proto::ConsensusMessageChunkInfo& ConsensusSubmitMessageTransactionBody::_internal_chunkinfo() const {
  const ::proto::ConsensusMessageChunkInfo* p = _impl_.chunkinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ConsensusMessageChunkInfo&>(
      ::proto::_ConsensusMessageChunkInfo_default_instance_);
}
inline const ::proto::ConsensusMessageChunkInfo& ConsensusSubmitMessageTransactionBody::chunkinfo() const {
  // @@protoc_insertion_point(field_get:proto.ConsensusSubmitMessageTransactionBody.chunkInfo)
  return _internal_chunkinfo();
}
inline void ConsensusSubmitMessageTransactionBody::unsafe_arena_set_allocated_chunkinfo(
    ::proto::ConsensusMessageChunkInfo* chunkinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chunkinfo_);
  }
  _impl_.chunkinfo_ = chunkinfo;
  if (chunkinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ConsensusSubmitMessageTransactionBody.chunkInfo)
}
inline ::proto::ConsensusMessageChunkInfo* ConsensusSubmitMessageTransactionBody::release_chunkinfo() {
  
  ::proto::ConsensusMessageChunkInfo* temp = _impl_.chunkinfo_;
  _impl_.chunkinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ConsensusMessageChunkInfo* ConsensusSubmitMessageTransactionBody::unsafe_arena_release_chunkinfo() {
  // @@protoc_insertion_point(field_release:proto.ConsensusSubmitMessageTransactionBody.chunkInfo)
  
  ::proto::ConsensusMessageChunkInfo* temp = _impl_.chunkinfo_;
  _impl_.chunkinfo_ = nullptr;
  return temp;
}
inline ::proto::ConsensusMessageChunkInfo* ConsensusSubmitMessageTransactionBody::_internal_mutable_chunkinfo() {
  
  if (_impl_.chunkinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ConsensusMessageChunkInfo>(GetArenaForAllocation());
    _impl_.chunkinfo_ = p;
  }
  return _impl_.chunkinfo_;
}
inline ::proto::ConsensusMessageChunkInfo* ConsensusSubmitMessageTransactionBody::mutable_chunkinfo() {
  ::proto::ConsensusMessageChunkInfo* _msg = _internal_mutable_chunkinfo();
  // @@protoc_insertion_point(field_mutable:proto.ConsensusSubmitMessageTransactionBody.chunkInfo)
  return _msg;
}
inline void ConsensusSubmitMessageTransactionBody::set_allocated_chunkinfo(::proto::ConsensusMessageChunkInfo* chunkinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chunkinfo_;
  }
  if (chunkinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunkinfo);
    if (message_arena != submessage_arena) {
      chunkinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunkinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chunkinfo_ = chunkinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ConsensusSubmitMessageTransactionBody.chunkInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_consensus_5fsubmit_5fmessage_2eproto

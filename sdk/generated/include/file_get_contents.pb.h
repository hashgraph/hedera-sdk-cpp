// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_get_contents.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fget_5fcontents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fget_5fcontents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fget_5fcontents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fget_5fcontents_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fget_5fcontents_2eproto;
namespace proto {
class FileGetContentsQuery;
struct FileGetContentsQueryDefaultTypeInternal;
extern FileGetContentsQueryDefaultTypeInternal _FileGetContentsQuery_default_instance_;
class FileGetContentsResponse;
struct FileGetContentsResponseDefaultTypeInternal;
extern FileGetContentsResponseDefaultTypeInternal _FileGetContentsResponse_default_instance_;
class FileGetContentsResponse_FileContents;
struct FileGetContentsResponse_FileContentsDefaultTypeInternal;
extern FileGetContentsResponse_FileContentsDefaultTypeInternal _FileGetContentsResponse_FileContents_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::FileGetContentsQuery* Arena::CreateMaybeMessage<::proto::FileGetContentsQuery>(Arena*);
template<> ::proto::FileGetContentsResponse* Arena::CreateMaybeMessage<::proto::FileGetContentsResponse>(Arena*);
template<> ::proto::FileGetContentsResponse_FileContents* Arena::CreateMaybeMessage<::proto::FileGetContentsResponse_FileContents>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class FileGetContentsQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileGetContentsQuery) */ {
 public:
  inline FileGetContentsQuery() : FileGetContentsQuery(nullptr) {}
  ~FileGetContentsQuery() override;
  explicit PROTOBUF_CONSTEXPR FileGetContentsQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileGetContentsQuery(const FileGetContentsQuery& from);
  FileGetContentsQuery(FileGetContentsQuery&& from) noexcept
    : FileGetContentsQuery() {
    *this = ::std::move(from);
  }

  inline FileGetContentsQuery& operator=(const FileGetContentsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileGetContentsQuery& operator=(FileGetContentsQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileGetContentsQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileGetContentsQuery* internal_default_instance() {
    return reinterpret_cast<const FileGetContentsQuery*>(
               &_FileGetContentsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileGetContentsQuery& a, FileGetContentsQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(FileGetContentsQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileGetContentsQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileGetContentsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileGetContentsQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileGetContentsQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileGetContentsQuery& from) {
    FileGetContentsQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileGetContentsQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileGetContentsQuery";
  }
  protected:
  explicit FileGetContentsQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFileIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.FileID fileID = 2;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // @@protoc_insertion_point(class_scope:proto.FileGetContentsQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::FileID* fileid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fget_5fcontents_2eproto;
};
// -------------------------------------------------------------------

class FileGetContentsResponse_FileContents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileGetContentsResponse.FileContents) */ {
 public:
  inline FileGetContentsResponse_FileContents() : FileGetContentsResponse_FileContents(nullptr) {}
  ~FileGetContentsResponse_FileContents() override;
  explicit PROTOBUF_CONSTEXPR FileGetContentsResponse_FileContents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileGetContentsResponse_FileContents(const FileGetContentsResponse_FileContents& from);
  FileGetContentsResponse_FileContents(FileGetContentsResponse_FileContents&& from) noexcept
    : FileGetContentsResponse_FileContents() {
    *this = ::std::move(from);
  }

  inline FileGetContentsResponse_FileContents& operator=(const FileGetContentsResponse_FileContents& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileGetContentsResponse_FileContents& operator=(FileGetContentsResponse_FileContents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileGetContentsResponse_FileContents& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileGetContentsResponse_FileContents* internal_default_instance() {
    return reinterpret_cast<const FileGetContentsResponse_FileContents*>(
               &_FileGetContentsResponse_FileContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileGetContentsResponse_FileContents& a, FileGetContentsResponse_FileContents& b) {
    a.Swap(&b);
  }
  inline void Swap(FileGetContentsResponse_FileContents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileGetContentsResponse_FileContents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileGetContentsResponse_FileContents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileGetContentsResponse_FileContents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileGetContentsResponse_FileContents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileGetContentsResponse_FileContents& from) {
    FileGetContentsResponse_FileContents::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileGetContentsResponse_FileContents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileGetContentsResponse.FileContents";
  }
  protected:
  explicit FileGetContentsResponse_FileContents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kFileIDFieldNumber = 1,
  };
  // bytes contents = 2;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // .proto.FileID fileID = 1;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // @@protoc_insertion_point(class_scope:proto.FileGetContentsResponse.FileContents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
    ::proto::FileID* fileid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fget_5fcontents_2eproto;
};
// -------------------------------------------------------------------

class FileGetContentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileGetContentsResponse) */ {
 public:
  inline FileGetContentsResponse() : FileGetContentsResponse(nullptr) {}
  ~FileGetContentsResponse() override;
  explicit PROTOBUF_CONSTEXPR FileGetContentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileGetContentsResponse(const FileGetContentsResponse& from);
  FileGetContentsResponse(FileGetContentsResponse&& from) noexcept
    : FileGetContentsResponse() {
    *this = ::std::move(from);
  }

  inline FileGetContentsResponse& operator=(const FileGetContentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileGetContentsResponse& operator=(FileGetContentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileGetContentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileGetContentsResponse* internal_default_instance() {
    return reinterpret_cast<const FileGetContentsResponse*>(
               &_FileGetContentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileGetContentsResponse& a, FileGetContentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileGetContentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileGetContentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileGetContentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileGetContentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileGetContentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileGetContentsResponse& from) {
    FileGetContentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileGetContentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileGetContentsResponse";
  }
  protected:
  explicit FileGetContentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FileGetContentsResponse_FileContents FileContents;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFileContentsFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.FileGetContentsResponse.FileContents fileContents = 2;
  bool has_filecontents() const;
  private:
  bool _internal_has_filecontents() const;
  public:
  void clear_filecontents();
  const ::proto::FileGetContentsResponse_FileContents& filecontents() const;
  PROTOBUF_NODISCARD ::proto::FileGetContentsResponse_FileContents* release_filecontents();
  ::proto::FileGetContentsResponse_FileContents* mutable_filecontents();
  void set_allocated_filecontents(::proto::FileGetContentsResponse_FileContents* filecontents);
  private:
  const ::proto::FileGetContentsResponse_FileContents& _internal_filecontents() const;
  ::proto::FileGetContentsResponse_FileContents* _internal_mutable_filecontents();
  public:
  void unsafe_arena_set_allocated_filecontents(
      ::proto::FileGetContentsResponse_FileContents* filecontents);
  ::proto::FileGetContentsResponse_FileContents* unsafe_arena_release_filecontents();

  // @@protoc_insertion_point(class_scope:proto.FileGetContentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::FileGetContentsResponse_FileContents* filecontents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fget_5fcontents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileGetContentsQuery

// .proto.QueryHeader header = 1;
inline bool FileGetContentsQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool FileGetContentsQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& FileGetContentsQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& FileGetContentsQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.FileGetContentsQuery.header)
  return _internal_header();
}
inline void FileGetContentsQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetContentsQuery.header)
}
inline ::proto::QueryHeader* FileGetContentsQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* FileGetContentsQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.FileGetContentsQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* FileGetContentsQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* FileGetContentsQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.FileGetContentsQuery.header)
  return _msg;
}
inline void FileGetContentsQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetContentsQuery.header)
}

// .proto.FileID fileID = 2;
inline bool FileGetContentsQuery::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool FileGetContentsQuery::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& FileGetContentsQuery::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& FileGetContentsQuery::fileid() const {
  // @@protoc_insertion_point(field_get:proto.FileGetContentsQuery.fileID)
  return _internal_fileid();
}
inline void FileGetContentsQuery::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetContentsQuery.fileID)
}
inline ::proto::FileID* FileGetContentsQuery::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* FileGetContentsQuery::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.FileGetContentsQuery.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* FileGetContentsQuery::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* FileGetContentsQuery::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.FileGetContentsQuery.fileID)
  return _msg;
}
inline void FileGetContentsQuery::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetContentsQuery.fileID)
}

// -------------------------------------------------------------------

// FileGetContentsResponse_FileContents

// .proto.FileID fileID = 1;
inline bool FileGetContentsResponse_FileContents::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool FileGetContentsResponse_FileContents::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& FileGetContentsResponse_FileContents::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& FileGetContentsResponse_FileContents::fileid() const {
  // @@protoc_insertion_point(field_get:proto.FileGetContentsResponse.FileContents.fileID)
  return _internal_fileid();
}
inline void FileGetContentsResponse_FileContents::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetContentsResponse.FileContents.fileID)
}
inline ::proto::FileID* FileGetContentsResponse_FileContents::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* FileGetContentsResponse_FileContents::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.FileGetContentsResponse.FileContents.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* FileGetContentsResponse_FileContents::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* FileGetContentsResponse_FileContents::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.FileGetContentsResponse.FileContents.fileID)
  return _msg;
}
inline void FileGetContentsResponse_FileContents::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetContentsResponse.FileContents.fileID)
}

// bytes contents = 2;
inline void FileGetContentsResponse_FileContents::clear_contents() {
  _impl_.contents_.ClearToEmpty();
}
inline const std::string& FileGetContentsResponse_FileContents::contents() const {
  // @@protoc_insertion_point(field_get:proto.FileGetContentsResponse.FileContents.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileGetContentsResponse_FileContents::set_contents(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FileGetContentsResponse.FileContents.contents)
}
inline std::string* FileGetContentsResponse_FileContents::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:proto.FileGetContentsResponse.FileContents.contents)
  return _s;
}
inline const std::string& FileGetContentsResponse_FileContents::_internal_contents() const {
  return _impl_.contents_.Get();
}
inline void FileGetContentsResponse_FileContents::_internal_set_contents(const std::string& value) {
  
  _impl_.contents_.Set(value, GetArenaForAllocation());
}
inline std::string* FileGetContentsResponse_FileContents::_internal_mutable_contents() {
  
  return _impl_.contents_.Mutable(GetArenaForAllocation());
}
inline std::string* FileGetContentsResponse_FileContents::release_contents() {
  // @@protoc_insertion_point(field_release:proto.FileGetContentsResponse.FileContents.contents)
  return _impl_.contents_.Release();
}
inline void FileGetContentsResponse_FileContents::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  _impl_.contents_.SetAllocated(contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetContentsResponse.FileContents.contents)
}

// -------------------------------------------------------------------

// FileGetContentsResponse

// .proto.ResponseHeader header = 1;
inline bool FileGetContentsResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool FileGetContentsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& FileGetContentsResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& FileGetContentsResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.FileGetContentsResponse.header)
  return _internal_header();
}
inline void FileGetContentsResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetContentsResponse.header)
}
inline ::proto::ResponseHeader* FileGetContentsResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* FileGetContentsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.FileGetContentsResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* FileGetContentsResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* FileGetContentsResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.FileGetContentsResponse.header)
  return _msg;
}
inline void FileGetContentsResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetContentsResponse.header)
}

// .proto.FileGetContentsResponse.FileContents fileContents = 2;
inline bool FileGetContentsResponse::_internal_has_filecontents() const {
  return this != internal_default_instance() && _impl_.filecontents_ != nullptr;
}
inline bool FileGetContentsResponse::has_filecontents() const {
  return _internal_has_filecontents();
}
inline void FileGetContentsResponse::clear_filecontents() {
  if (GetArenaForAllocation() == nullptr && _impl_.filecontents_ != nullptr) {
    delete _impl_.filecontents_;
  }
  _impl_.filecontents_ = nullptr;
}
inline const ::proto::FileGetContentsResponse_FileContents& FileGetContentsResponse::_internal_filecontents() const {
  const ::proto::FileGetContentsResponse_FileContents* p = _impl_.filecontents_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileGetContentsResponse_FileContents&>(
      ::proto::_FileGetContentsResponse_FileContents_default_instance_);
}
inline const ::proto::FileGetContentsResponse_FileContents& FileGetContentsResponse::filecontents() const {
  // @@protoc_insertion_point(field_get:proto.FileGetContentsResponse.fileContents)
  return _internal_filecontents();
}
inline void FileGetContentsResponse::unsafe_arena_set_allocated_filecontents(
    ::proto::FileGetContentsResponse_FileContents* filecontents) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filecontents_);
  }
  _impl_.filecontents_ = filecontents;
  if (filecontents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileGetContentsResponse.fileContents)
}
inline ::proto::FileGetContentsResponse_FileContents* FileGetContentsResponse::release_filecontents() {
  
  ::proto::FileGetContentsResponse_FileContents* temp = _impl_.filecontents_;
  _impl_.filecontents_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileGetContentsResponse_FileContents* FileGetContentsResponse::unsafe_arena_release_filecontents() {
  // @@protoc_insertion_point(field_release:proto.FileGetContentsResponse.fileContents)
  
  ::proto::FileGetContentsResponse_FileContents* temp = _impl_.filecontents_;
  _impl_.filecontents_ = nullptr;
  return temp;
}
inline ::proto::FileGetContentsResponse_FileContents* FileGetContentsResponse::_internal_mutable_filecontents() {
  
  if (_impl_.filecontents_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileGetContentsResponse_FileContents>(GetArenaForAllocation());
    _impl_.filecontents_ = p;
  }
  return _impl_.filecontents_;
}
inline ::proto::FileGetContentsResponse_FileContents* FileGetContentsResponse::mutable_filecontents() {
  ::proto::FileGetContentsResponse_FileContents* _msg = _internal_mutable_filecontents();
  // @@protoc_insertion_point(field_mutable:proto.FileGetContentsResponse.fileContents)
  return _msg;
}
inline void FileGetContentsResponse::set_allocated_filecontents(::proto::FileGetContentsResponse_FileContents* filecontents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filecontents_;
  }
  if (filecontents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filecontents);
    if (message_arena != submessage_arena) {
      filecontents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filecontents, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.filecontents_ = filecontents;
  // @@protoc_insertion_point(field_set_allocated:proto.FileGetContentsResponse.fileContents)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fget_5fcontents_2eproto

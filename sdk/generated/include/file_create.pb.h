// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_create.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fcreate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fcreate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fcreate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fcreate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fcreate_2eproto;
namespace proto {
class FileCreateTransactionBody;
struct FileCreateTransactionBodyDefaultTypeInternal;
extern FileCreateTransactionBodyDefaultTypeInternal _FileCreateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::FileCreateTransactionBody* Arena::CreateMaybeMessage<::proto::FileCreateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class FileCreateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileCreateTransactionBody) */ {
 public:
  inline FileCreateTransactionBody() : FileCreateTransactionBody(nullptr) {}
  ~FileCreateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR FileCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileCreateTransactionBody(const FileCreateTransactionBody& from);
  FileCreateTransactionBody(FileCreateTransactionBody&& from) noexcept
    : FileCreateTransactionBody() {
    *this = ::std::move(from);
  }

  inline FileCreateTransactionBody& operator=(const FileCreateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileCreateTransactionBody& operator=(FileCreateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileCreateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileCreateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const FileCreateTransactionBody*>(
               &_FileCreateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileCreateTransactionBody& a, FileCreateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(FileCreateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileCreateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileCreateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileCreateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileCreateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileCreateTransactionBody& from) {
    FileCreateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileCreateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileCreateTransactionBody";
  }
  protected:
  explicit FileCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 4,
    kMemoFieldNumber = 8,
    kExpirationTimeFieldNumber = 2,
    kKeysFieldNumber = 3,
    kShardIDFieldNumber = 5,
    kRealmIDFieldNumber = 6,
    kNewRealmAdminKeyFieldNumber = 7,
  };
  // bytes contents = 4;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // string memo = 8;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .proto.Timestamp expirationTime = 2;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.KeyList keys = 3;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::proto::KeyList& keys() const;
  PROTOBUF_NODISCARD ::proto::KeyList* release_keys();
  ::proto::KeyList* mutable_keys();
  void set_allocated_keys(::proto::KeyList* keys);
  private:
  const ::proto::KeyList& _internal_keys() const;
  ::proto::KeyList* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::proto::KeyList* keys);
  ::proto::KeyList* unsafe_arena_release_keys();

  // .proto.ShardID shardID = 5;
  bool has_shardid() const;
  private:
  bool _internal_has_shardid() const;
  public:
  void clear_shardid();
  const ::proto::ShardID& shardid() const;
  PROTOBUF_NODISCARD ::proto::ShardID* release_shardid();
  ::proto::ShardID* mutable_shardid();
  void set_allocated_shardid(::proto::ShardID* shardid);
  private:
  const ::proto::ShardID& _internal_shardid() const;
  ::proto::ShardID* _internal_mutable_shardid();
  public:
  void unsafe_arena_set_allocated_shardid(
      ::proto::ShardID* shardid);
  ::proto::ShardID* unsafe_arena_release_shardid();

  // .proto.RealmID realmID = 6;
  bool has_realmid() const;
  private:
  bool _internal_has_realmid() const;
  public:
  void clear_realmid();
  const ::proto::RealmID& realmid() const;
  PROTOBUF_NODISCARD ::proto::RealmID* release_realmid();
  ::proto::RealmID* mutable_realmid();
  void set_allocated_realmid(::proto::RealmID* realmid);
  private:
  const ::proto::RealmID& _internal_realmid() const;
  ::proto::RealmID* _internal_mutable_realmid();
  public:
  void unsafe_arena_set_allocated_realmid(
      ::proto::RealmID* realmid);
  ::proto::RealmID* unsafe_arena_release_realmid();

  // .proto.Key newRealmAdminKey = 7;
  bool has_newrealmadminkey() const;
  private:
  bool _internal_has_newrealmadminkey() const;
  public:
  void clear_newrealmadminkey();
  const ::proto::Key& newrealmadminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_newrealmadminkey();
  ::proto::Key* mutable_newrealmadminkey();
  void set_allocated_newrealmadminkey(::proto::Key* newrealmadminkey);
  private:
  const ::proto::Key& _internal_newrealmadminkey() const;
  ::proto::Key* _internal_mutable_newrealmadminkey();
  public:
  void unsafe_arena_set_allocated_newrealmadminkey(
      ::proto::Key* newrealmadminkey);
  ::proto::Key* unsafe_arena_release_newrealmadminkey();

  // @@protoc_insertion_point(class_scope:proto.FileCreateTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::proto::Timestamp* expirationtime_;
    ::proto::KeyList* keys_;
    ::proto::ShardID* shardid_;
    ::proto::RealmID* realmid_;
    ::proto::Key* newrealmadminkey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fcreate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileCreateTransactionBody

// .proto.Timestamp expirationTime = 2;
inline bool FileCreateTransactionBody::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool FileCreateTransactionBody::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& FileCreateTransactionBody::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& FileCreateTransactionBody::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.expirationTime)
  return _internal_expirationtime();
}
inline void FileCreateTransactionBody::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileCreateTransactionBody.expirationTime)
}
inline ::proto::Timestamp* FileCreateTransactionBody::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* FileCreateTransactionBody::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* FileCreateTransactionBody::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* FileCreateTransactionBody::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.expirationTime)
  return _msg;
}
inline void FileCreateTransactionBody::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.expirationTime)
}

// .proto.KeyList keys = 3;
inline bool FileCreateTransactionBody::_internal_has_keys() const {
  return this != internal_default_instance() && _impl_.keys_ != nullptr;
}
inline bool FileCreateTransactionBody::has_keys() const {
  return _internal_has_keys();
}
inline const ::proto::KeyList& FileCreateTransactionBody::_internal_keys() const {
  const ::proto::KeyList* p = _impl_.keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::KeyList&>(
      ::proto::_KeyList_default_instance_);
}
inline const ::proto::KeyList& FileCreateTransactionBody::keys() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.keys)
  return _internal_keys();
}
inline void FileCreateTransactionBody::unsafe_arena_set_allocated_keys(
    ::proto::KeyList* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  _impl_.keys_ = keys;
  if (keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileCreateTransactionBody.keys)
}
inline ::proto::KeyList* FileCreateTransactionBody::release_keys() {
  
  ::proto::KeyList* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::KeyList* FileCreateTransactionBody::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.keys)
  
  ::proto::KeyList* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
  return temp;
}
inline ::proto::KeyList* FileCreateTransactionBody::_internal_mutable_keys() {
  
  if (_impl_.keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::KeyList>(GetArenaForAllocation());
    _impl_.keys_ = p;
  }
  return _impl_.keys_;
}
inline ::proto::KeyList* FileCreateTransactionBody::mutable_keys() {
  ::proto::KeyList* _msg = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.keys)
  return _msg;
}
inline void FileCreateTransactionBody::set_allocated_keys(::proto::KeyList* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys));
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.keys)
}

// bytes contents = 4;
inline void FileCreateTransactionBody::clear_contents() {
  _impl_.contents_.ClearToEmpty();
}
inline const std::string& FileCreateTransactionBody::contents() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileCreateTransactionBody::set_contents(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FileCreateTransactionBody.contents)
}
inline std::string* FileCreateTransactionBody::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.contents)
  return _s;
}
inline const std::string& FileCreateTransactionBody::_internal_contents() const {
  return _impl_.contents_.Get();
}
inline void FileCreateTransactionBody::_internal_set_contents(const std::string& value) {
  
  _impl_.contents_.Set(value, GetArenaForAllocation());
}
inline std::string* FileCreateTransactionBody::_internal_mutable_contents() {
  
  return _impl_.contents_.Mutable(GetArenaForAllocation());
}
inline std::string* FileCreateTransactionBody::release_contents() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.contents)
  return _impl_.contents_.Release();
}
inline void FileCreateTransactionBody::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  _impl_.contents_.SetAllocated(contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.contents)
}

// .proto.ShardID shardID = 5;
inline bool FileCreateTransactionBody::_internal_has_shardid() const {
  return this != internal_default_instance() && _impl_.shardid_ != nullptr;
}
inline bool FileCreateTransactionBody::has_shardid() const {
  return _internal_has_shardid();
}
inline const ::proto::ShardID& FileCreateTransactionBody::_internal_shardid() const {
  const ::proto::ShardID* p = _impl_.shardid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ShardID&>(
      ::proto::_ShardID_default_instance_);
}
inline const ::proto::ShardID& FileCreateTransactionBody::shardid() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.shardID)
  return _internal_shardid();
}
inline void FileCreateTransactionBody::unsafe_arena_set_allocated_shardid(
    ::proto::ShardID* shardid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shardid_);
  }
  _impl_.shardid_ = shardid;
  if (shardid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileCreateTransactionBody.shardID)
}
inline ::proto::ShardID* FileCreateTransactionBody::release_shardid() {
  
  ::proto::ShardID* temp = _impl_.shardid_;
  _impl_.shardid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ShardID* FileCreateTransactionBody::unsafe_arena_release_shardid() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.shardID)
  
  ::proto::ShardID* temp = _impl_.shardid_;
  _impl_.shardid_ = nullptr;
  return temp;
}
inline ::proto::ShardID* FileCreateTransactionBody::_internal_mutable_shardid() {
  
  if (_impl_.shardid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ShardID>(GetArenaForAllocation());
    _impl_.shardid_ = p;
  }
  return _impl_.shardid_;
}
inline ::proto::ShardID* FileCreateTransactionBody::mutable_shardid() {
  ::proto::ShardID* _msg = _internal_mutable_shardid();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.shardID)
  return _msg;
}
inline void FileCreateTransactionBody::set_allocated_shardid(::proto::ShardID* shardid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shardid_);
  }
  if (shardid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shardid));
    if (message_arena != submessage_arena) {
      shardid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shardid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shardid_ = shardid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.shardID)
}

// .proto.RealmID realmID = 6;
inline bool FileCreateTransactionBody::_internal_has_realmid() const {
  return this != internal_default_instance() && _impl_.realmid_ != nullptr;
}
inline bool FileCreateTransactionBody::has_realmid() const {
  return _internal_has_realmid();
}
inline const ::proto::RealmID& FileCreateTransactionBody::_internal_realmid() const {
  const ::proto::RealmID* p = _impl_.realmid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RealmID&>(
      ::proto::_RealmID_default_instance_);
}
inline const ::proto::RealmID& FileCreateTransactionBody::realmid() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.realmID)
  return _internal_realmid();
}
inline void FileCreateTransactionBody::unsafe_arena_set_allocated_realmid(
    ::proto::RealmID* realmid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realmid_);
  }
  _impl_.realmid_ = realmid;
  if (realmid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileCreateTransactionBody.realmID)
}
inline ::proto::RealmID* FileCreateTransactionBody::release_realmid() {
  
  ::proto::RealmID* temp = _impl_.realmid_;
  _impl_.realmid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RealmID* FileCreateTransactionBody::unsafe_arena_release_realmid() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.realmID)
  
  ::proto::RealmID* temp = _impl_.realmid_;
  _impl_.realmid_ = nullptr;
  return temp;
}
inline ::proto::RealmID* FileCreateTransactionBody::_internal_mutable_realmid() {
  
  if (_impl_.realmid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RealmID>(GetArenaForAllocation());
    _impl_.realmid_ = p;
  }
  return _impl_.realmid_;
}
inline ::proto::RealmID* FileCreateTransactionBody::mutable_realmid() {
  ::proto::RealmID* _msg = _internal_mutable_realmid();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.realmID)
  return _msg;
}
inline void FileCreateTransactionBody::set_allocated_realmid(::proto::RealmID* realmid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realmid_);
  }
  if (realmid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realmid));
    if (message_arena != submessage_arena) {
      realmid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realmid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.realmid_ = realmid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.realmID)
}

// .proto.Key newRealmAdminKey = 7;
inline bool FileCreateTransactionBody::_internal_has_newrealmadminkey() const {
  return this != internal_default_instance() && _impl_.newrealmadminkey_ != nullptr;
}
inline bool FileCreateTransactionBody::has_newrealmadminkey() const {
  return _internal_has_newrealmadminkey();
}
inline const ::proto::Key& FileCreateTransactionBody::_internal_newrealmadminkey() const {
  const ::proto::Key* p = _impl_.newrealmadminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& FileCreateTransactionBody::newrealmadminkey() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.newRealmAdminKey)
  return _internal_newrealmadminkey();
}
inline void FileCreateTransactionBody::unsafe_arena_set_allocated_newrealmadminkey(
    ::proto::Key* newrealmadminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrealmadminkey_);
  }
  _impl_.newrealmadminkey_ = newrealmadminkey;
  if (newrealmadminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileCreateTransactionBody.newRealmAdminKey)
}
inline ::proto::Key* FileCreateTransactionBody::release_newrealmadminkey() {
  
  ::proto::Key* temp = _impl_.newrealmadminkey_;
  _impl_.newrealmadminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* FileCreateTransactionBody::unsafe_arena_release_newrealmadminkey() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.newRealmAdminKey)
  
  ::proto::Key* temp = _impl_.newrealmadminkey_;
  _impl_.newrealmadminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* FileCreateTransactionBody::_internal_mutable_newrealmadminkey() {
  
  if (_impl_.newrealmadminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.newrealmadminkey_ = p;
  }
  return _impl_.newrealmadminkey_;
}
inline ::proto::Key* FileCreateTransactionBody::mutable_newrealmadminkey() {
  ::proto::Key* _msg = _internal_mutable_newrealmadminkey();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.newRealmAdminKey)
  return _msg;
}
inline void FileCreateTransactionBody::set_allocated_newrealmadminkey(::proto::Key* newrealmadminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrealmadminkey_);
  }
  if (newrealmadminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newrealmadminkey));
    if (message_arena != submessage_arena) {
      newrealmadminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrealmadminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrealmadminkey_ = newrealmadminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.newRealmAdminKey)
}

// string memo = 8;
inline void FileCreateTransactionBody::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& FileCreateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.FileCreateTransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileCreateTransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FileCreateTransactionBody.memo)
}
inline std::string* FileCreateTransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.FileCreateTransactionBody.memo)
  return _s;
}
inline const std::string& FileCreateTransactionBody::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void FileCreateTransactionBody::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* FileCreateTransactionBody::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* FileCreateTransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:proto.FileCreateTransactionBody.memo)
  return _impl_.memo_.Release();
}
inline void FileCreateTransactionBody::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FileCreateTransactionBody.memo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fcreate_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_5fheader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fheader_2eproto;
namespace proto {
class QueryHeader;
struct QueryHeaderDefaultTypeInternal;
extern QueryHeaderDefaultTypeInternal _QueryHeader_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::QueryHeader* Arena::CreateMaybeMessage<::proto::QueryHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum ResponseType : int {
  ANSWER_ONLY = 0,
  ANSWER_STATE_PROOF = 1,
  COST_ANSWER = 2,
  COST_ANSWER_STATE_PROOF = 3,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResponseType_IsValid(int value);
constexpr ResponseType ResponseType_MIN = ANSWER_ONLY;
constexpr ResponseType ResponseType_MAX = COST_ANSWER_STATE_PROOF;
constexpr int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseType_descriptor();
template<typename T>
inline const std::string& ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseType_descriptor(), enum_t_value);
}
inline bool ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class QueryHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.QueryHeader) */ {
 public:
  inline QueryHeader() : QueryHeader(nullptr) {}
  ~QueryHeader() override;
  explicit PROTOBUF_CONSTEXPR QueryHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryHeader(const QueryHeader& from);
  QueryHeader(QueryHeader&& from) noexcept
    : QueryHeader() {
    *this = ::std::move(from);
  }

  inline QueryHeader& operator=(const QueryHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryHeader& operator=(QueryHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryHeader* internal_default_instance() {
    return reinterpret_cast<const QueryHeader*>(
               &_QueryHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryHeader& a, QueryHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryHeader& from) {
    QueryHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.QueryHeader";
  }
  protected:
  explicit QueryHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentFieldNumber = 1,
    kResponseTypeFieldNumber = 2,
  };
  // .proto.Transaction payment = 1;
  bool has_payment() const;
  private:
  bool _internal_has_payment() const;
  public:
  void clear_payment();
  const ::proto::Transaction& payment() const;
  PROTOBUF_NODISCARD ::proto::Transaction* release_payment();
  ::proto::Transaction* mutable_payment();
  void set_allocated_payment(::proto::Transaction* payment);
  private:
  const ::proto::Transaction& _internal_payment() const;
  ::proto::Transaction* _internal_mutable_payment();
  public:
  void unsafe_arena_set_allocated_payment(
      ::proto::Transaction* payment);
  ::proto::Transaction* unsafe_arena_release_payment();

  // .proto.ResponseType responseType = 2;
  void clear_responsetype();
  ::proto::ResponseType responsetype() const;
  void set_responsetype(::proto::ResponseType value);
  private:
  ::proto::ResponseType _internal_responsetype() const;
  void _internal_set_responsetype(::proto::ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:proto.QueryHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::Transaction* payment_;
    int responsetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_query_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryHeader

// .proto.Transaction payment = 1;
inline bool QueryHeader::_internal_has_payment() const {
  return this != internal_default_instance() && _impl_.payment_ != nullptr;
}
inline bool QueryHeader::has_payment() const {
  return _internal_has_payment();
}
inline const ::proto::Transaction& QueryHeader::_internal_payment() const {
  const ::proto::Transaction* p = _impl_.payment_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Transaction&>(
      ::proto::_Transaction_default_instance_);
}
inline const ::proto::Transaction& QueryHeader::payment() const {
  // @@protoc_insertion_point(field_get:proto.QueryHeader.payment)
  return _internal_payment();
}
inline void QueryHeader::unsafe_arena_set_allocated_payment(
    ::proto::Transaction* payment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_);
  }
  _impl_.payment_ = payment;
  if (payment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.QueryHeader.payment)
}
inline ::proto::Transaction* QueryHeader::release_payment() {
  
  ::proto::Transaction* temp = _impl_.payment_;
  _impl_.payment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Transaction* QueryHeader::unsafe_arena_release_payment() {
  // @@protoc_insertion_point(field_release:proto.QueryHeader.payment)
  
  ::proto::Transaction* temp = _impl_.payment_;
  _impl_.payment_ = nullptr;
  return temp;
}
inline ::proto::Transaction* QueryHeader::_internal_mutable_payment() {
  
  if (_impl_.payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Transaction>(GetArenaForAllocation());
    _impl_.payment_ = p;
  }
  return _impl_.payment_;
}
inline ::proto::Transaction* QueryHeader::mutable_payment() {
  ::proto::Transaction* _msg = _internal_mutable_payment();
  // @@protoc_insertion_point(field_mutable:proto.QueryHeader.payment)
  return _msg;
}
inline void QueryHeader::set_allocated_payment(::proto::Transaction* payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payment_);
  }
  if (payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment));
    if (message_arena != submessage_arena) {
      payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payment_ = payment;
  // @@protoc_insertion_point(field_set_allocated:proto.QueryHeader.payment)
}

// .proto.ResponseType responseType = 2;
inline void QueryHeader::clear_responsetype() {
  _impl_.responsetype_ = 0;
}
inline ::proto::ResponseType QueryHeader::_internal_responsetype() const {
  return static_cast< ::proto::ResponseType >(_impl_.responsetype_);
}
inline ::proto::ResponseType QueryHeader::responsetype() const {
  // @@protoc_insertion_point(field_get:proto.QueryHeader.responseType)
  return _internal_responsetype();
}
inline void QueryHeader::_internal_set_responsetype(::proto::ResponseType value) {
  
  _impl_.responsetype_ = value;
}
inline void QueryHeader::set_responsetype(::proto::ResponseType value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:proto.QueryHeader.responseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ResponseType>() {
  return ::proto::ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_5fheader_2eproto

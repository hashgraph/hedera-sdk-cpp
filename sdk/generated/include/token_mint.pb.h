// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_mint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_5fmint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_5fmint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_5fmint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_5fmint_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_5fmint_2eproto;
namespace proto {
class TokenMintTransactionBody;
struct TokenMintTransactionBodyDefaultTypeInternal;
extern TokenMintTransactionBodyDefaultTypeInternal _TokenMintTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TokenMintTransactionBody* Arena::CreateMaybeMessage<::proto::TokenMintTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TokenMintTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TokenMintTransactionBody) */ {
 public:
  inline TokenMintTransactionBody() : TokenMintTransactionBody(nullptr) {}
  ~TokenMintTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR TokenMintTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenMintTransactionBody(const TokenMintTransactionBody& from);
  TokenMintTransactionBody(TokenMintTransactionBody&& from) noexcept
    : TokenMintTransactionBody() {
    *this = ::std::move(from);
  }

  inline TokenMintTransactionBody& operator=(const TokenMintTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenMintTransactionBody& operator=(TokenMintTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenMintTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenMintTransactionBody* internal_default_instance() {
    return reinterpret_cast<const TokenMintTransactionBody*>(
               &_TokenMintTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenMintTransactionBody& a, TokenMintTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenMintTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenMintTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TokenMintTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TokenMintTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TokenMintTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TokenMintTransactionBody& from) {
    TokenMintTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenMintTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TokenMintTransactionBody";
  }
  protected:
  explicit TokenMintTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kTokenFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // repeated bytes metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  const std::string& metadata(int index) const;
  std::string* mutable_metadata(int index);
  void set_metadata(int index, const std::string& value);
  void set_metadata(int index, std::string&& value);
  void set_metadata(int index, const char* value);
  void set_metadata(int index, const void* value, size_t size);
  std::string* add_metadata();
  void add_metadata(const std::string& value);
  void add_metadata(std::string&& value);
  void add_metadata(const char* value);
  void add_metadata(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata();
  private:
  const std::string& _internal_metadata(int index) const;
  std::string* _internal_add_metadata();
  public:

  // .proto.TokenID token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::proto::TokenID& token() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_token();
  ::proto::TokenID* mutable_token();
  void set_allocated_token(::proto::TokenID* token);
  private:
  const ::proto::TokenID& _internal_token() const;
  ::proto::TokenID* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::proto::TokenID* token);
  ::proto::TokenID* unsafe_arena_release_token();

  // uint64 amount = 2;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TokenMintTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_;
    ::proto::TokenID* token_;
    uint64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_token_5fmint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenMintTransactionBody

// .proto.TokenID token = 1;
inline bool TokenMintTransactionBody::_internal_has_token() const {
  return this != internal_default_instance() && _impl_.token_ != nullptr;
}
inline bool TokenMintTransactionBody::has_token() const {
  return _internal_has_token();
}
inline const ::proto::TokenID& TokenMintTransactionBody::_internal_token() const {
  const ::proto::TokenID* p = _impl_.token_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& TokenMintTransactionBody::token() const {
  // @@protoc_insertion_point(field_get:proto.TokenMintTransactionBody.token)
  return _internal_token();
}
inline void TokenMintTransactionBody::unsafe_arena_set_allocated_token(
    ::proto::TokenID* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_);
  }
  _impl_.token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TokenMintTransactionBody.token)
}
inline ::proto::TokenID* TokenMintTransactionBody::release_token() {
  
  ::proto::TokenID* temp = _impl_.token_;
  _impl_.token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* TokenMintTransactionBody::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:proto.TokenMintTransactionBody.token)
  
  ::proto::TokenID* temp = _impl_.token_;
  _impl_.token_ = nullptr;
  return temp;
}
inline ::proto::TokenID* TokenMintTransactionBody::_internal_mutable_token() {
  
  if (_impl_.token_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.token_ = p;
  }
  return _impl_.token_;
}
inline ::proto::TokenID* TokenMintTransactionBody::mutable_token() {
  ::proto::TokenID* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:proto.TokenMintTransactionBody.token)
  return _msg;
}
inline void TokenMintTransactionBody::set_allocated_token(::proto::TokenID* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_);
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token));
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.token_ = token;
  // @@protoc_insertion_point(field_set_allocated:proto.TokenMintTransactionBody.token)
}

// uint64 amount = 2;
inline void TokenMintTransactionBody::clear_amount() {
  _impl_.amount_ = uint64_t{0u};
}
inline uint64_t TokenMintTransactionBody::_internal_amount() const {
  return _impl_.amount_;
}
inline uint64_t TokenMintTransactionBody::amount() const {
  // @@protoc_insertion_point(field_get:proto.TokenMintTransactionBody.amount)
  return _internal_amount();
}
inline void TokenMintTransactionBody::_internal_set_amount(uint64_t value) {
  
  _impl_.amount_ = value;
}
inline void TokenMintTransactionBody::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.TokenMintTransactionBody.amount)
}

// repeated bytes metadata = 3;
inline int TokenMintTransactionBody::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int TokenMintTransactionBody::metadata_size() const {
  return _internal_metadata_size();
}
inline void TokenMintTransactionBody::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline std::string* TokenMintTransactionBody::add_metadata() {
  std::string* _s = _internal_add_metadata();
  // @@protoc_insertion_point(field_add_mutable:proto.TokenMintTransactionBody.metadata)
  return _s;
}
inline const std::string& TokenMintTransactionBody::_internal_metadata(int index) const {
  return _impl_.metadata_.Get(index);
}
inline const std::string& TokenMintTransactionBody::metadata(int index) const {
  // @@protoc_insertion_point(field_get:proto.TokenMintTransactionBody.metadata)
  return _internal_metadata(index);
}
inline std::string* TokenMintTransactionBody::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TokenMintTransactionBody.metadata)
  return _impl_.metadata_.Mutable(index);
}
inline void TokenMintTransactionBody::set_metadata(int index, const std::string& value) {
  _impl_.metadata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.TokenMintTransactionBody.metadata)
}
inline void TokenMintTransactionBody::set_metadata(int index, std::string&& value) {
  _impl_.metadata_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.TokenMintTransactionBody.metadata)
}
inline void TokenMintTransactionBody::set_metadata(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.metadata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.TokenMintTransactionBody.metadata)
}
inline void TokenMintTransactionBody::set_metadata(int index, const void* value, size_t size) {
  _impl_.metadata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.TokenMintTransactionBody.metadata)
}
inline std::string* TokenMintTransactionBody::_internal_add_metadata() {
  return _impl_.metadata_.Add();
}
inline void TokenMintTransactionBody::add_metadata(const std::string& value) {
  _impl_.metadata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.TokenMintTransactionBody.metadata)
}
inline void TokenMintTransactionBody::add_metadata(std::string&& value) {
  _impl_.metadata_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.TokenMintTransactionBody.metadata)
}
inline void TokenMintTransactionBody::add_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.metadata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.TokenMintTransactionBody.metadata)
}
inline void TokenMintTransactionBody::add_metadata(const void* value, size_t size) {
  _impl_.metadata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.TokenMintTransactionBody.metadata)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokenMintTransactionBody::metadata() const {
  // @@protoc_insertion_point(field_list:proto.TokenMintTransactionBody.metadata)
  return _impl_.metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokenMintTransactionBody::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:proto.TokenMintTransactionBody.metadata)
  return &_impl_.metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_5fmint_2eproto

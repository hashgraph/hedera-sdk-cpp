// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "timestamp.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fupdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fupdate_2eproto;
namespace proto {
class FileUpdateTransactionBody;
struct FileUpdateTransactionBodyDefaultTypeInternal;
extern FileUpdateTransactionBodyDefaultTypeInternal _FileUpdateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::FileUpdateTransactionBody* Arena::CreateMaybeMessage<::proto::FileUpdateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class FileUpdateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FileUpdateTransactionBody) */ {
 public:
  inline FileUpdateTransactionBody() : FileUpdateTransactionBody(nullptr) {}
  ~FileUpdateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR FileUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUpdateTransactionBody(const FileUpdateTransactionBody& from);
  FileUpdateTransactionBody(FileUpdateTransactionBody&& from) noexcept
    : FileUpdateTransactionBody() {
    *this = ::std::move(from);
  }

  inline FileUpdateTransactionBody& operator=(const FileUpdateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUpdateTransactionBody& operator=(FileUpdateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUpdateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUpdateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const FileUpdateTransactionBody*>(
               &_FileUpdateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileUpdateTransactionBody& a, FileUpdateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUpdateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUpdateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUpdateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUpdateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUpdateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileUpdateTransactionBody& from) {
    FileUpdateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUpdateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileUpdateTransactionBody";
  }
  protected:
  explicit FileUpdateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 4,
    kFileIDFieldNumber = 1,
    kExpirationTimeFieldNumber = 2,
    kKeysFieldNumber = 3,
    kMemoFieldNumber = 5,
  };
  // bytes contents = 4;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // .proto.FileID fileID = 1;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // .proto.Timestamp expirationTime = 2;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.KeyList keys = 3;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::proto::KeyList& keys() const;
  PROTOBUF_NODISCARD ::proto::KeyList* release_keys();
  ::proto::KeyList* mutable_keys();
  void set_allocated_keys(::proto::KeyList* keys);
  private:
  const ::proto::KeyList& _internal_keys() const;
  ::proto::KeyList* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::proto::KeyList* keys);
  ::proto::KeyList* unsafe_arena_release_keys();

  // .google.protobuf.StringValue memo = 5;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& memo() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_memo();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_memo();
  void set_allocated_memo(::PROTOBUF_NAMESPACE_ID::StringValue* memo);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_memo() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_memo();
  public:
  void unsafe_arena_set_allocated_memo(
      ::PROTOBUF_NAMESPACE_ID::StringValue* memo);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_memo();

  // @@protoc_insertion_point(class_scope:proto.FileUpdateTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
    ::proto::FileID* fileid_;
    ::proto::Timestamp* expirationtime_;
    ::proto::KeyList* keys_;
    ::PROTOBUF_NAMESPACE_ID::StringValue* memo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileUpdateTransactionBody

// .proto.FileID fileID = 1;
inline bool FileUpdateTransactionBody::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool FileUpdateTransactionBody::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& FileUpdateTransactionBody::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& FileUpdateTransactionBody::fileid() const {
  // @@protoc_insertion_point(field_get:proto.FileUpdateTransactionBody.fileID)
  return _internal_fileid();
}
inline void FileUpdateTransactionBody::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileUpdateTransactionBody.fileID)
}
inline ::proto::FileID* FileUpdateTransactionBody::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* FileUpdateTransactionBody::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.FileUpdateTransactionBody.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* FileUpdateTransactionBody::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* FileUpdateTransactionBody::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.FileUpdateTransactionBody.fileID)
  return _msg;
}
inline void FileUpdateTransactionBody::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.FileUpdateTransactionBody.fileID)
}

// .proto.Timestamp expirationTime = 2;
inline bool FileUpdateTransactionBody::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool FileUpdateTransactionBody::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& FileUpdateTransactionBody::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& FileUpdateTransactionBody::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.FileUpdateTransactionBody.expirationTime)
  return _internal_expirationtime();
}
inline void FileUpdateTransactionBody::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileUpdateTransactionBody.expirationTime)
}
inline ::proto::Timestamp* FileUpdateTransactionBody::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* FileUpdateTransactionBody::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.FileUpdateTransactionBody.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* FileUpdateTransactionBody::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* FileUpdateTransactionBody::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.FileUpdateTransactionBody.expirationTime)
  return _msg;
}
inline void FileUpdateTransactionBody::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.FileUpdateTransactionBody.expirationTime)
}

// .proto.KeyList keys = 3;
inline bool FileUpdateTransactionBody::_internal_has_keys() const {
  return this != internal_default_instance() && _impl_.keys_ != nullptr;
}
inline bool FileUpdateTransactionBody::has_keys() const {
  return _internal_has_keys();
}
inline const ::proto::KeyList& FileUpdateTransactionBody::_internal_keys() const {
  const ::proto::KeyList* p = _impl_.keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::KeyList&>(
      ::proto::_KeyList_default_instance_);
}
inline const ::proto::KeyList& FileUpdateTransactionBody::keys() const {
  // @@protoc_insertion_point(field_get:proto.FileUpdateTransactionBody.keys)
  return _internal_keys();
}
inline void FileUpdateTransactionBody::unsafe_arena_set_allocated_keys(
    ::proto::KeyList* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  _impl_.keys_ = keys;
  if (keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileUpdateTransactionBody.keys)
}
inline ::proto::KeyList* FileUpdateTransactionBody::release_keys() {
  
  ::proto::KeyList* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::KeyList* FileUpdateTransactionBody::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:proto.FileUpdateTransactionBody.keys)
  
  ::proto::KeyList* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
  return temp;
}
inline ::proto::KeyList* FileUpdateTransactionBody::_internal_mutable_keys() {
  
  if (_impl_.keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::KeyList>(GetArenaForAllocation());
    _impl_.keys_ = p;
  }
  return _impl_.keys_;
}
inline ::proto::KeyList* FileUpdateTransactionBody::mutable_keys() {
  ::proto::KeyList* _msg = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:proto.FileUpdateTransactionBody.keys)
  return _msg;
}
inline void FileUpdateTransactionBody::set_allocated_keys(::proto::KeyList* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys));
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:proto.FileUpdateTransactionBody.keys)
}

// bytes contents = 4;
inline void FileUpdateTransactionBody::clear_contents() {
  _impl_.contents_.ClearToEmpty();
}
inline const std::string& FileUpdateTransactionBody::contents() const {
  // @@protoc_insertion_point(field_get:proto.FileUpdateTransactionBody.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUpdateTransactionBody::set_contents(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FileUpdateTransactionBody.contents)
}
inline std::string* FileUpdateTransactionBody::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:proto.FileUpdateTransactionBody.contents)
  return _s;
}
inline const std::string& FileUpdateTransactionBody::_internal_contents() const {
  return _impl_.contents_.Get();
}
inline void FileUpdateTransactionBody::_internal_set_contents(const std::string& value) {
  
  _impl_.contents_.Set(value, GetArenaForAllocation());
}
inline std::string* FileUpdateTransactionBody::_internal_mutable_contents() {
  
  return _impl_.contents_.Mutable(GetArenaForAllocation());
}
inline std::string* FileUpdateTransactionBody::release_contents() {
  // @@protoc_insertion_point(field_release:proto.FileUpdateTransactionBody.contents)
  return _impl_.contents_.Release();
}
inline void FileUpdateTransactionBody::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  _impl_.contents_.SetAllocated(contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FileUpdateTransactionBody.contents)
}

// .google.protobuf.StringValue memo = 5;
inline bool FileUpdateTransactionBody::_internal_has_memo() const {
  return this != internal_default_instance() && _impl_.memo_ != nullptr;
}
inline bool FileUpdateTransactionBody::has_memo() const {
  return _internal_has_memo();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& FileUpdateTransactionBody::_internal_memo() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = _impl_.memo_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& FileUpdateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.FileUpdateTransactionBody.memo)
  return _internal_memo();
}
inline void FileUpdateTransactionBody::unsafe_arena_set_allocated_memo(
    ::PROTOBUF_NAMESPACE_ID::StringValue* memo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memo_);
  }
  _impl_.memo_ = memo;
  if (memo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileUpdateTransactionBody.memo)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* FileUpdateTransactionBody::release_memo() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memo_;
  _impl_.memo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* FileUpdateTransactionBody::unsafe_arena_release_memo() {
  // @@protoc_insertion_point(field_release:proto.FileUpdateTransactionBody.memo)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = _impl_.memo_;
  _impl_.memo_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* FileUpdateTransactionBody::_internal_mutable_memo() {
  
  if (_impl_.memo_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    _impl_.memo_ = p;
  }
  return _impl_.memo_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* FileUpdateTransactionBody::mutable_memo() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.FileUpdateTransactionBody.memo)
  return _msg;
}
inline void FileUpdateTransactionBody::set_allocated_memo(::PROTOBUF_NAMESPACE_ID::StringValue* memo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memo_);
  }
  if (memo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memo));
    if (message_arena != submessage_arena) {
      memo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.memo_ = memo;
  // @@protoc_insertion_point(field_set_allocated:proto.FileUpdateTransactionBody.memo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fupdate_2eproto

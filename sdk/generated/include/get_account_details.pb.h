// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_account_details.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_get_5faccount_5fdetails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_get_5faccount_5fdetails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "timestamp.pb.h"
#include "duration.pb.h"
#include "basic_types.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
#include "crypto_add_live_hash.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_get_5faccount_5fdetails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_get_5faccount_5fdetails_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_get_5faccount_5fdetails_2eproto;
namespace proto {
class GetAccountDetailsQuery;
struct GetAccountDetailsQueryDefaultTypeInternal;
extern GetAccountDetailsQueryDefaultTypeInternal _GetAccountDetailsQuery_default_instance_;
class GetAccountDetailsResponse;
struct GetAccountDetailsResponseDefaultTypeInternal;
extern GetAccountDetailsResponseDefaultTypeInternal _GetAccountDetailsResponse_default_instance_;
class GetAccountDetailsResponse_AccountDetails;
struct GetAccountDetailsResponse_AccountDetailsDefaultTypeInternal;
extern GetAccountDetailsResponse_AccountDetailsDefaultTypeInternal _GetAccountDetailsResponse_AccountDetails_default_instance_;
class GrantedCryptoAllowance;
struct GrantedCryptoAllowanceDefaultTypeInternal;
extern GrantedCryptoAllowanceDefaultTypeInternal _GrantedCryptoAllowance_default_instance_;
class GrantedNftAllowance;
struct GrantedNftAllowanceDefaultTypeInternal;
extern GrantedNftAllowanceDefaultTypeInternal _GrantedNftAllowance_default_instance_;
class GrantedTokenAllowance;
struct GrantedTokenAllowanceDefaultTypeInternal;
extern GrantedTokenAllowanceDefaultTypeInternal _GrantedTokenAllowance_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::GetAccountDetailsQuery* Arena::CreateMaybeMessage<::proto::GetAccountDetailsQuery>(Arena*);
template<> ::proto::GetAccountDetailsResponse* Arena::CreateMaybeMessage<::proto::GetAccountDetailsResponse>(Arena*);
template<> ::proto::GetAccountDetailsResponse_AccountDetails* Arena::CreateMaybeMessage<::proto::GetAccountDetailsResponse_AccountDetails>(Arena*);
template<> ::proto::GrantedCryptoAllowance* Arena::CreateMaybeMessage<::proto::GrantedCryptoAllowance>(Arena*);
template<> ::proto::GrantedNftAllowance* Arena::CreateMaybeMessage<::proto::GrantedNftAllowance>(Arena*);
template<> ::proto::GrantedTokenAllowance* Arena::CreateMaybeMessage<::proto::GrantedTokenAllowance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class GetAccountDetailsQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAccountDetailsQuery) */ {
 public:
  inline GetAccountDetailsQuery() : GetAccountDetailsQuery(nullptr) {}
  ~GetAccountDetailsQuery() override;
  explicit PROTOBUF_CONSTEXPR GetAccountDetailsQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountDetailsQuery(const GetAccountDetailsQuery& from);
  GetAccountDetailsQuery(GetAccountDetailsQuery&& from) noexcept
    : GetAccountDetailsQuery() {
    *this = ::std::move(from);
  }

  inline GetAccountDetailsQuery& operator=(const GetAccountDetailsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountDetailsQuery& operator=(GetAccountDetailsQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountDetailsQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountDetailsQuery* internal_default_instance() {
    return reinterpret_cast<const GetAccountDetailsQuery*>(
               &_GetAccountDetailsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAccountDetailsQuery& a, GetAccountDetailsQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountDetailsQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountDetailsQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountDetailsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountDetailsQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountDetailsQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAccountDetailsQuery& from) {
    GetAccountDetailsQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountDetailsQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAccountDetailsQuery";
  }
  protected:
  explicit GetAccountDetailsQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.AccountID account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::proto::AccountID& account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_account_id();
  ::proto::AccountID* mutable_account_id();
  void set_allocated_account_id(::proto::AccountID* account_id);
  private:
  const ::proto::AccountID& _internal_account_id() const;
  ::proto::AccountID* _internal_mutable_account_id();
  public:
  void unsafe_arena_set_allocated_account_id(
      ::proto::AccountID* account_id);
  ::proto::AccountID* unsafe_arena_release_account_id();

  // @@protoc_insertion_point(class_scope:proto.GetAccountDetailsQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::AccountID* account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5faccount_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class GetAccountDetailsResponse_AccountDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAccountDetailsResponse.AccountDetails) */ {
 public:
  inline GetAccountDetailsResponse_AccountDetails() : GetAccountDetailsResponse_AccountDetails(nullptr) {}
  ~GetAccountDetailsResponse_AccountDetails() override;
  explicit PROTOBUF_CONSTEXPR GetAccountDetailsResponse_AccountDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountDetailsResponse_AccountDetails(const GetAccountDetailsResponse_AccountDetails& from);
  GetAccountDetailsResponse_AccountDetails(GetAccountDetailsResponse_AccountDetails&& from) noexcept
    : GetAccountDetailsResponse_AccountDetails() {
    *this = ::std::move(from);
  }

  inline GetAccountDetailsResponse_AccountDetails& operator=(const GetAccountDetailsResponse_AccountDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountDetailsResponse_AccountDetails& operator=(GetAccountDetailsResponse_AccountDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountDetailsResponse_AccountDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountDetailsResponse_AccountDetails* internal_default_instance() {
    return reinterpret_cast<const GetAccountDetailsResponse_AccountDetails*>(
               &_GetAccountDetailsResponse_AccountDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAccountDetailsResponse_AccountDetails& a, GetAccountDetailsResponse_AccountDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountDetailsResponse_AccountDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountDetailsResponse_AccountDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountDetailsResponse_AccountDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountDetailsResponse_AccountDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountDetailsResponse_AccountDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAccountDetailsResponse_AccountDetails& from) {
    GetAccountDetailsResponse_AccountDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountDetailsResponse_AccountDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAccountDetailsResponse.AccountDetails";
  }
  protected:
  explicit GetAccountDetailsResponse_AccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenRelationshipsFieldNumber = 11,
    kGrantedCryptoAllowancesFieldNumber = 17,
    kGrantedNftAllowancesFieldNumber = 18,
    kGrantedTokenAllowancesFieldNumber = 19,
    kContractAccountIdFieldNumber = 2,
    kMemoFieldNumber = 12,
    kAliasFieldNumber = 15,
    kLedgerIdFieldNumber = 16,
    kAccountIdFieldNumber = 1,
    kProxyAccountIdFieldNumber = 4,
    kKeyFieldNumber = 6,
    kExpirationTimeFieldNumber = 9,
    kAutoRenewPeriodFieldNumber = 10,
    kProxyReceivedFieldNumber = 5,
    kBalanceFieldNumber = 7,
    kDeletedFieldNumber = 3,
    kReceiverSigRequiredFieldNumber = 8,
    kMaxAutomaticTokenAssociationsFieldNumber = 14,
    kOwnedNftsFieldNumber = 13,
  };
  // repeated .proto.TokenRelationship token_relationships = 11;
  int token_relationships_size() const;
  private:
  int _internal_token_relationships_size() const;
  public:
  void clear_token_relationships();
  ::proto::TokenRelationship* mutable_token_relationships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >*
      mutable_token_relationships();
  private:
  const ::proto::TokenRelationship& _internal_token_relationships(int index) const;
  ::proto::TokenRelationship* _internal_add_token_relationships();
  public:
  const ::proto::TokenRelationship& token_relationships(int index) const;
  ::proto::TokenRelationship* add_token_relationships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >&
      token_relationships() const;

  // repeated .proto.GrantedCryptoAllowance granted_crypto_allowances = 17;
  int granted_crypto_allowances_size() const;
  private:
  int _internal_granted_crypto_allowances_size() const;
  public:
  void clear_granted_crypto_allowances();
  ::proto::GrantedCryptoAllowance* mutable_granted_crypto_allowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedCryptoAllowance >*
      mutable_granted_crypto_allowances();
  private:
  const ::proto::GrantedCryptoAllowance& _internal_granted_crypto_allowances(int index) const;
  ::proto::GrantedCryptoAllowance* _internal_add_granted_crypto_allowances();
  public:
  const ::proto::GrantedCryptoAllowance& granted_crypto_allowances(int index) const;
  ::proto::GrantedCryptoAllowance* add_granted_crypto_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedCryptoAllowance >&
      granted_crypto_allowances() const;

  // repeated .proto.GrantedNftAllowance granted_nft_allowances = 18;
  int granted_nft_allowances_size() const;
  private:
  int _internal_granted_nft_allowances_size() const;
  public:
  void clear_granted_nft_allowances();
  ::proto::GrantedNftAllowance* mutable_granted_nft_allowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedNftAllowance >*
      mutable_granted_nft_allowances();
  private:
  const ::proto::GrantedNftAllowance& _internal_granted_nft_allowances(int index) const;
  ::proto::GrantedNftAllowance* _internal_add_granted_nft_allowances();
  public:
  const ::proto::GrantedNftAllowance& granted_nft_allowances(int index) const;
  ::proto::GrantedNftAllowance* add_granted_nft_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedNftAllowance >&
      granted_nft_allowances() const;

  // repeated .proto.GrantedTokenAllowance granted_token_allowances = 19;
  int granted_token_allowances_size() const;
  private:
  int _internal_granted_token_allowances_size() const;
  public:
  void clear_granted_token_allowances();
  ::proto::GrantedTokenAllowance* mutable_granted_token_allowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedTokenAllowance >*
      mutable_granted_token_allowances();
  private:
  const ::proto::GrantedTokenAllowance& _internal_granted_token_allowances(int index) const;
  ::proto::GrantedTokenAllowance* _internal_add_granted_token_allowances();
  public:
  const ::proto::GrantedTokenAllowance& granted_token_allowances(int index) const;
  ::proto::GrantedTokenAllowance* add_granted_token_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedTokenAllowance >&
      granted_token_allowances() const;

  // string contract_account_id = 2;
  void clear_contract_account_id();
  const std::string& contract_account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_account_id();
  PROTOBUF_NODISCARD std::string* release_contract_account_id();
  void set_allocated_contract_account_id(std::string* contract_account_id);
  private:
  const std::string& _internal_contract_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_account_id(const std::string& value);
  std::string* _internal_mutable_contract_account_id();
  public:

  // string memo = 12;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes alias = 15;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // bytes ledger_id = 16;
  void clear_ledger_id();
  const std::string& ledger_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_id();
  PROTOBUF_NODISCARD std::string* release_ledger_id();
  void set_allocated_ledger_id(std::string* ledger_id);
  private:
  const std::string& _internal_ledger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_id(const std::string& value);
  std::string* _internal_mutable_ledger_id();
  public:

  // .proto.AccountID account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  const ::proto::AccountID& account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_account_id();
  ::proto::AccountID* mutable_account_id();
  void set_allocated_account_id(::proto::AccountID* account_id);
  private:
  const ::proto::AccountID& _internal_account_id() const;
  ::proto::AccountID* _internal_mutable_account_id();
  public:
  void unsafe_arena_set_allocated_account_id(
      ::proto::AccountID* account_id);
  ::proto::AccountID* unsafe_arena_release_account_id();

  // .proto.AccountID proxy_account_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_proxy_account_id() const;
  private:
  bool _internal_has_proxy_account_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_proxy_account_id();
  PROTOBUF_DEPRECATED const ::proto::AccountID& proxy_account_id() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::AccountID* release_proxy_account_id();
  PROTOBUF_DEPRECATED ::proto::AccountID* mutable_proxy_account_id();
  PROTOBUF_DEPRECATED void set_allocated_proxy_account_id(::proto::AccountID* proxy_account_id);
  private:
  const ::proto::AccountID& _internal_proxy_account_id() const;
  ::proto::AccountID* _internal_mutable_proxy_account_id();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_proxy_account_id(
      ::proto::AccountID* proxy_account_id);
  PROTOBUF_DEPRECATED ::proto::AccountID* unsafe_arena_release_proxy_account_id();

  // .proto.Key key = 6;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::proto::Key& key() const;
  PROTOBUF_NODISCARD ::proto::Key* release_key();
  ::proto::Key* mutable_key();
  void set_allocated_key(::proto::Key* key);
  private:
  const ::proto::Key& _internal_key() const;
  ::proto::Key* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::proto::Key* key);
  ::proto::Key* unsafe_arena_release_key();

  // .proto.Timestamp expiration_time = 9;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const ::proto::Timestamp& expiration_time() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expiration_time();
  ::proto::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(::proto::Timestamp* expiration_time);
  private:
  const ::proto::Timestamp& _internal_expiration_time() const;
  ::proto::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      ::proto::Timestamp* expiration_time);
  ::proto::Timestamp* unsafe_arena_release_expiration_time();

  // .proto.Duration auto_renew_period = 10;
  bool has_auto_renew_period() const;
  private:
  bool _internal_has_auto_renew_period() const;
  public:
  void clear_auto_renew_period();
  const ::proto::Duration& auto_renew_period() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_auto_renew_period();
  ::proto::Duration* mutable_auto_renew_period();
  void set_allocated_auto_renew_period(::proto::Duration* auto_renew_period);
  private:
  const ::proto::Duration& _internal_auto_renew_period() const;
  ::proto::Duration* _internal_mutable_auto_renew_period();
  public:
  void unsafe_arena_set_allocated_auto_renew_period(
      ::proto::Duration* auto_renew_period);
  ::proto::Duration* unsafe_arena_release_auto_renew_period();

  // int64 proxy_received = 5;
  void clear_proxy_received();
  int64_t proxy_received() const;
  void set_proxy_received(int64_t value);
  private:
  int64_t _internal_proxy_received() const;
  void _internal_set_proxy_received(int64_t value);
  public:

  // uint64 balance = 7;
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // bool deleted = 3;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // bool receiver_sig_required = 8;
  void clear_receiver_sig_required();
  bool receiver_sig_required() const;
  void set_receiver_sig_required(bool value);
  private:
  bool _internal_receiver_sig_required() const;
  void _internal_set_receiver_sig_required(bool value);
  public:

  // int32 max_automatic_token_associations = 14;
  void clear_max_automatic_token_associations();
  int32_t max_automatic_token_associations() const;
  void set_max_automatic_token_associations(int32_t value);
  private:
  int32_t _internal_max_automatic_token_associations() const;
  void _internal_set_max_automatic_token_associations(int32_t value);
  public:

  // int64 owned_nfts = 13;
  void clear_owned_nfts();
  int64_t owned_nfts() const;
  void set_owned_nfts(int64_t value);
  private:
  int64_t _internal_owned_nfts() const;
  void _internal_set_owned_nfts(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GetAccountDetailsResponse.AccountDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship > token_relationships_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedCryptoAllowance > granted_crypto_allowances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedNftAllowance > granted_nft_allowances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedTokenAllowance > granted_token_allowances_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_id_;
    ::proto::AccountID* account_id_;
    ::proto::AccountID* proxy_account_id_;
    ::proto::Key* key_;
    ::proto::Timestamp* expiration_time_;
    ::proto::Duration* auto_renew_period_;
    int64_t proxy_received_;
    uint64_t balance_;
    bool deleted_;
    bool receiver_sig_required_;
    int32_t max_automatic_token_associations_;
    int64_t owned_nfts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5faccount_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class GetAccountDetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAccountDetailsResponse) */ {
 public:
  inline GetAccountDetailsResponse() : GetAccountDetailsResponse(nullptr) {}
  ~GetAccountDetailsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAccountDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccountDetailsResponse(const GetAccountDetailsResponse& from);
  GetAccountDetailsResponse(GetAccountDetailsResponse&& from) noexcept
    : GetAccountDetailsResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountDetailsResponse& operator=(const GetAccountDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountDetailsResponse& operator=(GetAccountDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccountDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccountDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountDetailsResponse*>(
               &_GetAccountDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetAccountDetailsResponse& a, GetAccountDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountDetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccountDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccountDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccountDetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccountDetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAccountDetailsResponse& from) {
    GetAccountDetailsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountDetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAccountDetailsResponse";
  }
  protected:
  explicit GetAccountDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetAccountDetailsResponse_AccountDetails AccountDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAccountDetailsFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.GetAccountDetailsResponse.AccountDetails account_details = 2;
  bool has_account_details() const;
  private:
  bool _internal_has_account_details() const;
  public:
  void clear_account_details();
  const ::proto::GetAccountDetailsResponse_AccountDetails& account_details() const;
  PROTOBUF_NODISCARD ::proto::GetAccountDetailsResponse_AccountDetails* release_account_details();
  ::proto::GetAccountDetailsResponse_AccountDetails* mutable_account_details();
  void set_allocated_account_details(::proto::GetAccountDetailsResponse_AccountDetails* account_details);
  private:
  const ::proto::GetAccountDetailsResponse_AccountDetails& _internal_account_details() const;
  ::proto::GetAccountDetailsResponse_AccountDetails* _internal_mutable_account_details();
  public:
  void unsafe_arena_set_allocated_account_details(
      ::proto::GetAccountDetailsResponse_AccountDetails* account_details);
  ::proto::GetAccountDetailsResponse_AccountDetails* unsafe_arena_release_account_details();

  // @@protoc_insertion_point(class_scope:proto.GetAccountDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::GetAccountDetailsResponse_AccountDetails* account_details_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5faccount_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class GrantedCryptoAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GrantedCryptoAllowance) */ {
 public:
  inline GrantedCryptoAllowance() : GrantedCryptoAllowance(nullptr) {}
  ~GrantedCryptoAllowance() override;
  explicit PROTOBUF_CONSTEXPR GrantedCryptoAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantedCryptoAllowance(const GrantedCryptoAllowance& from);
  GrantedCryptoAllowance(GrantedCryptoAllowance&& from) noexcept
    : GrantedCryptoAllowance() {
    *this = ::std::move(from);
  }

  inline GrantedCryptoAllowance& operator=(const GrantedCryptoAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantedCryptoAllowance& operator=(GrantedCryptoAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantedCryptoAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantedCryptoAllowance* internal_default_instance() {
    return reinterpret_cast<const GrantedCryptoAllowance*>(
               &_GrantedCryptoAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GrantedCryptoAllowance& a, GrantedCryptoAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantedCryptoAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantedCryptoAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantedCryptoAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantedCryptoAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantedCryptoAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantedCryptoAllowance& from) {
    GrantedCryptoAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantedCryptoAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GrantedCryptoAllowance";
  }
  protected:
  explicit GrantedCryptoAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpenderFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // .proto.AccountID spender = 1;
  bool has_spender() const;
  private:
  bool _internal_has_spender() const;
  public:
  void clear_spender();
  const ::proto::AccountID& spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender();
  ::proto::AccountID* mutable_spender();
  void set_allocated_spender(::proto::AccountID* spender);
  private:
  const ::proto::AccountID& _internal_spender() const;
  ::proto::AccountID* _internal_mutable_spender();
  public:
  void unsafe_arena_set_allocated_spender(
      ::proto::AccountID* spender);
  ::proto::AccountID* unsafe_arena_release_spender();

  // int64 amount = 2;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GrantedCryptoAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::AccountID* spender_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5faccount_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class GrantedNftAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GrantedNftAllowance) */ {
 public:
  inline GrantedNftAllowance() : GrantedNftAllowance(nullptr) {}
  ~GrantedNftAllowance() override;
  explicit PROTOBUF_CONSTEXPR GrantedNftAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantedNftAllowance(const GrantedNftAllowance& from);
  GrantedNftAllowance(GrantedNftAllowance&& from) noexcept
    : GrantedNftAllowance() {
    *this = ::std::move(from);
  }

  inline GrantedNftAllowance& operator=(const GrantedNftAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantedNftAllowance& operator=(GrantedNftAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantedNftAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantedNftAllowance* internal_default_instance() {
    return reinterpret_cast<const GrantedNftAllowance*>(
               &_GrantedNftAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GrantedNftAllowance& a, GrantedNftAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantedNftAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantedNftAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantedNftAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantedNftAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantedNftAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantedNftAllowance& from) {
    GrantedNftAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantedNftAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GrantedNftAllowance";
  }
  protected:
  explicit GrantedNftAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
    kSpenderFieldNumber = 2,
  };
  // .proto.TokenID token_id = 1;
  bool has_token_id() const;
  private:
  bool _internal_has_token_id() const;
  public:
  void clear_token_id();
  const ::proto::TokenID& token_id() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_token_id();
  ::proto::TokenID* mutable_token_id();
  void set_allocated_token_id(::proto::TokenID* token_id);
  private:
  const ::proto::TokenID& _internal_token_id() const;
  ::proto::TokenID* _internal_mutable_token_id();
  public:
  void unsafe_arena_set_allocated_token_id(
      ::proto::TokenID* token_id);
  ::proto::TokenID* unsafe_arena_release_token_id();

  // .proto.AccountID spender = 2;
  bool has_spender() const;
  private:
  bool _internal_has_spender() const;
  public:
  void clear_spender();
  const ::proto::AccountID& spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender();
  ::proto::AccountID* mutable_spender();
  void set_allocated_spender(::proto::AccountID* spender);
  private:
  const ::proto::AccountID& _internal_spender() const;
  ::proto::AccountID* _internal_mutable_spender();
  public:
  void unsafe_arena_set_allocated_spender(
      ::proto::AccountID* spender);
  ::proto::AccountID* unsafe_arena_release_spender();

  // @@protoc_insertion_point(class_scope:proto.GrantedNftAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TokenID* token_id_;
    ::proto::AccountID* spender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5faccount_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class GrantedTokenAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GrantedTokenAllowance) */ {
 public:
  inline GrantedTokenAllowance() : GrantedTokenAllowance(nullptr) {}
  ~GrantedTokenAllowance() override;
  explicit PROTOBUF_CONSTEXPR GrantedTokenAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantedTokenAllowance(const GrantedTokenAllowance& from);
  GrantedTokenAllowance(GrantedTokenAllowance&& from) noexcept
    : GrantedTokenAllowance() {
    *this = ::std::move(from);
  }

  inline GrantedTokenAllowance& operator=(const GrantedTokenAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantedTokenAllowance& operator=(GrantedTokenAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantedTokenAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantedTokenAllowance* internal_default_instance() {
    return reinterpret_cast<const GrantedTokenAllowance*>(
               &_GrantedTokenAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GrantedTokenAllowance& a, GrantedTokenAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantedTokenAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantedTokenAllowance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantedTokenAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantedTokenAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantedTokenAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantedTokenAllowance& from) {
    GrantedTokenAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantedTokenAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GrantedTokenAllowance";
  }
  protected:
  explicit GrantedTokenAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
    kSpenderFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // .proto.TokenID token_id = 1;
  bool has_token_id() const;
  private:
  bool _internal_has_token_id() const;
  public:
  void clear_token_id();
  const ::proto::TokenID& token_id() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_token_id();
  ::proto::TokenID* mutable_token_id();
  void set_allocated_token_id(::proto::TokenID* token_id);
  private:
  const ::proto::TokenID& _internal_token_id() const;
  ::proto::TokenID* _internal_mutable_token_id();
  public:
  void unsafe_arena_set_allocated_token_id(
      ::proto::TokenID* token_id);
  ::proto::TokenID* unsafe_arena_release_token_id();

  // .proto.AccountID spender = 2;
  bool has_spender() const;
  private:
  bool _internal_has_spender() const;
  public:
  void clear_spender();
  const ::proto::AccountID& spender() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_spender();
  ::proto::AccountID* mutable_spender();
  void set_allocated_spender(::proto::AccountID* spender);
  private:
  const ::proto::AccountID& _internal_spender() const;
  ::proto::AccountID* _internal_mutable_spender();
  public:
  void unsafe_arena_set_allocated_spender(
      ::proto::AccountID* spender);
  ::proto::AccountID* unsafe_arena_release_spender();

  // int64 amount = 3;
  void clear_amount();
  int64_t amount() const;
  void set_amount(int64_t value);
  private:
  int64_t _internal_amount() const;
  void _internal_set_amount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GrantedTokenAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TokenID* token_id_;
    ::proto::AccountID* spender_;
    int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_get_5faccount_5fdetails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAccountDetailsQuery

// .proto.QueryHeader header = 1;
inline bool GetAccountDetailsQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetAccountDetailsQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& GetAccountDetailsQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& GetAccountDetailsQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsQuery.header)
  return _internal_header();
}
inline void GetAccountDetailsQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsQuery.header)
}
inline ::proto::QueryHeader* GetAccountDetailsQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* GetAccountDetailsQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* GetAccountDetailsQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* GetAccountDetailsQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsQuery.header)
  return _msg;
}
inline void GetAccountDetailsQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsQuery.header)
}

// .proto.AccountID account_id = 2;
inline bool GetAccountDetailsQuery::_internal_has_account_id() const {
  return this != internal_default_instance() && _impl_.account_id_ != nullptr;
}
inline bool GetAccountDetailsQuery::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::proto::AccountID& GetAccountDetailsQuery::_internal_account_id() const {
  const ::proto::AccountID* p = _impl_.account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& GetAccountDetailsQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsQuery.account_id)
  return _internal_account_id();
}
inline void GetAccountDetailsQuery::unsafe_arena_set_allocated_account_id(
    ::proto::AccountID* account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_id_);
  }
  _impl_.account_id_ = account_id;
  if (account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsQuery.account_id)
}
inline ::proto::AccountID* GetAccountDetailsQuery::release_account_id() {
  
  ::proto::AccountID* temp = _impl_.account_id_;
  _impl_.account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* GetAccountDetailsQuery::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsQuery.account_id)
  
  ::proto::AccountID* temp = _impl_.account_id_;
  _impl_.account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* GetAccountDetailsQuery::_internal_mutable_account_id() {
  
  if (_impl_.account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.account_id_ = p;
  }
  return _impl_.account_id_;
}
inline ::proto::AccountID* GetAccountDetailsQuery::mutable_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsQuery.account_id)
  return _msg;
}
inline void GetAccountDetailsQuery::set_allocated_account_id(::proto::AccountID* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id));
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsQuery.account_id)
}

// -------------------------------------------------------------------

// GetAccountDetailsResponse_AccountDetails

// .proto.AccountID account_id = 1;
inline bool GetAccountDetailsResponse_AccountDetails::_internal_has_account_id() const {
  return this != internal_default_instance() && _impl_.account_id_ != nullptr;
}
inline bool GetAccountDetailsResponse_AccountDetails::has_account_id() const {
  return _internal_has_account_id();
}
inline const ::proto::AccountID& GetAccountDetailsResponse_AccountDetails::_internal_account_id() const {
  const ::proto::AccountID* p = _impl_.account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& GetAccountDetailsResponse_AccountDetails::account_id() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.account_id)
  return _internal_account_id();
}
inline void GetAccountDetailsResponse_AccountDetails::unsafe_arena_set_allocated_account_id(
    ::proto::AccountID* account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_id_);
  }
  _impl_.account_id_ = account_id;
  if (account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.account_id)
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::release_account_id() {
  
  ::proto::AccountID* temp = _impl_.account_id_;
  _impl_.account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.account_id)
  
  ::proto::AccountID* temp = _impl_.account_id_;
  _impl_.account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::_internal_mutable_account_id() {
  
  if (_impl_.account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.account_id_ = p;
  }
  return _impl_.account_id_;
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::mutable_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.account_id)
  return _msg;
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_account_id(::proto::AccountID* account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_id_);
  }
  if (account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_id));
    if (message_arena != submessage_arena) {
      account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_id_ = account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.account_id)
}

// string contract_account_id = 2;
inline void GetAccountDetailsResponse_AccountDetails::clear_contract_account_id() {
  _impl_.contract_account_id_.ClearToEmpty();
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::contract_account_id() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.contract_account_id)
  return _internal_contract_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountDetailsResponse_AccountDetails::set_contract_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contract_account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.contract_account_id)
}
inline std::string* GetAccountDetailsResponse_AccountDetails::mutable_contract_account_id() {
  std::string* _s = _internal_mutable_contract_account_id();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.contract_account_id)
  return _s;
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::_internal_contract_account_id() const {
  return _impl_.contract_account_id_.Get();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_contract_account_id(const std::string& value) {
  
  _impl_.contract_account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::_internal_mutable_contract_account_id() {
  
  return _impl_.contract_account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::release_contract_account_id() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.contract_account_id)
  return _impl_.contract_account_id_.Release();
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_contract_account_id(std::string* contract_account_id) {
  if (contract_account_id != nullptr) {
    
  } else {
    
  }
  _impl_.contract_account_id_.SetAllocated(contract_account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contract_account_id_.IsDefault()) {
    _impl_.contract_account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.contract_account_id)
}

// bool deleted = 3;
inline void GetAccountDetailsResponse_AccountDetails::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool GetAccountDetailsResponse_AccountDetails::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool GetAccountDetailsResponse_AccountDetails::deleted() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.deleted)
  return _internal_deleted();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_deleted(bool value) {
  
  _impl_.deleted_ = value;
}
inline void GetAccountDetailsResponse_AccountDetails::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.deleted)
}

// .proto.AccountID proxy_account_id = 4 [deprecated = true];
inline bool GetAccountDetailsResponse_AccountDetails::_internal_has_proxy_account_id() const {
  return this != internal_default_instance() && _impl_.proxy_account_id_ != nullptr;
}
inline bool GetAccountDetailsResponse_AccountDetails::has_proxy_account_id() const {
  return _internal_has_proxy_account_id();
}
inline const ::proto::AccountID& GetAccountDetailsResponse_AccountDetails::_internal_proxy_account_id() const {
  const ::proto::AccountID* p = _impl_.proxy_account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& GetAccountDetailsResponse_AccountDetails::proxy_account_id() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.proxy_account_id)
  return _internal_proxy_account_id();
}
inline void GetAccountDetailsResponse_AccountDetails::unsafe_arena_set_allocated_proxy_account_id(
    ::proto::AccountID* proxy_account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxy_account_id_);
  }
  _impl_.proxy_account_id_ = proxy_account_id;
  if (proxy_account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.proxy_account_id)
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::release_proxy_account_id() {
  
  ::proto::AccountID* temp = _impl_.proxy_account_id_;
  _impl_.proxy_account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::unsafe_arena_release_proxy_account_id() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.proxy_account_id)
  
  ::proto::AccountID* temp = _impl_.proxy_account_id_;
  _impl_.proxy_account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::_internal_mutable_proxy_account_id() {
  
  if (_impl_.proxy_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.proxy_account_id_ = p;
  }
  return _impl_.proxy_account_id_;
}
inline ::proto::AccountID* GetAccountDetailsResponse_AccountDetails::mutable_proxy_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_proxy_account_id();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.proxy_account_id)
  return _msg;
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_proxy_account_id(::proto::AccountID* proxy_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxy_account_id_);
  }
  if (proxy_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxy_account_id));
    if (message_arena != submessage_arena) {
      proxy_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxy_account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proxy_account_id_ = proxy_account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.proxy_account_id)
}

// int64 proxy_received = 5;
inline void GetAccountDetailsResponse_AccountDetails::clear_proxy_received() {
  _impl_.proxy_received_ = int64_t{0};
}
inline int64_t GetAccountDetailsResponse_AccountDetails::_internal_proxy_received() const {
  return _impl_.proxy_received_;
}
inline int64_t GetAccountDetailsResponse_AccountDetails::proxy_received() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.proxy_received)
  return _internal_proxy_received();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_proxy_received(int64_t value) {
  
  _impl_.proxy_received_ = value;
}
inline void GetAccountDetailsResponse_AccountDetails::set_proxy_received(int64_t value) {
  _internal_set_proxy_received(value);
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.proxy_received)
}

// .proto.Key key = 6;
inline bool GetAccountDetailsResponse_AccountDetails::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool GetAccountDetailsResponse_AccountDetails::has_key() const {
  return _internal_has_key();
}
inline const ::proto::Key& GetAccountDetailsResponse_AccountDetails::_internal_key() const {
  const ::proto::Key* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& GetAccountDetailsResponse_AccountDetails::key() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.key)
  return _internal_key();
}
inline void GetAccountDetailsResponse_AccountDetails::unsafe_arena_set_allocated_key(
    ::proto::Key* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.key)
}
inline ::proto::Key* GetAccountDetailsResponse_AccountDetails::release_key() {
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* GetAccountDetailsResponse_AccountDetails::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.key)
  
  ::proto::Key* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::proto::Key* GetAccountDetailsResponse_AccountDetails::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::proto::Key* GetAccountDetailsResponse_AccountDetails::mutable_key() {
  ::proto::Key* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.key)
  return _msg;
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_key(::proto::Key* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.key)
}

// uint64 balance = 7;
inline void GetAccountDetailsResponse_AccountDetails::clear_balance() {
  _impl_.balance_ = uint64_t{0u};
}
inline uint64_t GetAccountDetailsResponse_AccountDetails::_internal_balance() const {
  return _impl_.balance_;
}
inline uint64_t GetAccountDetailsResponse_AccountDetails::balance() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.balance)
  return _internal_balance();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_balance(uint64_t value) {
  
  _impl_.balance_ = value;
}
inline void GetAccountDetailsResponse_AccountDetails::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.balance)
}

// bool receiver_sig_required = 8;
inline void GetAccountDetailsResponse_AccountDetails::clear_receiver_sig_required() {
  _impl_.receiver_sig_required_ = false;
}
inline bool GetAccountDetailsResponse_AccountDetails::_internal_receiver_sig_required() const {
  return _impl_.receiver_sig_required_;
}
inline bool GetAccountDetailsResponse_AccountDetails::receiver_sig_required() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.receiver_sig_required)
  return _internal_receiver_sig_required();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_receiver_sig_required(bool value) {
  
  _impl_.receiver_sig_required_ = value;
}
inline void GetAccountDetailsResponse_AccountDetails::set_receiver_sig_required(bool value) {
  _internal_set_receiver_sig_required(value);
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.receiver_sig_required)
}

// .proto.Timestamp expiration_time = 9;
inline bool GetAccountDetailsResponse_AccountDetails::_internal_has_expiration_time() const {
  return this != internal_default_instance() && _impl_.expiration_time_ != nullptr;
}
inline bool GetAccountDetailsResponse_AccountDetails::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const ::proto::Timestamp& GetAccountDetailsResponse_AccountDetails::_internal_expiration_time() const {
  const ::proto::Timestamp* p = _impl_.expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& GetAccountDetailsResponse_AccountDetails::expiration_time() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.expiration_time)
  return _internal_expiration_time();
}
inline void GetAccountDetailsResponse_AccountDetails::unsafe_arena_set_allocated_expiration_time(
    ::proto::Timestamp* expiration_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  _impl_.expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.expiration_time)
}
inline ::proto::Timestamp* GetAccountDetailsResponse_AccountDetails::release_expiration_time() {
  
  ::proto::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* GetAccountDetailsResponse_AccountDetails::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.expiration_time)
  
  ::proto::Timestamp* temp = _impl_.expiration_time_;
  _impl_.expiration_time_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* GetAccountDetailsResponse_AccountDetails::_internal_mutable_expiration_time() {
  
  if (_impl_.expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_time_ = p;
  }
  return _impl_.expiration_time_;
}
inline ::proto::Timestamp* GetAccountDetailsResponse_AccountDetails::mutable_expiration_time() {
  ::proto::Timestamp* _msg = _internal_mutable_expiration_time();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.expiration_time)
  return _msg;
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_expiration_time(::proto::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time));
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.expiration_time)
}

// .proto.Duration auto_renew_period = 10;
inline bool GetAccountDetailsResponse_AccountDetails::_internal_has_auto_renew_period() const {
  return this != internal_default_instance() && _impl_.auto_renew_period_ != nullptr;
}
inline bool GetAccountDetailsResponse_AccountDetails::has_auto_renew_period() const {
  return _internal_has_auto_renew_period();
}
inline const ::proto::Duration& GetAccountDetailsResponse_AccountDetails::_internal_auto_renew_period() const {
  const ::proto::Duration* p = _impl_.auto_renew_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& GetAccountDetailsResponse_AccountDetails::auto_renew_period() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.auto_renew_period)
  return _internal_auto_renew_period();
}
inline void GetAccountDetailsResponse_AccountDetails::unsafe_arena_set_allocated_auto_renew_period(
    ::proto::Duration* auto_renew_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_period_);
  }
  _impl_.auto_renew_period_ = auto_renew_period;
  if (auto_renew_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.auto_renew_period)
}
inline ::proto::Duration* GetAccountDetailsResponse_AccountDetails::release_auto_renew_period() {
  
  ::proto::Duration* temp = _impl_.auto_renew_period_;
  _impl_.auto_renew_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* GetAccountDetailsResponse_AccountDetails::unsafe_arena_release_auto_renew_period() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.auto_renew_period)
  
  ::proto::Duration* temp = _impl_.auto_renew_period_;
  _impl_.auto_renew_period_ = nullptr;
  return temp;
}
inline ::proto::Duration* GetAccountDetailsResponse_AccountDetails::_internal_mutable_auto_renew_period() {
  
  if (_impl_.auto_renew_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.auto_renew_period_ = p;
  }
  return _impl_.auto_renew_period_;
}
inline ::proto::Duration* GetAccountDetailsResponse_AccountDetails::mutable_auto_renew_period() {
  ::proto::Duration* _msg = _internal_mutable_auto_renew_period();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.auto_renew_period)
  return _msg;
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_auto_renew_period(::proto::Duration* auto_renew_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_period_);
  }
  if (auto_renew_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_renew_period));
    if (message_arena != submessage_arena) {
      auto_renew_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_renew_period, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_renew_period_ = auto_renew_period;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.auto_renew_period)
}

// repeated .proto.TokenRelationship token_relationships = 11;
inline int GetAccountDetailsResponse_AccountDetails::_internal_token_relationships_size() const {
  return _impl_.token_relationships_.size();
}
inline int GetAccountDetailsResponse_AccountDetails::token_relationships_size() const {
  return _internal_token_relationships_size();
}
inline ::proto::TokenRelationship* GetAccountDetailsResponse_AccountDetails::mutable_token_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.token_relationships)
  return _impl_.token_relationships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >*
GetAccountDetailsResponse_AccountDetails::mutable_token_relationships() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAccountDetailsResponse.AccountDetails.token_relationships)
  return &_impl_.token_relationships_;
}
inline const ::proto::TokenRelationship& GetAccountDetailsResponse_AccountDetails::_internal_token_relationships(int index) const {
  return _impl_.token_relationships_.Get(index);
}
inline const ::proto::TokenRelationship& GetAccountDetailsResponse_AccountDetails::token_relationships(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.token_relationships)
  return _internal_token_relationships(index);
}
inline ::proto::TokenRelationship* GetAccountDetailsResponse_AccountDetails::_internal_add_token_relationships() {
  return _impl_.token_relationships_.Add();
}
inline ::proto::TokenRelationship* GetAccountDetailsResponse_AccountDetails::add_token_relationships() {
  ::proto::TokenRelationship* _add = _internal_add_token_relationships();
  // @@protoc_insertion_point(field_add:proto.GetAccountDetailsResponse.AccountDetails.token_relationships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenRelationship >&
GetAccountDetailsResponse_AccountDetails::token_relationships() const {
  // @@protoc_insertion_point(field_list:proto.GetAccountDetailsResponse.AccountDetails.token_relationships)
  return _impl_.token_relationships_;
}

// string memo = 12;
inline void GetAccountDetailsResponse_AccountDetails::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::memo() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountDetailsResponse_AccountDetails::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.memo)
}
inline std::string* GetAccountDetailsResponse_AccountDetails::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.memo)
  return _s;
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::release_memo() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.memo)
  return _impl_.memo_.Release();
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.memo)
}

// int64 owned_nfts = 13;
inline void GetAccountDetailsResponse_AccountDetails::clear_owned_nfts() {
  _impl_.owned_nfts_ = int64_t{0};
}
inline int64_t GetAccountDetailsResponse_AccountDetails::_internal_owned_nfts() const {
  return _impl_.owned_nfts_;
}
inline int64_t GetAccountDetailsResponse_AccountDetails::owned_nfts() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.owned_nfts)
  return _internal_owned_nfts();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_owned_nfts(int64_t value) {
  
  _impl_.owned_nfts_ = value;
}
inline void GetAccountDetailsResponse_AccountDetails::set_owned_nfts(int64_t value) {
  _internal_set_owned_nfts(value);
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.owned_nfts)
}

// int32 max_automatic_token_associations = 14;
inline void GetAccountDetailsResponse_AccountDetails::clear_max_automatic_token_associations() {
  _impl_.max_automatic_token_associations_ = 0;
}
inline int32_t GetAccountDetailsResponse_AccountDetails::_internal_max_automatic_token_associations() const {
  return _impl_.max_automatic_token_associations_;
}
inline int32_t GetAccountDetailsResponse_AccountDetails::max_automatic_token_associations() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.max_automatic_token_associations)
  return _internal_max_automatic_token_associations();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_max_automatic_token_associations(int32_t value) {
  
  _impl_.max_automatic_token_associations_ = value;
}
inline void GetAccountDetailsResponse_AccountDetails::set_max_automatic_token_associations(int32_t value) {
  _internal_set_max_automatic_token_associations(value);
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.max_automatic_token_associations)
}

// bytes alias = 15;
inline void GetAccountDetailsResponse_AccountDetails::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::alias() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountDetailsResponse_AccountDetails::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.alias)
}
inline std::string* GetAccountDetailsResponse_AccountDetails::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.alias)
  return _s;
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::release_alias() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.alias)
  return _impl_.alias_.Release();
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.alias)
}

// bytes ledger_id = 16;
inline void GetAccountDetailsResponse_AccountDetails::clear_ledger_id() {
  _impl_.ledger_id_.ClearToEmpty();
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::ledger_id() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.ledger_id)
  return _internal_ledger_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccountDetailsResponse_AccountDetails::set_ledger_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ledger_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetAccountDetailsResponse.AccountDetails.ledger_id)
}
inline std::string* GetAccountDetailsResponse_AccountDetails::mutable_ledger_id() {
  std::string* _s = _internal_mutable_ledger_id();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.ledger_id)
  return _s;
}
inline const std::string& GetAccountDetailsResponse_AccountDetails::_internal_ledger_id() const {
  return _impl_.ledger_id_.Get();
}
inline void GetAccountDetailsResponse_AccountDetails::_internal_set_ledger_id(const std::string& value) {
  
  _impl_.ledger_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::_internal_mutable_ledger_id() {
  
  return _impl_.ledger_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccountDetailsResponse_AccountDetails::release_ledger_id() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.AccountDetails.ledger_id)
  return _impl_.ledger_id_.Release();
}
inline void GetAccountDetailsResponse_AccountDetails::set_allocated_ledger_id(std::string* ledger_id) {
  if (ledger_id != nullptr) {
    
  } else {
    
  }
  _impl_.ledger_id_.SetAllocated(ledger_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ledger_id_.IsDefault()) {
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.AccountDetails.ledger_id)
}

// repeated .proto.GrantedCryptoAllowance granted_crypto_allowances = 17;
inline int GetAccountDetailsResponse_AccountDetails::_internal_granted_crypto_allowances_size() const {
  return _impl_.granted_crypto_allowances_.size();
}
inline int GetAccountDetailsResponse_AccountDetails::granted_crypto_allowances_size() const {
  return _internal_granted_crypto_allowances_size();
}
inline void GetAccountDetailsResponse_AccountDetails::clear_granted_crypto_allowances() {
  _impl_.granted_crypto_allowances_.Clear();
}
inline ::proto::GrantedCryptoAllowance* GetAccountDetailsResponse_AccountDetails::mutable_granted_crypto_allowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.granted_crypto_allowances)
  return _impl_.granted_crypto_allowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedCryptoAllowance >*
GetAccountDetailsResponse_AccountDetails::mutable_granted_crypto_allowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAccountDetailsResponse.AccountDetails.granted_crypto_allowances)
  return &_impl_.granted_crypto_allowances_;
}
inline const ::proto::GrantedCryptoAllowance& GetAccountDetailsResponse_AccountDetails::_internal_granted_crypto_allowances(int index) const {
  return _impl_.granted_crypto_allowances_.Get(index);
}
inline const ::proto::GrantedCryptoAllowance& GetAccountDetailsResponse_AccountDetails::granted_crypto_allowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.granted_crypto_allowances)
  return _internal_granted_crypto_allowances(index);
}
inline ::proto::GrantedCryptoAllowance* GetAccountDetailsResponse_AccountDetails::_internal_add_granted_crypto_allowances() {
  return _impl_.granted_crypto_allowances_.Add();
}
inline ::proto::GrantedCryptoAllowance* GetAccountDetailsResponse_AccountDetails::add_granted_crypto_allowances() {
  ::proto::GrantedCryptoAllowance* _add = _internal_add_granted_crypto_allowances();
  // @@protoc_insertion_point(field_add:proto.GetAccountDetailsResponse.AccountDetails.granted_crypto_allowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedCryptoAllowance >&
GetAccountDetailsResponse_AccountDetails::granted_crypto_allowances() const {
  // @@protoc_insertion_point(field_list:proto.GetAccountDetailsResponse.AccountDetails.granted_crypto_allowances)
  return _impl_.granted_crypto_allowances_;
}

// repeated .proto.GrantedNftAllowance granted_nft_allowances = 18;
inline int GetAccountDetailsResponse_AccountDetails::_internal_granted_nft_allowances_size() const {
  return _impl_.granted_nft_allowances_.size();
}
inline int GetAccountDetailsResponse_AccountDetails::granted_nft_allowances_size() const {
  return _internal_granted_nft_allowances_size();
}
inline void GetAccountDetailsResponse_AccountDetails::clear_granted_nft_allowances() {
  _impl_.granted_nft_allowances_.Clear();
}
inline ::proto::GrantedNftAllowance* GetAccountDetailsResponse_AccountDetails::mutable_granted_nft_allowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.granted_nft_allowances)
  return _impl_.granted_nft_allowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedNftAllowance >*
GetAccountDetailsResponse_AccountDetails::mutable_granted_nft_allowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAccountDetailsResponse.AccountDetails.granted_nft_allowances)
  return &_impl_.granted_nft_allowances_;
}
inline const ::proto::GrantedNftAllowance& GetAccountDetailsResponse_AccountDetails::_internal_granted_nft_allowances(int index) const {
  return _impl_.granted_nft_allowances_.Get(index);
}
inline const ::proto::GrantedNftAllowance& GetAccountDetailsResponse_AccountDetails::granted_nft_allowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.granted_nft_allowances)
  return _internal_granted_nft_allowances(index);
}
inline ::proto::GrantedNftAllowance* GetAccountDetailsResponse_AccountDetails::_internal_add_granted_nft_allowances() {
  return _impl_.granted_nft_allowances_.Add();
}
inline ::proto::GrantedNftAllowance* GetAccountDetailsResponse_AccountDetails::add_granted_nft_allowances() {
  ::proto::GrantedNftAllowance* _add = _internal_add_granted_nft_allowances();
  // @@protoc_insertion_point(field_add:proto.GetAccountDetailsResponse.AccountDetails.granted_nft_allowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedNftAllowance >&
GetAccountDetailsResponse_AccountDetails::granted_nft_allowances() const {
  // @@protoc_insertion_point(field_list:proto.GetAccountDetailsResponse.AccountDetails.granted_nft_allowances)
  return _impl_.granted_nft_allowances_;
}

// repeated .proto.GrantedTokenAllowance granted_token_allowances = 19;
inline int GetAccountDetailsResponse_AccountDetails::_internal_granted_token_allowances_size() const {
  return _impl_.granted_token_allowances_.size();
}
inline int GetAccountDetailsResponse_AccountDetails::granted_token_allowances_size() const {
  return _internal_granted_token_allowances_size();
}
inline void GetAccountDetailsResponse_AccountDetails::clear_granted_token_allowances() {
  _impl_.granted_token_allowances_.Clear();
}
inline ::proto::GrantedTokenAllowance* GetAccountDetailsResponse_AccountDetails::mutable_granted_token_allowances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.AccountDetails.granted_token_allowances)
  return _impl_.granted_token_allowances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedTokenAllowance >*
GetAccountDetailsResponse_AccountDetails::mutable_granted_token_allowances() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAccountDetailsResponse.AccountDetails.granted_token_allowances)
  return &_impl_.granted_token_allowances_;
}
inline const ::proto::GrantedTokenAllowance& GetAccountDetailsResponse_AccountDetails::_internal_granted_token_allowances(int index) const {
  return _impl_.granted_token_allowances_.Get(index);
}
inline const ::proto::GrantedTokenAllowance& GetAccountDetailsResponse_AccountDetails::granted_token_allowances(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.AccountDetails.granted_token_allowances)
  return _internal_granted_token_allowances(index);
}
inline ::proto::GrantedTokenAllowance* GetAccountDetailsResponse_AccountDetails::_internal_add_granted_token_allowances() {
  return _impl_.granted_token_allowances_.Add();
}
inline ::proto::GrantedTokenAllowance* GetAccountDetailsResponse_AccountDetails::add_granted_token_allowances() {
  ::proto::GrantedTokenAllowance* _add = _internal_add_granted_token_allowances();
  // @@protoc_insertion_point(field_add:proto.GetAccountDetailsResponse.AccountDetails.granted_token_allowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GrantedTokenAllowance >&
GetAccountDetailsResponse_AccountDetails::granted_token_allowances() const {
  // @@protoc_insertion_point(field_list:proto.GetAccountDetailsResponse.AccountDetails.granted_token_allowances)
  return _impl_.granted_token_allowances_;
}

// -------------------------------------------------------------------

// GetAccountDetailsResponse

// .proto.ResponseHeader header = 1;
inline bool GetAccountDetailsResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool GetAccountDetailsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& GetAccountDetailsResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& GetAccountDetailsResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.header)
  return _internal_header();
}
inline void GetAccountDetailsResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.header)
}
inline ::proto::ResponseHeader* GetAccountDetailsResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* GetAccountDetailsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* GetAccountDetailsResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* GetAccountDetailsResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.header)
  return _msg;
}
inline void GetAccountDetailsResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.header)
}

// .proto.GetAccountDetailsResponse.AccountDetails account_details = 2;
inline bool GetAccountDetailsResponse::_internal_has_account_details() const {
  return this != internal_default_instance() && _impl_.account_details_ != nullptr;
}
inline bool GetAccountDetailsResponse::has_account_details() const {
  return _internal_has_account_details();
}
inline void GetAccountDetailsResponse::clear_account_details() {
  if (GetArenaForAllocation() == nullptr && _impl_.account_details_ != nullptr) {
    delete _impl_.account_details_;
  }
  _impl_.account_details_ = nullptr;
}
inline const ::proto::GetAccountDetailsResponse_AccountDetails& GetAccountDetailsResponse::_internal_account_details() const {
  const ::proto::GetAccountDetailsResponse_AccountDetails* p = _impl_.account_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::GetAccountDetailsResponse_AccountDetails&>(
      ::proto::_GetAccountDetailsResponse_AccountDetails_default_instance_);
}
inline const ::proto::GetAccountDetailsResponse_AccountDetails& GetAccountDetailsResponse::account_details() const {
  // @@protoc_insertion_point(field_get:proto.GetAccountDetailsResponse.account_details)
  return _internal_account_details();
}
inline void GetAccountDetailsResponse::unsafe_arena_set_allocated_account_details(
    ::proto::GetAccountDetailsResponse_AccountDetails* account_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_details_);
  }
  _impl_.account_details_ = account_details;
  if (account_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAccountDetailsResponse.account_details)
}
inline ::proto::GetAccountDetailsResponse_AccountDetails* GetAccountDetailsResponse::release_account_details() {
  
  ::proto::GetAccountDetailsResponse_AccountDetails* temp = _impl_.account_details_;
  _impl_.account_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::GetAccountDetailsResponse_AccountDetails* GetAccountDetailsResponse::unsafe_arena_release_account_details() {
  // @@protoc_insertion_point(field_release:proto.GetAccountDetailsResponse.account_details)
  
  ::proto::GetAccountDetailsResponse_AccountDetails* temp = _impl_.account_details_;
  _impl_.account_details_ = nullptr;
  return temp;
}
inline ::proto::GetAccountDetailsResponse_AccountDetails* GetAccountDetailsResponse::_internal_mutable_account_details() {
  
  if (_impl_.account_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::GetAccountDetailsResponse_AccountDetails>(GetArenaForAllocation());
    _impl_.account_details_ = p;
  }
  return _impl_.account_details_;
}
inline ::proto::GetAccountDetailsResponse_AccountDetails* GetAccountDetailsResponse::mutable_account_details() {
  ::proto::GetAccountDetailsResponse_AccountDetails* _msg = _internal_mutable_account_details();
  // @@protoc_insertion_point(field_mutable:proto.GetAccountDetailsResponse.account_details)
  return _msg;
}
inline void GetAccountDetailsResponse::set_allocated_account_details(::proto::GetAccountDetailsResponse_AccountDetails* account_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.account_details_;
  }
  if (account_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(account_details);
    if (message_arena != submessage_arena) {
      account_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_details, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_details_ = account_details;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAccountDetailsResponse.account_details)
}

// -------------------------------------------------------------------

// GrantedCryptoAllowance

// .proto.AccountID spender = 1;
inline bool GrantedCryptoAllowance::_internal_has_spender() const {
  return this != internal_default_instance() && _impl_.spender_ != nullptr;
}
inline bool GrantedCryptoAllowance::has_spender() const {
  return _internal_has_spender();
}
inline const ::proto::AccountID& GrantedCryptoAllowance::_internal_spender() const {
  const ::proto::AccountID* p = _impl_.spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& GrantedCryptoAllowance::spender() const {
  // @@protoc_insertion_point(field_get:proto.GrantedCryptoAllowance.spender)
  return _internal_spender();
}
inline void GrantedCryptoAllowance::unsafe_arena_set_allocated_spender(
    ::proto::AccountID* spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  _impl_.spender_ = spender;
  if (spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GrantedCryptoAllowance.spender)
}
inline ::proto::AccountID* GrantedCryptoAllowance::release_spender() {
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* GrantedCryptoAllowance::unsafe_arena_release_spender() {
  // @@protoc_insertion_point(field_release:proto.GrantedCryptoAllowance.spender)
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* GrantedCryptoAllowance::_internal_mutable_spender() {
  
  if (_impl_.spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_ = p;
  }
  return _impl_.spender_;
}
inline ::proto::AccountID* GrantedCryptoAllowance::mutable_spender() {
  ::proto::AccountID* _msg = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:proto.GrantedCryptoAllowance.spender)
  return _msg;
}
inline void GrantedCryptoAllowance::set_allocated_spender(::proto::AccountID* spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  if (spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender));
    if (message_arena != submessage_arena) {
      spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_ = spender;
  // @@protoc_insertion_point(field_set_allocated:proto.GrantedCryptoAllowance.spender)
}

// int64 amount = 2;
inline void GrantedCryptoAllowance::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t GrantedCryptoAllowance::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t GrantedCryptoAllowance::amount() const {
  // @@protoc_insertion_point(field_get:proto.GrantedCryptoAllowance.amount)
  return _internal_amount();
}
inline void GrantedCryptoAllowance::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void GrantedCryptoAllowance::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.GrantedCryptoAllowance.amount)
}

// -------------------------------------------------------------------

// GrantedNftAllowance

// .proto.TokenID token_id = 1;
inline bool GrantedNftAllowance::_internal_has_token_id() const {
  return this != internal_default_instance() && _impl_.token_id_ != nullptr;
}
inline bool GrantedNftAllowance::has_token_id() const {
  return _internal_has_token_id();
}
inline const ::proto::TokenID& GrantedNftAllowance::_internal_token_id() const {
  const ::proto::TokenID* p = _impl_.token_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& GrantedNftAllowance::token_id() const {
  // @@protoc_insertion_point(field_get:proto.GrantedNftAllowance.token_id)
  return _internal_token_id();
}
inline void GrantedNftAllowance::unsafe_arena_set_allocated_token_id(
    ::proto::TokenID* token_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  _impl_.token_id_ = token_id;
  if (token_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GrantedNftAllowance.token_id)
}
inline ::proto::TokenID* GrantedNftAllowance::release_token_id() {
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* GrantedNftAllowance::unsafe_arena_release_token_id() {
  // @@protoc_insertion_point(field_release:proto.GrantedNftAllowance.token_id)
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
  return temp;
}
inline ::proto::TokenID* GrantedNftAllowance::_internal_mutable_token_id() {
  
  if (_impl_.token_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.token_id_ = p;
  }
  return _impl_.token_id_;
}
inline ::proto::TokenID* GrantedNftAllowance::mutable_token_id() {
  ::proto::TokenID* _msg = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:proto.GrantedNftAllowance.token_id)
  return _msg;
}
inline void GrantedNftAllowance::set_allocated_token_id(::proto::TokenID* token_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  if (token_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_id));
    if (message_arena != submessage_arena) {
      token_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.token_id_ = token_id;
  // @@protoc_insertion_point(field_set_allocated:proto.GrantedNftAllowance.token_id)
}

// .proto.AccountID spender = 2;
inline bool GrantedNftAllowance::_internal_has_spender() const {
  return this != internal_default_instance() && _impl_.spender_ != nullptr;
}
inline bool GrantedNftAllowance::has_spender() const {
  return _internal_has_spender();
}
inline const ::proto::AccountID& GrantedNftAllowance::_internal_spender() const {
  const ::proto::AccountID* p = _impl_.spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& GrantedNftAllowance::spender() const {
  // @@protoc_insertion_point(field_get:proto.GrantedNftAllowance.spender)
  return _internal_spender();
}
inline void GrantedNftAllowance::unsafe_arena_set_allocated_spender(
    ::proto::AccountID* spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  _impl_.spender_ = spender;
  if (spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GrantedNftAllowance.spender)
}
inline ::proto::AccountID* GrantedNftAllowance::release_spender() {
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* GrantedNftAllowance::unsafe_arena_release_spender() {
  // @@protoc_insertion_point(field_release:proto.GrantedNftAllowance.spender)
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* GrantedNftAllowance::_internal_mutable_spender() {
  
  if (_impl_.spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_ = p;
  }
  return _impl_.spender_;
}
inline ::proto::AccountID* GrantedNftAllowance::mutable_spender() {
  ::proto::AccountID* _msg = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:proto.GrantedNftAllowance.spender)
  return _msg;
}
inline void GrantedNftAllowance::set_allocated_spender(::proto::AccountID* spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  if (spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender));
    if (message_arena != submessage_arena) {
      spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_ = spender;
  // @@protoc_insertion_point(field_set_allocated:proto.GrantedNftAllowance.spender)
}

// -------------------------------------------------------------------

// GrantedTokenAllowance

// .proto.TokenID token_id = 1;
inline bool GrantedTokenAllowance::_internal_has_token_id() const {
  return this != internal_default_instance() && _impl_.token_id_ != nullptr;
}
inline bool GrantedTokenAllowance::has_token_id() const {
  return _internal_has_token_id();
}
inline const ::proto::TokenID& GrantedTokenAllowance::_internal_token_id() const {
  const ::proto::TokenID* p = _impl_.token_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& GrantedTokenAllowance::token_id() const {
  // @@protoc_insertion_point(field_get:proto.GrantedTokenAllowance.token_id)
  return _internal_token_id();
}
inline void GrantedTokenAllowance::unsafe_arena_set_allocated_token_id(
    ::proto::TokenID* token_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  _impl_.token_id_ = token_id;
  if (token_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GrantedTokenAllowance.token_id)
}
inline ::proto::TokenID* GrantedTokenAllowance::release_token_id() {
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* GrantedTokenAllowance::unsafe_arena_release_token_id() {
  // @@protoc_insertion_point(field_release:proto.GrantedTokenAllowance.token_id)
  
  ::proto::TokenID* temp = _impl_.token_id_;
  _impl_.token_id_ = nullptr;
  return temp;
}
inline ::proto::TokenID* GrantedTokenAllowance::_internal_mutable_token_id() {
  
  if (_impl_.token_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.token_id_ = p;
  }
  return _impl_.token_id_;
}
inline ::proto::TokenID* GrantedTokenAllowance::mutable_token_id() {
  ::proto::TokenID* _msg = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:proto.GrantedTokenAllowance.token_id)
  return _msg;
}
inline void GrantedTokenAllowance::set_allocated_token_id(::proto::TokenID* token_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.token_id_);
  }
  if (token_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_id));
    if (message_arena != submessage_arena) {
      token_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.token_id_ = token_id;
  // @@protoc_insertion_point(field_set_allocated:proto.GrantedTokenAllowance.token_id)
}

// .proto.AccountID spender = 2;
inline bool GrantedTokenAllowance::_internal_has_spender() const {
  return this != internal_default_instance() && _impl_.spender_ != nullptr;
}
inline bool GrantedTokenAllowance::has_spender() const {
  return _internal_has_spender();
}
inline const ::proto::AccountID& GrantedTokenAllowance::_internal_spender() const {
  const ::proto::AccountID* p = _impl_.spender_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& GrantedTokenAllowance::spender() const {
  // @@protoc_insertion_point(field_get:proto.GrantedTokenAllowance.spender)
  return _internal_spender();
}
inline void GrantedTokenAllowance::unsafe_arena_set_allocated_spender(
    ::proto::AccountID* spender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  _impl_.spender_ = spender;
  if (spender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GrantedTokenAllowance.spender)
}
inline ::proto::AccountID* GrantedTokenAllowance::release_spender() {
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* GrantedTokenAllowance::unsafe_arena_release_spender() {
  // @@protoc_insertion_point(field_release:proto.GrantedTokenAllowance.spender)
  
  ::proto::AccountID* temp = _impl_.spender_;
  _impl_.spender_ = nullptr;
  return temp;
}
inline ::proto::AccountID* GrantedTokenAllowance::_internal_mutable_spender() {
  
  if (_impl_.spender_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.spender_ = p;
  }
  return _impl_.spender_;
}
inline ::proto::AccountID* GrantedTokenAllowance::mutable_spender() {
  ::proto::AccountID* _msg = _internal_mutable_spender();
  // @@protoc_insertion_point(field_mutable:proto.GrantedTokenAllowance.spender)
  return _msg;
}
inline void GrantedTokenAllowance::set_allocated_spender(::proto::AccountID* spender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spender_);
  }
  if (spender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spender));
    if (message_arena != submessage_arena) {
      spender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spender_ = spender;
  // @@protoc_insertion_point(field_set_allocated:proto.GrantedTokenAllowance.spender)
}

// int64 amount = 3;
inline void GrantedTokenAllowance::clear_amount() {
  _impl_.amount_ = int64_t{0};
}
inline int64_t GrantedTokenAllowance::_internal_amount() const {
  return _impl_.amount_;
}
inline int64_t GrantedTokenAllowance::amount() const {
  // @@protoc_insertion_point(field_get:proto.GrantedTokenAllowance.amount)
  return _internal_amount();
}
inline void GrantedTokenAllowance::_internal_set_amount(int64_t value) {
  
  _impl_.amount_ = value;
}
inline void GrantedTokenAllowance::set_amount(int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:proto.GrantedTokenAllowance.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_get_5faccount_5fdetails_2eproto

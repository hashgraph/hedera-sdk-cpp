// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freeze.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_freeze_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_freeze_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "duration.pb.h"
#include "timestamp.pb.h"
#include "basic_types.pb.h"
#include "freeze_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_freeze_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_freeze_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_freeze_2eproto;
namespace proto {
class FreezeTransactionBody;
struct FreezeTransactionBodyDefaultTypeInternal;
extern FreezeTransactionBodyDefaultTypeInternal _FreezeTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::FreezeTransactionBody* Arena::CreateMaybeMessage<::proto::FreezeTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class FreezeTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FreezeTransactionBody) */ {
 public:
  inline FreezeTransactionBody() : FreezeTransactionBody(nullptr) {}
  ~FreezeTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR FreezeTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FreezeTransactionBody(const FreezeTransactionBody& from);
  FreezeTransactionBody(FreezeTransactionBody&& from) noexcept
    : FreezeTransactionBody() {
    *this = ::std::move(from);
  }

  inline FreezeTransactionBody& operator=(const FreezeTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreezeTransactionBody& operator=(FreezeTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FreezeTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const FreezeTransactionBody* internal_default_instance() {
    return reinterpret_cast<const FreezeTransactionBody*>(
               &_FreezeTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FreezeTransactionBody& a, FreezeTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(FreezeTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreezeTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FreezeTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FreezeTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FreezeTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FreezeTransactionBody& from) {
    FreezeTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreezeTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FreezeTransactionBody";
  }
  protected:
  explicit FreezeTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileHashFieldNumber = 6,
    kUpdateFileFieldNumber = 5,
    kStartTimeFieldNumber = 7,
    kStartHourFieldNumber = 1,
    kStartMinFieldNumber = 2,
    kEndHourFieldNumber = 3,
    kEndMinFieldNumber = 4,
    kFreezeTypeFieldNumber = 8,
  };
  // bytes file_hash = 6;
  void clear_file_hash();
  const std::string& file_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_hash();
  PROTOBUF_NODISCARD std::string* release_file_hash();
  void set_allocated_file_hash(std::string* file_hash);
  private:
  const std::string& _internal_file_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_hash(const std::string& value);
  std::string* _internal_mutable_file_hash();
  public:

  // .proto.FileID update_file = 5;
  bool has_update_file() const;
  private:
  bool _internal_has_update_file() const;
  public:
  void clear_update_file();
  const ::proto::FileID& update_file() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_update_file();
  ::proto::FileID* mutable_update_file();
  void set_allocated_update_file(::proto::FileID* update_file);
  private:
  const ::proto::FileID& _internal_update_file() const;
  ::proto::FileID* _internal_mutable_update_file();
  public:
  void unsafe_arena_set_allocated_update_file(
      ::proto::FileID* update_file);
  ::proto::FileID* unsafe_arena_release_update_file();

  // .proto.Timestamp start_time = 7;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::proto::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_start_time();
  ::proto::Timestamp* mutable_start_time();
  void set_allocated_start_time(::proto::Timestamp* start_time);
  private:
  const ::proto::Timestamp& _internal_start_time() const;
  ::proto::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::proto::Timestamp* start_time);
  ::proto::Timestamp* unsafe_arena_release_start_time();

  // int32 startHour = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_starthour();
  PROTOBUF_DEPRECATED int32_t starthour() const;
  PROTOBUF_DEPRECATED void set_starthour(int32_t value);
  private:
  int32_t _internal_starthour() const;
  void _internal_set_starthour(int32_t value);
  public:

  // int32 startMin = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_startmin();
  PROTOBUF_DEPRECATED int32_t startmin() const;
  PROTOBUF_DEPRECATED void set_startmin(int32_t value);
  private:
  int32_t _internal_startmin() const;
  void _internal_set_startmin(int32_t value);
  public:

  // int32 endHour = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_endhour();
  PROTOBUF_DEPRECATED int32_t endhour() const;
  PROTOBUF_DEPRECATED void set_endhour(int32_t value);
  private:
  int32_t _internal_endhour() const;
  void _internal_set_endhour(int32_t value);
  public:

  // int32 endMin = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_endmin();
  PROTOBUF_DEPRECATED int32_t endmin() const;
  PROTOBUF_DEPRECATED void set_endmin(int32_t value);
  private:
  int32_t _internal_endmin() const;
  void _internal_set_endmin(int32_t value);
  public:

  // .proto.FreezeType freeze_type = 8;
  void clear_freeze_type();
  ::proto::FreezeType freeze_type() const;
  void set_freeze_type(::proto::FreezeType value);
  private:
  ::proto::FreezeType _internal_freeze_type() const;
  void _internal_set_freeze_type(::proto::FreezeType value);
  public:

  // @@protoc_insertion_point(class_scope:proto.FreezeTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_hash_;
    ::proto::FileID* update_file_;
    ::proto::Timestamp* start_time_;
    int32_t starthour_;
    int32_t startmin_;
    int32_t endhour_;
    int32_t endmin_;
    int freeze_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_freeze_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FreezeTransactionBody

// int32 startHour = 1 [deprecated = true];
inline void FreezeTransactionBody::clear_starthour() {
  _impl_.starthour_ = 0;
}
inline int32_t FreezeTransactionBody::_internal_starthour() const {
  return _impl_.starthour_;
}
inline int32_t FreezeTransactionBody::starthour() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.startHour)
  return _internal_starthour();
}
inline void FreezeTransactionBody::_internal_set_starthour(int32_t value) {
  
  _impl_.starthour_ = value;
}
inline void FreezeTransactionBody::set_starthour(int32_t value) {
  _internal_set_starthour(value);
  // @@protoc_insertion_point(field_set:proto.FreezeTransactionBody.startHour)
}

// int32 startMin = 2 [deprecated = true];
inline void FreezeTransactionBody::clear_startmin() {
  _impl_.startmin_ = 0;
}
inline int32_t FreezeTransactionBody::_internal_startmin() const {
  return _impl_.startmin_;
}
inline int32_t FreezeTransactionBody::startmin() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.startMin)
  return _internal_startmin();
}
inline void FreezeTransactionBody::_internal_set_startmin(int32_t value) {
  
  _impl_.startmin_ = value;
}
inline void FreezeTransactionBody::set_startmin(int32_t value) {
  _internal_set_startmin(value);
  // @@protoc_insertion_point(field_set:proto.FreezeTransactionBody.startMin)
}

// int32 endHour = 3 [deprecated = true];
inline void FreezeTransactionBody::clear_endhour() {
  _impl_.endhour_ = 0;
}
inline int32_t FreezeTransactionBody::_internal_endhour() const {
  return _impl_.endhour_;
}
inline int32_t FreezeTransactionBody::endhour() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.endHour)
  return _internal_endhour();
}
inline void FreezeTransactionBody::_internal_set_endhour(int32_t value) {
  
  _impl_.endhour_ = value;
}
inline void FreezeTransactionBody::set_endhour(int32_t value) {
  _internal_set_endhour(value);
  // @@protoc_insertion_point(field_set:proto.FreezeTransactionBody.endHour)
}

// int32 endMin = 4 [deprecated = true];
inline void FreezeTransactionBody::clear_endmin() {
  _impl_.endmin_ = 0;
}
inline int32_t FreezeTransactionBody::_internal_endmin() const {
  return _impl_.endmin_;
}
inline int32_t FreezeTransactionBody::endmin() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.endMin)
  return _internal_endmin();
}
inline void FreezeTransactionBody::_internal_set_endmin(int32_t value) {
  
  _impl_.endmin_ = value;
}
inline void FreezeTransactionBody::set_endmin(int32_t value) {
  _internal_set_endmin(value);
  // @@protoc_insertion_point(field_set:proto.FreezeTransactionBody.endMin)
}

// .proto.FileID update_file = 5;
inline bool FreezeTransactionBody::_internal_has_update_file() const {
  return this != internal_default_instance() && _impl_.update_file_ != nullptr;
}
inline bool FreezeTransactionBody::has_update_file() const {
  return _internal_has_update_file();
}
inline const ::proto::FileID& FreezeTransactionBody::_internal_update_file() const {
  const ::proto::FileID* p = _impl_.update_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& FreezeTransactionBody::update_file() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.update_file)
  return _internal_update_file();
}
inline void FreezeTransactionBody::unsafe_arena_set_allocated_update_file(
    ::proto::FileID* update_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_file_);
  }
  _impl_.update_file_ = update_file;
  if (update_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FreezeTransactionBody.update_file)
}
inline ::proto::FileID* FreezeTransactionBody::release_update_file() {
  
  ::proto::FileID* temp = _impl_.update_file_;
  _impl_.update_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* FreezeTransactionBody::unsafe_arena_release_update_file() {
  // @@protoc_insertion_point(field_release:proto.FreezeTransactionBody.update_file)
  
  ::proto::FileID* temp = _impl_.update_file_;
  _impl_.update_file_ = nullptr;
  return temp;
}
inline ::proto::FileID* FreezeTransactionBody::_internal_mutable_update_file() {
  
  if (_impl_.update_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.update_file_ = p;
  }
  return _impl_.update_file_;
}
inline ::proto::FileID* FreezeTransactionBody::mutable_update_file() {
  ::proto::FileID* _msg = _internal_mutable_update_file();
  // @@protoc_insertion_point(field_mutable:proto.FreezeTransactionBody.update_file)
  return _msg;
}
inline void FreezeTransactionBody::set_allocated_update_file(::proto::FileID* update_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_file_);
  }
  if (update_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_file));
    if (message_arena != submessage_arena) {
      update_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.update_file_ = update_file;
  // @@protoc_insertion_point(field_set_allocated:proto.FreezeTransactionBody.update_file)
}

// bytes file_hash = 6;
inline void FreezeTransactionBody::clear_file_hash() {
  _impl_.file_hash_.ClearToEmpty();
}
inline const std::string& FreezeTransactionBody::file_hash() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.file_hash)
  return _internal_file_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FreezeTransactionBody::set_file_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.FreezeTransactionBody.file_hash)
}
inline std::string* FreezeTransactionBody::mutable_file_hash() {
  std::string* _s = _internal_mutable_file_hash();
  // @@protoc_insertion_point(field_mutable:proto.FreezeTransactionBody.file_hash)
  return _s;
}
inline const std::string& FreezeTransactionBody::_internal_file_hash() const {
  return _impl_.file_hash_.Get();
}
inline void FreezeTransactionBody::_internal_set_file_hash(const std::string& value) {
  
  _impl_.file_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* FreezeTransactionBody::_internal_mutable_file_hash() {
  
  return _impl_.file_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* FreezeTransactionBody::release_file_hash() {
  // @@protoc_insertion_point(field_release:proto.FreezeTransactionBody.file_hash)
  return _impl_.file_hash_.Release();
}
inline void FreezeTransactionBody::set_allocated_file_hash(std::string* file_hash) {
  if (file_hash != nullptr) {
    
  } else {
    
  }
  _impl_.file_hash_.SetAllocated(file_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_hash_.IsDefault()) {
    _impl_.file_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.FreezeTransactionBody.file_hash)
}

// .proto.Timestamp start_time = 7;
inline bool FreezeTransactionBody::_internal_has_start_time() const {
  return this != internal_default_instance() && _impl_.start_time_ != nullptr;
}
inline bool FreezeTransactionBody::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::proto::Timestamp& FreezeTransactionBody::_internal_start_time() const {
  const ::proto::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& FreezeTransactionBody::start_time() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.start_time)
  return _internal_start_time();
}
inline void FreezeTransactionBody::unsafe_arena_set_allocated_start_time(
    ::proto::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FreezeTransactionBody.start_time)
}
inline ::proto::Timestamp* FreezeTransactionBody::release_start_time() {
  
  ::proto::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* FreezeTransactionBody::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:proto.FreezeTransactionBody.start_time)
  
  ::proto::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* FreezeTransactionBody::_internal_mutable_start_time() {
  
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::proto::Timestamp* FreezeTransactionBody::mutable_start_time() {
  ::proto::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:proto.FreezeTransactionBody.start_time)
  return _msg;
}
inline void FreezeTransactionBody::set_allocated_start_time(::proto::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:proto.FreezeTransactionBody.start_time)
}

// .proto.FreezeType freeze_type = 8;
inline void FreezeTransactionBody::clear_freeze_type() {
  _impl_.freeze_type_ = 0;
}
inline ::proto::FreezeType FreezeTransactionBody::_internal_freeze_type() const {
  return static_cast< ::proto::FreezeType >(_impl_.freeze_type_);
}
inline ::proto::FreezeType FreezeTransactionBody::freeze_type() const {
  // @@protoc_insertion_point(field_get:proto.FreezeTransactionBody.freeze_type)
  return _internal_freeze_type();
}
inline void FreezeTransactionBody::_internal_set_freeze_type(::proto::FreezeType value) {
  
  _impl_.freeze_type_ = value;
}
inline void FreezeTransactionBody::set_freeze_type(::proto::FreezeType value) {
  _internal_set_freeze_type(value);
  // @@protoc_insertion_point(field_set:proto.FreezeTransactionBody.freeze_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_freeze_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "timestamp.pb.h"
#include "basic_types.pb.h"
#include "custom_fees.pb.h"
#include "transaction_receipt.pb.h"
#include "crypto_transfer.pb.h"
#include "contract_call_local.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5frecord_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5frecord_2eproto;
namespace proto {
class TransactionRecord;
struct TransactionRecordDefaultTypeInternal;
extern TransactionRecordDefaultTypeInternal _TransactionRecord_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TransactionRecord* Arena::CreateMaybeMessage<::proto::TransactionRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TransactionRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransactionRecord) */ {
 public:
  inline TransactionRecord() : TransactionRecord(nullptr) {}
  ~TransactionRecord() override;
  explicit PROTOBUF_CONSTEXPR TransactionRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionRecord(const TransactionRecord& from);
  TransactionRecord(TransactionRecord&& from) noexcept
    : TransactionRecord() {
    *this = ::std::move(from);
  }

  inline TransactionRecord& operator=(const TransactionRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRecord& operator=(TransactionRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionRecord& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kContractCallResult = 7,
    kContractCreateResult = 8,
    BODY_NOT_SET = 0,
  };

  enum EntropyCase {
    kPrngBytes = 19,
    kPrngNumber = 20,
    ENTROPY_NOT_SET = 0,
  };

  static inline const TransactionRecord* internal_default_instance() {
    return reinterpret_cast<const TransactionRecord*>(
               &_TransactionRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionRecord& a, TransactionRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionRecord& from) {
    TransactionRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransactionRecord";
  }
  protected:
  explicit TransactionRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenTransferListsFieldNumber = 11,
    kAssessedCustomFeesFieldNumber = 13,
    kAutomaticTokenAssociationsFieldNumber = 14,
    kPaidStakingRewardsFieldNumber = 18,
    kTransactionHashFieldNumber = 2,
    kMemoFieldNumber = 5,
    kAliasFieldNumber = 16,
    kEthereumHashFieldNumber = 17,
    kReceiptFieldNumber = 1,
    kConsensusTimestampFieldNumber = 3,
    kTransactionIDFieldNumber = 4,
    kTransferListFieldNumber = 10,
    kScheduleRefFieldNumber = 12,
    kParentConsensusTimestampFieldNumber = 15,
    kTransactionFeeFieldNumber = 6,
    kContractCallResultFieldNumber = 7,
    kContractCreateResultFieldNumber = 8,
    kPrngBytesFieldNumber = 19,
    kPrngNumberFieldNumber = 20,
  };
  // repeated .proto.TokenTransferList tokenTransferLists = 11;
  int tokentransferlists_size() const;
  private:
  int _internal_tokentransferlists_size() const;
  public:
  void clear_tokentransferlists();
  ::proto::TokenTransferList* mutable_tokentransferlists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >*
      mutable_tokentransferlists();
  private:
  const ::proto::TokenTransferList& _internal_tokentransferlists(int index) const;
  ::proto::TokenTransferList* _internal_add_tokentransferlists();
  public:
  const ::proto::TokenTransferList& tokentransferlists(int index) const;
  ::proto::TokenTransferList* add_tokentransferlists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >&
      tokentransferlists() const;

  // repeated .proto.AssessedCustomFee assessed_custom_fees = 13;
  int assessed_custom_fees_size() const;
  private:
  int _internal_assessed_custom_fees_size() const;
  public:
  void clear_assessed_custom_fees();
  ::proto::AssessedCustomFee* mutable_assessed_custom_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AssessedCustomFee >*
      mutable_assessed_custom_fees();
  private:
  const ::proto::AssessedCustomFee& _internal_assessed_custom_fees(int index) const;
  ::proto::AssessedCustomFee* _internal_add_assessed_custom_fees();
  public:
  const ::proto::AssessedCustomFee& assessed_custom_fees(int index) const;
  ::proto::AssessedCustomFee* add_assessed_custom_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AssessedCustomFee >&
      assessed_custom_fees() const;

  // repeated .proto.TokenAssociation automatic_token_associations = 14;
  int automatic_token_associations_size() const;
  private:
  int _internal_automatic_token_associations_size() const;
  public:
  void clear_automatic_token_associations();
  ::proto::TokenAssociation* mutable_automatic_token_associations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAssociation >*
      mutable_automatic_token_associations();
  private:
  const ::proto::TokenAssociation& _internal_automatic_token_associations(int index) const;
  ::proto::TokenAssociation* _internal_add_automatic_token_associations();
  public:
  const ::proto::TokenAssociation& automatic_token_associations(int index) const;
  ::proto::TokenAssociation* add_automatic_token_associations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAssociation >&
      automatic_token_associations() const;

  // repeated .proto.AccountAmount paid_staking_rewards = 18;
  int paid_staking_rewards_size() const;
  private:
  int _internal_paid_staking_rewards_size() const;
  public:
  void clear_paid_staking_rewards();
  ::proto::AccountAmount* mutable_paid_staking_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountAmount >*
      mutable_paid_staking_rewards();
  private:
  const ::proto::AccountAmount& _internal_paid_staking_rewards(int index) const;
  ::proto::AccountAmount* _internal_add_paid_staking_rewards();
  public:
  const ::proto::AccountAmount& paid_staking_rewards(int index) const;
  ::proto::AccountAmount* add_paid_staking_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountAmount >&
      paid_staking_rewards() const;

  // bytes transactionHash = 2;
  void clear_transactionhash();
  const std::string& transactionhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactionhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactionhash();
  PROTOBUF_NODISCARD std::string* release_transactionhash();
  void set_allocated_transactionhash(std::string* transactionhash);
  private:
  const std::string& _internal_transactionhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionhash(const std::string& value);
  std::string* _internal_mutable_transactionhash();
  public:

  // string memo = 5;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes alias = 16;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // bytes ethereum_hash = 17;
  void clear_ethereum_hash();
  const std::string& ethereum_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ethereum_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ethereum_hash();
  PROTOBUF_NODISCARD std::string* release_ethereum_hash();
  void set_allocated_ethereum_hash(std::string* ethereum_hash);
  private:
  const std::string& _internal_ethereum_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ethereum_hash(const std::string& value);
  std::string* _internal_mutable_ethereum_hash();
  public:

  // .proto.TransactionReceipt receipt = 1;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::proto::TransactionReceipt& receipt() const;
  PROTOBUF_NODISCARD ::proto::TransactionReceipt* release_receipt();
  ::proto::TransactionReceipt* mutable_receipt();
  void set_allocated_receipt(::proto::TransactionReceipt* receipt);
  private:
  const ::proto::TransactionReceipt& _internal_receipt() const;
  ::proto::TransactionReceipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::proto::TransactionReceipt* receipt);
  ::proto::TransactionReceipt* unsafe_arena_release_receipt();

  // .proto.Timestamp consensusTimestamp = 3;
  bool has_consensustimestamp() const;
  private:
  bool _internal_has_consensustimestamp() const;
  public:
  void clear_consensustimestamp();
  const ::proto::Timestamp& consensustimestamp() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_consensustimestamp();
  ::proto::Timestamp* mutable_consensustimestamp();
  void set_allocated_consensustimestamp(::proto::Timestamp* consensustimestamp);
  private:
  const ::proto::Timestamp& _internal_consensustimestamp() const;
  ::proto::Timestamp* _internal_mutable_consensustimestamp();
  public:
  void unsafe_arena_set_allocated_consensustimestamp(
      ::proto::Timestamp* consensustimestamp);
  ::proto::Timestamp* unsafe_arena_release_consensustimestamp();

  // .proto.TransactionID transactionID = 4;
  bool has_transactionid() const;
  private:
  bool _internal_has_transactionid() const;
  public:
  void clear_transactionid();
  const ::proto::TransactionID& transactionid() const;
  PROTOBUF_NODISCARD ::proto::TransactionID* release_transactionid();
  ::proto::TransactionID* mutable_transactionid();
  void set_allocated_transactionid(::proto::TransactionID* transactionid);
  private:
  const ::proto::TransactionID& _internal_transactionid() const;
  ::proto::TransactionID* _internal_mutable_transactionid();
  public:
  void unsafe_arena_set_allocated_transactionid(
      ::proto::TransactionID* transactionid);
  ::proto::TransactionID* unsafe_arena_release_transactionid();

  // .proto.TransferList transferList = 10;
  bool has_transferlist() const;
  private:
  bool _internal_has_transferlist() const;
  public:
  void clear_transferlist();
  const ::proto::TransferList& transferlist() const;
  PROTOBUF_NODISCARD ::proto::TransferList* release_transferlist();
  ::proto::TransferList* mutable_transferlist();
  void set_allocated_transferlist(::proto::TransferList* transferlist);
  private:
  const ::proto::TransferList& _internal_transferlist() const;
  ::proto::TransferList* _internal_mutable_transferlist();
  public:
  void unsafe_arena_set_allocated_transferlist(
      ::proto::TransferList* transferlist);
  ::proto::TransferList* unsafe_arena_release_transferlist();

  // .proto.ScheduleID scheduleRef = 12;
  bool has_scheduleref() const;
  private:
  bool _internal_has_scheduleref() const;
  public:
  void clear_scheduleref();
  const ::proto::ScheduleID& scheduleref() const;
  PROTOBUF_NODISCARD ::proto::ScheduleID* release_scheduleref();
  ::proto::ScheduleID* mutable_scheduleref();
  void set_allocated_scheduleref(::proto::ScheduleID* scheduleref);
  private:
  const ::proto::ScheduleID& _internal_scheduleref() const;
  ::proto::ScheduleID* _internal_mutable_scheduleref();
  public:
  void unsafe_arena_set_allocated_scheduleref(
      ::proto::ScheduleID* scheduleref);
  ::proto::ScheduleID* unsafe_arena_release_scheduleref();

  // .proto.Timestamp parent_consensus_timestamp = 15;
  bool has_parent_consensus_timestamp() const;
  private:
  bool _internal_has_parent_consensus_timestamp() const;
  public:
  void clear_parent_consensus_timestamp();
  const ::proto::Timestamp& parent_consensus_timestamp() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_parent_consensus_timestamp();
  ::proto::Timestamp* mutable_parent_consensus_timestamp();
  void set_allocated_parent_consensus_timestamp(::proto::Timestamp* parent_consensus_timestamp);
  private:
  const ::proto::Timestamp& _internal_parent_consensus_timestamp() const;
  ::proto::Timestamp* _internal_mutable_parent_consensus_timestamp();
  public:
  void unsafe_arena_set_allocated_parent_consensus_timestamp(
      ::proto::Timestamp* parent_consensus_timestamp);
  ::proto::Timestamp* unsafe_arena_release_parent_consensus_timestamp();

  // uint64 transactionFee = 6;
  void clear_transactionfee();
  uint64_t transactionfee() const;
  void set_transactionfee(uint64_t value);
  private:
  uint64_t _internal_transactionfee() const;
  void _internal_set_transactionfee(uint64_t value);
  public:

  // .proto.ContractFunctionResult contractCallResult = 7;
  bool has_contractcallresult() const;
  private:
  bool _internal_has_contractcallresult() const;
  public:
  void clear_contractcallresult();
  const ::proto::ContractFunctionResult& contractcallresult() const;
  PROTOBUF_NODISCARD ::proto::ContractFunctionResult* release_contractcallresult();
  ::proto::ContractFunctionResult* mutable_contractcallresult();
  void set_allocated_contractcallresult(::proto::ContractFunctionResult* contractcallresult);
  private:
  const ::proto::ContractFunctionResult& _internal_contractcallresult() const;
  ::proto::ContractFunctionResult* _internal_mutable_contractcallresult();
  public:
  void unsafe_arena_set_allocated_contractcallresult(
      ::proto::ContractFunctionResult* contractcallresult);
  ::proto::ContractFunctionResult* unsafe_arena_release_contractcallresult();

  // .proto.ContractFunctionResult contractCreateResult = 8;
  bool has_contractcreateresult() const;
  private:
  bool _internal_has_contractcreateresult() const;
  public:
  void clear_contractcreateresult();
  const ::proto::ContractFunctionResult& contractcreateresult() const;
  PROTOBUF_NODISCARD ::proto::ContractFunctionResult* release_contractcreateresult();
  ::proto::ContractFunctionResult* mutable_contractcreateresult();
  void set_allocated_contractcreateresult(::proto::ContractFunctionResult* contractcreateresult);
  private:
  const ::proto::ContractFunctionResult& _internal_contractcreateresult() const;
  ::proto::ContractFunctionResult* _internal_mutable_contractcreateresult();
  public:
  void unsafe_arena_set_allocated_contractcreateresult(
      ::proto::ContractFunctionResult* contractcreateresult);
  ::proto::ContractFunctionResult* unsafe_arena_release_contractcreateresult();

  // bytes prng_bytes = 19;
  bool has_prng_bytes() const;
  private:
  bool _internal_has_prng_bytes() const;
  public:
  void clear_prng_bytes();
  const std::string& prng_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prng_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prng_bytes();
  PROTOBUF_NODISCARD std::string* release_prng_bytes();
  void set_allocated_prng_bytes(std::string* prng_bytes);
  private:
  const std::string& _internal_prng_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prng_bytes(const std::string& value);
  std::string* _internal_mutable_prng_bytes();
  public:

  // int32 prng_number = 20;
  bool has_prng_number() const;
  private:
  bool _internal_has_prng_number() const;
  public:
  void clear_prng_number();
  int32_t prng_number() const;
  void set_prng_number(int32_t value);
  private:
  int32_t _internal_prng_number() const;
  void _internal_set_prng_number(int32_t value);
  public:

  void clear_body();
  BodyCase body_case() const;
  void clear_entropy();
  EntropyCase entropy_case() const;
  // @@protoc_insertion_point(class_scope:proto.TransactionRecord)
 private:
  class _Internal;
  void set_has_contractcallresult();
  void set_has_contractcreateresult();
  void set_has_prng_bytes();
  void set_has_prng_number();

  inline bool has_body() const;
  inline void clear_has_body();

  inline bool has_entropy() const;
  inline void clear_has_entropy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList > tokentransferlists_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AssessedCustomFee > assessed_custom_fees_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAssociation > automatic_token_associations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountAmount > paid_staking_rewards_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethereum_hash_;
    ::proto::TransactionReceipt* receipt_;
    ::proto::Timestamp* consensustimestamp_;
    ::proto::TransactionID* transactionid_;
    ::proto::TransferList* transferlist_;
    ::proto::ScheduleID* scheduleref_;
    ::proto::Timestamp* parent_consensus_timestamp_;
    uint64_t transactionfee_;
    union BodyUnion {
      constexpr BodyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::ContractFunctionResult* contractcallresult_;
      ::proto::ContractFunctionResult* contractcreateresult_;
    } body_;
    union EntropyUnion {
      constexpr EntropyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prng_bytes_;
      int32_t prng_number_;
    } entropy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionRecord

// .proto.TransactionReceipt receipt = 1;
inline bool TransactionRecord::_internal_has_receipt() const {
  return this != internal_default_instance() && _impl_.receipt_ != nullptr;
}
inline bool TransactionRecord::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::proto::TransactionReceipt& TransactionRecord::_internal_receipt() const {
  const ::proto::TransactionReceipt* p = _impl_.receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionReceipt&>(
      ::proto::_TransactionReceipt_default_instance_);
}
inline const ::proto::TransactionReceipt& TransactionRecord::receipt() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.receipt)
  return _internal_receipt();
}
inline void TransactionRecord::unsafe_arena_set_allocated_receipt(
    ::proto::TransactionReceipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receipt_);
  }
  _impl_.receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.receipt)
}
inline ::proto::TransactionReceipt* TransactionRecord::release_receipt() {
  
  ::proto::TransactionReceipt* temp = _impl_.receipt_;
  _impl_.receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionReceipt* TransactionRecord::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.receipt)
  
  ::proto::TransactionReceipt* temp = _impl_.receipt_;
  _impl_.receipt_ = nullptr;
  return temp;
}
inline ::proto::TransactionReceipt* TransactionRecord::_internal_mutable_receipt() {
  
  if (_impl_.receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionReceipt>(GetArenaForAllocation());
    _impl_.receipt_ = p;
  }
  return _impl_.receipt_;
}
inline ::proto::TransactionReceipt* TransactionRecord::mutable_receipt() {
  ::proto::TransactionReceipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.receipt)
  return _msg;
}
inline void TransactionRecord::set_allocated_receipt(::proto::TransactionReceipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.receipt)
}

// bytes transactionHash = 2;
inline void TransactionRecord::clear_transactionhash() {
  _impl_.transactionhash_.ClearToEmpty();
}
inline const std::string& TransactionRecord::transactionhash() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.transactionHash)
  return _internal_transactionhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionRecord::set_transactionhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transactionhash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.transactionHash)
}
inline std::string* TransactionRecord::mutable_transactionhash() {
  std::string* _s = _internal_mutable_transactionhash();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.transactionHash)
  return _s;
}
inline const std::string& TransactionRecord::_internal_transactionhash() const {
  return _impl_.transactionhash_.Get();
}
inline void TransactionRecord::_internal_set_transactionhash(const std::string& value) {
  
  _impl_.transactionhash_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionRecord::_internal_mutable_transactionhash() {
  
  return _impl_.transactionhash_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionRecord::release_transactionhash() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.transactionHash)
  return _impl_.transactionhash_.Release();
}
inline void TransactionRecord::set_allocated_transactionhash(std::string* transactionhash) {
  if (transactionhash != nullptr) {
    
  } else {
    
  }
  _impl_.transactionhash_.SetAllocated(transactionhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transactionhash_.IsDefault()) {
    _impl_.transactionhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.transactionHash)
}

// .proto.Timestamp consensusTimestamp = 3;
inline bool TransactionRecord::_internal_has_consensustimestamp() const {
  return this != internal_default_instance() && _impl_.consensustimestamp_ != nullptr;
}
inline bool TransactionRecord::has_consensustimestamp() const {
  return _internal_has_consensustimestamp();
}
inline const ::proto::Timestamp& TransactionRecord::_internal_consensustimestamp() const {
  const ::proto::Timestamp* p = _impl_.consensustimestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& TransactionRecord::consensustimestamp() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.consensusTimestamp)
  return _internal_consensustimestamp();
}
inline void TransactionRecord::unsafe_arena_set_allocated_consensustimestamp(
    ::proto::Timestamp* consensustimestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensustimestamp_);
  }
  _impl_.consensustimestamp_ = consensustimestamp;
  if (consensustimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.consensusTimestamp)
}
inline ::proto::Timestamp* TransactionRecord::release_consensustimestamp() {
  
  ::proto::Timestamp* temp = _impl_.consensustimestamp_;
  _impl_.consensustimestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* TransactionRecord::unsafe_arena_release_consensustimestamp() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.consensusTimestamp)
  
  ::proto::Timestamp* temp = _impl_.consensustimestamp_;
  _impl_.consensustimestamp_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* TransactionRecord::_internal_mutable_consensustimestamp() {
  
  if (_impl_.consensustimestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.consensustimestamp_ = p;
  }
  return _impl_.consensustimestamp_;
}
inline ::proto::Timestamp* TransactionRecord::mutable_consensustimestamp() {
  ::proto::Timestamp* _msg = _internal_mutable_consensustimestamp();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.consensusTimestamp)
  return _msg;
}
inline void TransactionRecord::set_allocated_consensustimestamp(::proto::Timestamp* consensustimestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensustimestamp_);
  }
  if (consensustimestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensustimestamp));
    if (message_arena != submessage_arena) {
      consensustimestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensustimestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.consensustimestamp_ = consensustimestamp;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.consensusTimestamp)
}

// .proto.TransactionID transactionID = 4;
inline bool TransactionRecord::_internal_has_transactionid() const {
  return this != internal_default_instance() && _impl_.transactionid_ != nullptr;
}
inline bool TransactionRecord::has_transactionid() const {
  return _internal_has_transactionid();
}
inline const ::proto::TransactionID& TransactionRecord::_internal_transactionid() const {
  const ::proto::TransactionID* p = _impl_.transactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionID&>(
      ::proto::_TransactionID_default_instance_);
}
inline const ::proto::TransactionID& TransactionRecord::transactionid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.transactionID)
  return _internal_transactionid();
}
inline void TransactionRecord::unsafe_arena_set_allocated_transactionid(
    ::proto::TransactionID* transactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionid_);
  }
  _impl_.transactionid_ = transactionid;
  if (transactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.transactionID)
}
inline ::proto::TransactionID* TransactionRecord::release_transactionid() {
  
  ::proto::TransactionID* temp = _impl_.transactionid_;
  _impl_.transactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionID* TransactionRecord::unsafe_arena_release_transactionid() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.transactionID)
  
  ::proto::TransactionID* temp = _impl_.transactionid_;
  _impl_.transactionid_ = nullptr;
  return temp;
}
inline ::proto::TransactionID* TransactionRecord::_internal_mutable_transactionid() {
  
  if (_impl_.transactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionID>(GetArenaForAllocation());
    _impl_.transactionid_ = p;
  }
  return _impl_.transactionid_;
}
inline ::proto::TransactionID* TransactionRecord::mutable_transactionid() {
  ::proto::TransactionID* _msg = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.transactionID)
  return _msg;
}
inline void TransactionRecord::set_allocated_transactionid(::proto::TransactionID* transactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transactionid_);
  }
  if (transactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionid));
    if (message_arena != submessage_arena) {
      transactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transactionid_ = transactionid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.transactionID)
}

// string memo = 5;
inline void TransactionRecord::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& TransactionRecord::memo() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionRecord::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.memo)
}
inline std::string* TransactionRecord::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.memo)
  return _s;
}
inline const std::string& TransactionRecord::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void TransactionRecord::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionRecord::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionRecord::release_memo() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.memo)
  return _impl_.memo_.Release();
}
inline void TransactionRecord::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.memo)
}

// uint64 transactionFee = 6;
inline void TransactionRecord::clear_transactionfee() {
  _impl_.transactionfee_ = uint64_t{0u};
}
inline uint64_t TransactionRecord::_internal_transactionfee() const {
  return _impl_.transactionfee_;
}
inline uint64_t TransactionRecord::transactionfee() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.transactionFee)
  return _internal_transactionfee();
}
inline void TransactionRecord::_internal_set_transactionfee(uint64_t value) {
  
  _impl_.transactionfee_ = value;
}
inline void TransactionRecord::set_transactionfee(uint64_t value) {
  _internal_set_transactionfee(value);
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.transactionFee)
}

// .proto.ContractFunctionResult contractCallResult = 7;
inline bool TransactionRecord::_internal_has_contractcallresult() const {
  return body_case() == kContractCallResult;
}
inline bool TransactionRecord::has_contractcallresult() const {
  return _internal_has_contractcallresult();
}
inline void TransactionRecord::set_has_contractcallresult() {
  _impl_._oneof_case_[0] = kContractCallResult;
}
inline ::proto::ContractFunctionResult* TransactionRecord::release_contractcallresult() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.contractCallResult)
  if (_internal_has_contractcallresult()) {
    clear_has_body();
    ::proto::ContractFunctionResult* temp = _impl_.body_.contractcallresult_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.body_.contractcallresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractFunctionResult& TransactionRecord::_internal_contractcallresult() const {
  return _internal_has_contractcallresult()
      ? *_impl_.body_.contractcallresult_
      : reinterpret_cast< ::proto::ContractFunctionResult&>(::proto::_ContractFunctionResult_default_instance_);
}
inline const ::proto::ContractFunctionResult& TransactionRecord::contractcallresult() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.contractCallResult)
  return _internal_contractcallresult();
}
inline ::proto::ContractFunctionResult* TransactionRecord::unsafe_arena_release_contractcallresult() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.TransactionRecord.contractCallResult)
  if (_internal_has_contractcallresult()) {
    clear_has_body();
    ::proto::ContractFunctionResult* temp = _impl_.body_.contractcallresult_;
    _impl_.body_.contractcallresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionRecord::unsafe_arena_set_allocated_contractcallresult(::proto::ContractFunctionResult* contractcallresult) {
  clear_body();
  if (contractcallresult) {
    set_has_contractcallresult();
    _impl_.body_.contractcallresult_ = contractcallresult;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.contractCallResult)
}
inline ::proto::ContractFunctionResult* TransactionRecord::_internal_mutable_contractcallresult() {
  if (!_internal_has_contractcallresult()) {
    clear_body();
    set_has_contractcallresult();
    _impl_.body_.contractcallresult_ = CreateMaybeMessage< ::proto::ContractFunctionResult >(GetArenaForAllocation());
  }
  return _impl_.body_.contractcallresult_;
}
inline ::proto::ContractFunctionResult* TransactionRecord::mutable_contractcallresult() {
  ::proto::ContractFunctionResult* _msg = _internal_mutable_contractcallresult();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.contractCallResult)
  return _msg;
}

// .proto.ContractFunctionResult contractCreateResult = 8;
inline bool TransactionRecord::_internal_has_contractcreateresult() const {
  return body_case() == kContractCreateResult;
}
inline bool TransactionRecord::has_contractcreateresult() const {
  return _internal_has_contractcreateresult();
}
inline void TransactionRecord::set_has_contractcreateresult() {
  _impl_._oneof_case_[0] = kContractCreateResult;
}
inline ::proto::ContractFunctionResult* TransactionRecord::release_contractcreateresult() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.contractCreateResult)
  if (_internal_has_contractcreateresult()) {
    clear_has_body();
    ::proto::ContractFunctionResult* temp = _impl_.body_.contractcreateresult_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.body_.contractcreateresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ContractFunctionResult& TransactionRecord::_internal_contractcreateresult() const {
  return _internal_has_contractcreateresult()
      ? *_impl_.body_.contractcreateresult_
      : reinterpret_cast< ::proto::ContractFunctionResult&>(::proto::_ContractFunctionResult_default_instance_);
}
inline const ::proto::ContractFunctionResult& TransactionRecord::contractcreateresult() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.contractCreateResult)
  return _internal_contractcreateresult();
}
inline ::proto::ContractFunctionResult* TransactionRecord::unsafe_arena_release_contractcreateresult() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.TransactionRecord.contractCreateResult)
  if (_internal_has_contractcreateresult()) {
    clear_has_body();
    ::proto::ContractFunctionResult* temp = _impl_.body_.contractcreateresult_;
    _impl_.body_.contractcreateresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionRecord::unsafe_arena_set_allocated_contractcreateresult(::proto::ContractFunctionResult* contractcreateresult) {
  clear_body();
  if (contractcreateresult) {
    set_has_contractcreateresult();
    _impl_.body_.contractcreateresult_ = contractcreateresult;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.contractCreateResult)
}
inline ::proto::ContractFunctionResult* TransactionRecord::_internal_mutable_contractcreateresult() {
  if (!_internal_has_contractcreateresult()) {
    clear_body();
    set_has_contractcreateresult();
    _impl_.body_.contractcreateresult_ = CreateMaybeMessage< ::proto::ContractFunctionResult >(GetArenaForAllocation());
  }
  return _impl_.body_.contractcreateresult_;
}
inline ::proto::ContractFunctionResult* TransactionRecord::mutable_contractcreateresult() {
  ::proto::ContractFunctionResult* _msg = _internal_mutable_contractcreateresult();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.contractCreateResult)
  return _msg;
}

// .proto.TransferList transferList = 10;
inline bool TransactionRecord::_internal_has_transferlist() const {
  return this != internal_default_instance() && _impl_.transferlist_ != nullptr;
}
inline bool TransactionRecord::has_transferlist() const {
  return _internal_has_transferlist();
}
inline const ::proto::TransferList& TransactionRecord::_internal_transferlist() const {
  const ::proto::TransferList* p = _impl_.transferlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransferList&>(
      ::proto::_TransferList_default_instance_);
}
inline const ::proto::TransferList& TransactionRecord::transferlist() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.transferList)
  return _internal_transferlist();
}
inline void TransactionRecord::unsafe_arena_set_allocated_transferlist(
    ::proto::TransferList* transferlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transferlist_);
  }
  _impl_.transferlist_ = transferlist;
  if (transferlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.transferList)
}
inline ::proto::TransferList* TransactionRecord::release_transferlist() {
  
  ::proto::TransferList* temp = _impl_.transferlist_;
  _impl_.transferlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransferList* TransactionRecord::unsafe_arena_release_transferlist() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.transferList)
  
  ::proto::TransferList* temp = _impl_.transferlist_;
  _impl_.transferlist_ = nullptr;
  return temp;
}
inline ::proto::TransferList* TransactionRecord::_internal_mutable_transferlist() {
  
  if (_impl_.transferlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransferList>(GetArenaForAllocation());
    _impl_.transferlist_ = p;
  }
  return _impl_.transferlist_;
}
inline ::proto::TransferList* TransactionRecord::mutable_transferlist() {
  ::proto::TransferList* _msg = _internal_mutable_transferlist();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.transferList)
  return _msg;
}
inline void TransactionRecord::set_allocated_transferlist(::proto::TransferList* transferlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transferlist_);
  }
  if (transferlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transferlist));
    if (message_arena != submessage_arena) {
      transferlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transferlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transferlist_ = transferlist;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.transferList)
}

// repeated .proto.TokenTransferList tokenTransferLists = 11;
inline int TransactionRecord::_internal_tokentransferlists_size() const {
  return _impl_.tokentransferlists_.size();
}
inline int TransactionRecord::tokentransferlists_size() const {
  return _internal_tokentransferlists_size();
}
inline ::proto::TokenTransferList* TransactionRecord::mutable_tokentransferlists(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.tokenTransferLists)
  return _impl_.tokentransferlists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >*
TransactionRecord::mutable_tokentransferlists() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransactionRecord.tokenTransferLists)
  return &_impl_.tokentransferlists_;
}
inline const ::proto::TokenTransferList& TransactionRecord::_internal_tokentransferlists(int index) const {
  return _impl_.tokentransferlists_.Get(index);
}
inline const ::proto::TokenTransferList& TransactionRecord::tokentransferlists(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.tokenTransferLists)
  return _internal_tokentransferlists(index);
}
inline ::proto::TokenTransferList* TransactionRecord::_internal_add_tokentransferlists() {
  return _impl_.tokentransferlists_.Add();
}
inline ::proto::TokenTransferList* TransactionRecord::add_tokentransferlists() {
  ::proto::TokenTransferList* _add = _internal_add_tokentransferlists();
  // @@protoc_insertion_point(field_add:proto.TransactionRecord.tokenTransferLists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenTransferList >&
TransactionRecord::tokentransferlists() const {
  // @@protoc_insertion_point(field_list:proto.TransactionRecord.tokenTransferLists)
  return _impl_.tokentransferlists_;
}

// .proto.ScheduleID scheduleRef = 12;
inline bool TransactionRecord::_internal_has_scheduleref() const {
  return this != internal_default_instance() && _impl_.scheduleref_ != nullptr;
}
inline bool TransactionRecord::has_scheduleref() const {
  return _internal_has_scheduleref();
}
inline const ::proto::ScheduleID& TransactionRecord::_internal_scheduleref() const {
  const ::proto::ScheduleID* p = _impl_.scheduleref_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ScheduleID&>(
      ::proto::_ScheduleID_default_instance_);
}
inline const ::proto::ScheduleID& TransactionRecord::scheduleref() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.scheduleRef)
  return _internal_scheduleref();
}
inline void TransactionRecord::unsafe_arena_set_allocated_scheduleref(
    ::proto::ScheduleID* scheduleref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleref_);
  }
  _impl_.scheduleref_ = scheduleref;
  if (scheduleref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.scheduleRef)
}
inline ::proto::ScheduleID* TransactionRecord::release_scheduleref() {
  
  ::proto::ScheduleID* temp = _impl_.scheduleref_;
  _impl_.scheduleref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ScheduleID* TransactionRecord::unsafe_arena_release_scheduleref() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.scheduleRef)
  
  ::proto::ScheduleID* temp = _impl_.scheduleref_;
  _impl_.scheduleref_ = nullptr;
  return temp;
}
inline ::proto::ScheduleID* TransactionRecord::_internal_mutable_scheduleref() {
  
  if (_impl_.scheduleref_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ScheduleID>(GetArenaForAllocation());
    _impl_.scheduleref_ = p;
  }
  return _impl_.scheduleref_;
}
inline ::proto::ScheduleID* TransactionRecord::mutable_scheduleref() {
  ::proto::ScheduleID* _msg = _internal_mutable_scheduleref();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.scheduleRef)
  return _msg;
}
inline void TransactionRecord::set_allocated_scheduleref(::proto::ScheduleID* scheduleref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleref_);
  }
  if (scheduleref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduleref));
    if (message_arena != submessage_arena) {
      scheduleref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduleref, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduleref_ = scheduleref;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.scheduleRef)
}

// repeated .proto.AssessedCustomFee assessed_custom_fees = 13;
inline int TransactionRecord::_internal_assessed_custom_fees_size() const {
  return _impl_.assessed_custom_fees_.size();
}
inline int TransactionRecord::assessed_custom_fees_size() const {
  return _internal_assessed_custom_fees_size();
}
inline ::proto::AssessedCustomFee* TransactionRecord::mutable_assessed_custom_fees(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.assessed_custom_fees)
  return _impl_.assessed_custom_fees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AssessedCustomFee >*
TransactionRecord::mutable_assessed_custom_fees() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransactionRecord.assessed_custom_fees)
  return &_impl_.assessed_custom_fees_;
}
inline const ::proto::AssessedCustomFee& TransactionRecord::_internal_assessed_custom_fees(int index) const {
  return _impl_.assessed_custom_fees_.Get(index);
}
inline const ::proto::AssessedCustomFee& TransactionRecord::assessed_custom_fees(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.assessed_custom_fees)
  return _internal_assessed_custom_fees(index);
}
inline ::proto::AssessedCustomFee* TransactionRecord::_internal_add_assessed_custom_fees() {
  return _impl_.assessed_custom_fees_.Add();
}
inline ::proto::AssessedCustomFee* TransactionRecord::add_assessed_custom_fees() {
  ::proto::AssessedCustomFee* _add = _internal_add_assessed_custom_fees();
  // @@protoc_insertion_point(field_add:proto.TransactionRecord.assessed_custom_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AssessedCustomFee >&
TransactionRecord::assessed_custom_fees() const {
  // @@protoc_insertion_point(field_list:proto.TransactionRecord.assessed_custom_fees)
  return _impl_.assessed_custom_fees_;
}

// repeated .proto.TokenAssociation automatic_token_associations = 14;
inline int TransactionRecord::_internal_automatic_token_associations_size() const {
  return _impl_.automatic_token_associations_.size();
}
inline int TransactionRecord::automatic_token_associations_size() const {
  return _internal_automatic_token_associations_size();
}
inline ::proto::TokenAssociation* TransactionRecord::mutable_automatic_token_associations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.automatic_token_associations)
  return _impl_.automatic_token_associations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAssociation >*
TransactionRecord::mutable_automatic_token_associations() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransactionRecord.automatic_token_associations)
  return &_impl_.automatic_token_associations_;
}
inline const ::proto::TokenAssociation& TransactionRecord::_internal_automatic_token_associations(int index) const {
  return _impl_.automatic_token_associations_.Get(index);
}
inline const ::proto::TokenAssociation& TransactionRecord::automatic_token_associations(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.automatic_token_associations)
  return _internal_automatic_token_associations(index);
}
inline ::proto::TokenAssociation* TransactionRecord::_internal_add_automatic_token_associations() {
  return _impl_.automatic_token_associations_.Add();
}
inline ::proto::TokenAssociation* TransactionRecord::add_automatic_token_associations() {
  ::proto::TokenAssociation* _add = _internal_add_automatic_token_associations();
  // @@protoc_insertion_point(field_add:proto.TransactionRecord.automatic_token_associations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TokenAssociation >&
TransactionRecord::automatic_token_associations() const {
  // @@protoc_insertion_point(field_list:proto.TransactionRecord.automatic_token_associations)
  return _impl_.automatic_token_associations_;
}

// .proto.Timestamp parent_consensus_timestamp = 15;
inline bool TransactionRecord::_internal_has_parent_consensus_timestamp() const {
  return this != internal_default_instance() && _impl_.parent_consensus_timestamp_ != nullptr;
}
inline bool TransactionRecord::has_parent_consensus_timestamp() const {
  return _internal_has_parent_consensus_timestamp();
}
inline const ::proto::Timestamp& TransactionRecord::_internal_parent_consensus_timestamp() const {
  const ::proto::Timestamp* p = _impl_.parent_consensus_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& TransactionRecord::parent_consensus_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.parent_consensus_timestamp)
  return _internal_parent_consensus_timestamp();
}
inline void TransactionRecord::unsafe_arena_set_allocated_parent_consensus_timestamp(
    ::proto::Timestamp* parent_consensus_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parent_consensus_timestamp_);
  }
  _impl_.parent_consensus_timestamp_ = parent_consensus_timestamp;
  if (parent_consensus_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionRecord.parent_consensus_timestamp)
}
inline ::proto::Timestamp* TransactionRecord::release_parent_consensus_timestamp() {
  
  ::proto::Timestamp* temp = _impl_.parent_consensus_timestamp_;
  _impl_.parent_consensus_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* TransactionRecord::unsafe_arena_release_parent_consensus_timestamp() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.parent_consensus_timestamp)
  
  ::proto::Timestamp* temp = _impl_.parent_consensus_timestamp_;
  _impl_.parent_consensus_timestamp_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* TransactionRecord::_internal_mutable_parent_consensus_timestamp() {
  
  if (_impl_.parent_consensus_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.parent_consensus_timestamp_ = p;
  }
  return _impl_.parent_consensus_timestamp_;
}
inline ::proto::Timestamp* TransactionRecord::mutable_parent_consensus_timestamp() {
  ::proto::Timestamp* _msg = _internal_mutable_parent_consensus_timestamp();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.parent_consensus_timestamp)
  return _msg;
}
inline void TransactionRecord::set_allocated_parent_consensus_timestamp(::proto::Timestamp* parent_consensus_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parent_consensus_timestamp_);
  }
  if (parent_consensus_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_consensus_timestamp));
    if (message_arena != submessage_arena) {
      parent_consensus_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_consensus_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parent_consensus_timestamp_ = parent_consensus_timestamp;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.parent_consensus_timestamp)
}

// bytes alias = 16;
inline void TransactionRecord::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& TransactionRecord::alias() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionRecord::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.alias)
}
inline std::string* TransactionRecord::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.alias)
  return _s;
}
inline const std::string& TransactionRecord::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void TransactionRecord::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionRecord::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionRecord::release_alias() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.alias)
  return _impl_.alias_.Release();
}
inline void TransactionRecord::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.alias)
}

// bytes ethereum_hash = 17;
inline void TransactionRecord::clear_ethereum_hash() {
  _impl_.ethereum_hash_.ClearToEmpty();
}
inline const std::string& TransactionRecord::ethereum_hash() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.ethereum_hash)
  return _internal_ethereum_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionRecord::set_ethereum_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ethereum_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.ethereum_hash)
}
inline std::string* TransactionRecord::mutable_ethereum_hash() {
  std::string* _s = _internal_mutable_ethereum_hash();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.ethereum_hash)
  return _s;
}
inline const std::string& TransactionRecord::_internal_ethereum_hash() const {
  return _impl_.ethereum_hash_.Get();
}
inline void TransactionRecord::_internal_set_ethereum_hash(const std::string& value) {
  
  _impl_.ethereum_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionRecord::_internal_mutable_ethereum_hash() {
  
  return _impl_.ethereum_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionRecord::release_ethereum_hash() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.ethereum_hash)
  return _impl_.ethereum_hash_.Release();
}
inline void TransactionRecord::set_allocated_ethereum_hash(std::string* ethereum_hash) {
  if (ethereum_hash != nullptr) {
    
  } else {
    
  }
  _impl_.ethereum_hash_.SetAllocated(ethereum_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ethereum_hash_.IsDefault()) {
    _impl_.ethereum_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.ethereum_hash)
}

// repeated .proto.AccountAmount paid_staking_rewards = 18;
inline int TransactionRecord::_internal_paid_staking_rewards_size() const {
  return _impl_.paid_staking_rewards_.size();
}
inline int TransactionRecord::paid_staking_rewards_size() const {
  return _internal_paid_staking_rewards_size();
}
inline ::proto::AccountAmount* TransactionRecord::mutable_paid_staking_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.paid_staking_rewards)
  return _impl_.paid_staking_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountAmount >*
TransactionRecord::mutable_paid_staking_rewards() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransactionRecord.paid_staking_rewards)
  return &_impl_.paid_staking_rewards_;
}
inline const ::proto::AccountAmount& TransactionRecord::_internal_paid_staking_rewards(int index) const {
  return _impl_.paid_staking_rewards_.Get(index);
}
inline const ::proto::AccountAmount& TransactionRecord::paid_staking_rewards(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.paid_staking_rewards)
  return _internal_paid_staking_rewards(index);
}
inline ::proto::AccountAmount* TransactionRecord::_internal_add_paid_staking_rewards() {
  return _impl_.paid_staking_rewards_.Add();
}
inline ::proto::AccountAmount* TransactionRecord::add_paid_staking_rewards() {
  ::proto::AccountAmount* _add = _internal_add_paid_staking_rewards();
  // @@protoc_insertion_point(field_add:proto.TransactionRecord.paid_staking_rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::AccountAmount >&
TransactionRecord::paid_staking_rewards() const {
  // @@protoc_insertion_point(field_list:proto.TransactionRecord.paid_staking_rewards)
  return _impl_.paid_staking_rewards_;
}

// bytes prng_bytes = 19;
inline bool TransactionRecord::_internal_has_prng_bytes() const {
  return entropy_case() == kPrngBytes;
}
inline bool TransactionRecord::has_prng_bytes() const {
  return _internal_has_prng_bytes();
}
inline void TransactionRecord::set_has_prng_bytes() {
  _impl_._oneof_case_[1] = kPrngBytes;
}
inline void TransactionRecord::clear_prng_bytes() {
  if (_internal_has_prng_bytes()) {
    _impl_.entropy_.prng_bytes_.Destroy();
    clear_has_entropy();
  }
}
inline const std::string& TransactionRecord::prng_bytes() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.prng_bytes)
  return _internal_prng_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TransactionRecord::set_prng_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_prng_bytes()) {
    clear_entropy();
    set_has_prng_bytes();
    _impl_.entropy_.prng_bytes_.InitDefault();
  }
  _impl_.entropy_.prng_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.prng_bytes)
}
inline std::string* TransactionRecord::mutable_prng_bytes() {
  std::string* _s = _internal_mutable_prng_bytes();
  // @@protoc_insertion_point(field_mutable:proto.TransactionRecord.prng_bytes)
  return _s;
}
inline const std::string& TransactionRecord::_internal_prng_bytes() const {
  if (_internal_has_prng_bytes()) {
    return _impl_.entropy_.prng_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransactionRecord::_internal_set_prng_bytes(const std::string& value) {
  if (!_internal_has_prng_bytes()) {
    clear_entropy();
    set_has_prng_bytes();
    _impl_.entropy_.prng_bytes_.InitDefault();
  }
  _impl_.entropy_.prng_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionRecord::_internal_mutable_prng_bytes() {
  if (!_internal_has_prng_bytes()) {
    clear_entropy();
    set_has_prng_bytes();
    _impl_.entropy_.prng_bytes_.InitDefault();
  }
  return _impl_.entropy_.prng_bytes_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransactionRecord::release_prng_bytes() {
  // @@protoc_insertion_point(field_release:proto.TransactionRecord.prng_bytes)
  if (_internal_has_prng_bytes()) {
    clear_has_entropy();
    return _impl_.entropy_.prng_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void TransactionRecord::set_allocated_prng_bytes(std::string* prng_bytes) {
  if (has_entropy()) {
    clear_entropy();
  }
  if (prng_bytes != nullptr) {
    set_has_prng_bytes();
    _impl_.entropy_.prng_bytes_.InitAllocated(prng_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionRecord.prng_bytes)
}

// int32 prng_number = 20;
inline bool TransactionRecord::_internal_has_prng_number() const {
  return entropy_case() == kPrngNumber;
}
inline bool TransactionRecord::has_prng_number() const {
  return _internal_has_prng_number();
}
inline void TransactionRecord::set_has_prng_number() {
  _impl_._oneof_case_[1] = kPrngNumber;
}
inline void TransactionRecord::clear_prng_number() {
  if (_internal_has_prng_number()) {
    _impl_.entropy_.prng_number_ = 0;
    clear_has_entropy();
  }
}
inline int32_t TransactionRecord::_internal_prng_number() const {
  if (_internal_has_prng_number()) {
    return _impl_.entropy_.prng_number_;
  }
  return 0;
}
inline void TransactionRecord::_internal_set_prng_number(int32_t value) {
  if (!_internal_has_prng_number()) {
    clear_entropy();
    set_has_prng_number();
  }
  _impl_.entropy_.prng_number_ = value;
}
inline int32_t TransactionRecord::prng_number() const {
  // @@protoc_insertion_point(field_get:proto.TransactionRecord.prng_number)
  return _internal_prng_number();
}
inline void TransactionRecord::set_prng_number(int32_t value) {
  _internal_set_prng_number(value);
  // @@protoc_insertion_point(field_set:proto.TransactionRecord.prng_number)
}

inline bool TransactionRecord::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void TransactionRecord::clear_has_body() {
  _impl_._oneof_case_[0] = BODY_NOT_SET;
}
inline bool TransactionRecord::has_entropy() const {
  return entropy_case() != ENTROPY_NOT_SET;
}
inline void TransactionRecord::clear_has_entropy() {
  _impl_._oneof_case_[1] = ENTROPY_NOT_SET;
}
inline TransactionRecord::BodyCase TransactionRecord::body_case() const {
  return TransactionRecord::BodyCase(_impl_._oneof_case_[0]);
}
inline TransactionRecord::EntropyCase TransactionRecord::entropy_case() const {
  return TransactionRecord::EntropyCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5frecord_2eproto

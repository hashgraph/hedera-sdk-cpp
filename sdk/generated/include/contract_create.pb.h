// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_create.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contract_5fcreate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contract_5fcreate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "duration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_5fcreate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_5fcreate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fcreate_2eproto;
namespace proto {
class ContractCreateTransactionBody;
struct ContractCreateTransactionBodyDefaultTypeInternal;
extern ContractCreateTransactionBodyDefaultTypeInternal _ContractCreateTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ContractCreateTransactionBody* Arena::CreateMaybeMessage<::proto::ContractCreateTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ContractCreateTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractCreateTransactionBody) */ {
 public:
  inline ContractCreateTransactionBody() : ContractCreateTransactionBody(nullptr) {}
  ~ContractCreateTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR ContractCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractCreateTransactionBody(const ContractCreateTransactionBody& from);
  ContractCreateTransactionBody(ContractCreateTransactionBody&& from) noexcept
    : ContractCreateTransactionBody() {
    *this = ::std::move(from);
  }

  inline ContractCreateTransactionBody& operator=(const ContractCreateTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractCreateTransactionBody& operator=(ContractCreateTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractCreateTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  enum InitcodeSourceCase {
    kFileID = 1,
    kInitcode = 16,
    INITCODESOURCE_NOT_SET = 0,
  };

  enum StakedIdCase {
    kStakedAccountId = 17,
    kStakedNodeId = 18,
    STAKED_ID_NOT_SET = 0,
  };

  static inline const ContractCreateTransactionBody* internal_default_instance() {
    return reinterpret_cast<const ContractCreateTransactionBody*>(
               &_ContractCreateTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractCreateTransactionBody& a, ContractCreateTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractCreateTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractCreateTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractCreateTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractCreateTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractCreateTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractCreateTransactionBody& from) {
    ContractCreateTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractCreateTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractCreateTransactionBody";
  }
  protected:
  explicit ContractCreateTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstructorParametersFieldNumber = 9,
    kMemoFieldNumber = 13,
    kAdminKeyFieldNumber = 3,
    kProxyAccountIDFieldNumber = 6,
    kAutoRenewPeriodFieldNumber = 8,
    kShardIDFieldNumber = 10,
    kRealmIDFieldNumber = 11,
    kNewRealmAdminKeyFieldNumber = 12,
    kAutoRenewAccountIdFieldNumber = 15,
    kGasFieldNumber = 4,
    kInitialBalanceFieldNumber = 5,
    kMaxAutomaticTokenAssociationsFieldNumber = 14,
    kDeclineRewardFieldNumber = 19,
    kFileIDFieldNumber = 1,
    kInitcodeFieldNumber = 16,
    kStakedAccountIdFieldNumber = 17,
    kStakedNodeIdFieldNumber = 18,
  };
  // bytes constructorParameters = 9;
  void clear_constructorparameters();
  const std::string& constructorparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constructorparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constructorparameters();
  PROTOBUF_NODISCARD std::string* release_constructorparameters();
  void set_allocated_constructorparameters(std::string* constructorparameters);
  private:
  const std::string& _internal_constructorparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constructorparameters(const std::string& value);
  std::string* _internal_mutable_constructorparameters();
  public:

  // string memo = 13;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .proto.Key adminKey = 3;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.AccountID proxyAccountID = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_proxyaccountid() const;
  private:
  bool _internal_has_proxyaccountid() const;
  public:
  PROTOBUF_DEPRECATED void clear_proxyaccountid();
  PROTOBUF_DEPRECATED const ::proto::AccountID& proxyaccountid() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::proto::AccountID* release_proxyaccountid();
  PROTOBUF_DEPRECATED ::proto::AccountID* mutable_proxyaccountid();
  PROTOBUF_DEPRECATED void set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid);
  private:
  const ::proto::AccountID& _internal_proxyaccountid() const;
  ::proto::AccountID* _internal_mutable_proxyaccountid();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_proxyaccountid(
      ::proto::AccountID* proxyaccountid);
  PROTOBUF_DEPRECATED ::proto::AccountID* unsafe_arena_release_proxyaccountid();

  // .proto.Duration autoRenewPeriod = 8;
  bool has_autorenewperiod() const;
  private:
  bool _internal_has_autorenewperiod() const;
  public:
  void clear_autorenewperiod();
  const ::proto::Duration& autorenewperiod() const;
  PROTOBUF_NODISCARD ::proto::Duration* release_autorenewperiod();
  ::proto::Duration* mutable_autorenewperiod();
  void set_allocated_autorenewperiod(::proto::Duration* autorenewperiod);
  private:
  const ::proto::Duration& _internal_autorenewperiod() const;
  ::proto::Duration* _internal_mutable_autorenewperiod();
  public:
  void unsafe_arena_set_allocated_autorenewperiod(
      ::proto::Duration* autorenewperiod);
  ::proto::Duration* unsafe_arena_release_autorenewperiod();

  // .proto.ShardID shardID = 10;
  bool has_shardid() const;
  private:
  bool _internal_has_shardid() const;
  public:
  void clear_shardid();
  const ::proto::ShardID& shardid() const;
  PROTOBUF_NODISCARD ::proto::ShardID* release_shardid();
  ::proto::ShardID* mutable_shardid();
  void set_allocated_shardid(::proto::ShardID* shardid);
  private:
  const ::proto::ShardID& _internal_shardid() const;
  ::proto::ShardID* _internal_mutable_shardid();
  public:
  void unsafe_arena_set_allocated_shardid(
      ::proto::ShardID* shardid);
  ::proto::ShardID* unsafe_arena_release_shardid();

  // .proto.RealmID realmID = 11;
  bool has_realmid() const;
  private:
  bool _internal_has_realmid() const;
  public:
  void clear_realmid();
  const ::proto::RealmID& realmid() const;
  PROTOBUF_NODISCARD ::proto::RealmID* release_realmid();
  ::proto::RealmID* mutable_realmid();
  void set_allocated_realmid(::proto::RealmID* realmid);
  private:
  const ::proto::RealmID& _internal_realmid() const;
  ::proto::RealmID* _internal_mutable_realmid();
  public:
  void unsafe_arena_set_allocated_realmid(
      ::proto::RealmID* realmid);
  ::proto::RealmID* unsafe_arena_release_realmid();

  // .proto.Key newRealmAdminKey = 12;
  bool has_newrealmadminkey() const;
  private:
  bool _internal_has_newrealmadminkey() const;
  public:
  void clear_newrealmadminkey();
  const ::proto::Key& newrealmadminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_newrealmadminkey();
  ::proto::Key* mutable_newrealmadminkey();
  void set_allocated_newrealmadminkey(::proto::Key* newrealmadminkey);
  private:
  const ::proto::Key& _internal_newrealmadminkey() const;
  ::proto::Key* _internal_mutable_newrealmadminkey();
  public:
  void unsafe_arena_set_allocated_newrealmadminkey(
      ::proto::Key* newrealmadminkey);
  ::proto::Key* unsafe_arena_release_newrealmadminkey();

  // .proto.AccountID auto_renew_account_id = 15;
  bool has_auto_renew_account_id() const;
  private:
  bool _internal_has_auto_renew_account_id() const;
  public:
  void clear_auto_renew_account_id();
  const ::proto::AccountID& auto_renew_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_auto_renew_account_id();
  ::proto::AccountID* mutable_auto_renew_account_id();
  void set_allocated_auto_renew_account_id(::proto::AccountID* auto_renew_account_id);
  private:
  const ::proto::AccountID& _internal_auto_renew_account_id() const;
  ::proto::AccountID* _internal_mutable_auto_renew_account_id();
  public:
  void unsafe_arena_set_allocated_auto_renew_account_id(
      ::proto::AccountID* auto_renew_account_id);
  ::proto::AccountID* unsafe_arena_release_auto_renew_account_id();

  // int64 gas = 4;
  void clear_gas();
  int64_t gas() const;
  void set_gas(int64_t value);
  private:
  int64_t _internal_gas() const;
  void _internal_set_gas(int64_t value);
  public:

  // int64 initialBalance = 5;
  void clear_initialbalance();
  int64_t initialbalance() const;
  void set_initialbalance(int64_t value);
  private:
  int64_t _internal_initialbalance() const;
  void _internal_set_initialbalance(int64_t value);
  public:

  // int32 max_automatic_token_associations = 14;
  void clear_max_automatic_token_associations();
  int32_t max_automatic_token_associations() const;
  void set_max_automatic_token_associations(int32_t value);
  private:
  int32_t _internal_max_automatic_token_associations() const;
  void _internal_set_max_automatic_token_associations(int32_t value);
  public:

  // bool decline_reward = 19;
  void clear_decline_reward();
  bool decline_reward() const;
  void set_decline_reward(bool value);
  private:
  bool _internal_decline_reward() const;
  void _internal_set_decline_reward(bool value);
  public:

  // .proto.FileID fileID = 1;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // bytes initcode = 16;
  bool has_initcode() const;
  private:
  bool _internal_has_initcode() const;
  public:
  void clear_initcode();
  const std::string& initcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initcode();
  PROTOBUF_NODISCARD std::string* release_initcode();
  void set_allocated_initcode(std::string* initcode);
  private:
  const std::string& _internal_initcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initcode(const std::string& value);
  std::string* _internal_mutable_initcode();
  public:

  // .proto.AccountID staked_account_id = 17;
  bool has_staked_account_id() const;
  private:
  bool _internal_has_staked_account_id() const;
  public:
  void clear_staked_account_id();
  const ::proto::AccountID& staked_account_id() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_staked_account_id();
  ::proto::AccountID* mutable_staked_account_id();
  void set_allocated_staked_account_id(::proto::AccountID* staked_account_id);
  private:
  const ::proto::AccountID& _internal_staked_account_id() const;
  ::proto::AccountID* _internal_mutable_staked_account_id();
  public:
  void unsafe_arena_set_allocated_staked_account_id(
      ::proto::AccountID* staked_account_id);
  ::proto::AccountID* unsafe_arena_release_staked_account_id();

  // int64 staked_node_id = 18;
  bool has_staked_node_id() const;
  private:
  bool _internal_has_staked_node_id() const;
  public:
  void clear_staked_node_id();
  int64_t staked_node_id() const;
  void set_staked_node_id(int64_t value);
  private:
  int64_t _internal_staked_node_id() const;
  void _internal_set_staked_node_id(int64_t value);
  public:

  void clear_initcodeSource();
  InitcodeSourceCase initcodeSource_case() const;
  void clear_staked_id();
  StakedIdCase staked_id_case() const;
  // @@protoc_insertion_point(class_scope:proto.ContractCreateTransactionBody)
 private:
  class _Internal;
  void set_has_fileid();
  void set_has_initcode();
  void set_has_staked_account_id();
  void set_has_staked_node_id();

  inline bool has_initcodeSource() const;
  inline void clear_has_initcodeSource();

  inline bool has_staked_id() const;
  inline void clear_has_staked_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constructorparameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::proto::Key* adminkey_;
    ::proto::AccountID* proxyaccountid_;
    ::proto::Duration* autorenewperiod_;
    ::proto::ShardID* shardid_;
    ::proto::RealmID* realmid_;
    ::proto::Key* newrealmadminkey_;
    ::proto::AccountID* auto_renew_account_id_;
    int64_t gas_;
    int64_t initialbalance_;
    int32_t max_automatic_token_associations_;
    bool decline_reward_;
    union InitcodeSourceUnion {
      constexpr InitcodeSourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::FileID* fileid_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initcode_;
    } initcodeSource_;
    union StakedIdUnion {
      constexpr StakedIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::AccountID* staked_account_id_;
      int64_t staked_node_id_;
    } staked_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fcreate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractCreateTransactionBody

// .proto.FileID fileID = 1;
inline bool ContractCreateTransactionBody::_internal_has_fileid() const {
  return initcodeSource_case() == kFileID;
}
inline bool ContractCreateTransactionBody::has_fileid() const {
  return _internal_has_fileid();
}
inline void ContractCreateTransactionBody::set_has_fileid() {
  _impl_._oneof_case_[0] = kFileID;
}
inline ::proto::FileID* ContractCreateTransactionBody::release_fileid() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.fileID)
  if (_internal_has_fileid()) {
    clear_has_initcodeSource();
    ::proto::FileID* temp = _impl_.initcodeSource_.fileid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.initcodeSource_.fileid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::FileID& ContractCreateTransactionBody::_internal_fileid() const {
  return _internal_has_fileid()
      ? *_impl_.initcodeSource_.fileid_
      : reinterpret_cast< ::proto::FileID&>(::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& ContractCreateTransactionBody::fileid() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.fileID)
  return _internal_fileid();
}
inline ::proto::FileID* ContractCreateTransactionBody::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ContractCreateTransactionBody.fileID)
  if (_internal_has_fileid()) {
    clear_has_initcodeSource();
    ::proto::FileID* temp = _impl_.initcodeSource_.fileid_;
    _impl_.initcodeSource_.fileid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_fileid(::proto::FileID* fileid) {
  clear_initcodeSource();
  if (fileid) {
    set_has_fileid();
    _impl_.initcodeSource_.fileid_ = fileid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.fileID)
}
inline ::proto::FileID* ContractCreateTransactionBody::_internal_mutable_fileid() {
  if (!_internal_has_fileid()) {
    clear_initcodeSource();
    set_has_fileid();
    _impl_.initcodeSource_.fileid_ = CreateMaybeMessage< ::proto::FileID >(GetArenaForAllocation());
  }
  return _impl_.initcodeSource_.fileid_;
}
inline ::proto::FileID* ContractCreateTransactionBody::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.fileID)
  return _msg;
}

// bytes initcode = 16;
inline bool ContractCreateTransactionBody::_internal_has_initcode() const {
  return initcodeSource_case() == kInitcode;
}
inline bool ContractCreateTransactionBody::has_initcode() const {
  return _internal_has_initcode();
}
inline void ContractCreateTransactionBody::set_has_initcode() {
  _impl_._oneof_case_[0] = kInitcode;
}
inline void ContractCreateTransactionBody::clear_initcode() {
  if (_internal_has_initcode()) {
    _impl_.initcodeSource_.initcode_.Destroy();
    clear_has_initcodeSource();
  }
}
inline const std::string& ContractCreateTransactionBody::initcode() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.initcode)
  return _internal_initcode();
}
template <typename ArgT0, typename... ArgT>
inline void ContractCreateTransactionBody::set_initcode(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_initcode()) {
    clear_initcodeSource();
    set_has_initcode();
    _impl_.initcodeSource_.initcode_.InitDefault();
  }
  _impl_.initcodeSource_.initcode_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.initcode)
}
inline std::string* ContractCreateTransactionBody::mutable_initcode() {
  std::string* _s = _internal_mutable_initcode();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.initcode)
  return _s;
}
inline const std::string& ContractCreateTransactionBody::_internal_initcode() const {
  if (_internal_has_initcode()) {
    return _impl_.initcodeSource_.initcode_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ContractCreateTransactionBody::_internal_set_initcode(const std::string& value) {
  if (!_internal_has_initcode()) {
    clear_initcodeSource();
    set_has_initcode();
    _impl_.initcodeSource_.initcode_.InitDefault();
  }
  _impl_.initcodeSource_.initcode_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractCreateTransactionBody::_internal_mutable_initcode() {
  if (!_internal_has_initcode()) {
    clear_initcodeSource();
    set_has_initcode();
    _impl_.initcodeSource_.initcode_.InitDefault();
  }
  return _impl_.initcodeSource_.initcode_.Mutable(      GetArenaForAllocation());
}
inline std::string* ContractCreateTransactionBody::release_initcode() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.initcode)
  if (_internal_has_initcode()) {
    clear_has_initcodeSource();
    return _impl_.initcodeSource_.initcode_.Release();
  } else {
    return nullptr;
  }
}
inline void ContractCreateTransactionBody::set_allocated_initcode(std::string* initcode) {
  if (has_initcodeSource()) {
    clear_initcodeSource();
  }
  if (initcode != nullptr) {
    set_has_initcode();
    _impl_.initcodeSource_.initcode_.InitAllocated(initcode, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.initcode)
}

// .proto.Key adminKey = 3;
inline bool ContractCreateTransactionBody::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ContractCreateTransactionBody::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ContractCreateTransactionBody::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.adminKey)
  return _internal_adminkey();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.adminKey)
}
inline ::proto::Key* ContractCreateTransactionBody::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ContractCreateTransactionBody::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ContractCreateTransactionBody::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ContractCreateTransactionBody::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.adminKey)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.adminKey)
}

// int64 gas = 4;
inline void ContractCreateTransactionBody::clear_gas() {
  _impl_.gas_ = int64_t{0};
}
inline int64_t ContractCreateTransactionBody::_internal_gas() const {
  return _impl_.gas_;
}
inline int64_t ContractCreateTransactionBody::gas() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.gas)
  return _internal_gas();
}
inline void ContractCreateTransactionBody::_internal_set_gas(int64_t value) {
  
  _impl_.gas_ = value;
}
inline void ContractCreateTransactionBody::set_gas(int64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.gas)
}

// int64 initialBalance = 5;
inline void ContractCreateTransactionBody::clear_initialbalance() {
  _impl_.initialbalance_ = int64_t{0};
}
inline int64_t ContractCreateTransactionBody::_internal_initialbalance() const {
  return _impl_.initialbalance_;
}
inline int64_t ContractCreateTransactionBody::initialbalance() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.initialBalance)
  return _internal_initialbalance();
}
inline void ContractCreateTransactionBody::_internal_set_initialbalance(int64_t value) {
  
  _impl_.initialbalance_ = value;
}
inline void ContractCreateTransactionBody::set_initialbalance(int64_t value) {
  _internal_set_initialbalance(value);
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.initialBalance)
}

// .proto.AccountID proxyAccountID = 6 [deprecated = true];
inline bool ContractCreateTransactionBody::_internal_has_proxyaccountid() const {
  return this != internal_default_instance() && _impl_.proxyaccountid_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_proxyaccountid() const {
  return _internal_has_proxyaccountid();
}
inline const ::proto::AccountID& ContractCreateTransactionBody::_internal_proxyaccountid() const {
  const ::proto::AccountID* p = _impl_.proxyaccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractCreateTransactionBody::proxyaccountid() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.proxyAccountID)
  return _internal_proxyaccountid();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_proxyaccountid(
    ::proto::AccountID* proxyaccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  if (proxyaccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.proxyAccountID)
}
inline ::proto::AccountID* ContractCreateTransactionBody::release_proxyaccountid() {
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ContractCreateTransactionBody::unsafe_arena_release_proxyaccountid() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.proxyAccountID)
  
  ::proto::AccountID* temp = _impl_.proxyaccountid_;
  _impl_.proxyaccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ContractCreateTransactionBody::_internal_mutable_proxyaccountid() {
  
  if (_impl_.proxyaccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.proxyaccountid_ = p;
  }
  return _impl_.proxyaccountid_;
}
inline ::proto::AccountID* ContractCreateTransactionBody::mutable_proxyaccountid() {
  ::proto::AccountID* _msg = _internal_mutable_proxyaccountid();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.proxyAccountID)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_proxyaccountid(::proto::AccountID* proxyaccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proxyaccountid_);
  }
  if (proxyaccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proxyaccountid));
    if (message_arena != submessage_arena) {
      proxyaccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxyaccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proxyaccountid_ = proxyaccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.proxyAccountID)
}

// .proto.Duration autoRenewPeriod = 8;
inline bool ContractCreateTransactionBody::_internal_has_autorenewperiod() const {
  return this != internal_default_instance() && _impl_.autorenewperiod_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_autorenewperiod() const {
  return _internal_has_autorenewperiod();
}
inline const ::proto::Duration& ContractCreateTransactionBody::_internal_autorenewperiod() const {
  const ::proto::Duration* p = _impl_.autorenewperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Duration&>(
      ::proto::_Duration_default_instance_);
}
inline const ::proto::Duration& ContractCreateTransactionBody::autorenewperiod() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.autoRenewPeriod)
  return _internal_autorenewperiod();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_autorenewperiod(
    ::proto::Duration* autorenewperiod) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  if (autorenewperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.autoRenewPeriod)
}
inline ::proto::Duration* ContractCreateTransactionBody::release_autorenewperiod() {
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Duration* ContractCreateTransactionBody::unsafe_arena_release_autorenewperiod() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.autoRenewPeriod)
  
  ::proto::Duration* temp = _impl_.autorenewperiod_;
  _impl_.autorenewperiod_ = nullptr;
  return temp;
}
inline ::proto::Duration* ContractCreateTransactionBody::_internal_mutable_autorenewperiod() {
  
  if (_impl_.autorenewperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Duration>(GetArenaForAllocation());
    _impl_.autorenewperiod_ = p;
  }
  return _impl_.autorenewperiod_;
}
inline ::proto::Duration* ContractCreateTransactionBody::mutable_autorenewperiod() {
  ::proto::Duration* _msg = _internal_mutable_autorenewperiod();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.autoRenewPeriod)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_autorenewperiod(::proto::Duration* autorenewperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autorenewperiod_);
  }
  if (autorenewperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autorenewperiod));
    if (message_arena != submessage_arena) {
      autorenewperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autorenewperiod, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autorenewperiod_ = autorenewperiod;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.autoRenewPeriod)
}

// bytes constructorParameters = 9;
inline void ContractCreateTransactionBody::clear_constructorparameters() {
  _impl_.constructorparameters_.ClearToEmpty();
}
inline const std::string& ContractCreateTransactionBody::constructorparameters() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.constructorParameters)
  return _internal_constructorparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractCreateTransactionBody::set_constructorparameters(ArgT0&& arg0, ArgT... args) {
 
 _impl_.constructorparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.constructorParameters)
}
inline std::string* ContractCreateTransactionBody::mutable_constructorparameters() {
  std::string* _s = _internal_mutable_constructorparameters();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.constructorParameters)
  return _s;
}
inline const std::string& ContractCreateTransactionBody::_internal_constructorparameters() const {
  return _impl_.constructorparameters_.Get();
}
inline void ContractCreateTransactionBody::_internal_set_constructorparameters(const std::string& value) {
  
  _impl_.constructorparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractCreateTransactionBody::_internal_mutable_constructorparameters() {
  
  return _impl_.constructorparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractCreateTransactionBody::release_constructorparameters() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.constructorParameters)
  return _impl_.constructorparameters_.Release();
}
inline void ContractCreateTransactionBody::set_allocated_constructorparameters(std::string* constructorparameters) {
  if (constructorparameters != nullptr) {
    
  } else {
    
  }
  _impl_.constructorparameters_.SetAllocated(constructorparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.constructorparameters_.IsDefault()) {
    _impl_.constructorparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.constructorParameters)
}

// .proto.ShardID shardID = 10;
inline bool ContractCreateTransactionBody::_internal_has_shardid() const {
  return this != internal_default_instance() && _impl_.shardid_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_shardid() const {
  return _internal_has_shardid();
}
inline const ::proto::ShardID& ContractCreateTransactionBody::_internal_shardid() const {
  const ::proto::ShardID* p = _impl_.shardid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ShardID&>(
      ::proto::_ShardID_default_instance_);
}
inline const ::proto::ShardID& ContractCreateTransactionBody::shardid() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.shardID)
  return _internal_shardid();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_shardid(
    ::proto::ShardID* shardid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shardid_);
  }
  _impl_.shardid_ = shardid;
  if (shardid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.shardID)
}
inline ::proto::ShardID* ContractCreateTransactionBody::release_shardid() {
  
  ::proto::ShardID* temp = _impl_.shardid_;
  _impl_.shardid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ShardID* ContractCreateTransactionBody::unsafe_arena_release_shardid() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.shardID)
  
  ::proto::ShardID* temp = _impl_.shardid_;
  _impl_.shardid_ = nullptr;
  return temp;
}
inline ::proto::ShardID* ContractCreateTransactionBody::_internal_mutable_shardid() {
  
  if (_impl_.shardid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ShardID>(GetArenaForAllocation());
    _impl_.shardid_ = p;
  }
  return _impl_.shardid_;
}
inline ::proto::ShardID* ContractCreateTransactionBody::mutable_shardid() {
  ::proto::ShardID* _msg = _internal_mutable_shardid();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.shardID)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_shardid(::proto::ShardID* shardid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shardid_);
  }
  if (shardid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shardid));
    if (message_arena != submessage_arena) {
      shardid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shardid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shardid_ = shardid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.shardID)
}

// .proto.RealmID realmID = 11;
inline bool ContractCreateTransactionBody::_internal_has_realmid() const {
  return this != internal_default_instance() && _impl_.realmid_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_realmid() const {
  return _internal_has_realmid();
}
inline const ::proto::RealmID& ContractCreateTransactionBody::_internal_realmid() const {
  const ::proto::RealmID* p = _impl_.realmid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RealmID&>(
      ::proto::_RealmID_default_instance_);
}
inline const ::proto::RealmID& ContractCreateTransactionBody::realmid() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.realmID)
  return _internal_realmid();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_realmid(
    ::proto::RealmID* realmid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realmid_);
  }
  _impl_.realmid_ = realmid;
  if (realmid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.realmID)
}
inline ::proto::RealmID* ContractCreateTransactionBody::release_realmid() {
  
  ::proto::RealmID* temp = _impl_.realmid_;
  _impl_.realmid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RealmID* ContractCreateTransactionBody::unsafe_arena_release_realmid() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.realmID)
  
  ::proto::RealmID* temp = _impl_.realmid_;
  _impl_.realmid_ = nullptr;
  return temp;
}
inline ::proto::RealmID* ContractCreateTransactionBody::_internal_mutable_realmid() {
  
  if (_impl_.realmid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RealmID>(GetArenaForAllocation());
    _impl_.realmid_ = p;
  }
  return _impl_.realmid_;
}
inline ::proto::RealmID* ContractCreateTransactionBody::mutable_realmid() {
  ::proto::RealmID* _msg = _internal_mutable_realmid();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.realmID)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_realmid(::proto::RealmID* realmid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realmid_);
  }
  if (realmid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realmid));
    if (message_arena != submessage_arena) {
      realmid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realmid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.realmid_ = realmid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.realmID)
}

// .proto.Key newRealmAdminKey = 12;
inline bool ContractCreateTransactionBody::_internal_has_newrealmadminkey() const {
  return this != internal_default_instance() && _impl_.newrealmadminkey_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_newrealmadminkey() const {
  return _internal_has_newrealmadminkey();
}
inline const ::proto::Key& ContractCreateTransactionBody::_internal_newrealmadminkey() const {
  const ::proto::Key* p = _impl_.newrealmadminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ContractCreateTransactionBody::newrealmadminkey() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.newRealmAdminKey)
  return _internal_newrealmadminkey();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_newrealmadminkey(
    ::proto::Key* newrealmadminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrealmadminkey_);
  }
  _impl_.newrealmadminkey_ = newrealmadminkey;
  if (newrealmadminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.newRealmAdminKey)
}
inline ::proto::Key* ContractCreateTransactionBody::release_newrealmadminkey() {
  
  ::proto::Key* temp = _impl_.newrealmadminkey_;
  _impl_.newrealmadminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ContractCreateTransactionBody::unsafe_arena_release_newrealmadminkey() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.newRealmAdminKey)
  
  ::proto::Key* temp = _impl_.newrealmadminkey_;
  _impl_.newrealmadminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ContractCreateTransactionBody::_internal_mutable_newrealmadminkey() {
  
  if (_impl_.newrealmadminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.newrealmadminkey_ = p;
  }
  return _impl_.newrealmadminkey_;
}
inline ::proto::Key* ContractCreateTransactionBody::mutable_newrealmadminkey() {
  ::proto::Key* _msg = _internal_mutable_newrealmadminkey();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.newRealmAdminKey)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_newrealmadminkey(::proto::Key* newrealmadminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrealmadminkey_);
  }
  if (newrealmadminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newrealmadminkey));
    if (message_arena != submessage_arena) {
      newrealmadminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrealmadminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrealmadminkey_ = newrealmadminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.newRealmAdminKey)
}

// string memo = 13;
inline void ContractCreateTransactionBody::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& ContractCreateTransactionBody::memo() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractCreateTransactionBody::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.memo)
}
inline std::string* ContractCreateTransactionBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.memo)
  return _s;
}
inline const std::string& ContractCreateTransactionBody::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void ContractCreateTransactionBody::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* ContractCreateTransactionBody::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* ContractCreateTransactionBody::release_memo() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.memo)
  return _impl_.memo_.Release();
}
inline void ContractCreateTransactionBody::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.memo)
}

// int32 max_automatic_token_associations = 14;
inline void ContractCreateTransactionBody::clear_max_automatic_token_associations() {
  _impl_.max_automatic_token_associations_ = 0;
}
inline int32_t ContractCreateTransactionBody::_internal_max_automatic_token_associations() const {
  return _impl_.max_automatic_token_associations_;
}
inline int32_t ContractCreateTransactionBody::max_automatic_token_associations() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.max_automatic_token_associations)
  return _internal_max_automatic_token_associations();
}
inline void ContractCreateTransactionBody::_internal_set_max_automatic_token_associations(int32_t value) {
  
  _impl_.max_automatic_token_associations_ = value;
}
inline void ContractCreateTransactionBody::set_max_automatic_token_associations(int32_t value) {
  _internal_set_max_automatic_token_associations(value);
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.max_automatic_token_associations)
}

// .proto.AccountID auto_renew_account_id = 15;
inline bool ContractCreateTransactionBody::_internal_has_auto_renew_account_id() const {
  return this != internal_default_instance() && _impl_.auto_renew_account_id_ != nullptr;
}
inline bool ContractCreateTransactionBody::has_auto_renew_account_id() const {
  return _internal_has_auto_renew_account_id();
}
inline const ::proto::AccountID& ContractCreateTransactionBody::_internal_auto_renew_account_id() const {
  const ::proto::AccountID* p = _impl_.auto_renew_account_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractCreateTransactionBody::auto_renew_account_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.auto_renew_account_id)
  return _internal_auto_renew_account_id();
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_auto_renew_account_id(
    ::proto::AccountID* auto_renew_account_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_account_id_);
  }
  _impl_.auto_renew_account_id_ = auto_renew_account_id;
  if (auto_renew_account_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.auto_renew_account_id)
}
inline ::proto::AccountID* ContractCreateTransactionBody::release_auto_renew_account_id() {
  
  ::proto::AccountID* temp = _impl_.auto_renew_account_id_;
  _impl_.auto_renew_account_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ContractCreateTransactionBody::unsafe_arena_release_auto_renew_account_id() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.auto_renew_account_id)
  
  ::proto::AccountID* temp = _impl_.auto_renew_account_id_;
  _impl_.auto_renew_account_id_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ContractCreateTransactionBody::_internal_mutable_auto_renew_account_id() {
  
  if (_impl_.auto_renew_account_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.auto_renew_account_id_ = p;
  }
  return _impl_.auto_renew_account_id_;
}
inline ::proto::AccountID* ContractCreateTransactionBody::mutable_auto_renew_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_auto_renew_account_id();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.auto_renew_account_id)
  return _msg;
}
inline void ContractCreateTransactionBody::set_allocated_auto_renew_account_id(::proto::AccountID* auto_renew_account_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_renew_account_id_);
  }
  if (auto_renew_account_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_renew_account_id));
    if (message_arena != submessage_arena) {
      auto_renew_account_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_renew_account_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auto_renew_account_id_ = auto_renew_account_id;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractCreateTransactionBody.auto_renew_account_id)
}

// .proto.AccountID staked_account_id = 17;
inline bool ContractCreateTransactionBody::_internal_has_staked_account_id() const {
  return staked_id_case() == kStakedAccountId;
}
inline bool ContractCreateTransactionBody::has_staked_account_id() const {
  return _internal_has_staked_account_id();
}
inline void ContractCreateTransactionBody::set_has_staked_account_id() {
  _impl_._oneof_case_[1] = kStakedAccountId;
}
inline ::proto::AccountID* ContractCreateTransactionBody::release_staked_account_id() {
  // @@protoc_insertion_point(field_release:proto.ContractCreateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::AccountID& ContractCreateTransactionBody::_internal_staked_account_id() const {
  return _internal_has_staked_account_id()
      ? *_impl_.staked_id_.staked_account_id_
      : reinterpret_cast< ::proto::AccountID&>(::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ContractCreateTransactionBody::staked_account_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.staked_account_id)
  return _internal_staked_account_id();
}
inline ::proto::AccountID* ContractCreateTransactionBody::unsafe_arena_release_staked_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ContractCreateTransactionBody.staked_account_id)
  if (_internal_has_staked_account_id()) {
    clear_has_staked_id();
    ::proto::AccountID* temp = _impl_.staked_id_.staked_account_id_;
    _impl_.staked_id_.staked_account_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ContractCreateTransactionBody::unsafe_arena_set_allocated_staked_account_id(::proto::AccountID* staked_account_id) {
  clear_staked_id();
  if (staked_account_id) {
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = staked_account_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractCreateTransactionBody.staked_account_id)
}
inline ::proto::AccountID* ContractCreateTransactionBody::_internal_mutable_staked_account_id() {
  if (!_internal_has_staked_account_id()) {
    clear_staked_id();
    set_has_staked_account_id();
    _impl_.staked_id_.staked_account_id_ = CreateMaybeMessage< ::proto::AccountID >(GetArenaForAllocation());
  }
  return _impl_.staked_id_.staked_account_id_;
}
inline ::proto::AccountID* ContractCreateTransactionBody::mutable_staked_account_id() {
  ::proto::AccountID* _msg = _internal_mutable_staked_account_id();
  // @@protoc_insertion_point(field_mutable:proto.ContractCreateTransactionBody.staked_account_id)
  return _msg;
}

// int64 staked_node_id = 18;
inline bool ContractCreateTransactionBody::_internal_has_staked_node_id() const {
  return staked_id_case() == kStakedNodeId;
}
inline bool ContractCreateTransactionBody::has_staked_node_id() const {
  return _internal_has_staked_node_id();
}
inline void ContractCreateTransactionBody::set_has_staked_node_id() {
  _impl_._oneof_case_[1] = kStakedNodeId;
}
inline void ContractCreateTransactionBody::clear_staked_node_id() {
  if (_internal_has_staked_node_id()) {
    _impl_.staked_id_.staked_node_id_ = int64_t{0};
    clear_has_staked_id();
  }
}
inline int64_t ContractCreateTransactionBody::_internal_staked_node_id() const {
  if (_internal_has_staked_node_id()) {
    return _impl_.staked_id_.staked_node_id_;
  }
  return int64_t{0};
}
inline void ContractCreateTransactionBody::_internal_set_staked_node_id(int64_t value) {
  if (!_internal_has_staked_node_id()) {
    clear_staked_id();
    set_has_staked_node_id();
  }
  _impl_.staked_id_.staked_node_id_ = value;
}
inline int64_t ContractCreateTransactionBody::staked_node_id() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.staked_node_id)
  return _internal_staked_node_id();
}
inline void ContractCreateTransactionBody::set_staked_node_id(int64_t value) {
  _internal_set_staked_node_id(value);
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.staked_node_id)
}

// bool decline_reward = 19;
inline void ContractCreateTransactionBody::clear_decline_reward() {
  _impl_.decline_reward_ = false;
}
inline bool ContractCreateTransactionBody::_internal_decline_reward() const {
  return _impl_.decline_reward_;
}
inline bool ContractCreateTransactionBody::decline_reward() const {
  // @@protoc_insertion_point(field_get:proto.ContractCreateTransactionBody.decline_reward)
  return _internal_decline_reward();
}
inline void ContractCreateTransactionBody::_internal_set_decline_reward(bool value) {
  
  _impl_.decline_reward_ = value;
}
inline void ContractCreateTransactionBody::set_decline_reward(bool value) {
  _internal_set_decline_reward(value);
  // @@protoc_insertion_point(field_set:proto.ContractCreateTransactionBody.decline_reward)
}

inline bool ContractCreateTransactionBody::has_initcodeSource() const {
  return initcodeSource_case() != INITCODESOURCE_NOT_SET;
}
inline void ContractCreateTransactionBody::clear_has_initcodeSource() {
  _impl_._oneof_case_[0] = INITCODESOURCE_NOT_SET;
}
inline bool ContractCreateTransactionBody::has_staked_id() const {
  return staked_id_case() != STAKED_ID_NOT_SET;
}
inline void ContractCreateTransactionBody::clear_has_staked_id() {
  _impl_._oneof_case_[1] = STAKED_ID_NOT_SET;
}
inline ContractCreateTransactionBody::InitcodeSourceCase ContractCreateTransactionBody::initcodeSource_case() const {
  return ContractCreateTransactionBody::InitcodeSourceCase(_impl_._oneof_case_[0]);
}
inline ContractCreateTransactionBody::StakedIdCase ContractCreateTransactionBody::staked_id_case() const {
  return ContractCreateTransactionBody::StakedIdCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contract_5fcreate_2eproto

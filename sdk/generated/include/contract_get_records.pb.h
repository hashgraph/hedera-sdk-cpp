// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_get_records.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contract_5fget_5frecords_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contract_5fget_5frecords_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "transaction_record.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_5fget_5frecords_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_5fget_5frecords_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fget_5frecords_2eproto;
namespace proto {
class ContractGetRecordsQuery;
struct ContractGetRecordsQueryDefaultTypeInternal;
extern ContractGetRecordsQueryDefaultTypeInternal _ContractGetRecordsQuery_default_instance_;
class ContractGetRecordsResponse;
struct ContractGetRecordsResponseDefaultTypeInternal;
extern ContractGetRecordsResponseDefaultTypeInternal _ContractGetRecordsResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ContractGetRecordsQuery* Arena::CreateMaybeMessage<::proto::ContractGetRecordsQuery>(Arena*);
template<> ::proto::ContractGetRecordsResponse* Arena::CreateMaybeMessage<::proto::ContractGetRecordsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ContractGetRecordsQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractGetRecordsQuery) */ {
 public:
  inline ContractGetRecordsQuery() : ContractGetRecordsQuery(nullptr) {}
  ~ContractGetRecordsQuery() override;
  explicit PROTOBUF_CONSTEXPR ContractGetRecordsQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractGetRecordsQuery(const ContractGetRecordsQuery& from);
  ContractGetRecordsQuery(ContractGetRecordsQuery&& from) noexcept
    : ContractGetRecordsQuery() {
    *this = ::std::move(from);
  }

  inline ContractGetRecordsQuery& operator=(const ContractGetRecordsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractGetRecordsQuery& operator=(ContractGetRecordsQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractGetRecordsQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractGetRecordsQuery* internal_default_instance() {
    return reinterpret_cast<const ContractGetRecordsQuery*>(
               &_ContractGetRecordsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractGetRecordsQuery& a, ContractGetRecordsQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractGetRecordsQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractGetRecordsQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractGetRecordsQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractGetRecordsQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractGetRecordsQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractGetRecordsQuery& from) {
    ContractGetRecordsQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractGetRecordsQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractGetRecordsQuery";
  }
  protected:
  explicit ContractGetRecordsQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kContractIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.ContractID contractID = 2;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // @@protoc_insertion_point(class_scope:proto.ContractGetRecordsQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::ContractID* contractid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fget_5frecords_2eproto;
};
// -------------------------------------------------------------------

class ContractGetRecordsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ContractGetRecordsResponse) */ {
 public:
  inline ContractGetRecordsResponse() : ContractGetRecordsResponse(nullptr) {}
  ~ContractGetRecordsResponse() override;
  explicit PROTOBUF_CONSTEXPR ContractGetRecordsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractGetRecordsResponse(const ContractGetRecordsResponse& from);
  ContractGetRecordsResponse(ContractGetRecordsResponse&& from) noexcept
    : ContractGetRecordsResponse() {
    *this = ::std::move(from);
  }

  inline ContractGetRecordsResponse& operator=(const ContractGetRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractGetRecordsResponse& operator=(ContractGetRecordsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractGetRecordsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractGetRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const ContractGetRecordsResponse*>(
               &_ContractGetRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContractGetRecordsResponse& a, ContractGetRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractGetRecordsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractGetRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractGetRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContractGetRecordsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContractGetRecordsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContractGetRecordsResponse& from) {
    ContractGetRecordsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractGetRecordsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ContractGetRecordsResponse";
  }
  protected:
  explicit ContractGetRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kContractIDFieldNumber = 2,
  };
  // repeated .proto.TransactionRecord records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::proto::TransactionRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TransactionRecord >*
      mutable_records();
  private:
  const ::proto::TransactionRecord& _internal_records(int index) const;
  ::proto::TransactionRecord* _internal_add_records();
  public:
  const ::proto::TransactionRecord& records(int index) const;
  ::proto::TransactionRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TransactionRecord >&
      records() const;

  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.ContractID contractID = 2;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // @@protoc_insertion_point(class_scope:proto.ContractGetRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TransactionRecord > records_;
    ::proto::ResponseHeader* header_;
    ::proto::ContractID* contractid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contract_5fget_5frecords_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractGetRecordsQuery

// .proto.QueryHeader header = 1;
inline bool ContractGetRecordsQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ContractGetRecordsQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& ContractGetRecordsQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& ContractGetRecordsQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetRecordsQuery.header)
  return _internal_header();
}
inline void ContractGetRecordsQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetRecordsQuery.header)
}
inline ::proto::QueryHeader* ContractGetRecordsQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* ContractGetRecordsQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.ContractGetRecordsQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* ContractGetRecordsQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* ContractGetRecordsQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetRecordsQuery.header)
  return _msg;
}
inline void ContractGetRecordsQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetRecordsQuery.header)
}

// .proto.ContractID contractID = 2;
inline bool ContractGetRecordsQuery::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool ContractGetRecordsQuery::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& ContractGetRecordsQuery::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& ContractGetRecordsQuery::contractid() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetRecordsQuery.contractID)
  return _internal_contractid();
}
inline void ContractGetRecordsQuery::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetRecordsQuery.contractID)
}
inline ::proto::ContractID* ContractGetRecordsQuery::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* ContractGetRecordsQuery::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.ContractGetRecordsQuery.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* ContractGetRecordsQuery::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* ContractGetRecordsQuery::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetRecordsQuery.contractID)
  return _msg;
}
inline void ContractGetRecordsQuery::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetRecordsQuery.contractID)
}

// -------------------------------------------------------------------

// ContractGetRecordsResponse

// .proto.ResponseHeader header = 1;
inline bool ContractGetRecordsResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ContractGetRecordsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& ContractGetRecordsResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& ContractGetRecordsResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetRecordsResponse.header)
  return _internal_header();
}
inline void ContractGetRecordsResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetRecordsResponse.header)
}
inline ::proto::ResponseHeader* ContractGetRecordsResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* ContractGetRecordsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.ContractGetRecordsResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* ContractGetRecordsResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* ContractGetRecordsResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetRecordsResponse.header)
  return _msg;
}
inline void ContractGetRecordsResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetRecordsResponse.header)
}

// .proto.ContractID contractID = 2;
inline bool ContractGetRecordsResponse::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool ContractGetRecordsResponse::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& ContractGetRecordsResponse::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& ContractGetRecordsResponse::contractid() const {
  // @@protoc_insertion_point(field_get:proto.ContractGetRecordsResponse.contractID)
  return _internal_contractid();
}
inline void ContractGetRecordsResponse::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ContractGetRecordsResponse.contractID)
}
inline ::proto::ContractID* ContractGetRecordsResponse::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* ContractGetRecordsResponse::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.ContractGetRecordsResponse.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* ContractGetRecordsResponse::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* ContractGetRecordsResponse::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.ContractGetRecordsResponse.contractID)
  return _msg;
}
inline void ContractGetRecordsResponse::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.ContractGetRecordsResponse.contractID)
}

// repeated .proto.TransactionRecord records = 3;
inline int ContractGetRecordsResponse::_internal_records_size() const {
  return _impl_.records_.size();
}
inline int ContractGetRecordsResponse::records_size() const {
  return _internal_records_size();
}
inline ::proto::TransactionRecord* ContractGetRecordsResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ContractGetRecordsResponse.records)
  return _impl_.records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TransactionRecord >*
ContractGetRecordsResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:proto.ContractGetRecordsResponse.records)
  return &_impl_.records_;
}
inline const ::proto::TransactionRecord& ContractGetRecordsResponse::_internal_records(int index) const {
  return _impl_.records_.Get(index);
}
inline const ::proto::TransactionRecord& ContractGetRecordsResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:proto.ContractGetRecordsResponse.records)
  return _internal_records(index);
}
inline ::proto::TransactionRecord* ContractGetRecordsResponse::_internal_add_records() {
  return _impl_.records_.Add();
}
inline ::proto::TransactionRecord* ContractGetRecordsResponse::add_records() {
  ::proto::TransactionRecord* _add = _internal_add_records();
  // @@protoc_insertion_point(field_add:proto.ContractGetRecordsResponse.records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TransactionRecord >&
ContractGetRecordsResponse::records() const {
  // @@protoc_insertion_point(field_list:proto.ContractGetRecordsResponse.records)
  return _impl_.records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contract_5fget_5frecords_2eproto

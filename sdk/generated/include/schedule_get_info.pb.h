// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule_get_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schedule_5fget_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schedule_5fget_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "timestamp.pb.h"
#include "query_header.pb.h"
#include "response_header.pb.h"
#include "schedulable_transaction_body.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schedule_5fget_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schedule_5fget_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schedule_5fget_5finfo_2eproto;
namespace proto {
class ScheduleGetInfoQuery;
struct ScheduleGetInfoQueryDefaultTypeInternal;
extern ScheduleGetInfoQueryDefaultTypeInternal _ScheduleGetInfoQuery_default_instance_;
class ScheduleGetInfoResponse;
struct ScheduleGetInfoResponseDefaultTypeInternal;
extern ScheduleGetInfoResponseDefaultTypeInternal _ScheduleGetInfoResponse_default_instance_;
class ScheduleInfo;
struct ScheduleInfoDefaultTypeInternal;
extern ScheduleInfoDefaultTypeInternal _ScheduleInfo_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ScheduleGetInfoQuery* Arena::CreateMaybeMessage<::proto::ScheduleGetInfoQuery>(Arena*);
template<> ::proto::ScheduleGetInfoResponse* Arena::CreateMaybeMessage<::proto::ScheduleGetInfoResponse>(Arena*);
template<> ::proto::ScheduleInfo* Arena::CreateMaybeMessage<::proto::ScheduleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ScheduleGetInfoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ScheduleGetInfoQuery) */ {
 public:
  inline ScheduleGetInfoQuery() : ScheduleGetInfoQuery(nullptr) {}
  ~ScheduleGetInfoQuery() override;
  explicit PROTOBUF_CONSTEXPR ScheduleGetInfoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleGetInfoQuery(const ScheduleGetInfoQuery& from);
  ScheduleGetInfoQuery(ScheduleGetInfoQuery&& from) noexcept
    : ScheduleGetInfoQuery() {
    *this = ::std::move(from);
  }

  inline ScheduleGetInfoQuery& operator=(const ScheduleGetInfoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleGetInfoQuery& operator=(ScheduleGetInfoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleGetInfoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleGetInfoQuery* internal_default_instance() {
    return reinterpret_cast<const ScheduleGetInfoQuery*>(
               &_ScheduleGetInfoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleGetInfoQuery& a, ScheduleGetInfoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleGetInfoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleGetInfoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleGetInfoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleGetInfoQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleGetInfoQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleGetInfoQuery& from) {
    ScheduleGetInfoQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleGetInfoQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ScheduleGetInfoQuery";
  }
  protected:
  explicit ScheduleGetInfoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kScheduleIDFieldNumber = 2,
  };
  // .proto.QueryHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::QueryHeader& header() const;
  PROTOBUF_NODISCARD ::proto::QueryHeader* release_header();
  ::proto::QueryHeader* mutable_header();
  void set_allocated_header(::proto::QueryHeader* header);
  private:
  const ::proto::QueryHeader& _internal_header() const;
  ::proto::QueryHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::QueryHeader* header);
  ::proto::QueryHeader* unsafe_arena_release_header();

  // .proto.ScheduleID scheduleID = 2;
  bool has_scheduleid() const;
  private:
  bool _internal_has_scheduleid() const;
  public:
  void clear_scheduleid();
  const ::proto::ScheduleID& scheduleid() const;
  PROTOBUF_NODISCARD ::proto::ScheduleID* release_scheduleid();
  ::proto::ScheduleID* mutable_scheduleid();
  void set_allocated_scheduleid(::proto::ScheduleID* scheduleid);
  private:
  const ::proto::ScheduleID& _internal_scheduleid() const;
  ::proto::ScheduleID* _internal_mutable_scheduleid();
  public:
  void unsafe_arena_set_allocated_scheduleid(
      ::proto::ScheduleID* scheduleid);
  ::proto::ScheduleID* unsafe_arena_release_scheduleid();

  // @@protoc_insertion_point(class_scope:proto.ScheduleGetInfoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::QueryHeader* header_;
    ::proto::ScheduleID* scheduleid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_5fget_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ScheduleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ScheduleInfo) */ {
 public:
  inline ScheduleInfo() : ScheduleInfo(nullptr) {}
  ~ScheduleInfo() override;
  explicit PROTOBUF_CONSTEXPR ScheduleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleInfo(const ScheduleInfo& from);
  ScheduleInfo(ScheduleInfo&& from) noexcept
    : ScheduleInfo() {
    *this = ::std::move(from);
  }

  inline ScheduleInfo& operator=(const ScheduleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleInfo& operator=(ScheduleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kDeletionTime = 2,
    kExecutionTime = 3,
    DATA_NOT_SET = 0,
  };

  static inline const ScheduleInfo* internal_default_instance() {
    return reinterpret_cast<const ScheduleInfo*>(
               &_ScheduleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleInfo& a, ScheduleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleInfo& from) {
    ScheduleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ScheduleInfo";
  }
  protected:
  explicit ScheduleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 6,
    kLedgerIdFieldNumber = 12,
    kScheduleIDFieldNumber = 1,
    kExpirationTimeFieldNumber = 4,
    kScheduledTransactionBodyFieldNumber = 5,
    kAdminKeyFieldNumber = 7,
    kSignersFieldNumber = 8,
    kCreatorAccountIDFieldNumber = 9,
    kPayerAccountIDFieldNumber = 10,
    kScheduledTransactionIDFieldNumber = 11,
    kWaitForExpiryFieldNumber = 13,
    kDeletionTimeFieldNumber = 2,
    kExecutionTimeFieldNumber = 3,
  };
  // string memo = 6;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes ledger_id = 12;
  void clear_ledger_id();
  const std::string& ledger_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ledger_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ledger_id();
  PROTOBUF_NODISCARD std::string* release_ledger_id();
  void set_allocated_ledger_id(std::string* ledger_id);
  private:
  const std::string& _internal_ledger_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ledger_id(const std::string& value);
  std::string* _internal_mutable_ledger_id();
  public:

  // .proto.ScheduleID scheduleID = 1;
  bool has_scheduleid() const;
  private:
  bool _internal_has_scheduleid() const;
  public:
  void clear_scheduleid();
  const ::proto::ScheduleID& scheduleid() const;
  PROTOBUF_NODISCARD ::proto::ScheduleID* release_scheduleid();
  ::proto::ScheduleID* mutable_scheduleid();
  void set_allocated_scheduleid(::proto::ScheduleID* scheduleid);
  private:
  const ::proto::ScheduleID& _internal_scheduleid() const;
  ::proto::ScheduleID* _internal_mutable_scheduleid();
  public:
  void unsafe_arena_set_allocated_scheduleid(
      ::proto::ScheduleID* scheduleid);
  ::proto::ScheduleID* unsafe_arena_release_scheduleid();

  // .proto.Timestamp expirationTime = 4;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::Timestamp& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_expirationtime();
  ::proto::Timestamp* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::Timestamp* expirationtime);
  private:
  const ::proto::Timestamp& _internal_expirationtime() const;
  ::proto::Timestamp* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::Timestamp* expirationtime);
  ::proto::Timestamp* unsafe_arena_release_expirationtime();

  // .proto.SchedulableTransactionBody scheduledTransactionBody = 5;
  bool has_scheduledtransactionbody() const;
  private:
  bool _internal_has_scheduledtransactionbody() const;
  public:
  void clear_scheduledtransactionbody();
  const ::proto::SchedulableTransactionBody& scheduledtransactionbody() const;
  PROTOBUF_NODISCARD ::proto::SchedulableTransactionBody* release_scheduledtransactionbody();
  ::proto::SchedulableTransactionBody* mutable_scheduledtransactionbody();
  void set_allocated_scheduledtransactionbody(::proto::SchedulableTransactionBody* scheduledtransactionbody);
  private:
  const ::proto::SchedulableTransactionBody& _internal_scheduledtransactionbody() const;
  ::proto::SchedulableTransactionBody* _internal_mutable_scheduledtransactionbody();
  public:
  void unsafe_arena_set_allocated_scheduledtransactionbody(
      ::proto::SchedulableTransactionBody* scheduledtransactionbody);
  ::proto::SchedulableTransactionBody* unsafe_arena_release_scheduledtransactionbody();

  // .proto.Key adminKey = 7;
  bool has_adminkey() const;
  private:
  bool _internal_has_adminkey() const;
  public:
  void clear_adminkey();
  const ::proto::Key& adminkey() const;
  PROTOBUF_NODISCARD ::proto::Key* release_adminkey();
  ::proto::Key* mutable_adminkey();
  void set_allocated_adminkey(::proto::Key* adminkey);
  private:
  const ::proto::Key& _internal_adminkey() const;
  ::proto::Key* _internal_mutable_adminkey();
  public:
  void unsafe_arena_set_allocated_adminkey(
      ::proto::Key* adminkey);
  ::proto::Key* unsafe_arena_release_adminkey();

  // .proto.KeyList signers = 8;
  bool has_signers() const;
  private:
  bool _internal_has_signers() const;
  public:
  void clear_signers();
  const ::proto::KeyList& signers() const;
  PROTOBUF_NODISCARD ::proto::KeyList* release_signers();
  ::proto::KeyList* mutable_signers();
  void set_allocated_signers(::proto::KeyList* signers);
  private:
  const ::proto::KeyList& _internal_signers() const;
  ::proto::KeyList* _internal_mutable_signers();
  public:
  void unsafe_arena_set_allocated_signers(
      ::proto::KeyList* signers);
  ::proto::KeyList* unsafe_arena_release_signers();

  // .proto.AccountID creatorAccountID = 9;
  bool has_creatoraccountid() const;
  private:
  bool _internal_has_creatoraccountid() const;
  public:
  void clear_creatoraccountid();
  const ::proto::AccountID& creatoraccountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_creatoraccountid();
  ::proto::AccountID* mutable_creatoraccountid();
  void set_allocated_creatoraccountid(::proto::AccountID* creatoraccountid);
  private:
  const ::proto::AccountID& _internal_creatoraccountid() const;
  ::proto::AccountID* _internal_mutable_creatoraccountid();
  public:
  void unsafe_arena_set_allocated_creatoraccountid(
      ::proto::AccountID* creatoraccountid);
  ::proto::AccountID* unsafe_arena_release_creatoraccountid();

  // .proto.AccountID payerAccountID = 10;
  bool has_payeraccountid() const;
  private:
  bool _internal_has_payeraccountid() const;
  public:
  void clear_payeraccountid();
  const ::proto::AccountID& payeraccountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_payeraccountid();
  ::proto::AccountID* mutable_payeraccountid();
  void set_allocated_payeraccountid(::proto::AccountID* payeraccountid);
  private:
  const ::proto::AccountID& _internal_payeraccountid() const;
  ::proto::AccountID* _internal_mutable_payeraccountid();
  public:
  void unsafe_arena_set_allocated_payeraccountid(
      ::proto::AccountID* payeraccountid);
  ::proto::AccountID* unsafe_arena_release_payeraccountid();

  // .proto.TransactionID scheduledTransactionID = 11;
  bool has_scheduledtransactionid() const;
  private:
  bool _internal_has_scheduledtransactionid() const;
  public:
  void clear_scheduledtransactionid();
  const ::proto::TransactionID& scheduledtransactionid() const;
  PROTOBUF_NODISCARD ::proto::TransactionID* release_scheduledtransactionid();
  ::proto::TransactionID* mutable_scheduledtransactionid();
  void set_allocated_scheduledtransactionid(::proto::TransactionID* scheduledtransactionid);
  private:
  const ::proto::TransactionID& _internal_scheduledtransactionid() const;
  ::proto::TransactionID* _internal_mutable_scheduledtransactionid();
  public:
  void unsafe_arena_set_allocated_scheduledtransactionid(
      ::proto::TransactionID* scheduledtransactionid);
  ::proto::TransactionID* unsafe_arena_release_scheduledtransactionid();

  // bool wait_for_expiry = 13;
  void clear_wait_for_expiry();
  bool wait_for_expiry() const;
  void set_wait_for_expiry(bool value);
  private:
  bool _internal_wait_for_expiry() const;
  void _internal_set_wait_for_expiry(bool value);
  public:

  // .proto.Timestamp deletion_time = 2;
  bool has_deletion_time() const;
  private:
  bool _internal_has_deletion_time() const;
  public:
  void clear_deletion_time();
  const ::proto::Timestamp& deletion_time() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_deletion_time();
  ::proto::Timestamp* mutable_deletion_time();
  void set_allocated_deletion_time(::proto::Timestamp* deletion_time);
  private:
  const ::proto::Timestamp& _internal_deletion_time() const;
  ::proto::Timestamp* _internal_mutable_deletion_time();
  public:
  void unsafe_arena_set_allocated_deletion_time(
      ::proto::Timestamp* deletion_time);
  ::proto::Timestamp* unsafe_arena_release_deletion_time();

  // .proto.Timestamp execution_time = 3;
  bool has_execution_time() const;
  private:
  bool _internal_has_execution_time() const;
  public:
  void clear_execution_time();
  const ::proto::Timestamp& execution_time() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_execution_time();
  ::proto::Timestamp* mutable_execution_time();
  void set_allocated_execution_time(::proto::Timestamp* execution_time);
  private:
  const ::proto::Timestamp& _internal_execution_time() const;
  ::proto::Timestamp* _internal_mutable_execution_time();
  public:
  void unsafe_arena_set_allocated_execution_time(
      ::proto::Timestamp* execution_time);
  ::proto::Timestamp* unsafe_arena_release_execution_time();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:proto.ScheduleInfo)
 private:
  class _Internal;
  void set_has_deletion_time();
  void set_has_execution_time();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ledger_id_;
    ::proto::ScheduleID* scheduleid_;
    ::proto::Timestamp* expirationtime_;
    ::proto::SchedulableTransactionBody* scheduledtransactionbody_;
    ::proto::Key* adminkey_;
    ::proto::KeyList* signers_;
    ::proto::AccountID* creatoraccountid_;
    ::proto::AccountID* payeraccountid_;
    ::proto::TransactionID* scheduledtransactionid_;
    bool wait_for_expiry_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Timestamp* deletion_time_;
      ::proto::Timestamp* execution_time_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_5fget_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ScheduleGetInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ScheduleGetInfoResponse) */ {
 public:
  inline ScheduleGetInfoResponse() : ScheduleGetInfoResponse(nullptr) {}
  ~ScheduleGetInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ScheduleGetInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleGetInfoResponse(const ScheduleGetInfoResponse& from);
  ScheduleGetInfoResponse(ScheduleGetInfoResponse&& from) noexcept
    : ScheduleGetInfoResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleGetInfoResponse& operator=(const ScheduleGetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleGetInfoResponse& operator=(ScheduleGetInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleGetInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleGetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleGetInfoResponse*>(
               &_ScheduleGetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScheduleGetInfoResponse& a, ScheduleGetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleGetInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleGetInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleGetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleGetInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleGetInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleGetInfoResponse& from) {
    ScheduleGetInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleGetInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ScheduleGetInfoResponse";
  }
  protected:
  explicit ScheduleGetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kScheduleInfoFieldNumber = 2,
  };
  // .proto.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::proto::ResponseHeader& header() const;
  PROTOBUF_NODISCARD ::proto::ResponseHeader* release_header();
  ::proto::ResponseHeader* mutable_header();
  void set_allocated_header(::proto::ResponseHeader* header);
  private:
  const ::proto::ResponseHeader& _internal_header() const;
  ::proto::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::proto::ResponseHeader* header);
  ::proto::ResponseHeader* unsafe_arena_release_header();

  // .proto.ScheduleInfo scheduleInfo = 2;
  bool has_scheduleinfo() const;
  private:
  bool _internal_has_scheduleinfo() const;
  public:
  void clear_scheduleinfo();
  const ::proto::ScheduleInfo& scheduleinfo() const;
  PROTOBUF_NODISCARD ::proto::ScheduleInfo* release_scheduleinfo();
  ::proto::ScheduleInfo* mutable_scheduleinfo();
  void set_allocated_scheduleinfo(::proto::ScheduleInfo* scheduleinfo);
  private:
  const ::proto::ScheduleInfo& _internal_scheduleinfo() const;
  ::proto::ScheduleInfo* _internal_mutable_scheduleinfo();
  public:
  void unsafe_arena_set_allocated_scheduleinfo(
      ::proto::ScheduleInfo* scheduleinfo);
  ::proto::ScheduleInfo* unsafe_arena_release_scheduleinfo();

  // @@protoc_insertion_point(class_scope:proto.ScheduleGetInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseHeader* header_;
    ::proto::ScheduleInfo* scheduleinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_5fget_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScheduleGetInfoQuery

// .proto.QueryHeader header = 1;
inline bool ScheduleGetInfoQuery::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ScheduleGetInfoQuery::has_header() const {
  return _internal_has_header();
}
inline const ::proto::QueryHeader& ScheduleGetInfoQuery::_internal_header() const {
  const ::proto::QueryHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::QueryHeader&>(
      ::proto::_QueryHeader_default_instance_);
}
inline const ::proto::QueryHeader& ScheduleGetInfoQuery::header() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleGetInfoQuery.header)
  return _internal_header();
}
inline void ScheduleGetInfoQuery::unsafe_arena_set_allocated_header(
    ::proto::QueryHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleGetInfoQuery.header)
}
inline ::proto::QueryHeader* ScheduleGetInfoQuery::release_header() {
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::QueryHeader* ScheduleGetInfoQuery::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.ScheduleGetInfoQuery.header)
  
  ::proto::QueryHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::QueryHeader* ScheduleGetInfoQuery::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::QueryHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::QueryHeader* ScheduleGetInfoQuery::mutable_header() {
  ::proto::QueryHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleGetInfoQuery.header)
  return _msg;
}
inline void ScheduleGetInfoQuery::set_allocated_header(::proto::QueryHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleGetInfoQuery.header)
}

// .proto.ScheduleID scheduleID = 2;
inline bool ScheduleGetInfoQuery::_internal_has_scheduleid() const {
  return this != internal_default_instance() && _impl_.scheduleid_ != nullptr;
}
inline bool ScheduleGetInfoQuery::has_scheduleid() const {
  return _internal_has_scheduleid();
}
inline const ::proto::ScheduleID& ScheduleGetInfoQuery::_internal_scheduleid() const {
  const ::proto::ScheduleID* p = _impl_.scheduleid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ScheduleID&>(
      ::proto::_ScheduleID_default_instance_);
}
inline const ::proto::ScheduleID& ScheduleGetInfoQuery::scheduleid() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleGetInfoQuery.scheduleID)
  return _internal_scheduleid();
}
inline void ScheduleGetInfoQuery::unsafe_arena_set_allocated_scheduleid(
    ::proto::ScheduleID* scheduleid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleid_);
  }
  _impl_.scheduleid_ = scheduleid;
  if (scheduleid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleGetInfoQuery.scheduleID)
}
inline ::proto::ScheduleID* ScheduleGetInfoQuery::release_scheduleid() {
  
  ::proto::ScheduleID* temp = _impl_.scheduleid_;
  _impl_.scheduleid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ScheduleID* ScheduleGetInfoQuery::unsafe_arena_release_scheduleid() {
  // @@protoc_insertion_point(field_release:proto.ScheduleGetInfoQuery.scheduleID)
  
  ::proto::ScheduleID* temp = _impl_.scheduleid_;
  _impl_.scheduleid_ = nullptr;
  return temp;
}
inline ::proto::ScheduleID* ScheduleGetInfoQuery::_internal_mutable_scheduleid() {
  
  if (_impl_.scheduleid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ScheduleID>(GetArenaForAllocation());
    _impl_.scheduleid_ = p;
  }
  return _impl_.scheduleid_;
}
inline ::proto::ScheduleID* ScheduleGetInfoQuery::mutable_scheduleid() {
  ::proto::ScheduleID* _msg = _internal_mutable_scheduleid();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleGetInfoQuery.scheduleID)
  return _msg;
}
inline void ScheduleGetInfoQuery::set_allocated_scheduleid(::proto::ScheduleID* scheduleid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleid_);
  }
  if (scheduleid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduleid));
    if (message_arena != submessage_arena) {
      scheduleid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduleid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduleid_ = scheduleid;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleGetInfoQuery.scheduleID)
}

// -------------------------------------------------------------------

// ScheduleInfo

// .proto.ScheduleID scheduleID = 1;
inline bool ScheduleInfo::_internal_has_scheduleid() const {
  return this != internal_default_instance() && _impl_.scheduleid_ != nullptr;
}
inline bool ScheduleInfo::has_scheduleid() const {
  return _internal_has_scheduleid();
}
inline const ::proto::ScheduleID& ScheduleInfo::_internal_scheduleid() const {
  const ::proto::ScheduleID* p = _impl_.scheduleid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ScheduleID&>(
      ::proto::_ScheduleID_default_instance_);
}
inline const ::proto::ScheduleID& ScheduleInfo::scheduleid() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.scheduleID)
  return _internal_scheduleid();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_scheduleid(
    ::proto::ScheduleID* scheduleid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleid_);
  }
  _impl_.scheduleid_ = scheduleid;
  if (scheduleid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.scheduleID)
}
inline ::proto::ScheduleID* ScheduleInfo::release_scheduleid() {
  
  ::proto::ScheduleID* temp = _impl_.scheduleid_;
  _impl_.scheduleid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ScheduleID* ScheduleInfo::unsafe_arena_release_scheduleid() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.scheduleID)
  
  ::proto::ScheduleID* temp = _impl_.scheduleid_;
  _impl_.scheduleid_ = nullptr;
  return temp;
}
inline ::proto::ScheduleID* ScheduleInfo::_internal_mutable_scheduleid() {
  
  if (_impl_.scheduleid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ScheduleID>(GetArenaForAllocation());
    _impl_.scheduleid_ = p;
  }
  return _impl_.scheduleid_;
}
inline ::proto::ScheduleID* ScheduleInfo::mutable_scheduleid() {
  ::proto::ScheduleID* _msg = _internal_mutable_scheduleid();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.scheduleID)
  return _msg;
}
inline void ScheduleInfo::set_allocated_scheduleid(::proto::ScheduleID* scheduleid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleid_);
  }
  if (scheduleid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduleid));
    if (message_arena != submessage_arena) {
      scheduleid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduleid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduleid_ = scheduleid;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.scheduleID)
}

// .proto.Timestamp deletion_time = 2;
inline bool ScheduleInfo::_internal_has_deletion_time() const {
  return data_case() == kDeletionTime;
}
inline bool ScheduleInfo::has_deletion_time() const {
  return _internal_has_deletion_time();
}
inline void ScheduleInfo::set_has_deletion_time() {
  _impl_._oneof_case_[0] = kDeletionTime;
}
inline ::proto::Timestamp* ScheduleInfo::release_deletion_time() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.deletion_time)
  if (_internal_has_deletion_time()) {
    clear_has_data();
    ::proto::Timestamp* temp = _impl_.data_.deletion_time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.deletion_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Timestamp& ScheduleInfo::_internal_deletion_time() const {
  return _internal_has_deletion_time()
      ? *_impl_.data_.deletion_time_
      : reinterpret_cast< ::proto::Timestamp&>(::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ScheduleInfo::deletion_time() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.deletion_time)
  return _internal_deletion_time();
}
inline ::proto::Timestamp* ScheduleInfo::unsafe_arena_release_deletion_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ScheduleInfo.deletion_time)
  if (_internal_has_deletion_time()) {
    clear_has_data();
    ::proto::Timestamp* temp = _impl_.data_.deletion_time_;
    _impl_.data_.deletion_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScheduleInfo::unsafe_arena_set_allocated_deletion_time(::proto::Timestamp* deletion_time) {
  clear_data();
  if (deletion_time) {
    set_has_deletion_time();
    _impl_.data_.deletion_time_ = deletion_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.deletion_time)
}
inline ::proto::Timestamp* ScheduleInfo::_internal_mutable_deletion_time() {
  if (!_internal_has_deletion_time()) {
    clear_data();
    set_has_deletion_time();
    _impl_.data_.deletion_time_ = CreateMaybeMessage< ::proto::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.data_.deletion_time_;
}
inline ::proto::Timestamp* ScheduleInfo::mutable_deletion_time() {
  ::proto::Timestamp* _msg = _internal_mutable_deletion_time();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.deletion_time)
  return _msg;
}

// .proto.Timestamp execution_time = 3;
inline bool ScheduleInfo::_internal_has_execution_time() const {
  return data_case() == kExecutionTime;
}
inline bool ScheduleInfo::has_execution_time() const {
  return _internal_has_execution_time();
}
inline void ScheduleInfo::set_has_execution_time() {
  _impl_._oneof_case_[0] = kExecutionTime;
}
inline ::proto::Timestamp* ScheduleInfo::release_execution_time() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.execution_time)
  if (_internal_has_execution_time()) {
    clear_has_data();
    ::proto::Timestamp* temp = _impl_.data_.execution_time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.execution_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Timestamp& ScheduleInfo::_internal_execution_time() const {
  return _internal_has_execution_time()
      ? *_impl_.data_.execution_time_
      : reinterpret_cast< ::proto::Timestamp&>(::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ScheduleInfo::execution_time() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.execution_time)
  return _internal_execution_time();
}
inline ::proto::Timestamp* ScheduleInfo::unsafe_arena_release_execution_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ScheduleInfo.execution_time)
  if (_internal_has_execution_time()) {
    clear_has_data();
    ::proto::Timestamp* temp = _impl_.data_.execution_time_;
    _impl_.data_.execution_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScheduleInfo::unsafe_arena_set_allocated_execution_time(::proto::Timestamp* execution_time) {
  clear_data();
  if (execution_time) {
    set_has_execution_time();
    _impl_.data_.execution_time_ = execution_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.execution_time)
}
inline ::proto::Timestamp* ScheduleInfo::_internal_mutable_execution_time() {
  if (!_internal_has_execution_time()) {
    clear_data();
    set_has_execution_time();
    _impl_.data_.execution_time_ = CreateMaybeMessage< ::proto::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.data_.execution_time_;
}
inline ::proto::Timestamp* ScheduleInfo::mutable_execution_time() {
  ::proto::Timestamp* _msg = _internal_mutable_execution_time();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.execution_time)
  return _msg;
}

// .proto.Timestamp expirationTime = 4;
inline bool ScheduleInfo::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool ScheduleInfo::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::Timestamp& ScheduleInfo::_internal_expirationtime() const {
  const ::proto::Timestamp* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ScheduleInfo::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.expirationTime)
  return _internal_expirationtime();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_expirationtime(
    ::proto::Timestamp* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.expirationTime)
}
inline ::proto::Timestamp* ScheduleInfo::release_expirationtime() {
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ScheduleInfo::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.expirationTime)
  
  ::proto::Timestamp* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ScheduleInfo::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::Timestamp* ScheduleInfo::mutable_expirationtime() {
  ::proto::Timestamp* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.expirationTime)
  return _msg;
}
inline void ScheduleInfo::set_allocated_expirationtime(::proto::Timestamp* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.expirationTime)
}

// .proto.SchedulableTransactionBody scheduledTransactionBody = 5;
inline bool ScheduleInfo::_internal_has_scheduledtransactionbody() const {
  return this != internal_default_instance() && _impl_.scheduledtransactionbody_ != nullptr;
}
inline bool ScheduleInfo::has_scheduledtransactionbody() const {
  return _internal_has_scheduledtransactionbody();
}
inline const ::proto::SchedulableTransactionBody& ScheduleInfo::_internal_scheduledtransactionbody() const {
  const ::proto::SchedulableTransactionBody* p = _impl_.scheduledtransactionbody_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SchedulableTransactionBody&>(
      ::proto::_SchedulableTransactionBody_default_instance_);
}
inline const ::proto::SchedulableTransactionBody& ScheduleInfo::scheduledtransactionbody() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.scheduledTransactionBody)
  return _internal_scheduledtransactionbody();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_scheduledtransactionbody(
    ::proto::SchedulableTransactionBody* scheduledtransactionbody) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionbody_);
  }
  _impl_.scheduledtransactionbody_ = scheduledtransactionbody;
  if (scheduledtransactionbody) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.scheduledTransactionBody)
}
inline ::proto::SchedulableTransactionBody* ScheduleInfo::release_scheduledtransactionbody() {
  
  ::proto::SchedulableTransactionBody* temp = _impl_.scheduledtransactionbody_;
  _impl_.scheduledtransactionbody_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SchedulableTransactionBody* ScheduleInfo::unsafe_arena_release_scheduledtransactionbody() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.scheduledTransactionBody)
  
  ::proto::SchedulableTransactionBody* temp = _impl_.scheduledtransactionbody_;
  _impl_.scheduledtransactionbody_ = nullptr;
  return temp;
}
inline ::proto::SchedulableTransactionBody* ScheduleInfo::_internal_mutable_scheduledtransactionbody() {
  
  if (_impl_.scheduledtransactionbody_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SchedulableTransactionBody>(GetArenaForAllocation());
    _impl_.scheduledtransactionbody_ = p;
  }
  return _impl_.scheduledtransactionbody_;
}
inline ::proto::SchedulableTransactionBody* ScheduleInfo::mutable_scheduledtransactionbody() {
  ::proto::SchedulableTransactionBody* _msg = _internal_mutable_scheduledtransactionbody();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.scheduledTransactionBody)
  return _msg;
}
inline void ScheduleInfo::set_allocated_scheduledtransactionbody(::proto::SchedulableTransactionBody* scheduledtransactionbody) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionbody_);
  }
  if (scheduledtransactionbody) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledtransactionbody));
    if (message_arena != submessage_arena) {
      scheduledtransactionbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduledtransactionbody, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduledtransactionbody_ = scheduledtransactionbody;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.scheduledTransactionBody)
}

// string memo = 6;
inline void ScheduleInfo::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& ScheduleInfo::memo() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleInfo::set_memo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ScheduleInfo.memo)
}
inline std::string* ScheduleInfo::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.memo)
  return _s;
}
inline const std::string& ScheduleInfo::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void ScheduleInfo::_internal_set_memo(const std::string& value) {
  
  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleInfo::_internal_mutable_memo() {
  
  return _impl_.memo_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleInfo::release_memo() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.memo)
  return _impl_.memo_.Release();
}
inline void ScheduleInfo::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  _impl_.memo_.SetAllocated(memo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.memo)
}

// .proto.Key adminKey = 7;
inline bool ScheduleInfo::_internal_has_adminkey() const {
  return this != internal_default_instance() && _impl_.adminkey_ != nullptr;
}
inline bool ScheduleInfo::has_adminkey() const {
  return _internal_has_adminkey();
}
inline const ::proto::Key& ScheduleInfo::_internal_adminkey() const {
  const ::proto::Key* p = _impl_.adminkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Key&>(
      ::proto::_Key_default_instance_);
}
inline const ::proto::Key& ScheduleInfo::adminkey() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.adminKey)
  return _internal_adminkey();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_adminkey(
    ::proto::Key* adminkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  _impl_.adminkey_ = adminkey;
  if (adminkey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.adminKey)
}
inline ::proto::Key* ScheduleInfo::release_adminkey() {
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Key* ScheduleInfo::unsafe_arena_release_adminkey() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.adminKey)
  
  ::proto::Key* temp = _impl_.adminkey_;
  _impl_.adminkey_ = nullptr;
  return temp;
}
inline ::proto::Key* ScheduleInfo::_internal_mutable_adminkey() {
  
  if (_impl_.adminkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaForAllocation());
    _impl_.adminkey_ = p;
  }
  return _impl_.adminkey_;
}
inline ::proto::Key* ScheduleInfo::mutable_adminkey() {
  ::proto::Key* _msg = _internal_mutable_adminkey();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.adminKey)
  return _msg;
}
inline void ScheduleInfo::set_allocated_adminkey(::proto::Key* adminkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adminkey_);
  }
  if (adminkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adminkey));
    if (message_arena != submessage_arena) {
      adminkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adminkey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adminkey_ = adminkey;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.adminKey)
}

// .proto.KeyList signers = 8;
inline bool ScheduleInfo::_internal_has_signers() const {
  return this != internal_default_instance() && _impl_.signers_ != nullptr;
}
inline bool ScheduleInfo::has_signers() const {
  return _internal_has_signers();
}
inline const ::proto::KeyList& ScheduleInfo::_internal_signers() const {
  const ::proto::KeyList* p = _impl_.signers_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::KeyList&>(
      ::proto::_KeyList_default_instance_);
}
inline const ::proto::KeyList& ScheduleInfo::signers() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.signers)
  return _internal_signers();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_signers(
    ::proto::KeyList* signers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signers_);
  }
  _impl_.signers_ = signers;
  if (signers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.signers)
}
inline ::proto::KeyList* ScheduleInfo::release_signers() {
  
  ::proto::KeyList* temp = _impl_.signers_;
  _impl_.signers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::KeyList* ScheduleInfo::unsafe_arena_release_signers() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.signers)
  
  ::proto::KeyList* temp = _impl_.signers_;
  _impl_.signers_ = nullptr;
  return temp;
}
inline ::proto::KeyList* ScheduleInfo::_internal_mutable_signers() {
  
  if (_impl_.signers_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::KeyList>(GetArenaForAllocation());
    _impl_.signers_ = p;
  }
  return _impl_.signers_;
}
inline ::proto::KeyList* ScheduleInfo::mutable_signers() {
  ::proto::KeyList* _msg = _internal_mutable_signers();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.signers)
  return _msg;
}
inline void ScheduleInfo::set_allocated_signers(::proto::KeyList* signers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signers_);
  }
  if (signers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signers));
    if (message_arena != submessage_arena) {
      signers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.signers_ = signers;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.signers)
}

// .proto.AccountID creatorAccountID = 9;
inline bool ScheduleInfo::_internal_has_creatoraccountid() const {
  return this != internal_default_instance() && _impl_.creatoraccountid_ != nullptr;
}
inline bool ScheduleInfo::has_creatoraccountid() const {
  return _internal_has_creatoraccountid();
}
inline const ::proto::AccountID& ScheduleInfo::_internal_creatoraccountid() const {
  const ::proto::AccountID* p = _impl_.creatoraccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ScheduleInfo::creatoraccountid() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.creatorAccountID)
  return _internal_creatoraccountid();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_creatoraccountid(
    ::proto::AccountID* creatoraccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creatoraccountid_);
  }
  _impl_.creatoraccountid_ = creatoraccountid;
  if (creatoraccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.creatorAccountID)
}
inline ::proto::AccountID* ScheduleInfo::release_creatoraccountid() {
  
  ::proto::AccountID* temp = _impl_.creatoraccountid_;
  _impl_.creatoraccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ScheduleInfo::unsafe_arena_release_creatoraccountid() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.creatorAccountID)
  
  ::proto::AccountID* temp = _impl_.creatoraccountid_;
  _impl_.creatoraccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ScheduleInfo::_internal_mutable_creatoraccountid() {
  
  if (_impl_.creatoraccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.creatoraccountid_ = p;
  }
  return _impl_.creatoraccountid_;
}
inline ::proto::AccountID* ScheduleInfo::mutable_creatoraccountid() {
  ::proto::AccountID* _msg = _internal_mutable_creatoraccountid();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.creatorAccountID)
  return _msg;
}
inline void ScheduleInfo::set_allocated_creatoraccountid(::proto::AccountID* creatoraccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creatoraccountid_);
  }
  if (creatoraccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatoraccountid));
    if (message_arena != submessage_arena) {
      creatoraccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creatoraccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creatoraccountid_ = creatoraccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.creatorAccountID)
}

// .proto.AccountID payerAccountID = 10;
inline bool ScheduleInfo::_internal_has_payeraccountid() const {
  return this != internal_default_instance() && _impl_.payeraccountid_ != nullptr;
}
inline bool ScheduleInfo::has_payeraccountid() const {
  return _internal_has_payeraccountid();
}
inline const ::proto::AccountID& ScheduleInfo::_internal_payeraccountid() const {
  const ::proto::AccountID* p = _impl_.payeraccountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& ScheduleInfo::payeraccountid() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.payerAccountID)
  return _internal_payeraccountid();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_payeraccountid(
    ::proto::AccountID* payeraccountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payeraccountid_);
  }
  _impl_.payeraccountid_ = payeraccountid;
  if (payeraccountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.payerAccountID)
}
inline ::proto::AccountID* ScheduleInfo::release_payeraccountid() {
  
  ::proto::AccountID* temp = _impl_.payeraccountid_;
  _impl_.payeraccountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* ScheduleInfo::unsafe_arena_release_payeraccountid() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.payerAccountID)
  
  ::proto::AccountID* temp = _impl_.payeraccountid_;
  _impl_.payeraccountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* ScheduleInfo::_internal_mutable_payeraccountid() {
  
  if (_impl_.payeraccountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.payeraccountid_ = p;
  }
  return _impl_.payeraccountid_;
}
inline ::proto::AccountID* ScheduleInfo::mutable_payeraccountid() {
  ::proto::AccountID* _msg = _internal_mutable_payeraccountid();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.payerAccountID)
  return _msg;
}
inline void ScheduleInfo::set_allocated_payeraccountid(::proto::AccountID* payeraccountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payeraccountid_);
  }
  if (payeraccountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payeraccountid));
    if (message_arena != submessage_arena) {
      payeraccountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payeraccountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payeraccountid_ = payeraccountid;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.payerAccountID)
}

// .proto.TransactionID scheduledTransactionID = 11;
inline bool ScheduleInfo::_internal_has_scheduledtransactionid() const {
  return this != internal_default_instance() && _impl_.scheduledtransactionid_ != nullptr;
}
inline bool ScheduleInfo::has_scheduledtransactionid() const {
  return _internal_has_scheduledtransactionid();
}
inline const ::proto::TransactionID& ScheduleInfo::_internal_scheduledtransactionid() const {
  const ::proto::TransactionID* p = _impl_.scheduledtransactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionID&>(
      ::proto::_TransactionID_default_instance_);
}
inline const ::proto::TransactionID& ScheduleInfo::scheduledtransactionid() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.scheduledTransactionID)
  return _internal_scheduledtransactionid();
}
inline void ScheduleInfo::unsafe_arena_set_allocated_scheduledtransactionid(
    ::proto::TransactionID* scheduledtransactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionid_);
  }
  _impl_.scheduledtransactionid_ = scheduledtransactionid;
  if (scheduledtransactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleInfo.scheduledTransactionID)
}
inline ::proto::TransactionID* ScheduleInfo::release_scheduledtransactionid() {
  
  ::proto::TransactionID* temp = _impl_.scheduledtransactionid_;
  _impl_.scheduledtransactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionID* ScheduleInfo::unsafe_arena_release_scheduledtransactionid() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.scheduledTransactionID)
  
  ::proto::TransactionID* temp = _impl_.scheduledtransactionid_;
  _impl_.scheduledtransactionid_ = nullptr;
  return temp;
}
inline ::proto::TransactionID* ScheduleInfo::_internal_mutable_scheduledtransactionid() {
  
  if (_impl_.scheduledtransactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionID>(GetArenaForAllocation());
    _impl_.scheduledtransactionid_ = p;
  }
  return _impl_.scheduledtransactionid_;
}
inline ::proto::TransactionID* ScheduleInfo::mutable_scheduledtransactionid() {
  ::proto::TransactionID* _msg = _internal_mutable_scheduledtransactionid();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.scheduledTransactionID)
  return _msg;
}
inline void ScheduleInfo::set_allocated_scheduledtransactionid(::proto::TransactionID* scheduledtransactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionid_);
  }
  if (scheduledtransactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledtransactionid));
    if (message_arena != submessage_arena) {
      scheduledtransactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduledtransactionid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduledtransactionid_ = scheduledtransactionid;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.scheduledTransactionID)
}

// bytes ledger_id = 12;
inline void ScheduleInfo::clear_ledger_id() {
  _impl_.ledger_id_.ClearToEmpty();
}
inline const std::string& ScheduleInfo::ledger_id() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.ledger_id)
  return _internal_ledger_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleInfo::set_ledger_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ledger_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ScheduleInfo.ledger_id)
}
inline std::string* ScheduleInfo::mutable_ledger_id() {
  std::string* _s = _internal_mutable_ledger_id();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleInfo.ledger_id)
  return _s;
}
inline const std::string& ScheduleInfo::_internal_ledger_id() const {
  return _impl_.ledger_id_.Get();
}
inline void ScheduleInfo::_internal_set_ledger_id(const std::string& value) {
  
  _impl_.ledger_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleInfo::_internal_mutable_ledger_id() {
  
  return _impl_.ledger_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleInfo::release_ledger_id() {
  // @@protoc_insertion_point(field_release:proto.ScheduleInfo.ledger_id)
  return _impl_.ledger_id_.Release();
}
inline void ScheduleInfo::set_allocated_ledger_id(std::string* ledger_id) {
  if (ledger_id != nullptr) {
    
  } else {
    
  }
  _impl_.ledger_id_.SetAllocated(ledger_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ledger_id_.IsDefault()) {
    _impl_.ledger_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleInfo.ledger_id)
}

// bool wait_for_expiry = 13;
inline void ScheduleInfo::clear_wait_for_expiry() {
  _impl_.wait_for_expiry_ = false;
}
inline bool ScheduleInfo::_internal_wait_for_expiry() const {
  return _impl_.wait_for_expiry_;
}
inline bool ScheduleInfo::wait_for_expiry() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleInfo.wait_for_expiry)
  return _internal_wait_for_expiry();
}
inline void ScheduleInfo::_internal_set_wait_for_expiry(bool value) {
  
  _impl_.wait_for_expiry_ = value;
}
inline void ScheduleInfo::set_wait_for_expiry(bool value) {
  _internal_set_wait_for_expiry(value);
  // @@protoc_insertion_point(field_set:proto.ScheduleInfo.wait_for_expiry)
}

inline bool ScheduleInfo::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ScheduleInfo::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline ScheduleInfo::DataCase ScheduleInfo::data_case() const {
  return ScheduleInfo::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScheduleGetInfoResponse

// .proto.ResponseHeader header = 1;
inline bool ScheduleGetInfoResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool ScheduleGetInfoResponse::has_header() const {
  return _internal_has_header();
}
inline const ::proto::ResponseHeader& ScheduleGetInfoResponse::_internal_header() const {
  const ::proto::ResponseHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseHeader&>(
      ::proto::_ResponseHeader_default_instance_);
}
inline const ::proto::ResponseHeader& ScheduleGetInfoResponse::header() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleGetInfoResponse.header)
  return _internal_header();
}
inline void ScheduleGetInfoResponse::unsafe_arena_set_allocated_header(
    ::proto::ResponseHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleGetInfoResponse.header)
}
inline ::proto::ResponseHeader* ScheduleGetInfoResponse::release_header() {
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseHeader* ScheduleGetInfoResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:proto.ScheduleGetInfoResponse.header)
  
  ::proto::ResponseHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::proto::ResponseHeader* ScheduleGetInfoResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::proto::ResponseHeader* ScheduleGetInfoResponse::mutable_header() {
  ::proto::ResponseHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleGetInfoResponse.header)
  return _msg;
}
inline void ScheduleGetInfoResponse::set_allocated_header(::proto::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleGetInfoResponse.header)
}

// .proto.ScheduleInfo scheduleInfo = 2;
inline bool ScheduleGetInfoResponse::_internal_has_scheduleinfo() const {
  return this != internal_default_instance() && _impl_.scheduleinfo_ != nullptr;
}
inline bool ScheduleGetInfoResponse::has_scheduleinfo() const {
  return _internal_has_scheduleinfo();
}
inline void ScheduleGetInfoResponse::clear_scheduleinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.scheduleinfo_ != nullptr) {
    delete _impl_.scheduleinfo_;
  }
  _impl_.scheduleinfo_ = nullptr;
}
inline const ::proto::ScheduleInfo& ScheduleGetInfoResponse::_internal_scheduleinfo() const {
  const ::proto::ScheduleInfo* p = _impl_.scheduleinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ScheduleInfo&>(
      ::proto::_ScheduleInfo_default_instance_);
}
inline const ::proto::ScheduleInfo& ScheduleGetInfoResponse::scheduleinfo() const {
  // @@protoc_insertion_point(field_get:proto.ScheduleGetInfoResponse.scheduleInfo)
  return _internal_scheduleinfo();
}
inline void ScheduleGetInfoResponse::unsafe_arena_set_allocated_scheduleinfo(
    ::proto::ScheduleInfo* scheduleinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleinfo_);
  }
  _impl_.scheduleinfo_ = scheduleinfo;
  if (scheduleinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ScheduleGetInfoResponse.scheduleInfo)
}
inline ::proto::ScheduleInfo* ScheduleGetInfoResponse::release_scheduleinfo() {
  
  ::proto::ScheduleInfo* temp = _impl_.scheduleinfo_;
  _impl_.scheduleinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ScheduleInfo* ScheduleGetInfoResponse::unsafe_arena_release_scheduleinfo() {
  // @@protoc_insertion_point(field_release:proto.ScheduleGetInfoResponse.scheduleInfo)
  
  ::proto::ScheduleInfo* temp = _impl_.scheduleinfo_;
  _impl_.scheduleinfo_ = nullptr;
  return temp;
}
inline ::proto::ScheduleInfo* ScheduleGetInfoResponse::_internal_mutable_scheduleinfo() {
  
  if (_impl_.scheduleinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ScheduleInfo>(GetArenaForAllocation());
    _impl_.scheduleinfo_ = p;
  }
  return _impl_.scheduleinfo_;
}
inline ::proto::ScheduleInfo* ScheduleGetInfoResponse::mutable_scheduleinfo() {
  ::proto::ScheduleInfo* _msg = _internal_mutable_scheduleinfo();
  // @@protoc_insertion_point(field_mutable:proto.ScheduleGetInfoResponse.scheduleInfo)
  return _msg;
}
inline void ScheduleGetInfoResponse::set_allocated_scheduleinfo(::proto::ScheduleInfo* scheduleinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scheduleinfo_;
  }
  if (scheduleinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scheduleinfo);
    if (message_arena != submessage_arena) {
      scheduleinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduleinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduleinfo_ = scheduleinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ScheduleGetInfoResponse.scheduleInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schedule_5fget_5finfo_2eproto

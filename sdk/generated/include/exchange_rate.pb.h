// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange_rate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_exchange_5frate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_exchange_5frate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_exchange_5frate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_5frate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_exchange_5frate_2eproto;
namespace proto {
class ExchangeRate;
struct ExchangeRateDefaultTypeInternal;
extern ExchangeRateDefaultTypeInternal _ExchangeRate_default_instance_;
class ExchangeRateSet;
struct ExchangeRateSetDefaultTypeInternal;
extern ExchangeRateSetDefaultTypeInternal _ExchangeRateSet_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ExchangeRate* Arena::CreateMaybeMessage<::proto::ExchangeRate>(Arena*);
template<> ::proto::ExchangeRateSet* Arena::CreateMaybeMessage<::proto::ExchangeRateSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ExchangeRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ExchangeRate) */ {
 public:
  inline ExchangeRate() : ExchangeRate(nullptr) {}
  ~ExchangeRate() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRate(const ExchangeRate& from);
  ExchangeRate(ExchangeRate&& from) noexcept
    : ExchangeRate() {
    *this = ::std::move(from);
  }

  inline ExchangeRate& operator=(const ExchangeRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRate& operator=(ExchangeRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRate* internal_default_instance() {
    return reinterpret_cast<const ExchangeRate*>(
               &_ExchangeRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExchangeRate& a, ExchangeRate& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRate& from) {
    ExchangeRate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ExchangeRate";
  }
  protected:
  explicit ExchangeRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationTimeFieldNumber = 3,
    kHbarEquivFieldNumber = 1,
    kCentEquivFieldNumber = 2,
  };
  // .proto.TimestampSeconds expirationTime = 3;
  bool has_expirationtime() const;
  private:
  bool _internal_has_expirationtime() const;
  public:
  void clear_expirationtime();
  const ::proto::TimestampSeconds& expirationtime() const;
  PROTOBUF_NODISCARD ::proto::TimestampSeconds* release_expirationtime();
  ::proto::TimestampSeconds* mutable_expirationtime();
  void set_allocated_expirationtime(::proto::TimestampSeconds* expirationtime);
  private:
  const ::proto::TimestampSeconds& _internal_expirationtime() const;
  ::proto::TimestampSeconds* _internal_mutable_expirationtime();
  public:
  void unsafe_arena_set_allocated_expirationtime(
      ::proto::TimestampSeconds* expirationtime);
  ::proto::TimestampSeconds* unsafe_arena_release_expirationtime();

  // int32 hbarEquiv = 1;
  void clear_hbarequiv();
  int32_t hbarequiv() const;
  void set_hbarequiv(int32_t value);
  private:
  int32_t _internal_hbarequiv() const;
  void _internal_set_hbarequiv(int32_t value);
  public:

  // int32 centEquiv = 2;
  void clear_centequiv();
  int32_t centequiv() const;
  void set_centequiv(int32_t value);
  private:
  int32_t _internal_centequiv() const;
  void _internal_set_centequiv(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ExchangeRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TimestampSeconds* expirationtime_;
    int32_t hbarequiv_;
    int32_t centequiv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_5frate_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRateSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ExchangeRateSet) */ {
 public:
  inline ExchangeRateSet() : ExchangeRateSet(nullptr) {}
  ~ExchangeRateSet() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRateSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRateSet(const ExchangeRateSet& from);
  ExchangeRateSet(ExchangeRateSet&& from) noexcept
    : ExchangeRateSet() {
    *this = ::std::move(from);
  }

  inline ExchangeRateSet& operator=(const ExchangeRateSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRateSet& operator=(ExchangeRateSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRateSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRateSet* internal_default_instance() {
    return reinterpret_cast<const ExchangeRateSet*>(
               &_ExchangeRateSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExchangeRateSet& a, ExchangeRateSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRateSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRateSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRateSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRateSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRateSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRateSet& from) {
    ExchangeRateSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRateSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ExchangeRateSet";
  }
  protected:
  explicit ExchangeRateSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentRateFieldNumber = 1,
    kNextRateFieldNumber = 2,
  };
  // .proto.ExchangeRate currentRate = 1;
  bool has_currentrate() const;
  private:
  bool _internal_has_currentrate() const;
  public:
  void clear_currentrate();
  const ::proto::ExchangeRate& currentrate() const;
  PROTOBUF_NODISCARD ::proto::ExchangeRate* release_currentrate();
  ::proto::ExchangeRate* mutable_currentrate();
  void set_allocated_currentrate(::proto::ExchangeRate* currentrate);
  private:
  const ::proto::ExchangeRate& _internal_currentrate() const;
  ::proto::ExchangeRate* _internal_mutable_currentrate();
  public:
  void unsafe_arena_set_allocated_currentrate(
      ::proto::ExchangeRate* currentrate);
  ::proto::ExchangeRate* unsafe_arena_release_currentrate();

  // .proto.ExchangeRate nextRate = 2;
  bool has_nextrate() const;
  private:
  bool _internal_has_nextrate() const;
  public:
  void clear_nextrate();
  const ::proto::ExchangeRate& nextrate() const;
  PROTOBUF_NODISCARD ::proto::ExchangeRate* release_nextrate();
  ::proto::ExchangeRate* mutable_nextrate();
  void set_allocated_nextrate(::proto::ExchangeRate* nextrate);
  private:
  const ::proto::ExchangeRate& _internal_nextrate() const;
  ::proto::ExchangeRate* _internal_mutable_nextrate();
  public:
  void unsafe_arena_set_allocated_nextrate(
      ::proto::ExchangeRate* nextrate);
  ::proto::ExchangeRate* unsafe_arena_release_nextrate();

  // @@protoc_insertion_point(class_scope:proto.ExchangeRateSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ExchangeRate* currentrate_;
    ::proto::ExchangeRate* nextrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_5frate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExchangeRate

// int32 hbarEquiv = 1;
inline void ExchangeRate::clear_hbarequiv() {
  _impl_.hbarequiv_ = 0;
}
inline int32_t ExchangeRate::_internal_hbarequiv() const {
  return _impl_.hbarequiv_;
}
inline int32_t ExchangeRate::hbarequiv() const {
  // @@protoc_insertion_point(field_get:proto.ExchangeRate.hbarEquiv)
  return _internal_hbarequiv();
}
inline void ExchangeRate::_internal_set_hbarequiv(int32_t value) {
  
  _impl_.hbarequiv_ = value;
}
inline void ExchangeRate::set_hbarequiv(int32_t value) {
  _internal_set_hbarequiv(value);
  // @@protoc_insertion_point(field_set:proto.ExchangeRate.hbarEquiv)
}

// int32 centEquiv = 2;
inline void ExchangeRate::clear_centequiv() {
  _impl_.centequiv_ = 0;
}
inline int32_t ExchangeRate::_internal_centequiv() const {
  return _impl_.centequiv_;
}
inline int32_t ExchangeRate::centequiv() const {
  // @@protoc_insertion_point(field_get:proto.ExchangeRate.centEquiv)
  return _internal_centequiv();
}
inline void ExchangeRate::_internal_set_centequiv(int32_t value) {
  
  _impl_.centequiv_ = value;
}
inline void ExchangeRate::set_centequiv(int32_t value) {
  _internal_set_centequiv(value);
  // @@protoc_insertion_point(field_set:proto.ExchangeRate.centEquiv)
}

// .proto.TimestampSeconds expirationTime = 3;
inline bool ExchangeRate::_internal_has_expirationtime() const {
  return this != internal_default_instance() && _impl_.expirationtime_ != nullptr;
}
inline bool ExchangeRate::has_expirationtime() const {
  return _internal_has_expirationtime();
}
inline const ::proto::TimestampSeconds& ExchangeRate::_internal_expirationtime() const {
  const ::proto::TimestampSeconds* p = _impl_.expirationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TimestampSeconds&>(
      ::proto::_TimestampSeconds_default_instance_);
}
inline const ::proto::TimestampSeconds& ExchangeRate::expirationtime() const {
  // @@protoc_insertion_point(field_get:proto.ExchangeRate.expirationTime)
  return _internal_expirationtime();
}
inline void ExchangeRate::unsafe_arena_set_allocated_expirationtime(
    ::proto::TimestampSeconds* expirationtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  _impl_.expirationtime_ = expirationtime;
  if (expirationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ExchangeRate.expirationTime)
}
inline ::proto::TimestampSeconds* ExchangeRate::release_expirationtime() {
  
  ::proto::TimestampSeconds* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TimestampSeconds* ExchangeRate::unsafe_arena_release_expirationtime() {
  // @@protoc_insertion_point(field_release:proto.ExchangeRate.expirationTime)
  
  ::proto::TimestampSeconds* temp = _impl_.expirationtime_;
  _impl_.expirationtime_ = nullptr;
  return temp;
}
inline ::proto::TimestampSeconds* ExchangeRate::_internal_mutable_expirationtime() {
  
  if (_impl_.expirationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TimestampSeconds>(GetArenaForAllocation());
    _impl_.expirationtime_ = p;
  }
  return _impl_.expirationtime_;
}
inline ::proto::TimestampSeconds* ExchangeRate::mutable_expirationtime() {
  ::proto::TimestampSeconds* _msg = _internal_mutable_expirationtime();
  // @@protoc_insertion_point(field_mutable:proto.ExchangeRate.expirationTime)
  return _msg;
}
inline void ExchangeRate::set_allocated_expirationtime(::proto::TimestampSeconds* expirationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expirationtime_);
  }
  if (expirationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationtime));
    if (message_arena != submessage_arena) {
      expirationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expirationtime_ = expirationtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ExchangeRate.expirationTime)
}

// -------------------------------------------------------------------

// ExchangeRateSet

// .proto.ExchangeRate currentRate = 1;
inline bool ExchangeRateSet::_internal_has_currentrate() const {
  return this != internal_default_instance() && _impl_.currentrate_ != nullptr;
}
inline bool ExchangeRateSet::has_currentrate() const {
  return _internal_has_currentrate();
}
inline void ExchangeRateSet::clear_currentrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.currentrate_ != nullptr) {
    delete _impl_.currentrate_;
  }
  _impl_.currentrate_ = nullptr;
}
inline const ::proto::ExchangeRate& ExchangeRateSet::_internal_currentrate() const {
  const ::proto::ExchangeRate* p = _impl_.currentrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ExchangeRate&>(
      ::proto::_ExchangeRate_default_instance_);
}
inline const ::proto::ExchangeRate& ExchangeRateSet::currentrate() const {
  // @@protoc_insertion_point(field_get:proto.ExchangeRateSet.currentRate)
  return _internal_currentrate();
}
inline void ExchangeRateSet::unsafe_arena_set_allocated_currentrate(
    ::proto::ExchangeRate* currentrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.currentrate_);
  }
  _impl_.currentrate_ = currentrate;
  if (currentrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ExchangeRateSet.currentRate)
}
inline ::proto::ExchangeRate* ExchangeRateSet::release_currentrate() {
  
  ::proto::ExchangeRate* temp = _impl_.currentrate_;
  _impl_.currentrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ExchangeRate* ExchangeRateSet::unsafe_arena_release_currentrate() {
  // @@protoc_insertion_point(field_release:proto.ExchangeRateSet.currentRate)
  
  ::proto::ExchangeRate* temp = _impl_.currentrate_;
  _impl_.currentrate_ = nullptr;
  return temp;
}
inline ::proto::ExchangeRate* ExchangeRateSet::_internal_mutable_currentrate() {
  
  if (_impl_.currentrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ExchangeRate>(GetArenaForAllocation());
    _impl_.currentrate_ = p;
  }
  return _impl_.currentrate_;
}
inline ::proto::ExchangeRate* ExchangeRateSet::mutable_currentrate() {
  ::proto::ExchangeRate* _msg = _internal_mutable_currentrate();
  // @@protoc_insertion_point(field_mutable:proto.ExchangeRateSet.currentRate)
  return _msg;
}
inline void ExchangeRateSet::set_allocated_currentrate(::proto::ExchangeRate* currentrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.currentrate_;
  }
  if (currentrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(currentrate);
    if (message_arena != submessage_arena) {
      currentrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentrate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.currentrate_ = currentrate;
  // @@protoc_insertion_point(field_set_allocated:proto.ExchangeRateSet.currentRate)
}

// .proto.ExchangeRate nextRate = 2;
inline bool ExchangeRateSet::_internal_has_nextrate() const {
  return this != internal_default_instance() && _impl_.nextrate_ != nullptr;
}
inline bool ExchangeRateSet::has_nextrate() const {
  return _internal_has_nextrate();
}
inline void ExchangeRateSet::clear_nextrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.nextrate_ != nullptr) {
    delete _impl_.nextrate_;
  }
  _impl_.nextrate_ = nullptr;
}
inline const ::proto::ExchangeRate& ExchangeRateSet::_internal_nextrate() const {
  const ::proto::ExchangeRate* p = _impl_.nextrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ExchangeRate&>(
      ::proto::_ExchangeRate_default_instance_);
}
inline const ::proto::ExchangeRate& ExchangeRateSet::nextrate() const {
  // @@protoc_insertion_point(field_get:proto.ExchangeRateSet.nextRate)
  return _internal_nextrate();
}
inline void ExchangeRateSet::unsafe_arena_set_allocated_nextrate(
    ::proto::ExchangeRate* nextrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nextrate_);
  }
  _impl_.nextrate_ = nextrate;
  if (nextrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ExchangeRateSet.nextRate)
}
inline ::proto::ExchangeRate* ExchangeRateSet::release_nextrate() {
  
  ::proto::ExchangeRate* temp = _impl_.nextrate_;
  _impl_.nextrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ExchangeRate* ExchangeRateSet::unsafe_arena_release_nextrate() {
  // @@protoc_insertion_point(field_release:proto.ExchangeRateSet.nextRate)
  
  ::proto::ExchangeRate* temp = _impl_.nextrate_;
  _impl_.nextrate_ = nullptr;
  return temp;
}
inline ::proto::ExchangeRate* ExchangeRateSet::_internal_mutable_nextrate() {
  
  if (_impl_.nextrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ExchangeRate>(GetArenaForAllocation());
    _impl_.nextrate_ = p;
  }
  return _impl_.nextrate_;
}
inline ::proto::ExchangeRate* ExchangeRateSet::mutable_nextrate() {
  ::proto::ExchangeRate* _msg = _internal_mutable_nextrate();
  // @@protoc_insertion_point(field_mutable:proto.ExchangeRateSet.nextRate)
  return _msg;
}
inline void ExchangeRateSet::set_allocated_nextrate(::proto::ExchangeRate* nextrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nextrate_;
  }
  if (nextrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nextrate);
    if (message_arena != submessage_arena) {
      nextrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nextrate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nextrate_ = nextrate;
  // @@protoc_insertion_point(field_set_allocated:proto.ExchangeRateSet.nextRate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_exchange_5frate_2eproto

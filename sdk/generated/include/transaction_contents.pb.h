// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_contents.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5fcontents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5fcontents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5fcontents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5fcontents_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5fcontents_2eproto;
namespace proto {
class SignedTransaction;
struct SignedTransactionDefaultTypeInternal;
extern SignedTransactionDefaultTypeInternal _SignedTransaction_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::SignedTransaction* Arena::CreateMaybeMessage<::proto::SignedTransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class SignedTransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SignedTransaction) */ {
 public:
  inline SignedTransaction() : SignedTransaction(nullptr) {}
  ~SignedTransaction() override;
  explicit PROTOBUF_CONSTEXPR SignedTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignedTransaction(const SignedTransaction& from);
  SignedTransaction(SignedTransaction&& from) noexcept
    : SignedTransaction() {
    *this = ::std::move(from);
  }

  inline SignedTransaction& operator=(const SignedTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedTransaction& operator=(SignedTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignedTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignedTransaction* internal_default_instance() {
    return reinterpret_cast<const SignedTransaction*>(
               &_SignedTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignedTransaction& a, SignedTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedTransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignedTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignedTransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignedTransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignedTransaction& from) {
    SignedTransaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedTransaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SignedTransaction";
  }
  protected:
  explicit SignedTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyBytesFieldNumber = 1,
    kSigMapFieldNumber = 2,
  };
  // bytes bodyBytes = 1;
  void clear_bodybytes();
  const std::string& bodybytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bodybytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bodybytes();
  PROTOBUF_NODISCARD std::string* release_bodybytes();
  void set_allocated_bodybytes(std::string* bodybytes);
  private:
  const std::string& _internal_bodybytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bodybytes(const std::string& value);
  std::string* _internal_mutable_bodybytes();
  public:

  // .proto.SignatureMap sigMap = 2;
  bool has_sigmap() const;
  private:
  bool _internal_has_sigmap() const;
  public:
  void clear_sigmap();
  const ::proto::SignatureMap& sigmap() const;
  PROTOBUF_NODISCARD ::proto::SignatureMap* release_sigmap();
  ::proto::SignatureMap* mutable_sigmap();
  void set_allocated_sigmap(::proto::SignatureMap* sigmap);
  private:
  const ::proto::SignatureMap& _internal_sigmap() const;
  ::proto::SignatureMap* _internal_mutable_sigmap();
  public:
  void unsafe_arena_set_allocated_sigmap(
      ::proto::SignatureMap* sigmap);
  ::proto::SignatureMap* unsafe_arena_release_sigmap();

  // @@protoc_insertion_point(class_scope:proto.SignedTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodybytes_;
    ::proto::SignatureMap* sigmap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5fcontents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignedTransaction

// bytes bodyBytes = 1;
inline void SignedTransaction::clear_bodybytes() {
  _impl_.bodybytes_.ClearToEmpty();
}
inline const std::string& SignedTransaction::bodybytes() const {
  // @@protoc_insertion_point(field_get:proto.SignedTransaction.bodyBytes)
  return _internal_bodybytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignedTransaction::set_bodybytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bodybytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SignedTransaction.bodyBytes)
}
inline std::string* SignedTransaction::mutable_bodybytes() {
  std::string* _s = _internal_mutable_bodybytes();
  // @@protoc_insertion_point(field_mutable:proto.SignedTransaction.bodyBytes)
  return _s;
}
inline const std::string& SignedTransaction::_internal_bodybytes() const {
  return _impl_.bodybytes_.Get();
}
inline void SignedTransaction::_internal_set_bodybytes(const std::string& value) {
  
  _impl_.bodybytes_.Set(value, GetArenaForAllocation());
}
inline std::string* SignedTransaction::_internal_mutable_bodybytes() {
  
  return _impl_.bodybytes_.Mutable(GetArenaForAllocation());
}
inline std::string* SignedTransaction::release_bodybytes() {
  // @@protoc_insertion_point(field_release:proto.SignedTransaction.bodyBytes)
  return _impl_.bodybytes_.Release();
}
inline void SignedTransaction::set_allocated_bodybytes(std::string* bodybytes) {
  if (bodybytes != nullptr) {
    
  } else {
    
  }
  _impl_.bodybytes_.SetAllocated(bodybytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bodybytes_.IsDefault()) {
    _impl_.bodybytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SignedTransaction.bodyBytes)
}

// .proto.SignatureMap sigMap = 2;
inline bool SignedTransaction::_internal_has_sigmap() const {
  return this != internal_default_instance() && _impl_.sigmap_ != nullptr;
}
inline bool SignedTransaction::has_sigmap() const {
  return _internal_has_sigmap();
}
inline const ::proto::SignatureMap& SignedTransaction::_internal_sigmap() const {
  const ::proto::SignatureMap* p = _impl_.sigmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SignatureMap&>(
      ::proto::_SignatureMap_default_instance_);
}
inline const ::proto::SignatureMap& SignedTransaction::sigmap() const {
  // @@protoc_insertion_point(field_get:proto.SignedTransaction.sigMap)
  return _internal_sigmap();
}
inline void SignedTransaction::unsafe_arena_set_allocated_sigmap(
    ::proto::SignatureMap* sigmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigmap_);
  }
  _impl_.sigmap_ = sigmap;
  if (sigmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SignedTransaction.sigMap)
}
inline ::proto::SignatureMap* SignedTransaction::release_sigmap() {
  
  ::proto::SignatureMap* temp = _impl_.sigmap_;
  _impl_.sigmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SignatureMap* SignedTransaction::unsafe_arena_release_sigmap() {
  // @@protoc_insertion_point(field_release:proto.SignedTransaction.sigMap)
  
  ::proto::SignatureMap* temp = _impl_.sigmap_;
  _impl_.sigmap_ = nullptr;
  return temp;
}
inline ::proto::SignatureMap* SignedTransaction::_internal_mutable_sigmap() {
  
  if (_impl_.sigmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SignatureMap>(GetArenaForAllocation());
    _impl_.sigmap_ = p;
  }
  return _impl_.sigmap_;
}
inline ::proto::SignatureMap* SignedTransaction::mutable_sigmap() {
  ::proto::SignatureMap* _msg = _internal_mutable_sigmap();
  // @@protoc_insertion_point(field_mutable:proto.SignedTransaction.sigMap)
  return _msg;
}
inline void SignedTransaction::set_allocated_sigmap(::proto::SignatureMap* sigmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sigmap_);
  }
  if (sigmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigmap));
    if (message_arena != submessage_arena) {
      sigmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sigmap_ = sigmap;
  // @@protoc_insertion_point(field_set_allocated:proto.SignedTransaction.sigMap)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5fcontents_2eproto

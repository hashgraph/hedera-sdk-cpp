// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_receipt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5freceipt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5freceipt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
#include "response_code.pb.h"
#include "exchange_rate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5freceipt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5freceipt_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5freceipt_2eproto;
namespace proto {
class TransactionReceipt;
struct TransactionReceiptDefaultTypeInternal;
extern TransactionReceiptDefaultTypeInternal _TransactionReceipt_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TransactionReceipt* Arena::CreateMaybeMessage<::proto::TransactionReceipt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TransactionReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransactionReceipt) */ {
 public:
  inline TransactionReceipt() : TransactionReceipt(nullptr) {}
  ~TransactionReceipt() override;
  explicit PROTOBUF_CONSTEXPR TransactionReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionReceipt(const TransactionReceipt& from);
  TransactionReceipt(TransactionReceipt&& from) noexcept
    : TransactionReceipt() {
    *this = ::std::move(from);
  }

  inline TransactionReceipt& operator=(const TransactionReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionReceipt& operator=(TransactionReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionReceipt* internal_default_instance() {
    return reinterpret_cast<const TransactionReceipt*>(
               &_TransactionReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionReceipt& a, TransactionReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionReceipt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionReceipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionReceipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionReceipt& from) {
    TransactionReceipt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionReceipt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransactionReceipt";
  }
  protected:
  explicit TransactionReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumbersFieldNumber = 14,
    kTopicRunningHashFieldNumber = 8,
    kAccountIDFieldNumber = 2,
    kFileIDFieldNumber = 3,
    kContractIDFieldNumber = 4,
    kExchangeRateFieldNumber = 5,
    kTopicIDFieldNumber = 6,
    kTokenIDFieldNumber = 10,
    kScheduleIDFieldNumber = 12,
    kScheduledTransactionIDFieldNumber = 13,
    kTopicSequenceNumberFieldNumber = 7,
    kTopicRunningHashVersionFieldNumber = 9,
    kNewTotalSupplyFieldNumber = 11,
    kStatusFieldNumber = 1,
  };
  // repeated int64 serialNumbers = 14;
  int serialnumbers_size() const;
  private:
  int _internal_serialnumbers_size() const;
  public:
  void clear_serialnumbers();
  private:
  int64_t _internal_serialnumbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_serialnumbers() const;
  void _internal_add_serialnumbers(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_serialnumbers();
  public:
  int64_t serialnumbers(int index) const;
  void set_serialnumbers(int index, int64_t value);
  void add_serialnumbers(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      serialnumbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_serialnumbers();

  // bytes topicRunningHash = 8;
  void clear_topicrunninghash();
  const std::string& topicrunninghash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topicrunninghash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topicrunninghash();
  PROTOBUF_NODISCARD std::string* release_topicrunninghash();
  void set_allocated_topicrunninghash(std::string* topicrunninghash);
  private:
  const std::string& _internal_topicrunninghash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicrunninghash(const std::string& value);
  std::string* _internal_mutable_topicrunninghash();
  public:

  // .proto.AccountID accountID = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  const ::proto::AccountID& accountid() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountid();
  ::proto::AccountID* mutable_accountid();
  void set_allocated_accountid(::proto::AccountID* accountid);
  private:
  const ::proto::AccountID& _internal_accountid() const;
  ::proto::AccountID* _internal_mutable_accountid();
  public:
  void unsafe_arena_set_allocated_accountid(
      ::proto::AccountID* accountid);
  ::proto::AccountID* unsafe_arena_release_accountid();

  // .proto.FileID fileID = 3;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  const ::proto::FileID& fileid() const;
  PROTOBUF_NODISCARD ::proto::FileID* release_fileid();
  ::proto::FileID* mutable_fileid();
  void set_allocated_fileid(::proto::FileID* fileid);
  private:
  const ::proto::FileID& _internal_fileid() const;
  ::proto::FileID* _internal_mutable_fileid();
  public:
  void unsafe_arena_set_allocated_fileid(
      ::proto::FileID* fileid);
  ::proto::FileID* unsafe_arena_release_fileid();

  // .proto.ContractID contractID = 4;
  bool has_contractid() const;
  private:
  bool _internal_has_contractid() const;
  public:
  void clear_contractid();
  const ::proto::ContractID& contractid() const;
  PROTOBUF_NODISCARD ::proto::ContractID* release_contractid();
  ::proto::ContractID* mutable_contractid();
  void set_allocated_contractid(::proto::ContractID* contractid);
  private:
  const ::proto::ContractID& _internal_contractid() const;
  ::proto::ContractID* _internal_mutable_contractid();
  public:
  void unsafe_arena_set_allocated_contractid(
      ::proto::ContractID* contractid);
  ::proto::ContractID* unsafe_arena_release_contractid();

  // .proto.ExchangeRateSet exchangeRate = 5;
  bool has_exchangerate() const;
  private:
  bool _internal_has_exchangerate() const;
  public:
  void clear_exchangerate();
  const ::proto::ExchangeRateSet& exchangerate() const;
  PROTOBUF_NODISCARD ::proto::ExchangeRateSet* release_exchangerate();
  ::proto::ExchangeRateSet* mutable_exchangerate();
  void set_allocated_exchangerate(::proto::ExchangeRateSet* exchangerate);
  private:
  const ::proto::ExchangeRateSet& _internal_exchangerate() const;
  ::proto::ExchangeRateSet* _internal_mutable_exchangerate();
  public:
  void unsafe_arena_set_allocated_exchangerate(
      ::proto::ExchangeRateSet* exchangerate);
  ::proto::ExchangeRateSet* unsafe_arena_release_exchangerate();

  // .proto.TopicID topicID = 6;
  bool has_topicid() const;
  private:
  bool _internal_has_topicid() const;
  public:
  void clear_topicid();
  const ::proto::TopicID& topicid() const;
  PROTOBUF_NODISCARD ::proto::TopicID* release_topicid();
  ::proto::TopicID* mutable_topicid();
  void set_allocated_topicid(::proto::TopicID* topicid);
  private:
  const ::proto::TopicID& _internal_topicid() const;
  ::proto::TopicID* _internal_mutable_topicid();
  public:
  void unsafe_arena_set_allocated_topicid(
      ::proto::TopicID* topicid);
  ::proto::TopicID* unsafe_arena_release_topicid();

  // .proto.TokenID tokenID = 10;
  bool has_tokenid() const;
  private:
  bool _internal_has_tokenid() const;
  public:
  void clear_tokenid();
  const ::proto::TokenID& tokenid() const;
  PROTOBUF_NODISCARD ::proto::TokenID* release_tokenid();
  ::proto::TokenID* mutable_tokenid();
  void set_allocated_tokenid(::proto::TokenID* tokenid);
  private:
  const ::proto::TokenID& _internal_tokenid() const;
  ::proto::TokenID* _internal_mutable_tokenid();
  public:
  void unsafe_arena_set_allocated_tokenid(
      ::proto::TokenID* tokenid);
  ::proto::TokenID* unsafe_arena_release_tokenid();

  // .proto.ScheduleID scheduleID = 12;
  bool has_scheduleid() const;
  private:
  bool _internal_has_scheduleid() const;
  public:
  void clear_scheduleid();
  const ::proto::ScheduleID& scheduleid() const;
  PROTOBUF_NODISCARD ::proto::ScheduleID* release_scheduleid();
  ::proto::ScheduleID* mutable_scheduleid();
  void set_allocated_scheduleid(::proto::ScheduleID* scheduleid);
  private:
  const ::proto::ScheduleID& _internal_scheduleid() const;
  ::proto::ScheduleID* _internal_mutable_scheduleid();
  public:
  void unsafe_arena_set_allocated_scheduleid(
      ::proto::ScheduleID* scheduleid);
  ::proto::ScheduleID* unsafe_arena_release_scheduleid();

  // .proto.TransactionID scheduledTransactionID = 13;
  bool has_scheduledtransactionid() const;
  private:
  bool _internal_has_scheduledtransactionid() const;
  public:
  void clear_scheduledtransactionid();
  const ::proto::TransactionID& scheduledtransactionid() const;
  PROTOBUF_NODISCARD ::proto::TransactionID* release_scheduledtransactionid();
  ::proto::TransactionID* mutable_scheduledtransactionid();
  void set_allocated_scheduledtransactionid(::proto::TransactionID* scheduledtransactionid);
  private:
  const ::proto::TransactionID& _internal_scheduledtransactionid() const;
  ::proto::TransactionID* _internal_mutable_scheduledtransactionid();
  public:
  void unsafe_arena_set_allocated_scheduledtransactionid(
      ::proto::TransactionID* scheduledtransactionid);
  ::proto::TransactionID* unsafe_arena_release_scheduledtransactionid();

  // uint64 topicSequenceNumber = 7;
  void clear_topicsequencenumber();
  uint64_t topicsequencenumber() const;
  void set_topicsequencenumber(uint64_t value);
  private:
  uint64_t _internal_topicsequencenumber() const;
  void _internal_set_topicsequencenumber(uint64_t value);
  public:

  // uint64 topicRunningHashVersion = 9;
  void clear_topicrunninghashversion();
  uint64_t topicrunninghashversion() const;
  void set_topicrunninghashversion(uint64_t value);
  private:
  uint64_t _internal_topicrunninghashversion() const;
  void _internal_set_topicrunninghashversion(uint64_t value);
  public:

  // uint64 newTotalSupply = 11;
  void clear_newtotalsupply();
  uint64_t newtotalsupply() const;
  void set_newtotalsupply(uint64_t value);
  private:
  uint64_t _internal_newtotalsupply() const;
  void _internal_set_newtotalsupply(uint64_t value);
  public:

  // .proto.ResponseCodeEnum status = 1;
  void clear_status();
  ::proto::ResponseCodeEnum status() const;
  void set_status(::proto::ResponseCodeEnum value);
  private:
  ::proto::ResponseCodeEnum _internal_status() const;
  void _internal_set_status(::proto::ResponseCodeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TransactionReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > serialnumbers_;
    mutable std::atomic<int> _serialnumbers_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topicrunninghash_;
    ::proto::AccountID* accountid_;
    ::proto::FileID* fileid_;
    ::proto::ContractID* contractid_;
    ::proto::ExchangeRateSet* exchangerate_;
    ::proto::TopicID* topicid_;
    ::proto::TokenID* tokenid_;
    ::proto::ScheduleID* scheduleid_;
    ::proto::TransactionID* scheduledtransactionid_;
    uint64_t topicsequencenumber_;
    uint64_t topicrunninghashversion_;
    uint64_t newtotalsupply_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transaction_5freceipt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionReceipt

// .proto.ResponseCodeEnum status = 1;
inline void TransactionReceipt::clear_status() {
  _impl_.status_ = 0;
}
inline ::proto::ResponseCodeEnum TransactionReceipt::_internal_status() const {
  return static_cast< ::proto::ResponseCodeEnum >(_impl_.status_);
}
inline ::proto::ResponseCodeEnum TransactionReceipt::status() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.status)
  return _internal_status();
}
inline void TransactionReceipt::_internal_set_status(::proto::ResponseCodeEnum value) {
  
  _impl_.status_ = value;
}
inline void TransactionReceipt::set_status(::proto::ResponseCodeEnum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:proto.TransactionReceipt.status)
}

// .proto.AccountID accountID = 2;
inline bool TransactionReceipt::_internal_has_accountid() const {
  return this != internal_default_instance() && _impl_.accountid_ != nullptr;
}
inline bool TransactionReceipt::has_accountid() const {
  return _internal_has_accountid();
}
inline const ::proto::AccountID& TransactionReceipt::_internal_accountid() const {
  const ::proto::AccountID* p = _impl_.accountid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& TransactionReceipt::accountid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.accountID)
  return _internal_accountid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_accountid(
    ::proto::AccountID* accountid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  _impl_.accountid_ = accountid;
  if (accountid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.accountID)
}
inline ::proto::AccountID* TransactionReceipt::release_accountid() {
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* TransactionReceipt::unsafe_arena_release_accountid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.accountID)
  
  ::proto::AccountID* temp = _impl_.accountid_;
  _impl_.accountid_ = nullptr;
  return temp;
}
inline ::proto::AccountID* TransactionReceipt::_internal_mutable_accountid() {
  
  if (_impl_.accountid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountid_ = p;
  }
  return _impl_.accountid_;
}
inline ::proto::AccountID* TransactionReceipt::mutable_accountid() {
  ::proto::AccountID* _msg = _internal_mutable_accountid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.accountID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_accountid(::proto::AccountID* accountid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountid_);
  }
  if (accountid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountid));
    if (message_arena != submessage_arena) {
      accountid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountid_ = accountid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.accountID)
}

// .proto.FileID fileID = 3;
inline bool TransactionReceipt::_internal_has_fileid() const {
  return this != internal_default_instance() && _impl_.fileid_ != nullptr;
}
inline bool TransactionReceipt::has_fileid() const {
  return _internal_has_fileid();
}
inline const ::proto::FileID& TransactionReceipt::_internal_fileid() const {
  const ::proto::FileID* p = _impl_.fileid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::FileID&>(
      ::proto::_FileID_default_instance_);
}
inline const ::proto::FileID& TransactionReceipt::fileid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.fileID)
  return _internal_fileid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_fileid(
    ::proto::FileID* fileid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  _impl_.fileid_ = fileid;
  if (fileid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.fileID)
}
inline ::proto::FileID* TransactionReceipt::release_fileid() {
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::FileID* TransactionReceipt::unsafe_arena_release_fileid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.fileID)
  
  ::proto::FileID* temp = _impl_.fileid_;
  _impl_.fileid_ = nullptr;
  return temp;
}
inline ::proto::FileID* TransactionReceipt::_internal_mutable_fileid() {
  
  if (_impl_.fileid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FileID>(GetArenaForAllocation());
    _impl_.fileid_ = p;
  }
  return _impl_.fileid_;
}
inline ::proto::FileID* TransactionReceipt::mutable_fileid() {
  ::proto::FileID* _msg = _internal_mutable_fileid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.fileID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_fileid(::proto::FileID* fileid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileid_);
  }
  if (fileid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fileid));
    if (message_arena != submessage_arena) {
      fileid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fileid_ = fileid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.fileID)
}

// .proto.ContractID contractID = 4;
inline bool TransactionReceipt::_internal_has_contractid() const {
  return this != internal_default_instance() && _impl_.contractid_ != nullptr;
}
inline bool TransactionReceipt::has_contractid() const {
  return _internal_has_contractid();
}
inline const ::proto::ContractID& TransactionReceipt::_internal_contractid() const {
  const ::proto::ContractID* p = _impl_.contractid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ContractID&>(
      ::proto::_ContractID_default_instance_);
}
inline const ::proto::ContractID& TransactionReceipt::contractid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.contractID)
  return _internal_contractid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_contractid(
    ::proto::ContractID* contractid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  _impl_.contractid_ = contractid;
  if (contractid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.contractID)
}
inline ::proto::ContractID* TransactionReceipt::release_contractid() {
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ContractID* TransactionReceipt::unsafe_arena_release_contractid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.contractID)
  
  ::proto::ContractID* temp = _impl_.contractid_;
  _impl_.contractid_ = nullptr;
  return temp;
}
inline ::proto::ContractID* TransactionReceipt::_internal_mutable_contractid() {
  
  if (_impl_.contractid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ContractID>(GetArenaForAllocation());
    _impl_.contractid_ = p;
  }
  return _impl_.contractid_;
}
inline ::proto::ContractID* TransactionReceipt::mutable_contractid() {
  ::proto::ContractID* _msg = _internal_mutable_contractid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.contractID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_contractid(::proto::ContractID* contractid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contractid_);
  }
  if (contractid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contractid));
    if (message_arena != submessage_arena) {
      contractid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contractid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contractid_ = contractid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.contractID)
}

// .proto.ExchangeRateSet exchangeRate = 5;
inline bool TransactionReceipt::_internal_has_exchangerate() const {
  return this != internal_default_instance() && _impl_.exchangerate_ != nullptr;
}
inline bool TransactionReceipt::has_exchangerate() const {
  return _internal_has_exchangerate();
}
inline const ::proto::ExchangeRateSet& TransactionReceipt::_internal_exchangerate() const {
  const ::proto::ExchangeRateSet* p = _impl_.exchangerate_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ExchangeRateSet&>(
      ::proto::_ExchangeRateSet_default_instance_);
}
inline const ::proto::ExchangeRateSet& TransactionReceipt::exchangerate() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.exchangeRate)
  return _internal_exchangerate();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_exchangerate(
    ::proto::ExchangeRateSet* exchangerate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangerate_);
  }
  _impl_.exchangerate_ = exchangerate;
  if (exchangerate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.exchangeRate)
}
inline ::proto::ExchangeRateSet* TransactionReceipt::release_exchangerate() {
  
  ::proto::ExchangeRateSet* temp = _impl_.exchangerate_;
  _impl_.exchangerate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ExchangeRateSet* TransactionReceipt::unsafe_arena_release_exchangerate() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.exchangeRate)
  
  ::proto::ExchangeRateSet* temp = _impl_.exchangerate_;
  _impl_.exchangerate_ = nullptr;
  return temp;
}
inline ::proto::ExchangeRateSet* TransactionReceipt::_internal_mutable_exchangerate() {
  
  if (_impl_.exchangerate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ExchangeRateSet>(GetArenaForAllocation());
    _impl_.exchangerate_ = p;
  }
  return _impl_.exchangerate_;
}
inline ::proto::ExchangeRateSet* TransactionReceipt::mutable_exchangerate() {
  ::proto::ExchangeRateSet* _msg = _internal_mutable_exchangerate();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.exchangeRate)
  return _msg;
}
inline void TransactionReceipt::set_allocated_exchangerate(::proto::ExchangeRateSet* exchangerate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangerate_);
  }
  if (exchangerate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchangerate));
    if (message_arena != submessage_arena) {
      exchangerate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchangerate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchangerate_ = exchangerate;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.exchangeRate)
}

// .proto.TopicID topicID = 6;
inline bool TransactionReceipt::_internal_has_topicid() const {
  return this != internal_default_instance() && _impl_.topicid_ != nullptr;
}
inline bool TransactionReceipt::has_topicid() const {
  return _internal_has_topicid();
}
inline const ::proto::TopicID& TransactionReceipt::_internal_topicid() const {
  const ::proto::TopicID* p = _impl_.topicid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TopicID&>(
      ::proto::_TopicID_default_instance_);
}
inline const ::proto::TopicID& TransactionReceipt::topicid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.topicID)
  return _internal_topicid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_topicid(
    ::proto::TopicID* topicid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topicid_);
  }
  _impl_.topicid_ = topicid;
  if (topicid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.topicID)
}
inline ::proto::TopicID* TransactionReceipt::release_topicid() {
  
  ::proto::TopicID* temp = _impl_.topicid_;
  _impl_.topicid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TopicID* TransactionReceipt::unsafe_arena_release_topicid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.topicID)
  
  ::proto::TopicID* temp = _impl_.topicid_;
  _impl_.topicid_ = nullptr;
  return temp;
}
inline ::proto::TopicID* TransactionReceipt::_internal_mutable_topicid() {
  
  if (_impl_.topicid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TopicID>(GetArenaForAllocation());
    _impl_.topicid_ = p;
  }
  return _impl_.topicid_;
}
inline ::proto::TopicID* TransactionReceipt::mutable_topicid() {
  ::proto::TopicID* _msg = _internal_mutable_topicid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.topicID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_topicid(::proto::TopicID* topicid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topicid_);
  }
  if (topicid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topicid));
    if (message_arena != submessage_arena) {
      topicid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topicid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.topicid_ = topicid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.topicID)
}

// uint64 topicSequenceNumber = 7;
inline void TransactionReceipt::clear_topicsequencenumber() {
  _impl_.topicsequencenumber_ = uint64_t{0u};
}
inline uint64_t TransactionReceipt::_internal_topicsequencenumber() const {
  return _impl_.topicsequencenumber_;
}
inline uint64_t TransactionReceipt::topicsequencenumber() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.topicSequenceNumber)
  return _internal_topicsequencenumber();
}
inline void TransactionReceipt::_internal_set_topicsequencenumber(uint64_t value) {
  
  _impl_.topicsequencenumber_ = value;
}
inline void TransactionReceipt::set_topicsequencenumber(uint64_t value) {
  _internal_set_topicsequencenumber(value);
  // @@protoc_insertion_point(field_set:proto.TransactionReceipt.topicSequenceNumber)
}

// bytes topicRunningHash = 8;
inline void TransactionReceipt::clear_topicrunninghash() {
  _impl_.topicrunninghash_.ClearToEmpty();
}
inline const std::string& TransactionReceipt::topicrunninghash() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.topicRunningHash)
  return _internal_topicrunninghash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionReceipt::set_topicrunninghash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topicrunninghash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TransactionReceipt.topicRunningHash)
}
inline std::string* TransactionReceipt::mutable_topicrunninghash() {
  std::string* _s = _internal_mutable_topicrunninghash();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.topicRunningHash)
  return _s;
}
inline const std::string& TransactionReceipt::_internal_topicrunninghash() const {
  return _impl_.topicrunninghash_.Get();
}
inline void TransactionReceipt::_internal_set_topicrunninghash(const std::string& value) {
  
  _impl_.topicrunninghash_.Set(value, GetArenaForAllocation());
}
inline std::string* TransactionReceipt::_internal_mutable_topicrunninghash() {
  
  return _impl_.topicrunninghash_.Mutable(GetArenaForAllocation());
}
inline std::string* TransactionReceipt::release_topicrunninghash() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.topicRunningHash)
  return _impl_.topicrunninghash_.Release();
}
inline void TransactionReceipt::set_allocated_topicrunninghash(std::string* topicrunninghash) {
  if (topicrunninghash != nullptr) {
    
  } else {
    
  }
  _impl_.topicrunninghash_.SetAllocated(topicrunninghash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topicrunninghash_.IsDefault()) {
    _impl_.topicrunninghash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.topicRunningHash)
}

// uint64 topicRunningHashVersion = 9;
inline void TransactionReceipt::clear_topicrunninghashversion() {
  _impl_.topicrunninghashversion_ = uint64_t{0u};
}
inline uint64_t TransactionReceipt::_internal_topicrunninghashversion() const {
  return _impl_.topicrunninghashversion_;
}
inline uint64_t TransactionReceipt::topicrunninghashversion() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.topicRunningHashVersion)
  return _internal_topicrunninghashversion();
}
inline void TransactionReceipt::_internal_set_topicrunninghashversion(uint64_t value) {
  
  _impl_.topicrunninghashversion_ = value;
}
inline void TransactionReceipt::set_topicrunninghashversion(uint64_t value) {
  _internal_set_topicrunninghashversion(value);
  // @@protoc_insertion_point(field_set:proto.TransactionReceipt.topicRunningHashVersion)
}

// .proto.TokenID tokenID = 10;
inline bool TransactionReceipt::_internal_has_tokenid() const {
  return this != internal_default_instance() && _impl_.tokenid_ != nullptr;
}
inline bool TransactionReceipt::has_tokenid() const {
  return _internal_has_tokenid();
}
inline const ::proto::TokenID& TransactionReceipt::_internal_tokenid() const {
  const ::proto::TokenID* p = _impl_.tokenid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TokenID&>(
      ::proto::_TokenID_default_instance_);
}
inline const ::proto::TokenID& TransactionReceipt::tokenid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.tokenID)
  return _internal_tokenid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_tokenid(
    ::proto::TokenID* tokenid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  _impl_.tokenid_ = tokenid;
  if (tokenid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.tokenID)
}
inline ::proto::TokenID* TransactionReceipt::release_tokenid() {
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TokenID* TransactionReceipt::unsafe_arena_release_tokenid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.tokenID)
  
  ::proto::TokenID* temp = _impl_.tokenid_;
  _impl_.tokenid_ = nullptr;
  return temp;
}
inline ::proto::TokenID* TransactionReceipt::_internal_mutable_tokenid() {
  
  if (_impl_.tokenid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TokenID>(GetArenaForAllocation());
    _impl_.tokenid_ = p;
  }
  return _impl_.tokenid_;
}
inline ::proto::TokenID* TransactionReceipt::mutable_tokenid() {
  ::proto::TokenID* _msg = _internal_mutable_tokenid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.tokenID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_tokenid(::proto::TokenID* tokenid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tokenid_);
  }
  if (tokenid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenid));
    if (message_arena != submessage_arena) {
      tokenid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tokenid_ = tokenid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.tokenID)
}

// uint64 newTotalSupply = 11;
inline void TransactionReceipt::clear_newtotalsupply() {
  _impl_.newtotalsupply_ = uint64_t{0u};
}
inline uint64_t TransactionReceipt::_internal_newtotalsupply() const {
  return _impl_.newtotalsupply_;
}
inline uint64_t TransactionReceipt::newtotalsupply() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.newTotalSupply)
  return _internal_newtotalsupply();
}
inline void TransactionReceipt::_internal_set_newtotalsupply(uint64_t value) {
  
  _impl_.newtotalsupply_ = value;
}
inline void TransactionReceipt::set_newtotalsupply(uint64_t value) {
  _internal_set_newtotalsupply(value);
  // @@protoc_insertion_point(field_set:proto.TransactionReceipt.newTotalSupply)
}

// .proto.ScheduleID scheduleID = 12;
inline bool TransactionReceipt::_internal_has_scheduleid() const {
  return this != internal_default_instance() && _impl_.scheduleid_ != nullptr;
}
inline bool TransactionReceipt::has_scheduleid() const {
  return _internal_has_scheduleid();
}
inline const ::proto::ScheduleID& TransactionReceipt::_internal_scheduleid() const {
  const ::proto::ScheduleID* p = _impl_.scheduleid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ScheduleID&>(
      ::proto::_ScheduleID_default_instance_);
}
inline const ::proto::ScheduleID& TransactionReceipt::scheduleid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.scheduleID)
  return _internal_scheduleid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_scheduleid(
    ::proto::ScheduleID* scheduleid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleid_);
  }
  _impl_.scheduleid_ = scheduleid;
  if (scheduleid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.scheduleID)
}
inline ::proto::ScheduleID* TransactionReceipt::release_scheduleid() {
  
  ::proto::ScheduleID* temp = _impl_.scheduleid_;
  _impl_.scheduleid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ScheduleID* TransactionReceipt::unsafe_arena_release_scheduleid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.scheduleID)
  
  ::proto::ScheduleID* temp = _impl_.scheduleid_;
  _impl_.scheduleid_ = nullptr;
  return temp;
}
inline ::proto::ScheduleID* TransactionReceipt::_internal_mutable_scheduleid() {
  
  if (_impl_.scheduleid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ScheduleID>(GetArenaForAllocation());
    _impl_.scheduleid_ = p;
  }
  return _impl_.scheduleid_;
}
inline ::proto::ScheduleID* TransactionReceipt::mutable_scheduleid() {
  ::proto::ScheduleID* _msg = _internal_mutable_scheduleid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.scheduleID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_scheduleid(::proto::ScheduleID* scheduleid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduleid_);
  }
  if (scheduleid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduleid));
    if (message_arena != submessage_arena) {
      scheduleid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduleid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduleid_ = scheduleid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.scheduleID)
}

// .proto.TransactionID scheduledTransactionID = 13;
inline bool TransactionReceipt::_internal_has_scheduledtransactionid() const {
  return this != internal_default_instance() && _impl_.scheduledtransactionid_ != nullptr;
}
inline bool TransactionReceipt::has_scheduledtransactionid() const {
  return _internal_has_scheduledtransactionid();
}
inline const ::proto::TransactionID& TransactionReceipt::_internal_scheduledtransactionid() const {
  const ::proto::TransactionID* p = _impl_.scheduledtransactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransactionID&>(
      ::proto::_TransactionID_default_instance_);
}
inline const ::proto::TransactionID& TransactionReceipt::scheduledtransactionid() const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.scheduledTransactionID)
  return _internal_scheduledtransactionid();
}
inline void TransactionReceipt::unsafe_arena_set_allocated_scheduledtransactionid(
    ::proto::TransactionID* scheduledtransactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionid_);
  }
  _impl_.scheduledtransactionid_ = scheduledtransactionid;
  if (scheduledtransactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransactionReceipt.scheduledTransactionID)
}
inline ::proto::TransactionID* TransactionReceipt::release_scheduledtransactionid() {
  
  ::proto::TransactionID* temp = _impl_.scheduledtransactionid_;
  _impl_.scheduledtransactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransactionID* TransactionReceipt::unsafe_arena_release_scheduledtransactionid() {
  // @@protoc_insertion_point(field_release:proto.TransactionReceipt.scheduledTransactionID)
  
  ::proto::TransactionID* temp = _impl_.scheduledtransactionid_;
  _impl_.scheduledtransactionid_ = nullptr;
  return temp;
}
inline ::proto::TransactionID* TransactionReceipt::_internal_mutable_scheduledtransactionid() {
  
  if (_impl_.scheduledtransactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransactionID>(GetArenaForAllocation());
    _impl_.scheduledtransactionid_ = p;
  }
  return _impl_.scheduledtransactionid_;
}
inline ::proto::TransactionID* TransactionReceipt::mutable_scheduledtransactionid() {
  ::proto::TransactionID* _msg = _internal_mutable_scheduledtransactionid();
  // @@protoc_insertion_point(field_mutable:proto.TransactionReceipt.scheduledTransactionID)
  return _msg;
}
inline void TransactionReceipt::set_allocated_scheduledtransactionid(::proto::TransactionID* scheduledtransactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scheduledtransactionid_);
  }
  if (scheduledtransactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduledtransactionid));
    if (message_arena != submessage_arena) {
      scheduledtransactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduledtransactionid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scheduledtransactionid_ = scheduledtransactionid;
  // @@protoc_insertion_point(field_set_allocated:proto.TransactionReceipt.scheduledTransactionID)
}

// repeated int64 serialNumbers = 14;
inline int TransactionReceipt::_internal_serialnumbers_size() const {
  return _impl_.serialnumbers_.size();
}
inline int TransactionReceipt::serialnumbers_size() const {
  return _internal_serialnumbers_size();
}
inline void TransactionReceipt::clear_serialnumbers() {
  _impl_.serialnumbers_.Clear();
}
inline int64_t TransactionReceipt::_internal_serialnumbers(int index) const {
  return _impl_.serialnumbers_.Get(index);
}
inline int64_t TransactionReceipt::serialnumbers(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransactionReceipt.serialNumbers)
  return _internal_serialnumbers(index);
}
inline void TransactionReceipt::set_serialnumbers(int index, int64_t value) {
  _impl_.serialnumbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TransactionReceipt.serialNumbers)
}
inline void TransactionReceipt::_internal_add_serialnumbers(int64_t value) {
  _impl_.serialnumbers_.Add(value);
}
inline void TransactionReceipt::add_serialnumbers(int64_t value) {
  _internal_add_serialnumbers(value);
  // @@protoc_insertion_point(field_add:proto.TransactionReceipt.serialNumbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TransactionReceipt::_internal_serialnumbers() const {
  return _impl_.serialnumbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TransactionReceipt::serialnumbers() const {
  // @@protoc_insertion_point(field_list:proto.TransactionReceipt.serialNumbers)
  return _internal_serialnumbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TransactionReceipt::_internal_mutable_serialnumbers() {
  return &_impl_.serialnumbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TransactionReceipt::mutable_serialnumbers() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransactionReceipt.serialNumbers)
  return _internal_mutable_serialnumbers();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5freceipt_2eproto

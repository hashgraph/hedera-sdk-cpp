// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto_delete_live_hash.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_5fdelete_5flive_5fhash_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_5fdelete_5flive_5fhash_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_5fdelete_5flive_5fhash_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_5fdelete_5flive_5fhash_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_5fdelete_5flive_5fhash_2eproto;
namespace proto {
class CryptoDeleteLiveHashTransactionBody;
struct CryptoDeleteLiveHashTransactionBodyDefaultTypeInternal;
extern CryptoDeleteLiveHashTransactionBodyDefaultTypeInternal _CryptoDeleteLiveHashTransactionBody_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CryptoDeleteLiveHashTransactionBody* Arena::CreateMaybeMessage<::proto::CryptoDeleteLiveHashTransactionBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CryptoDeleteLiveHashTransactionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CryptoDeleteLiveHashTransactionBody) */ {
 public:
  inline CryptoDeleteLiveHashTransactionBody() : CryptoDeleteLiveHashTransactionBody(nullptr) {}
  ~CryptoDeleteLiveHashTransactionBody() override;
  explicit PROTOBUF_CONSTEXPR CryptoDeleteLiveHashTransactionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoDeleteLiveHashTransactionBody(const CryptoDeleteLiveHashTransactionBody& from);
  CryptoDeleteLiveHashTransactionBody(CryptoDeleteLiveHashTransactionBody&& from) noexcept
    : CryptoDeleteLiveHashTransactionBody() {
    *this = ::std::move(from);
  }

  inline CryptoDeleteLiveHashTransactionBody& operator=(const CryptoDeleteLiveHashTransactionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoDeleteLiveHashTransactionBody& operator=(CryptoDeleteLiveHashTransactionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoDeleteLiveHashTransactionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoDeleteLiveHashTransactionBody* internal_default_instance() {
    return reinterpret_cast<const CryptoDeleteLiveHashTransactionBody*>(
               &_CryptoDeleteLiveHashTransactionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CryptoDeleteLiveHashTransactionBody& a, CryptoDeleteLiveHashTransactionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoDeleteLiveHashTransactionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoDeleteLiveHashTransactionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoDeleteLiveHashTransactionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoDeleteLiveHashTransactionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CryptoDeleteLiveHashTransactionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CryptoDeleteLiveHashTransactionBody& from) {
    CryptoDeleteLiveHashTransactionBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CryptoDeleteLiveHashTransactionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CryptoDeleteLiveHashTransactionBody";
  }
  protected:
  explicit CryptoDeleteLiveHashTransactionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiveHashToDeleteFieldNumber = 2,
    kAccountOfLiveHashFieldNumber = 1,
  };
  // bytes liveHashToDelete = 2;
  void clear_livehashtodelete();
  const std::string& livehashtodelete() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_livehashtodelete(ArgT0&& arg0, ArgT... args);
  std::string* mutable_livehashtodelete();
  PROTOBUF_NODISCARD std::string* release_livehashtodelete();
  void set_allocated_livehashtodelete(std::string* livehashtodelete);
  private:
  const std::string& _internal_livehashtodelete() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_livehashtodelete(const std::string& value);
  std::string* _internal_mutable_livehashtodelete();
  public:

  // .proto.AccountID accountOfLiveHash = 1;
  bool has_accountoflivehash() const;
  private:
  bool _internal_has_accountoflivehash() const;
  public:
  void clear_accountoflivehash();
  const ::proto::AccountID& accountoflivehash() const;
  PROTOBUF_NODISCARD ::proto::AccountID* release_accountoflivehash();
  ::proto::AccountID* mutable_accountoflivehash();
  void set_allocated_accountoflivehash(::proto::AccountID* accountoflivehash);
  private:
  const ::proto::AccountID& _internal_accountoflivehash() const;
  ::proto::AccountID* _internal_mutable_accountoflivehash();
  public:
  void unsafe_arena_set_allocated_accountoflivehash(
      ::proto::AccountID* accountoflivehash);
  ::proto::AccountID* unsafe_arena_release_accountoflivehash();

  // @@protoc_insertion_point(class_scope:proto.CryptoDeleteLiveHashTransactionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr livehashtodelete_;
    ::proto::AccountID* accountoflivehash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_crypto_5fdelete_5flive_5fhash_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CryptoDeleteLiveHashTransactionBody

// .proto.AccountID accountOfLiveHash = 1;
inline bool CryptoDeleteLiveHashTransactionBody::_internal_has_accountoflivehash() const {
  return this != internal_default_instance() && _impl_.accountoflivehash_ != nullptr;
}
inline bool CryptoDeleteLiveHashTransactionBody::has_accountoflivehash() const {
  return _internal_has_accountoflivehash();
}
inline const ::proto::AccountID& CryptoDeleteLiveHashTransactionBody::_internal_accountoflivehash() const {
  const ::proto::AccountID* p = _impl_.accountoflivehash_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::AccountID&>(
      ::proto::_AccountID_default_instance_);
}
inline const ::proto::AccountID& CryptoDeleteLiveHashTransactionBody::accountoflivehash() const {
  // @@protoc_insertion_point(field_get:proto.CryptoDeleteLiveHashTransactionBody.accountOfLiveHash)
  return _internal_accountoflivehash();
}
inline void CryptoDeleteLiveHashTransactionBody::unsafe_arena_set_allocated_accountoflivehash(
    ::proto::AccountID* accountoflivehash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountoflivehash_);
  }
  _impl_.accountoflivehash_ = accountoflivehash;
  if (accountoflivehash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CryptoDeleteLiveHashTransactionBody.accountOfLiveHash)
}
inline ::proto::AccountID* CryptoDeleteLiveHashTransactionBody::release_accountoflivehash() {
  
  ::proto::AccountID* temp = _impl_.accountoflivehash_;
  _impl_.accountoflivehash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::AccountID* CryptoDeleteLiveHashTransactionBody::unsafe_arena_release_accountoflivehash() {
  // @@protoc_insertion_point(field_release:proto.CryptoDeleteLiveHashTransactionBody.accountOfLiveHash)
  
  ::proto::AccountID* temp = _impl_.accountoflivehash_;
  _impl_.accountoflivehash_ = nullptr;
  return temp;
}
inline ::proto::AccountID* CryptoDeleteLiveHashTransactionBody::_internal_mutable_accountoflivehash() {
  
  if (_impl_.accountoflivehash_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AccountID>(GetArenaForAllocation());
    _impl_.accountoflivehash_ = p;
  }
  return _impl_.accountoflivehash_;
}
inline ::proto::AccountID* CryptoDeleteLiveHashTransactionBody::mutable_accountoflivehash() {
  ::proto::AccountID* _msg = _internal_mutable_accountoflivehash();
  // @@protoc_insertion_point(field_mutable:proto.CryptoDeleteLiveHashTransactionBody.accountOfLiveHash)
  return _msg;
}
inline void CryptoDeleteLiveHashTransactionBody::set_allocated_accountoflivehash(::proto::AccountID* accountoflivehash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accountoflivehash_);
  }
  if (accountoflivehash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accountoflivehash));
    if (message_arena != submessage_arena) {
      accountoflivehash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountoflivehash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.accountoflivehash_ = accountoflivehash;
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoDeleteLiveHashTransactionBody.accountOfLiveHash)
}

// bytes liveHashToDelete = 2;
inline void CryptoDeleteLiveHashTransactionBody::clear_livehashtodelete() {
  _impl_.livehashtodelete_.ClearToEmpty();
}
inline const std::string& CryptoDeleteLiveHashTransactionBody::livehashtodelete() const {
  // @@protoc_insertion_point(field_get:proto.CryptoDeleteLiveHashTransactionBody.liveHashToDelete)
  return _internal_livehashtodelete();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CryptoDeleteLiveHashTransactionBody::set_livehashtodelete(ArgT0&& arg0, ArgT... args) {
 
 _impl_.livehashtodelete_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CryptoDeleteLiveHashTransactionBody.liveHashToDelete)
}
inline std::string* CryptoDeleteLiveHashTransactionBody::mutable_livehashtodelete() {
  std::string* _s = _internal_mutable_livehashtodelete();
  // @@protoc_insertion_point(field_mutable:proto.CryptoDeleteLiveHashTransactionBody.liveHashToDelete)
  return _s;
}
inline const std::string& CryptoDeleteLiveHashTransactionBody::_internal_livehashtodelete() const {
  return _impl_.livehashtodelete_.Get();
}
inline void CryptoDeleteLiveHashTransactionBody::_internal_set_livehashtodelete(const std::string& value) {
  
  _impl_.livehashtodelete_.Set(value, GetArenaForAllocation());
}
inline std::string* CryptoDeleteLiveHashTransactionBody::_internal_mutable_livehashtodelete() {
  
  return _impl_.livehashtodelete_.Mutable(GetArenaForAllocation());
}
inline std::string* CryptoDeleteLiveHashTransactionBody::release_livehashtodelete() {
  // @@protoc_insertion_point(field_release:proto.CryptoDeleteLiveHashTransactionBody.liveHashToDelete)
  return _impl_.livehashtodelete_.Release();
}
inline void CryptoDeleteLiveHashTransactionBody::set_allocated_livehashtodelete(std::string* livehashtodelete) {
  if (livehashtodelete != nullptr) {
    
  } else {
    
  }
  _impl_.livehashtodelete_.SetAllocated(livehashtodelete, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.livehashtodelete_.IsDefault()) {
    _impl_.livehashtodelete_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CryptoDeleteLiveHashTransactionBody.liveHashToDelete)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_5fdelete_5flive_5fhash_2eproto

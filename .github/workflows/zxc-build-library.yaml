name: "ZXC: Build Library"
on:
  workflow_call:

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on:
      - self-hosted
      - "${{ matrix.os }}"
      - xlarge
      - ephemeral
    env:
      HEDERA_NETWORK: localhost
    strategy:
      matrix:
        include:
          - os: Linux
            preset: linux-x64
          # - os: macos-12
          #   preset: macos-x64
          # - os: windows-latest
          #   preset: windows-x64
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Run Clang-Format
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: '17'
          check-path: 'sdk'

      - name: Setup Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y --allow-downgrades \
              ca-certificates \
              curl=7.81.0-1ubuntu1.14 \
              gnupg \
              lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        if: ${{ runner.os == 'Linux' }}

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Local Node
        run: sudo npm install -g @hashgraph/hedera-local
        if: ${{ runner.os == 'Linux' }}

      - name: Install Linux Prerequisites
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libc6-dbg libgtest-dev build-essential

      - name: Ensure Binary Cache Path Exists
        run: mkdir -p "${{ github.workspace }}/b/vcpkg_cache"

      - name: Install CMake & Ninja
        uses: lukka/get-cmake@latest

      - name: Setup VCPkg
        uses: lukka/run-vcpkg@v11
        with:
          binaryCachePath: ${{ github.workspace }}/b/vcpkg_cache

      - name: Convert VCPkg to Full Clone
        run: |
          cd vcpkg
          git fetch --unshallow --prune

      - name: CMake Build (Debug)
        uses: lukka/run-cmake@v10
        env:
          VCPKG_BINARY_SOURCES: clear
        with:
          configurePreset: ${{ matrix.preset }}-debug
          buildPreset: ${{ matrix.preset }}-debug

      - name: CMake Build (Release)
        if: github.event.pull_request.merged == true
        uses: lukka/run-cmake@v10
        env:
          VCPKG_BINARY_SOURCES: clear
        with:
          configurePreset: ${{ matrix.preset }}-release
          buildPreset: ${{ matrix.preset }}-release

      # - name: List Directory Structure
      #     if: ${{ contains(runner.os, 'Windows') && always() }}
      #     shell: pwsh
      #     run: tree /F build

      - name: Start the local node
        run: sudo npx @hashgraph/hedera-local start -d --network local

      - name: Start CTest suite (Debug)
        run: ctest -C Debug --test-dir build/${{ matrix.preset }}-debug --output-on-failure

      - name: Start CTest suite (Release)
        if: github.event.pull_request.merged == true
        run: ctest -C Debug --test-dir build/${{ matrix.preset }}-release --output-on-failure

      - name: Stop the local node
        run: sudo npx @hashgraph/hedera-local stop

      - name: Compute Short SHA
        id: sha
        run: echo "short=$(echo -n "${{ github.sha }}" | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Attach Artifact
        if: github.event.pull_request.merged == true
        uses: actions/upload-artifact@v3
        with:
          name: hapi-library-${{ runner.os }}-${{ steps.sha.outputs.short }}
          path: package/
          if-no-files-found: warn
